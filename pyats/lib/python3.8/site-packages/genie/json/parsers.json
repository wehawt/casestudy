{"/dna/intent/api/v1/interface": {"dnac": {"class": "Interface", "doc": "\n    parser for \n    /dna/intent/api/v1/interface, \n    /dna/intent/api/v1/interface/{interface}\n    ", "module_name": "interface", "package": "genie.libs.parser", "schema": "{\n'hostname': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'adminStatus': <class 'str'>,\n        Optional  (str) className: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        'deviceId': <class 'str'>,\n        Optional  (str) duplex: <class 'str'>,\n        Optional  (str) id: <class 'str'>,\n        'ifIndex': <class 'str'>,\n        Optional  (str) instanceTenantId: <class 'str'>,\n        Optional  (str) instanceUuid: <class 'str'>,\n        'interfaceType': <class 'str'>,\n        Optional  (str) ipv4Address: <class 'str'>,\n        Optional  (str) ipv4Mask: <class 'str'>,\n        'isisSupport': <class 'str'>,\n        'lastUpdated': <class 'str'>,\n        Optional  (str) macAddress: <class 'str'>,\n        Optional  (str) mappedPhysicalInterfaceId: <class 'str'>,\n        Optional  (str) mappedPhysicalInterfaceName: <class 'str'>,\n        Optional  (str) mediaType: <class 'str'>,\n        Optional  (str) nativeVlanId: <class 'str'>,\n        'ospfSupport': <class 'str'>,\n        'pid': <class 'str'>,\n        'portMode': <class 'str'>,\n        'portName': <class 'str'>,\n        Optional  (str) portType: <class 'str'>,\n        'serialNo': <class 'str'>,\n        'series': <class 'str'>,\n        Optional  (str) speed: <class 'str'>,\n        'status': <class 'str'>,\n        Optional  (str) vlanId: <class 'str'>,\n        Optional  (str) voiceVlan: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "/dna/intent/api/v1/interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/dnac/interface.py#L83"}}, "/dna/intent/api/v1/interface/{interface}": {"dnac": {"class": "Interface", "doc": "\n    parser for \n    /dna/intent/api/v1/interface, \n    /dna/intent/api/v1/interface/{interface}\n    ", "module_name": "interface", "package": "genie.libs.parser", "schema": "{\n'hostname': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'adminStatus': <class 'str'>,\n        Optional  (str) className: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        'deviceId': <class 'str'>,\n        Optional  (str) duplex: <class 'str'>,\n        Optional  (str) id: <class 'str'>,\n        'ifIndex': <class 'str'>,\n        Optional  (str) instanceTenantId: <class 'str'>,\n        Optional  (str) instanceUuid: <class 'str'>,\n        'interfaceType': <class 'str'>,\n        Optional  (str) ipv4Address: <class 'str'>,\n        Optional  (str) ipv4Mask: <class 'str'>,\n        'isisSupport': <class 'str'>,\n        'lastUpdated': <class 'str'>,\n        Optional  (str) macAddress: <class 'str'>,\n        Optional  (str) mappedPhysicalInterfaceId: <class 'str'>,\n        Optional  (str) mappedPhysicalInterfaceName: <class 'str'>,\n        Optional  (str) mediaType: <class 'str'>,\n        Optional  (str) nativeVlanId: <class 'str'>,\n        'ospfSupport': <class 'str'>,\n        'pid': <class 'str'>,\n        'portMode': <class 'str'>,\n        'portName': <class 'str'>,\n        Optional  (str) portType: <class 'str'>,\n        'serialNo': <class 'str'>,\n        'series': <class 'str'>,\n        Optional  (str) speed: <class 'str'>,\n        'status': <class 'str'>,\n        Optional  (str) vlanId: <class 'str'>,\n        Optional  (str) voiceVlan: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "/dna/intent/api/v1/interface/interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/dnac/interface.py#L83"}}, "/mgmt/tm/access/acl-stats": {"bigip": {"class": "AccessAclstats", "doc": " To F5 resource for /mgmt/tm/access/acl-stats\n    ", "module_name": "get_access_acl_stats", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/access/acl-stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_access_acl_stats.py#L18"}}, "/mgmt/tm/access/bundle-install-tasks": {"bigip": {"class": "AccessBundleinstalltasks", "doc": " To F5 resource for /mgmt/tm/access/bundle-install-tasks\n    ", "module_name": "get_access_bundle_install_tasks", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/access/bundle-install-tasks", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_access_bundle_install_tasks.py#L18"}}, "/mgmt/tm/access/profile-access-misc-stats": {"bigip": {"class": "AccessProfileaccessmiscstats", "doc": " To F5 resource for /mgmt/tm/access/profile-access-misc-stats\n    ", "module_name": "get_access_profile_access_misc_stats", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/access/profile-access-misc-stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_access_profile_access_misc_stats.py#L18"}}, "/mgmt/tm/access/profile-rewrite-stats": {"bigip": {"class": "AccessProfilerewritestats", "doc": " To F5 resource for /mgmt/tm/access/profile-rewrite-stats\n    ", "module_name": "get_access_profile_rewrite_stats", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/access/profile-rewrite-stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_access_profile_rewrite_stats.py#L18"}}, "/mgmt/tm/access/profile-rewrite/stats": {"bigip": {"class": "AccessProfilerewriteStats", "doc": " To F5 resource for /mgmt/tm/access/profile-rewrite/stats\n    ", "module_name": "get_access_profile_rewritestats", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/access/profile-rewrite/stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_access_profile_rewritestats.py#L18"}}, "/mgmt/tm/access/redeploy-iapp-tasks": {"bigip": {"class": "AccessRedeployiapptasks", "doc": " To F5 resource for /mgmt/tm/access/redeploy-iapp-tasks\n    ", "module_name": "get_access_redeploy_iapp_tasks", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/access/redeploy-iapp-tasks", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_access_redeploy_iapp_tasks.py#L18"}}, "/mgmt/tm/access/session/kill-sessions": {"bigip": {"class": "AccessSessionKillsessions", "doc": " To F5 resource for /mgmt/tm/access/session/kill-sessions\n    ", "module_name": "get_access_sessionkill_sessions", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/access/session/kill-sessions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_access_sessionkill_sessions.py#L18"}}, "/mgmt/tm/access/usecase-pack-info": {"bigip": {"class": "AccessUsecasepackinfo", "doc": " To F5 resource for /mgmt/tm/access/usecase-pack-info\n    ", "module_name": "get_access_usecase_pack_info", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/access/usecase-pack-info", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_access_usecase_pack_info.py#L18"}}, "/mgmt/tm/adc/fileobject/ssl-cert": {"bigip": {"class": "AdcFileobjectSslcert", "doc": " To F5 resource for /mgmt/tm/adc/fileobject/ssl-cert\n    ", "module_name": "get_adc_fileobjectssl_cert", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/adc/fileobject/ssl-cert", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_adc_fileobjectssl_cert.py#L18"}}, "/mgmt/tm/adc/fileobject/ssl-crl": {"bigip": {"class": "AdcFileobjectSslcrl", "doc": " To F5 resource for /mgmt/tm/adc/fileobject/ssl-crl\n    ", "module_name": "get_adc_fileobjectssl_crl", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/adc/fileobject/ssl-crl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_adc_fileobjectssl_crl.py#L18"}}, "/mgmt/tm/adc/fileobject/ssl-csr": {"bigip": {"class": "AdcFileobjectSslcsr", "doc": " To F5 resource for /mgmt/tm/adc/fileobject/ssl-csr\n    ", "module_name": "get_adc_fileobjectssl_csr", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/adc/fileobject/ssl-csr", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_adc_fileobjectssl_csr.py#L18"}}, "/mgmt/tm/adc/fileobject/ssl-key": {"bigip": {"class": "AdcFileobjectSslkey", "doc": " To F5 resource for /mgmt/tm/adc/fileobject/ssl-key\n    ", "module_name": "get_adc_fileobjectssl_key", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/adc/fileobject/ssl-key", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_adc_fileobjectssl_key.py#L18"}}, "/mgmt/tm/analytics/afm-sweeper/generate-report": {"bigip": {"class": "AnalyticsAfmsweeperGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/afm-sweeper/generate-report\n    ", "module_name": "get_analytics_afm_sweepergenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/afm-sweeper/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_afm_sweepergenerate_report.py#L18"}}, "/mgmt/tm/analytics/afm-sweeper/report-results": {"bigip": {"class": "AnalyticsAfmsweeperReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/afm-sweeper/report-results\n    ", "module_name": "get_analytics_afm_sweeperreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/afm-sweeper/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_afm_sweeperreport_results.py#L18"}}, "/mgmt/tm/analytics/application-security-anomalies/generate-report": {"bigip": {"class": "AnalyticsApplicationsecurityanomaliesGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/application-security-anomalies/generate-report\n    ", "module_name": "get_analytics_application_security_anomaliesgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/application-security-anomalies/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_application_security_anomaliesgenerate_report.py#L18"}}, "/mgmt/tm/analytics/application-security-anomalies/report-results": {"bigip": {"class": "AnalyticsApplicationsecurityanomaliesReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/application-security-anomalies/report-results\n    ", "module_name": "get_analytics_application_security_anomaliesreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/application-security-anomalies/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_application_security_anomaliesreport_results.py#L18"}}, "/mgmt/tm/analytics/application-security-incidents/generate-report": {"bigip": {"class": "AnalyticsApplicationsecurityincidentsGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/application-security-incidents/generate-report\n    ", "module_name": "get_analytics_application_security_incidentsgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/application-security-incidents/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_application_security_incidentsgenerate_report.py#L18"}}, "/mgmt/tm/analytics/application-security-incidents/report-results": {"bigip": {"class": "AnalyticsApplicationsecurityincidentsReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/application-security-incidents/report-results\n    ", "module_name": "get_analytics_application_security_incidentsreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/application-security-incidents/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_application_security_incidentsreport_results.py#L18"}}, "/mgmt/tm/analytics/application-security-network/generate-report": {"bigip": {"class": "AnalyticsApplicationsecuritynetworkGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/application-security-network/generate-report\n    ", "module_name": "get_analytics_application_security_networkgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/application-security-network/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_application_security_networkgenerate_report.py#L18"}}, "/mgmt/tm/analytics/application-security-network/report-results": {"bigip": {"class": "AnalyticsApplicationsecuritynetworkReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/application-security-network/report-results\n    ", "module_name": "get_analytics_application_security_networkreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/application-security-network/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_application_security_networkreport_results.py#L18"}}, "/mgmt/tm/analytics/application-security/generate-report": {"bigip": {"class": "AnalyticsApplicationsecurityGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/application-security/generate-report\n    ", "module_name": "get_analytics_application_securitygenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/application-security/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_application_securitygenerate_report.py#L18"}}, "/mgmt/tm/analytics/application-security/report-results": {"bigip": {"class": "AnalyticsApplicationsecurityReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/application-security/report-results\n    ", "module_name": "get_analytics_application_securityreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/application-security/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_application_securityreport_results.py#L18"}}, "/mgmt/tm/analytics/asm-bypass/generate-report": {"bigip": {"class": "AnalyticsAsmbypassGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/asm-bypass/generate-report\n    ", "module_name": "get_analytics_asm_bypassgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-bypass/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_bypassgenerate_report.py#L18"}}, "/mgmt/tm/analytics/asm-bypass/report-results": {"bigip": {"class": "AnalyticsAsmbypassReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/asm-bypass/report-results\n    ", "module_name": "get_analytics_asm_bypassreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-bypass/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_bypassreport_results.py#L18"}}, "/mgmt/tm/analytics/asm-cpu/generate-report": {"bigip": {"class": "AnalyticsAsmcpuGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/asm-cpu/generate-report\n    ", "module_name": "get_analytics_asm_cpugenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-cpu/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_cpugenerate_report.py#L18"}}, "/mgmt/tm/analytics/asm-cpu/report-results": {"bigip": {"class": "AnalyticsAsmcpuReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/asm-cpu/report-results\n    ", "module_name": "get_analytics_asm_cpureport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-cpu/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_cpureport_results.py#L18"}}, "/mgmt/tm/analytics/asm-enforced-entities/generate-report": {"bigip": {"class": "AnalyticsAsmenforcedentitiesGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/asm-enforced-entities/generate-report\n    ", "module_name": "get_analytics_asm_enforced_entitiesgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-enforced-entities/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_enforced_entitiesgenerate_report.py#L18"}}, "/mgmt/tm/analytics/asm-enforced-entities/report-results": {"bigip": {"class": "AnalyticsAsmenforcedentitiesReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/asm-enforced-entities/report-results\n    ", "module_name": "get_analytics_asm_enforced_entitiesreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-enforced-entities/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_enforced_entitiesreport_results.py#L18"}}, "/mgmt/tm/analytics/asm-learning-suggestions/generate-report": {"bigip": {"class": "AnalyticsAsmlearningsuggestionsGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/asm-learning-suggestions/generate-report\n    ", "module_name": "get_analytics_asm_learning_suggestionsgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-learning-suggestions/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_learning_suggestionsgenerate_report.py#L18"}}, "/mgmt/tm/analytics/asm-learning-suggestions/report-results": {"bigip": {"class": "AnalyticsAsmlearningsuggestionsReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/asm-learning-suggestions/report-results\n    ", "module_name": "get_analytics_asm_learning_suggestionsreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-learning-suggestions/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_learning_suggestionsreport_results.py#L18"}}, "/mgmt/tm/analytics/asm-memory/generate-report": {"bigip": {"class": "AnalyticsAsmmemoryGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/asm-memory/generate-report\n    ", "module_name": "get_analytics_asm_memorygenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-memory/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_memorygenerate_report.py#L18"}}, "/mgmt/tm/analytics/asm-memory/report-results": {"bigip": {"class": "AnalyticsAsmmemoryReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/asm-memory/report-results\n    ", "module_name": "get_analytics_asm_memoryreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-memory/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_memoryreport_results.py#L18"}}, "/mgmt/tm/analytics/asm-policy-changes/generate-report": {"bigip": {"class": "AnalyticsAsmpolicychangesGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/asm-policy-changes/generate-report\n    ", "module_name": "get_analytics_asm_policy_changesgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-policy-changes/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_policy_changesgenerate_report.py#L18"}}, "/mgmt/tm/analytics/asm-policy-changes/report-results": {"bigip": {"class": "AnalyticsAsmpolicychangesReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/asm-policy-changes/report-results\n    ", "module_name": "get_analytics_asm_policy_changesreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/asm-policy-changes/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_asm_policy_changesreport_results.py#L18"}}, "/mgmt/tm/analytics/bot-defense-event/generate-report": {"bigip": {"class": "AnalyticsBotdefenseeventGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/bot-defense-event/generate-report\n    ", "module_name": "get_analytics_bot_defense_eventgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/bot-defense-event/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_bot_defense_eventgenerate_report.py#L18"}}, "/mgmt/tm/analytics/bot-defense-event/report-results": {"bigip": {"class": "AnalyticsBotdefenseeventReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/bot-defense-event/report-results\n    ", "module_name": "get_analytics_bot_defense_eventreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/bot-defense-event/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_bot_defense_eventreport_results.py#L18"}}, "/mgmt/tm/analytics/cpu-per-vip/generate-report": {"bigip": {"class": "AnalyticsCpupervipGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/cpu-per-vip/generate-report\n    ", "module_name": "get_analytics_cpu_per_vipgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/cpu-per-vip/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_cpu_per_vipgenerate_report.py#L18"}}, "/mgmt/tm/analytics/cpu-per-vip/report-results": {"bigip": {"class": "AnalyticsCpupervipReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/cpu-per-vip/report-results\n    ", "module_name": "get_analytics_cpu_per_vipreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/cpu-per-vip/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_cpu_per_vipreport_results.py#L18"}}, "/mgmt/tm/analytics/cpu/generate-report": {"bigip": {"class": "AnalyticsCpuGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/cpu/generate-report\n    ", "module_name": "get_analytics_cpugenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/cpu/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_cpugenerate_report.py#L18"}}, "/mgmt/tm/analytics/cpu/report-results": {"bigip": {"class": "AnalyticsCpuReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/cpu/report-results\n    ", "module_name": "get_analytics_cpureport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/cpu/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_cpureport_results.py#L18"}}, "/mgmt/tm/analytics/disk-info/generate-report": {"bigip": {"class": "AnalyticsDiskinfoGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/disk-info/generate-report\n    ", "module_name": "get_analytics_disk_infogenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/disk-info/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_disk_infogenerate_report.py#L18"}}, "/mgmt/tm/analytics/disk-info/report-results": {"bigip": {"class": "AnalyticsDiskinfoReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/disk-info/report-results\n    ", "module_name": "get_analytics_disk_inforeport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/disk-info/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_disk_inforeport_results.py#L18"}}, "/mgmt/tm/analytics/dns-rpz/generate-report": {"bigip": {"class": "AnalyticsDnsrpzGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/dns-rpz/generate-report\n    ", "module_name": "get_analytics_dns_rpzgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dns-rpz/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dns_rpzgenerate_report.py#L18"}}, "/mgmt/tm/analytics/dns-rpz/report-results": {"bigip": {"class": "AnalyticsDnsrpzReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/dns-rpz/report-results\n    ", "module_name": "get_analytics_dns_rpzreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dns-rpz/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dns_rpzreport_results.py#L18"}}, "/mgmt/tm/analytics/dns/generate-report": {"bigip": {"class": "AnalyticsDnsGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/dns/generate-report\n    ", "module_name": "get_analytics_dnsgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dns/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dnsgenerate_report.py#L18"}}, "/mgmt/tm/analytics/dns/report-results": {"bigip": {"class": "AnalyticsDnsReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/dns/report-results\n    ", "module_name": "get_analytics_dnsreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dns/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dnsreport_results.py#L18"}}, "/mgmt/tm/analytics/dos-l3/generate-report": {"bigip": {"class": "AnalyticsDosl3Generatereport", "doc": " To F5 resource for /mgmt/tm/analytics/dos-l3/generate-report\n    ", "module_name": "get_analytics_dos_l3generate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dos-l3/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dos_l3generate_report.py#L18"}}, "/mgmt/tm/analytics/dos-l3/report-results": {"bigip": {"class": "AnalyticsDosl3Reportresults", "doc": " To F5 resource for /mgmt/tm/analytics/dos-l3/report-results\n    ", "module_name": "get_analytics_dos_l3report_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dos-l3/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dos_l3report_results.py#L18"}}, "/mgmt/tm/analytics/dos-vis-attacks/generate-report": {"bigip": {"class": "AnalyticsDosvisattacksGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/dos-vis-attacks/generate-report\n    ", "module_name": "get_analytics_dos_vis_attacksgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dos-vis-attacks/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dos_vis_attacksgenerate_report.py#L18"}}, "/mgmt/tm/analytics/dos-vis-attacks/report-results": {"bigip": {"class": "AnalyticsDosvisattacksReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/dos-vis-attacks/report-results\n    ", "module_name": "get_analytics_dos_vis_attacksreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dos-vis-attacks/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dos_vis_attacksreport_results.py#L18"}}, "/mgmt/tm/analytics/dos-vis-common/generate-report": {"bigip": {"class": "AnalyticsDosviscommonGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/dos-vis-common/generate-report\n    ", "module_name": "get_analytics_dos_vis_commongenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dos-vis-common/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dos_vis_commongenerate_report.py#L18"}}, "/mgmt/tm/analytics/dos-vis-common/report-results": {"bigip": {"class": "AnalyticsDosviscommonReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/dos-vis-common/report-results\n    ", "module_name": "get_analytics_dos_vis_commonreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dos-vis-common/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dos_vis_commonreport_results.py#L18"}}, "/mgmt/tm/analytics/dos-vis-vips/generate-report": {"bigip": {"class": "AnalyticsDosvisvipsGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/dos-vis-vips/generate-report\n    ", "module_name": "get_analytics_dos_vis_vipsgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dos-vis-vips/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dos_vis_vipsgenerate_report.py#L18"}}, "/mgmt/tm/analytics/dos-vis-vips/report-results": {"bigip": {"class": "AnalyticsDosvisvipsReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/dos-vis-vips/report-results\n    ", "module_name": "get_analytics_dos_vis_vipsreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/dos-vis-vips/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_dos_vis_vipsreport_results.py#L18"}}, "/mgmt/tm/analytics/fw-nat/generate-report": {"bigip": {"class": "AnalyticsFwnatGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/fw-nat/generate-report\n    ", "module_name": "get_analytics_fw_natgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/fw-nat/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_fw_natgenerate_report.py#L18"}}, "/mgmt/tm/analytics/fw-nat/report-results": {"bigip": {"class": "AnalyticsFwnatReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/fw-nat/report-results\n    ", "module_name": "get_analytics_fw_natreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/fw-nat/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_fw_natreport_results.py#L18"}}, "/mgmt/tm/analytics/generic/generate-report": {"bigip": {"class": "AnalyticsGenericGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/generic/generate-report\n    ", "module_name": "get_analytics_genericgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/generic/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_genericgenerate_report.py#L18"}}, "/mgmt/tm/analytics/generic/report-results": {"bigip": {"class": "AnalyticsGenericReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/generic/report-results\n    ", "module_name": "get_analytics_genericreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/generic/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_genericreport_results.py#L18"}}, "/mgmt/tm/analytics/http/generate-report": {"bigip": {"class": "AnalyticsHttpGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/http/generate-report\n    ", "module_name": "get_analytics_httpgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/http/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_httpgenerate_report.py#L18"}}, "/mgmt/tm/analytics/http/report-results": {"bigip": {"class": "AnalyticsHttpReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/http/report-results\n    ", "module_name": "get_analytics_httpreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/http/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_httpreport_results.py#L18"}}, "/mgmt/tm/analytics/ip-intelligence/generate-report": {"bigip": {"class": "AnalyticsIpintelligenceGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/ip-intelligence/generate-report\n    ", "module_name": "get_analytics_ip_intelligencegenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/ip-intelligence/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_ip_intelligencegenerate_report.py#L18"}}, "/mgmt/tm/analytics/ip-intelligence/report-results": {"bigip": {"class": "AnalyticsIpintelligenceReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/ip-intelligence/report-results\n    ", "module_name": "get_analytics_ip_intelligencereport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/ip-intelligence/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_ip_intelligencereport_results.py#L18"}}, "/mgmt/tm/analytics/ip-layer/generate-report": {"bigip": {"class": "AnalyticsIplayerGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/ip-layer/generate-report\n    ", "module_name": "get_analytics_ip_layergenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/ip-layer/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_ip_layergenerate_report.py#L18"}}, "/mgmt/tm/analytics/ip-layer/report-results": {"bigip": {"class": "AnalyticsIplayerReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/ip-layer/report-results\n    ", "module_name": "get_analytics_ip_layerreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/ip-layer/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_ip_layerreport_results.py#L18"}}, "/mgmt/tm/analytics/lsn-pool/generate-report": {"bigip": {"class": "AnalyticsLsnpoolGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/lsn-pool/generate-report\n    ", "module_name": "get_analytics_lsn_poolgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/lsn-pool/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_lsn_poolgenerate_report.py#L18"}}, "/mgmt/tm/analytics/lsn-pool/report-results": {"bigip": {"class": "AnalyticsLsnpoolReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/lsn-pool/report-results\n    ", "module_name": "get_analytics_lsn_poolreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/lsn-pool/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_lsn_poolreport_results.py#L18"}}, "/mgmt/tm/analytics/memory-per-process/generate-report": {"bigip": {"class": "AnalyticsMemoryperprocessGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/memory-per-process/generate-report\n    ", "module_name": "get_analytics_memory_per_processgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/memory-per-process/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_memory_per_processgenerate_report.py#L18"}}, "/mgmt/tm/analytics/memory-per-process/report-results": {"bigip": {"class": "AnalyticsMemoryperprocessReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/memory-per-process/report-results\n    ", "module_name": "get_analytics_memory_per_processreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/memory-per-process/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_memory_per_processreport_results.py#L18"}}, "/mgmt/tm/analytics/memory/generate-report": {"bigip": {"class": "AnalyticsMemoryGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/memory/generate-report\n    ", "module_name": "get_analytics_memorygenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/memory/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_memorygenerate_report.py#L18"}}, "/mgmt/tm/analytics/memory/report-results": {"bigip": {"class": "AnalyticsMemoryReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/memory/report-results\n    ", "module_name": "get_analytics_memoryreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/memory/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_memoryreport_results.py#L18"}}, "/mgmt/tm/analytics/network/generate-report": {"bigip": {"class": "AnalyticsNetworkGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/network/generate-report\n    ", "module_name": "get_analytics_networkgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/network/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_networkgenerate_report.py#L18"}}, "/mgmt/tm/analytics/network/report-results": {"bigip": {"class": "AnalyticsNetworkReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/network/report-results\n    ", "module_name": "get_analytics_networkreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/network/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_networkreport_results.py#L18"}}, "/mgmt/tm/analytics/pem/generate-report": {"bigip": {"class": "AnalyticsPemGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/pem/generate-report\n    ", "module_name": "get_analytics_pemgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/pem/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_pemgenerate_report.py#L18"}}, "/mgmt/tm/analytics/pem/report-results": {"bigip": {"class": "AnalyticsPemReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/pem/report-results\n    ", "module_name": "get_analytics_pemreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/pem/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_pemreport_results.py#L18"}}, "/mgmt/tm/analytics/proc-cpu/generate-report": {"bigip": {"class": "AnalyticsProccpuGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/proc-cpu/generate-report\n    ", "module_name": "get_analytics_proc_cpugenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/proc-cpu/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_proc_cpugenerate_report.py#L18"}}, "/mgmt/tm/analytics/proc-cpu/report-results": {"bigip": {"class": "AnalyticsProccpuReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/proc-cpu/report-results\n    ", "module_name": "get_analytics_proc_cpureport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/proc-cpu/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_proc_cpureport_results.py#L18"}}, "/mgmt/tm/analytics/protocol-inspection/generate-report": {"bigip": {"class": "AnalyticsProtocolinspectionGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/protocol-inspection/generate-report\n    ", "module_name": "get_analytics_protocol_inspectiongenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/protocol-inspection/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_protocol_inspectiongenerate_report.py#L18"}}, "/mgmt/tm/analytics/protocol-inspection/report-results": {"bigip": {"class": "AnalyticsProtocolinspectionReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/protocol-inspection/report-results\n    ", "module_name": "get_analytics_protocol_inspectionreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/protocol-inspection/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_protocol_inspectionreport_results.py#L18"}}, "/mgmt/tm/analytics/protocol-security-http/generate-report": {"bigip": {"class": "AnalyticsProtocolsecurityhttpGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/protocol-security-http/generate-report\n    ", "module_name": "get_analytics_protocol_security_httpgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/protocol-security-http/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_protocol_security_httpgenerate_report.py#L18"}}, "/mgmt/tm/analytics/protocol-security-http/report-results": {"bigip": {"class": "AnalyticsProtocolsecurityhttpReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/protocol-security-http/report-results\n    ", "module_name": "get_analytics_protocol_security_httpreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/protocol-security-http/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_protocol_security_httpreport_results.py#L18"}}, "/mgmt/tm/analytics/protocol-security/generate-report": {"bigip": {"class": "AnalyticsProtocolsecurityGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/protocol-security/generate-report\n    ", "module_name": "get_analytics_protocol_securitygenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/protocol-security/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_protocol_securitygenerate_report.py#L18"}}, "/mgmt/tm/analytics/protocol-security/report-results": {"bigip": {"class": "AnalyticsProtocolsecurityReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/protocol-security/report-results\n    ", "module_name": "get_analytics_protocol_securityreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/protocol-security/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_protocol_securityreport_results.py#L18"}}, "/mgmt/tm/analytics/sip/generate-report": {"bigip": {"class": "AnalyticsSipGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/sip/generate-report\n    ", "module_name": "get_analytics_sipgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/sip/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_sipgenerate_report.py#L18"}}, "/mgmt/tm/analytics/sip/report-results": {"bigip": {"class": "AnalyticsSipReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/sip/report-results\n    ", "module_name": "get_analytics_sipreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/sip/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_sipreport_results.py#L18"}}, "/mgmt/tm/analytics/ssl-orchestrator-service-virtual/generate-report": {"bigip": {"class": "AnalyticsSslorchestratorservicevirtualGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/ssl-orchestrator-service-virtual/generate-report\n    ", "module_name": "get_analytics_ssl_orchestrator_service_virtualgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/ssl-orchestrator-service-virtual/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_ssl_orchestrator_service_virtualgenerate_report.py#L18"}}, "/mgmt/tm/analytics/ssl-orchestrator-service-virtual/report-results": {"bigip": {"class": "AnalyticsSslorchestratorservicevirtualReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/ssl-orchestrator-service-virtual/report-results\n    ", "module_name": "get_analytics_ssl_orchestrator_service_virtualreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/ssl-orchestrator-service-virtual/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_ssl_orchestrator_service_virtualreport_results.py#L18"}}, "/mgmt/tm/analytics/ssl-orchestrator/generate-report": {"bigip": {"class": "AnalyticsSslorchestratorGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/ssl-orchestrator/generate-report\n    ", "module_name": "get_analytics_ssl_orchestratorgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/ssl-orchestrator/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_ssl_orchestratorgenerate_report.py#L18"}}, "/mgmt/tm/analytics/ssl-orchestrator/report-results": {"bigip": {"class": "AnalyticsSslorchestratorReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/ssl-orchestrator/report-results\n    ", "module_name": "get_analytics_ssl_orchestratorreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/ssl-orchestrator/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_ssl_orchestratorreport_results.py#L18"}}, "/mgmt/tm/analytics/swg-blocked/generate-report": {"bigip": {"class": "AnalyticsSwgblockedGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/swg-blocked/generate-report\n    ", "module_name": "get_analytics_swg_blockedgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/swg-blocked/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_swg_blockedgenerate_report.py#L18"}}, "/mgmt/tm/analytics/swg-blocked/report-results": {"bigip": {"class": "AnalyticsSwgblockedReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/swg-blocked/report-results\n    ", "module_name": "get_analytics_swg_blockedreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/swg-blocked/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_swg_blockedreport_results.py#L18"}}, "/mgmt/tm/analytics/swg/generate-report": {"bigip": {"class": "AnalyticsSwgGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/swg/generate-report\n    ", "module_name": "get_analytics_swggenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/swg/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_swggenerate_report.py#L18"}}, "/mgmt/tm/analytics/swg/report-results": {"bigip": {"class": "AnalyticsSwgReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/swg/report-results\n    ", "module_name": "get_analytics_swgreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/swg/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_swgreport_results.py#L18"}}, "/mgmt/tm/analytics/system-monitor/generate-report": {"bigip": {"class": "AnalyticsSystemmonitorGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/system-monitor/generate-report\n    ", "module_name": "get_analytics_system_monitorgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/system-monitor/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_system_monitorgenerate_report.py#L18"}}, "/mgmt/tm/analytics/system-monitor/report-results": {"bigip": {"class": "AnalyticsSystemmonitorReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/system-monitor/report-results\n    ", "module_name": "get_analytics_system_monitorreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/system-monitor/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_system_monitorreport_results.py#L18"}}, "/mgmt/tm/analytics/tcp-analytics/generate-report": {"bigip": {"class": "AnalyticsTcpanalyticsGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/tcp-analytics/generate-report\n    ", "module_name": "get_analytics_tcp_analyticsgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/tcp-analytics/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_tcp_analyticsgenerate_report.py#L18"}}, "/mgmt/tm/analytics/tcp-analytics/report-results": {"bigip": {"class": "AnalyticsTcpanalyticsReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/tcp-analytics/report-results\n    ", "module_name": "get_analytics_tcp_analyticsreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/tcp-analytics/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_tcp_analyticsreport_results.py#L18"}}, "/mgmt/tm/analytics/tcp/generate-report": {"bigip": {"class": "AnalyticsTcpGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/tcp/generate-report\n    ", "module_name": "get_analytics_tcpgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/tcp/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_tcpgenerate_report.py#L18"}}, "/mgmt/tm/analytics/tcp/report-results": {"bigip": {"class": "AnalyticsTcpReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/tcp/report-results\n    ", "module_name": "get_analytics_tcpreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/tcp/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_tcpreport_results.py#L18"}}, "/mgmt/tm/analytics/traffic-classification/generate-report": {"bigip": {"class": "AnalyticsTrafficclassificationGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/traffic-classification/generate-report\n    ", "module_name": "get_analytics_traffic_classificationgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/traffic-classification/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_traffic_classificationgenerate_report.py#L18"}}, "/mgmt/tm/analytics/traffic-classification/report-results": {"bigip": {"class": "AnalyticsTrafficclassificationReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/traffic-classification/report-results\n    ", "module_name": "get_analytics_traffic_classificationreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/traffic-classification/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_traffic_classificationreport_results.py#L18"}}, "/mgmt/tm/analytics/udp/generate-report": {"bigip": {"class": "AnalyticsUdpGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/udp/generate-report\n    ", "module_name": "get_analytics_udpgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/udp/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_udpgenerate_report.py#L18"}}, "/mgmt/tm/analytics/udp/report-results": {"bigip": {"class": "AnalyticsUdpReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/udp/report-results\n    ", "module_name": "get_analytics_udpreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/udp/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_udpreport_results.py#L18"}}, "/mgmt/tm/analytics/vcmp/generate-report": {"bigip": {"class": "AnalyticsVcmpGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/vcmp/generate-report\n    ", "module_name": "get_analytics_vcmpgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/vcmp/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_vcmpgenerate_report.py#L18"}}, "/mgmt/tm/analytics/vcmp/report-results": {"bigip": {"class": "AnalyticsVcmpReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/vcmp/report-results\n    ", "module_name": "get_analytics_vcmpreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/vcmp/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_vcmpreport_results.py#L18"}}, "/mgmt/tm/analytics/virtual/generate-report": {"bigip": {"class": "AnalyticsVirtualGeneratereport", "doc": " To F5 resource for /mgmt/tm/analytics/virtual/generate-report\n    ", "module_name": "get_analytics_virtualgenerate_report", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/virtual/generate-report", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_virtualgenerate_report.py#L18"}}, "/mgmt/tm/analytics/virtual/report-results": {"bigip": {"class": "AnalyticsVirtualReportresults", "doc": " To F5 resource for /mgmt/tm/analytics/virtual/report-results\n    ", "module_name": "get_analytics_virtualreport_results", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/analytics/virtual/report-results", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_analytics_virtualreport_results.py#L18"}}, "/mgmt/tm/auth/cert-ldap": {"bigip": {"class": "AuthCertldap", "doc": " To F5 resource for /mgmt/tm/auth/cert-ldap\n    ", "module_name": "get_auth_cert_ldap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/cert-ldap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_cert_ldap.py#L18"}}, "/mgmt/tm/auth/ldap": {"bigip": {"class": "AuthLdap", "doc": " To F5 resource for /mgmt/tm/auth/ldap\n    ", "module_name": "get_auth_ldap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/ldap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_ldap.py#L18"}}, "/mgmt/tm/auth/login-failures": {"bigip": {"class": "AuthLoginfailures", "doc": " To F5 resource for /mgmt/tm/auth/login-failures\n    ", "module_name": "get_auth_login_failures", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/login-failures", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_login_failures.py#L18"}}, "/mgmt/tm/auth/partition": {"bigip": {"class": "AuthPartition", "doc": " To F5 resource for /mgmt/tm/auth/partition\n    ", "module_name": "get_auth_partition", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/partition", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_partition.py#L18"}}, "/mgmt/tm/auth/password-policy": {"bigip": {"class": "AuthPasswordpolicy", "doc": " To F5 resource for /mgmt/tm/auth/password-policy\n    ", "module_name": "get_auth_password_policy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/password-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_password_policy.py#L18"}}, "/mgmt/tm/auth/radius": {"bigip": {"class": "AuthRadius", "doc": " To F5 resource for /mgmt/tm/auth/radius\n    ", "module_name": "get_auth_radius", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/radius", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_radius.py#L18"}}, "/mgmt/tm/auth/radius-server": {"bigip": {"class": "AuthRadiusserver", "doc": " To F5 resource for /mgmt/tm/auth/radius-server\n    ", "module_name": "get_auth_radius_server", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/radius-server", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_radius_server.py#L18"}}, "/mgmt/tm/auth/remote-role": {"bigip": {"class": "AuthRemoterole", "doc": " To F5 resource for /mgmt/tm/auth/remote-role\n    ", "module_name": "get_auth_remote_role", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/remote-role", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_remote_role.py#L18"}}, "/mgmt/tm/auth/remote-user": {"bigip": {"class": "AuthRemoteuser", "doc": " To F5 resource for /mgmt/tm/auth/remote-user\n    ", "module_name": "get_auth_remote_user", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/remote-user", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_remote_user.py#L18"}}, "/mgmt/tm/auth/source": {"bigip": {"class": "AuthSource", "doc": " To F5 resource for /mgmt/tm/auth/source\n    ", "module_name": "get_auth_source", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/source", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_source.py#L18"}}, "/mgmt/tm/auth/tacacs": {"bigip": {"class": "AuthTacacs", "doc": " To F5 resource for /mgmt/tm/auth/tacacs\n    ", "module_name": "get_auth_tacacs", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/tacacs", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_tacacs.py#L18"}}, "/mgmt/tm/auth/user": {"bigip": {"class": "AuthUser", "doc": " To F5 resource for /mgmt/tm/auth/user\n    ", "module_name": "get_auth_user", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/auth/user", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_auth_user.py#L18"}}, "/mgmt/tm/cli/alias": {"bigip": {"class": "CliAlias", "doc": " To F5 resource for /mgmt/tm/cli/alias\n    ", "module_name": "get_cli_alias", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cli/alias", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cli_alias.py#L18"}}, "/mgmt/tm/cli/alias/private": {"bigip": {"class": "CliAliasPrivate", "doc": " To F5 resource for /mgmt/tm/cli/alias/private\n    ", "module_name": "get_cli_aliasprivate", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cli/alias/private", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cli_aliasprivate.py#L18"}}, "/mgmt/tm/cli/alias/shared": {"bigip": {"class": "CliAliasShared", "doc": " To F5 resource for /mgmt/tm/cli/alias/shared\n    ", "module_name": "get_cli_aliasshared", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cli/alias/shared", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cli_aliasshared.py#L18"}}, "/mgmt/tm/cli/global-settings": {"bigip": {"class": "CliGlobalsettings", "doc": " To F5 resource for /mgmt/tm/cli/global-settings\n    ", "module_name": "get_cli_global_settings", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cli/global-settings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cli_global_settings.py#L18"}}, "/mgmt/tm/cli/history": {"bigip": {"class": "CliHistory", "doc": " To F5 resource for /mgmt/tm/cli/history\n    ", "module_name": "get_cli_history", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cli/history", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cli_history.py#L18"}}, "/mgmt/tm/cli/preference": {"bigip": {"class": "CliPreference", "doc": " To F5 resource for /mgmt/tm/cli/preference\n    ", "module_name": "get_cli_preference", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cli/preference", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cli_preference.py#L18"}}, "/mgmt/tm/cli/script": {"bigip": {"class": "CliScript", "doc": " To F5 resource for /mgmt/tm/cli/script\n    ", "module_name": "get_cli_script", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cli/script", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cli_script.py#L18"}}, "/mgmt/tm/cli/version": {"bigip": {"class": "CliVersion", "doc": " To F5 resource for /mgmt/tm/cli/version\n    ", "module_name": "get_cli_version", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cli/version", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cli_version.py#L18"}}, "/mgmt/tm/cloud/cm/device-group": {"bigip": {"class": "CloudCmDevicegroup", "doc": " To F5 resource for /mgmt/tm/cloud/cm/device-group\n    ", "module_name": "get_cloud_cmdevice_group", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cloud/cm/device-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cloud_cmdevice_group.py#L18"}}, "/mgmt/tm/cloud/ltm/node-addresses": {"bigip": {"class": "CloudLtmNodeaddresses", "doc": " To F5 resource for /mgmt/tm/cloud/ltm/node-addresses\n    ", "module_name": "get_cloud_ltmnode_addresses", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cloud/ltm/node-addresses", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cloud_ltmnode_addresses.py#L18"}}, "/mgmt/tm/cloud/ltm/pool-members": {"bigip": {"class": "CloudLtmPoolmembers", "doc": " To F5 resource for /mgmt/tm/cloud/ltm/pool-members\n    ", "module_name": "get_cloud_ltmpool_members", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cloud/ltm/pool-members", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cloud_ltmpool_members.py#L18"}}, "/mgmt/tm/cloud/ltm/pools": {"bigip": {"class": "CloudLtmPools", "doc": " To F5 resource for /mgmt/tm/cloud/ltm/pools\n    ", "module_name": "get_cloud_ltmpools", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cloud/ltm/pools", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cloud_ltmpools.py#L18"}}, "/mgmt/tm/cloud/ltm/virtual-servers": {"bigip": {"class": "CloudLtmVirtualservers", "doc": " To F5 resource for /mgmt/tm/cloud/ltm/virtual-servers\n    ", "module_name": "get_cloud_ltmvirtual_servers", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cloud/ltm/virtual-servers", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cloud_ltmvirtual_servers.py#L18"}}, "/mgmt/tm/cloud/services/iapp": {"bigip": {"class": "CloudServicesIapp", "doc": " To F5 resource for /mgmt/tm/cloud/services/iapp\n    ", "module_name": "get_cloud_servicesiapp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cloud/services/iapp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cloud_servicesiapp.py#L18"}}, "/mgmt/tm/cloud/templates/iapp": {"bigip": {"class": "CloudTemplatesIapp", "doc": " To F5 resource for /mgmt/tm/cloud/templates/iapp\n    ", "module_name": "get_cloud_templatesiapp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cloud/templates/iapp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cloud_templatesiapp.py#L18"}}, "/mgmt/tm/cm/cert": {"bigip": {"class": "CmCert", "doc": " To F5 resource for /mgmt/tm/cm/cert\n    ", "module_name": "get_cm_cert", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cm/cert", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cm_cert.py#L18"}}, "/mgmt/tm/cm/device": {"bigip": {"class": "CmDevice", "doc": " To F5 resource for /mgmt/tm/cm/device\n    ", "module_name": "get_cm_device", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cm/device", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cm_device.py#L18"}}, "/mgmt/tm/cm/device-group": {"bigip": {"class": "CmDevicegroup", "doc": " To F5 resource for /mgmt/tm/cm/device-group\n    ", "module_name": "get_cm_device_group", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cm/device-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cm_device_group.py#L18"}}, "/mgmt/tm/cm/failover-status": {"bigip": {"class": "CmFailoverstatus", "doc": " To F5 resource for /mgmt/tm/cm/failover-status\n    ", "module_name": "get_cm_failover_status", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cm/failover-status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cm_failover_status.py#L18"}}, "/mgmt/tm/cm/key": {"bigip": {"class": "CmKey", "doc": " To F5 resource for /mgmt/tm/cm/key\n    ", "module_name": "get_cm_key", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cm/key", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cm_key.py#L18"}}, "/mgmt/tm/cm/sha1-fingerprint": {"bigip": {"class": "CmSha1fingerprint", "doc": " To F5 resource for /mgmt/tm/cm/sha1-fingerprint\n    ", "module_name": "get_cm_sha1_fingerprint", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cm/sha1-fingerprint", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cm_sha1_fingerprint.py#L18"}}, "/mgmt/tm/cm/sync-status": {"bigip": {"class": "CmSyncstatus", "doc": " To F5 resource for /mgmt/tm/cm/sync-status\n    ", "module_name": "get_cm_sync_status", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cm/sync-status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cm_sync_status.py#L18"}}, "/mgmt/tm/cm/traffic-group": {"bigip": {"class": "CmTrafficgroup", "doc": " To F5 resource for /mgmt/tm/cm/traffic-group\n    ", "module_name": "get_cm_traffic_group", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cm/traffic-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cm_traffic_group.py#L18"}}, "/mgmt/tm/cm/trust-domain": {"bigip": {"class": "CmTrustdomain", "doc": " To F5 resource for /mgmt/tm/cm/trust-domain\n    ", "module_name": "get_cm_trust_domain", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/cm/trust-domain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_cm_trust_domain.py#L18"}}, "/mgmt/tm/file/apm/aaa/kerberos-keytab-file": {"bigip": {"class": "FileApmKerberoskeytabfile", "doc": " To F5 resource for /mgmt/tm/file/apm/aaa/kerberos-keytab-file\n    ", "module_name": "get_file_apmkerberos_keytab_file", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/file/apm/aaa/kerberos-keytab-file", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_file_apmkerberos_keytab_file.py#L18"}}, "/mgmt/tm/file/apm/aaa/ping-access-properties-files": {"bigip": {"class": "FileApmPingaccesspropertiesfiles", "doc": " To F5 resource for /mgmt/tm/file/apm/aaa/ping-access-properties-files\n    ", "module_name": "get_file_apmping_access_properties_files", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/file/apm/aaa/ping-access-properties-files", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_file_apmping_access_properties_files.py#L18"}}, "/mgmt/tm/file/apm/aaa/securid-config-files": {"bigip": {"class": "FileApmSecuridconfigfiles", "doc": " To F5 resource for /mgmt/tm/file/apm/aaa/securid-config-files\n    ", "module_name": "get_file_apmsecurid_config_files", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/file/apm/aaa/securid-config-files", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_file_apmsecurid_config_files.py#L18"}}, "/mgmt/tm/file/apm/epsec/epsec-file-object": {"bigip": {"class": "FileApmEpsecfileobject", "doc": " To F5 resource for /mgmt/tm/file/apm/epsec/epsec-file-object\n    ", "module_name": "get_file_apmepsec_file_object", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/file/apm/epsec/epsec-file-object", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_file_apmepsec_file_object.py#L18"}}, "/mgmt/tm/file/apm/policy/customization-group": {"bigip": {"class": "FileApmCustomizationgroup", "doc": " To F5 resource for /mgmt/tm/file/apm/policy/customization-group\n    ", "module_name": "get_file_apmcustomization_group", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/file/apm/policy/customization-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_file_apmcustomization_group.py#L18"}}, "/mgmt/tm/file/apm/policy/customization-image-file": {"bigip": {"class": "FileApmCustomizationimagefile", "doc": " To F5 resource for /mgmt/tm/file/apm/policy/customization-image-file\n    ", "module_name": "get_file_apmcustomization_image_file", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/file/apm/policy/customization-image-file", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_file_apmcustomization_image_file.py#L18"}}, "/mgmt/tm/file/apm/policy/customization-template-file": {"bigip": {"class": "FileApmCustomizationtemplatefile", "doc": " To F5 resource for /mgmt/tm/file/apm/policy/customization-template-file\n    ", "module_name": "get_file_apmcustomization_template_file", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/file/apm/policy/customization-template-file", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_file_apmcustomization_template_file.py#L18"}}, "/mgmt/tm/file/apm/resource/sandbox-file": {"bigip": {"class": "FileApmSandboxfile", "doc": " To F5 resource for /mgmt/tm/file/apm/resource/sandbox-file\n    ", "module_name": "get_file_apmsandbox_file", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/file/apm/resource/sandbox-file", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_file_apmsandbox_file.py#L18"}}, "/mgmt/tm/gtm/datacenter": {"bigip": {"class": "GtmDatacenter", "doc": " To F5 resource for /mgmt/tm/gtm/datacenter\n    ", "module_name": "get_gtm_datacenter", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/datacenter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_datacenter.py#L18"}}, "/mgmt/tm/gtm/distributed-app": {"bigip": {"class": "GtmDistributedapp", "doc": " To F5 resource for /mgmt/tm/gtm/distributed-app\n    ", "module_name": "get_gtm_distributed_app", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/distributed-app", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_distributed_app.py#L18"}}, "/mgmt/tm/gtm/global-settings": {"bigip": {"class": "GtmGlobalsettings", "doc": " To F5 resource for /mgmt/tm/gtm/global-settings\n    ", "module_name": "get_gtm_global_settings", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/global-settings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_global_settings.py#L18"}}, "/mgmt/tm/gtm/global-settings/general": {"bigip": {"class": "GtmGlobalsettingsGeneral", "doc": " To F5 resource for /mgmt/tm/gtm/global-settings/general\n    ", "module_name": "get_gtm_global_settingsgeneral", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/global-settings/general", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_global_settingsgeneral.py#L18"}}, "/mgmt/tm/gtm/global-settings/load-balancing": {"bigip": {"class": "GtmGlobalsettingsLoadbalancing", "doc": " To F5 resource for /mgmt/tm/gtm/global-settings/load-balancing\n    ", "module_name": "get_gtm_global_settingsload_balancing", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/global-settings/load-balancing", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_global_settingsload_balancing.py#L18"}}, "/mgmt/tm/gtm/global-settings/metrics": {"bigip": {"class": "GtmGlobalsettingsMetrics", "doc": " To F5 resource for /mgmt/tm/gtm/global-settings/metrics\n    ", "module_name": "get_gtm_global_settingsmetrics", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/global-settings/metrics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_global_settingsmetrics.py#L18"}}, "/mgmt/tm/gtm/global-settings/metrics-exclusions": {"bigip": {"class": "GtmGlobalsettingsMetricsexclusions", "doc": " To F5 resource for /mgmt/tm/gtm/global-settings/metrics-exclusions\n    ", "module_name": "get_gtm_global_settingsmetrics_exclusions", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/global-settings/metrics-exclusions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_global_settingsmetrics_exclusions.py#L18"}}, "/mgmt/tm/gtm/iquery": {"bigip": {"class": "GtmIquery", "doc": " To F5 resource for /mgmt/tm/gtm/iquery\n    ", "module_name": "get_gtm_iquery", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/iquery", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_iquery.py#L18"}}, "/mgmt/tm/gtm/ldns": {"bigip": {"class": "GtmLdns", "doc": " To F5 resource for /mgmt/tm/gtm/ldns\n    ", "module_name": "get_gtm_ldns", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/ldns", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_ldns.py#L18"}}, "/mgmt/tm/gtm/link": {"bigip": {"class": "GtmLink", "doc": " To F5 resource for /mgmt/tm/gtm/link\n    ", "module_name": "get_gtm_link", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/link", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_link.py#L18"}}, "/mgmt/tm/gtm/listener": {"bigip": {"class": "GtmListener", "doc": " To F5 resource for /mgmt/tm/gtm/listener\n    ", "module_name": "get_gtm_listener", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/listener", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_listener.py#L18"}}, "/mgmt/tm/gtm/monitor": {"bigip": {"class": "GtmMonitor", "doc": " To F5 resource for /mgmt/tm/gtm/monitor\n    ", "module_name": "get_gtm_monitor", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitor.py#L18"}}, "/mgmt/tm/gtm/monitor/bigip": {"bigip": {"class": "GtmMonitorBigip", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/bigip\n    ", "module_name": "get_gtm_monitorbigip", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/bigip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorbigip.py#L18"}}, "/mgmt/tm/gtm/monitor/bigip-link": {"bigip": {"class": "GtmMonitorBigiplink", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/bigip-link\n    ", "module_name": "get_gtm_monitorbigip_link", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/bigip-link", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorbigip_link.py#L18"}}, "/mgmt/tm/gtm/monitor/external": {"bigip": {"class": "GtmMonitorExternal", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/external\n    ", "module_name": "get_gtm_monitorexternal", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/external", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorexternal.py#L18"}}, "/mgmt/tm/gtm/monitor/firepass": {"bigip": {"class": "GtmMonitorFirepass", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/firepass\n    ", "module_name": "get_gtm_monitorfirepass", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/firepass", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorfirepass.py#L18"}}, "/mgmt/tm/gtm/monitor/ftp": {"bigip": {"class": "GtmMonitorFtp", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/ftp\n    ", "module_name": "get_gtm_monitorftp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/ftp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorftp.py#L18"}}, "/mgmt/tm/gtm/monitor/gateway-icmp": {"bigip": {"class": "GtmMonitorGatewayicmp", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/gateway-icmp\n    ", "module_name": "get_gtm_monitorgateway_icmp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/gateway-icmp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorgateway_icmp.py#L18"}}, "/mgmt/tm/gtm/monitor/gtp": {"bigip": {"class": "GtmMonitorGtp", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/gtp\n    ", "module_name": "get_gtm_monitorgtp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/gtp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorgtp.py#L18"}}, "/mgmt/tm/gtm/monitor/http": {"bigip": {"class": "GtmMonitorHttp", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/http\n    ", "module_name": "get_gtm_monitorhttp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/http", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorhttp.py#L18"}}, "/mgmt/tm/gtm/monitor/https": {"bigip": {"class": "GtmMonitorHttps", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/https\n    ", "module_name": "get_gtm_monitorhttps", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/https", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorhttps.py#L18"}}, "/mgmt/tm/gtm/monitor/imap": {"bigip": {"class": "GtmMonitorImap", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/imap\n    ", "module_name": "get_gtm_monitorimap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/imap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorimap.py#L18"}}, "/mgmt/tm/gtm/monitor/ldap": {"bigip": {"class": "GtmMonitorLdap", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/ldap\n    ", "module_name": "get_gtm_monitorldap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/ldap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorldap.py#L18"}}, "/mgmt/tm/gtm/monitor/mssql": {"bigip": {"class": "GtmMonitorMssql", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/mssql\n    ", "module_name": "get_gtm_monitormssql", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/mssql", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitormssql.py#L18"}}, "/mgmt/tm/gtm/monitor/mysql": {"bigip": {"class": "GtmMonitorMysql", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/mysql\n    ", "module_name": "get_gtm_monitormysql", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/mysql", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitormysql.py#L18"}}, "/mgmt/tm/gtm/monitor/nntp": {"bigip": {"class": "GtmMonitorNntp", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/nntp\n    ", "module_name": "get_gtm_monitornntp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/nntp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitornntp.py#L18"}}, "/mgmt/tm/gtm/monitor/none": {"bigip": {"class": "GtmMonitorNone", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/none\n    ", "module_name": "get_gtm_monitornone", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/none", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitornone.py#L18"}}, "/mgmt/tm/gtm/monitor/oracle": {"bigip": {"class": "GtmMonitorOracle", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/oracle\n    ", "module_name": "get_gtm_monitororacle", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/oracle", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitororacle.py#L18"}}, "/mgmt/tm/gtm/monitor/pop3": {"bigip": {"class": "GtmMonitorPop3", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/pop3\n    ", "module_name": "get_gtm_monitorpop3", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/pop3", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorpop3.py#L18"}}, "/mgmt/tm/gtm/monitor/postgresql": {"bigip": {"class": "GtmMonitorPostgresql", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/postgresql\n    ", "module_name": "get_gtm_monitorpostgresql", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/postgresql", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorpostgresql.py#L18"}}, "/mgmt/tm/gtm/monitor/radius": {"bigip": {"class": "GtmMonitorRadius", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/radius\n    ", "module_name": "get_gtm_monitorradius", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/radius", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorradius.py#L18"}}, "/mgmt/tm/gtm/monitor/radius-accounting": {"bigip": {"class": "GtmMonitorRadiusaccounting", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/radius-accounting\n    ", "module_name": "get_gtm_monitorradius_accounting", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/radius-accounting", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorradius_accounting.py#L18"}}, "/mgmt/tm/gtm/monitor/real-server": {"bigip": {"class": "GtmMonitorRealserver", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/real-server\n    ", "module_name": "get_gtm_monitorreal_server", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/real-server", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorreal_server.py#L18"}}, "/mgmt/tm/gtm/monitor/scripted": {"bigip": {"class": "GtmMonitorScripted", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/scripted\n    ", "module_name": "get_gtm_monitorscripted", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/scripted", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorscripted.py#L18"}}, "/mgmt/tm/gtm/monitor/sip": {"bigip": {"class": "GtmMonitorSip", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/sip\n    ", "module_name": "get_gtm_monitorsip", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/sip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorsip.py#L18"}}, "/mgmt/tm/gtm/monitor/smtp": {"bigip": {"class": "GtmMonitorSmtp", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/smtp\n    ", "module_name": "get_gtm_monitorsmtp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/smtp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorsmtp.py#L18"}}, "/mgmt/tm/gtm/monitor/snmp": {"bigip": {"class": "GtmMonitorSnmp", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/snmp\n    ", "module_name": "get_gtm_monitorsnmp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/snmp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorsnmp.py#L18"}}, "/mgmt/tm/gtm/monitor/snmp-link": {"bigip": {"class": "GtmMonitorSnmplink", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/snmp-link\n    ", "module_name": "get_gtm_monitorsnmp_link", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/snmp-link", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorsnmp_link.py#L18"}}, "/mgmt/tm/gtm/monitor/soap": {"bigip": {"class": "GtmMonitorSoap", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/soap\n    ", "module_name": "get_gtm_monitorsoap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/soap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorsoap.py#L18"}}, "/mgmt/tm/gtm/monitor/tcp": {"bigip": {"class": "GtmMonitorTcp", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/tcp\n    ", "module_name": "get_gtm_monitortcp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/tcp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitortcp.py#L18"}}, "/mgmt/tm/gtm/monitor/tcp-half-open": {"bigip": {"class": "GtmMonitorTcphalfopen", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/tcp-half-open\n    ", "module_name": "get_gtm_monitortcp_half_open", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/tcp-half-open", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitortcp_half_open.py#L18"}}, "/mgmt/tm/gtm/monitor/udp": {"bigip": {"class": "GtmMonitorUdp", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/udp\n    ", "module_name": "get_gtm_monitorudp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/udp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorudp.py#L18"}}, "/mgmt/tm/gtm/monitor/wap": {"bigip": {"class": "GtmMonitorWap", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/wap\n    ", "module_name": "get_gtm_monitorwap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/wap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorwap.py#L18"}}, "/mgmt/tm/gtm/monitor/wmi": {"bigip": {"class": "GtmMonitorWmi", "doc": " To F5 resource for /mgmt/tm/gtm/monitor/wmi\n    ", "module_name": "get_gtm_monitorwmi", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/monitor/wmi", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_monitorwmi.py#L18"}}, "/mgmt/tm/gtm/path": {"bigip": {"class": "GtmPath", "doc": " To F5 resource for /mgmt/tm/gtm/path\n    ", "module_name": "get_gtm_path", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/path", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_path.py#L18"}}, "/mgmt/tm/gtm/persist": {"bigip": {"class": "GtmPersist", "doc": " To F5 resource for /mgmt/tm/gtm/persist\n    ", "module_name": "get_gtm_persist", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/persist", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_persist.py#L18"}}, "/mgmt/tm/gtm/pool": {"bigip": {"class": "GtmPool", "doc": " To F5 resource for /mgmt/tm/gtm/pool\n    ", "module_name": "get_gtm_pool", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/pool", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_pool.py#L18"}}, "/mgmt/tm/gtm/pool/a": {"bigip": {"class": "GtmPoolA", "doc": " To F5 resource for /mgmt/tm/gtm/pool/a\n    ", "module_name": "get_gtm_poola", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/pool/a", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_poola.py#L18"}}, "/mgmt/tm/gtm/pool/aaaa": {"bigip": {"class": "GtmPoolAaaa", "doc": " To F5 resource for /mgmt/tm/gtm/pool/aaaa\n    ", "module_name": "get_gtm_poolaaaa", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/pool/aaaa", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_poolaaaa.py#L18"}}, "/mgmt/tm/gtm/pool/cname": {"bigip": {"class": "GtmPoolCname", "doc": " To F5 resource for /mgmt/tm/gtm/pool/cname\n    ", "module_name": "get_gtm_poolcname", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/pool/cname", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_poolcname.py#L18"}}, "/mgmt/tm/gtm/pool/mx": {"bigip": {"class": "GtmPoolMx", "doc": " To F5 resource for /mgmt/tm/gtm/pool/mx\n    ", "module_name": "get_gtm_poolmx", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/pool/mx", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_poolmx.py#L18"}}, "/mgmt/tm/gtm/pool/naptr": {"bigip": {"class": "GtmPoolNaptr", "doc": " To F5 resource for /mgmt/tm/gtm/pool/naptr\n    ", "module_name": "get_gtm_poolnaptr", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/pool/naptr", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_poolnaptr.py#L18"}}, "/mgmt/tm/gtm/pool/srv": {"bigip": {"class": "GtmPoolSrv", "doc": " To F5 resource for /mgmt/tm/gtm/pool/srv\n    ", "module_name": "get_gtm_poolsrv", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/pool/srv", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_poolsrv.py#L18"}}, "/mgmt/tm/gtm/prober-pool": {"bigip": {"class": "GtmProberpool", "doc": " To F5 resource for /mgmt/tm/gtm/prober-pool\n    ", "module_name": "get_gtm_prober_pool", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/prober-pool", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_prober_pool.py#L18"}}, "/mgmt/tm/gtm/region": {"bigip": {"class": "GtmRegion", "doc": " To F5 resource for /mgmt/tm/gtm/region\n    ", "module_name": "get_gtm_region", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/region", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_region.py#L18"}}, "/mgmt/tm/gtm/rule": {"bigip": {"class": "GtmRule", "doc": " To F5 resource for /mgmt/tm/gtm/rule\n    ", "module_name": "get_gtm_rule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/rule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_rule.py#L18"}}, "/mgmt/tm/gtm/server": {"bigip": {"class": "GtmServer", "doc": " To F5 resource for /mgmt/tm/gtm/server\n    ", "module_name": "get_gtm_server", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/server", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_server.py#L18"}}, "/mgmt/tm/gtm/sync-status": {"bigip": {"class": "GtmSyncstatus", "doc": " To F5 resource for /mgmt/tm/gtm/sync-status\n    ", "module_name": "get_gtm_sync_status", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/sync-status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_sync_status.py#L18"}}, "/mgmt/tm/gtm/topology": {"bigip": {"class": "GtmTopology", "doc": " To F5 resource for /mgmt/tm/gtm/topology\n    ", "module_name": "get_gtm_topology", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/topology", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_topology.py#L18"}}, "/mgmt/tm/gtm/traffic": {"bigip": {"class": "GtmTraffic", "doc": " To F5 resource for /mgmt/tm/gtm/traffic\n    ", "module_name": "get_gtm_traffic", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_traffic.py#L18"}}, "/mgmt/tm/gtm/wideip": {"bigip": {"class": "GtmWideip", "doc": " To F5 resource for /mgmt/tm/gtm/wideip\n    ", "module_name": "get_gtm_wideip", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/wideip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_wideip.py#L18"}}, "/mgmt/tm/gtm/wideip/a": {"bigip": {"class": "GtmWideipA", "doc": " To F5 resource for /mgmt/tm/gtm/wideip/a\n    ", "module_name": "get_gtm_wideipa", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/wideip/a", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_wideipa.py#L18"}}, "/mgmt/tm/gtm/wideip/aaaa": {"bigip": {"class": "GtmWideipAaaa", "doc": " To F5 resource for /mgmt/tm/gtm/wideip/aaaa\n    ", "module_name": "get_gtm_wideipaaaa", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/wideip/aaaa", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_wideipaaaa.py#L18"}}, "/mgmt/tm/gtm/wideip/cname": {"bigip": {"class": "GtmWideipCname", "doc": " To F5 resource for /mgmt/tm/gtm/wideip/cname\n    ", "module_name": "get_gtm_wideipcname", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/wideip/cname", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_wideipcname.py#L18"}}, "/mgmt/tm/gtm/wideip/mx": {"bigip": {"class": "GtmWideipMx", "doc": " To F5 resource for /mgmt/tm/gtm/wideip/mx\n    ", "module_name": "get_gtm_wideipmx", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/wideip/mx", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_wideipmx.py#L18"}}, "/mgmt/tm/gtm/wideip/naptr": {"bigip": {"class": "GtmWideipNaptr", "doc": " To F5 resource for /mgmt/tm/gtm/wideip/naptr\n    ", "module_name": "get_gtm_wideipnaptr", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/wideip/naptr", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_wideipnaptr.py#L18"}}, "/mgmt/tm/gtm/wideip/srv": {"bigip": {"class": "GtmWideipSrv", "doc": " To F5 resource for /mgmt/tm/gtm/wideip/srv\n    ", "module_name": "get_gtm_wideipsrv", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/gtm/wideip/srv", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_gtm_wideipsrv.py#L18"}}, "/mgmt/tm/live-update/asm-attack-signatures": {"bigip": {"class": "Live_updateAsmattacksignatures", "doc": " To F5 resource for /mgmt/tm/live-update/asm-attack-signatures\n    ", "module_name": "get_live_update_asm_attack_signatures", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/asm-attack-signatures", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_asm_attack_signatures.py#L18"}}, "/mgmt/tm/live-update/asm-attack-signatures/availability": {"bigip": {"class": "Live_updateAsmattacksignaturesAvailability", "doc": " To F5 resource for /mgmt/tm/live-update/asm-attack-signatures/availability\n    ", "module_name": "get_live_update_asm_attack_signaturesavailability", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/asm-attack-signatures/availability", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_asm_attack_signaturesavailability.py#L18"}}, "/mgmt/tm/live-update/asm-attack-signatures/install-schedule": {"bigip": {"class": "Live_updateAsmattacksignaturesInstallschedule", "doc": " To F5 resource for /mgmt/tm/live-update/asm-attack-signatures/install-schedule\n    ", "module_name": "get_live_update_asm_attack_signaturesinstall_schedule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/asm-attack-signatures/install-schedule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_asm_attack_signaturesinstall_schedule.py#L18"}}, "/mgmt/tm/live-update/asm-attack-signatures/installations": {"bigip": {"class": "Live_updateAsmattacksignaturesInstallations", "doc": " To F5 resource for /mgmt/tm/live-update/asm-attack-signatures/installations\n    ", "module_name": "get_live_update_asm_attack_signaturesinstallations", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/asm-attack-signatures/installations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_asm_attack_signaturesinstallations.py#L18"}}, "/mgmt/tm/live-update/asm-attack-signatures/update-files": {"bigip": {"class": "Live_updateAsmattacksignaturesUpdatefiles", "doc": " To F5 resource for /mgmt/tm/live-update/asm-attack-signatures/update-files\n    ", "module_name": "get_live_update_asm_attack_signaturesupdate_files", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/asm-attack-signatures/update-files", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_asm_attack_signaturesupdate_files.py#L18"}}, "/mgmt/tm/live-update/bot-signatures": {"bigip": {"class": "Live_updateBotsignatures", "doc": " To F5 resource for /mgmt/tm/live-update/bot-signatures\n    ", "module_name": "get_live_update_bot_signatures", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/bot-signatures", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_bot_signatures.py#L18"}}, "/mgmt/tm/live-update/bot-signatures/availability": {"bigip": {"class": "Live_updateBotsignaturesAvailability", "doc": " To F5 resource for /mgmt/tm/live-update/bot-signatures/availability\n    ", "module_name": "get_live_update_bot_signaturesavailability", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/bot-signatures/availability", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_bot_signaturesavailability.py#L18"}}, "/mgmt/tm/live-update/bot-signatures/install-schedule": {"bigip": {"class": "Live_updateBotsignaturesInstallschedule", "doc": " To F5 resource for /mgmt/tm/live-update/bot-signatures/install-schedule\n    ", "module_name": "get_live_update_bot_signaturesinstall_schedule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/bot-signatures/install-schedule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_bot_signaturesinstall_schedule.py#L18"}}, "/mgmt/tm/live-update/bot-signatures/installations": {"bigip": {"class": "Live_updateBotsignaturesInstallations", "doc": " To F5 resource for /mgmt/tm/live-update/bot-signatures/installations\n    ", "module_name": "get_live_update_bot_signaturesinstallations", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/bot-signatures/installations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_bot_signaturesinstallations.py#L18"}}, "/mgmt/tm/live-update/bot-signatures/update-files": {"bigip": {"class": "Live_updateBotsignaturesUpdatefiles", "doc": " To F5 resource for /mgmt/tm/live-update/bot-signatures/update-files\n    ", "module_name": "get_live_update_bot_signaturesupdate_files", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/bot-signatures/update-files", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_bot_signaturesupdate_files.py#L18"}}, "/mgmt/tm/live-update/browser-challenges": {"bigip": {"class": "Live_updateBrowserchallenges", "doc": " To F5 resource for /mgmt/tm/live-update/browser-challenges\n    ", "module_name": "get_live_update_browser_challenges", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/browser-challenges", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_browser_challenges.py#L18"}}, "/mgmt/tm/live-update/browser-challenges/availability": {"bigip": {"class": "Live_updateBrowserchallengesAvailability", "doc": " To F5 resource for /mgmt/tm/live-update/browser-challenges/availability\n    ", "module_name": "get_live_update_browser_challengesavailability", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/browser-challenges/availability", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_browser_challengesavailability.py#L18"}}, "/mgmt/tm/live-update/browser-challenges/install-schedule": {"bigip": {"class": "Live_updateBrowserchallengesInstallschedule", "doc": " To F5 resource for /mgmt/tm/live-update/browser-challenges/install-schedule\n    ", "module_name": "get_live_update_browser_challengesinstall_schedule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/browser-challenges/install-schedule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_browser_challengesinstall_schedule.py#L18"}}, "/mgmt/tm/live-update/browser-challenges/installations": {"bigip": {"class": "Live_updateBrowserchallengesInstallations", "doc": " To F5 resource for /mgmt/tm/live-update/browser-challenges/installations\n    ", "module_name": "get_live_update_browser_challengesinstallations", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/browser-challenges/installations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_browser_challengesinstallations.py#L18"}}, "/mgmt/tm/live-update/browser-challenges/update-files": {"bigip": {"class": "Live_updateBrowserchallengesUpdatefiles", "doc": " To F5 resource for /mgmt/tm/live-update/browser-challenges/update-files\n    ", "module_name": "get_live_update_browser_challengesupdate_files", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/browser-challenges/update-files", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_browser_challengesupdate_files.py#L18"}}, "/mgmt/tm/live-update/server-technologies": {"bigip": {"class": "Live_updateServertechnologies", "doc": " To F5 resource for /mgmt/tm/live-update/server-technologies\n    ", "module_name": "get_live_update_server_technologies", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/server-technologies", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_server_technologies.py#L18"}}, "/mgmt/tm/live-update/server-technologies/availability": {"bigip": {"class": "Live_updateServertechnologiesAvailability", "doc": " To F5 resource for /mgmt/tm/live-update/server-technologies/availability\n    ", "module_name": "get_live_update_server_technologiesavailability", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/server-technologies/availability", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_server_technologiesavailability.py#L18"}}, "/mgmt/tm/live-update/server-technologies/install-schedule": {"bigip": {"class": "Live_updateServertechnologiesInstallschedule", "doc": " To F5 resource for /mgmt/tm/live-update/server-technologies/install-schedule\n    ", "module_name": "get_live_update_server_technologiesinstall_schedule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/server-technologies/install-schedule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_server_technologiesinstall_schedule.py#L18"}}, "/mgmt/tm/live-update/server-technologies/installations": {"bigip": {"class": "Live_updateServertechnologiesInstallations", "doc": " To F5 resource for /mgmt/tm/live-update/server-technologies/installations\n    ", "module_name": "get_live_update_server_technologiesinstallations", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/server-technologies/installations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_server_technologiesinstallations.py#L18"}}, "/mgmt/tm/live-update/server-technologies/update-files": {"bigip": {"class": "Live_updateServertechnologiesUpdatefiles", "doc": " To F5 resource for /mgmt/tm/live-update/server-technologies/update-files\n    ", "module_name": "get_live_update_server_technologiesupdate_files", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/server-technologies/update-files", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_server_technologiesupdate_files.py#L18"}}, "/mgmt/tm/live-update/threat-campaigns": {"bigip": {"class": "Live_updateThreatcampaigns", "doc": " To F5 resource for /mgmt/tm/live-update/threat-campaigns\n    ", "module_name": "get_live_update_threat_campaigns", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/threat-campaigns", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_threat_campaigns.py#L18"}}, "/mgmt/tm/live-update/threat-campaigns/availability": {"bigip": {"class": "Live_updateThreatcampaignsAvailability", "doc": " To F5 resource for /mgmt/tm/live-update/threat-campaigns/availability\n    ", "module_name": "get_live_update_threat_campaignsavailability", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/threat-campaigns/availability", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_threat_campaignsavailability.py#L18"}}, "/mgmt/tm/live-update/threat-campaigns/install-schedule": {"bigip": {"class": "Live_updateThreatcampaignsInstallschedule", "doc": " To F5 resource for /mgmt/tm/live-update/threat-campaigns/install-schedule\n    ", "module_name": "get_live_update_threat_campaignsinstall_schedule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/threat-campaigns/install-schedule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_threat_campaignsinstall_schedule.py#L18"}}, "/mgmt/tm/live-update/threat-campaigns/installations": {"bigip": {"class": "Live_updateThreatcampaignsInstallations", "doc": " To F5 resource for /mgmt/tm/live-update/threat-campaigns/installations\n    ", "module_name": "get_live_update_threat_campaignsinstallations", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/threat-campaigns/installations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_threat_campaignsinstallations.py#L18"}}, "/mgmt/tm/live-update/threat-campaigns/update-files": {"bigip": {"class": "Live_updateThreatcampaignsUpdatefiles", "doc": " To F5 resource for /mgmt/tm/live-update/threat-campaigns/update-files\n    ", "module_name": "get_live_update_threat_campaignsupdate_files", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/live-update/threat-campaigns/update-files", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_live_update_threat_campaignsupdate_files.py#L18"}}, "/mgmt/tm/ltm/auth": {"bigip": {"class": "LtmAuth", "doc": " To F5 resource for /mgmt/tm/ltm/auth\n    ", "module_name": "get_ltm_auth", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_auth.py#L18"}}, "/mgmt/tm/ltm/auth/crldp-server": {"bigip": {"class": "LtmAuthCrldpserver", "doc": " To F5 resource for /mgmt/tm/ltm/auth/crldp-server\n    ", "module_name": "get_ltm_authcrldp_server", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/crldp-server", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authcrldp_server.py#L18"}}, "/mgmt/tm/ltm/auth/kerberos-delegation": {"bigip": {"class": "LtmAuthKerberosdelegation", "doc": " To F5 resource for /mgmt/tm/ltm/auth/kerberos-delegation\n    ", "module_name": "get_ltm_authkerberos_delegation", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/kerberos-delegation", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authkerberos_delegation.py#L18"}}, "/mgmt/tm/ltm/auth/ldap": {"bigip": {"class": "LtmAuthLdap", "doc": " To F5 resource for /mgmt/tm/ltm/auth/ldap\n    ", "module_name": "get_ltm_authldap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/ldap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authldap.py#L18"}}, "/mgmt/tm/ltm/auth/ocsp-responder": {"bigip": {"class": "LtmAuthOcspresponder", "doc": " To F5 resource for /mgmt/tm/ltm/auth/ocsp-responder\n    ", "module_name": "get_ltm_authocsp_responder", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/ocsp-responder", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authocsp_responder.py#L18"}}, "/mgmt/tm/ltm/auth/profile": {"bigip": {"class": "LtmAuthProfile", "doc": " To F5 resource for /mgmt/tm/ltm/auth/profile\n    ", "module_name": "get_ltm_authprofile", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/profile", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authprofile.py#L18"}}, "/mgmt/tm/ltm/auth/radius": {"bigip": {"class": "LtmAuthRadius", "doc": " To F5 resource for /mgmt/tm/ltm/auth/radius\n    ", "module_name": "get_ltm_authradius", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/radius", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authradius.py#L18"}}, "/mgmt/tm/ltm/auth/radius-server": {"bigip": {"class": "LtmAuthRadiusserver", "doc": " To F5 resource for /mgmt/tm/ltm/auth/radius-server\n    ", "module_name": "get_ltm_authradius_server", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/radius-server", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authradius_server.py#L18"}}, "/mgmt/tm/ltm/auth/ssl-cc-ldap": {"bigip": {"class": "LtmAuthSslccldap", "doc": " To F5 resource for /mgmt/tm/ltm/auth/ssl-cc-ldap\n    ", "module_name": "get_ltm_authssl_cc_ldap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/ssl-cc-ldap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authssl_cc_ldap.py#L18"}}, "/mgmt/tm/ltm/auth/ssl-crldp": {"bigip": {"class": "LtmAuthSslcrldp", "doc": " To F5 resource for /mgmt/tm/ltm/auth/ssl-crldp\n    ", "module_name": "get_ltm_authssl_crldp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/ssl-crldp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authssl_crldp.py#L18"}}, "/mgmt/tm/ltm/auth/ssl-ocsp": {"bigip": {"class": "LtmAuthSslocsp", "doc": " To F5 resource for /mgmt/tm/ltm/auth/ssl-ocsp\n    ", "module_name": "get_ltm_authssl_ocsp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/ssl-ocsp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authssl_ocsp.py#L18"}}, "/mgmt/tm/ltm/auth/tacacs": {"bigip": {"class": "LtmAuthTacacs", "doc": " To F5 resource for /mgmt/tm/ltm/auth/tacacs\n    ", "module_name": "get_ltm_authtacacs", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/auth/tacacs", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_authtacacs.py#L18"}}, "/mgmt/tm/ltm/cipher": {"bigip": {"class": "LtmCipher", "doc": " To F5 resource for /mgmt/tm/ltm/cipher\n    ", "module_name": "get_ltm_cipher", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/cipher", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_cipher.py#L18"}}, "/mgmt/tm/ltm/cipher/group": {"bigip": {"class": "LtmCipherGroup", "doc": " To F5 resource for /mgmt/tm/ltm/cipher/group\n    ", "module_name": "get_ltm_ciphergroup", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/cipher/group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_ciphergroup.py#L18"}}, "/mgmt/tm/ltm/cipher/rule": {"bigip": {"class": "LtmCipherRule", "doc": " To F5 resource for /mgmt/tm/ltm/cipher/rule\n    ", "module_name": "get_ltm_cipherrule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/cipher/rule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_cipherrule.py#L18"}}, "/mgmt/tm/ltm/data-group": {"bigip": {"class": "LtmDatagroup", "doc": " To F5 resource for /mgmt/tm/ltm/data-group\n    ", "module_name": "get_ltm_data_group", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/data-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_data_group.py#L18"}}, "/mgmt/tm/ltm/data-group/external": {"bigip": {"class": "LtmDatagroupExternal", "doc": " To F5 resource for /mgmt/tm/ltm/data-group/external\n    ", "module_name": "get_ltm_data_groupexternal", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/data-group/external", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_data_groupexternal.py#L18"}}, "/mgmt/tm/ltm/data-group/internal": {"bigip": {"class": "LtmDatagroupInternal", "doc": " To F5 resource for /mgmt/tm/ltm/data-group/internal\n    ", "module_name": "get_ltm_data_groupinternal", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/data-group/internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_data_groupinternal.py#L18"}}, "/mgmt/tm/ltm/default-node-monitor": {"bigip": {"class": "LtmDefaultnodemonitor", "doc": " To F5 resource for /mgmt/tm/ltm/default-node-monitor\n    ", "module_name": "get_ltm_default_node_monitor", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/default-node-monitor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_default_node_monitor.py#L18"}}, "/mgmt/tm/ltm/dns": {"bigip": {"class": "LtmDns", "doc": " To F5 resource for /mgmt/tm/ltm/dns\n    ", "module_name": "get_ltm_dns", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dns.py#L18"}}, "/mgmt/tm/ltm/dns/analytics": {"bigip": {"class": "LtmDnsAnalytics", "doc": " To F5 resource for /mgmt/tm/ltm/dns/analytics\n    ", "module_name": "get_ltm_dnsanalytics", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/analytics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnsanalytics.py#L18"}}, "/mgmt/tm/ltm/dns/analytics/global-settings": {"bigip": {"class": "LtmDnsGlobalsettings", "doc": " To F5 resource for /mgmt/tm/ltm/dns/analytics/global-settings\n    ", "module_name": "get_ltm_dnsglobal_settings", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/analytics/global-settings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnsglobal_settings.py#L18"}}, "/mgmt/tm/ltm/dns/cache": {"bigip": {"class": "LtmDnsCache", "doc": " To F5 resource for /mgmt/tm/ltm/dns/cache\n    ", "module_name": "get_ltm_dnscache", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/cache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnscache.py#L18"}}, "/mgmt/tm/ltm/dns/cache/resolver": {"bigip": {"class": "LtmDnsResolver", "doc": " To F5 resource for /mgmt/tm/ltm/dns/cache/resolver\n    ", "module_name": "get_ltm_dnsresolver", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/cache/resolver", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnsresolver.py#L18"}}, "/mgmt/tm/ltm/dns/cache/transparent": {"bigip": {"class": "LtmDnsTransparent", "doc": " To F5 resource for /mgmt/tm/ltm/dns/cache/transparent\n    ", "module_name": "get_ltm_dnstransparent", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/cache/transparent", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnstransparent.py#L18"}}, "/mgmt/tm/ltm/dns/cache/validating-resolver": {"bigip": {"class": "LtmDnsValidatingresolver", "doc": " To F5 resource for /mgmt/tm/ltm/dns/cache/validating-resolver\n    ", "module_name": "get_ltm_dnsvalidating_resolver", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/cache/validating-resolver", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnsvalidating_resolver.py#L18"}}, "/mgmt/tm/ltm/dns/dnssec": {"bigip": {"class": "LtmDnsDnssec", "doc": " To F5 resource for /mgmt/tm/ltm/dns/dnssec\n    ", "module_name": "get_ltm_dnsdnssec", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/dnssec", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnsdnssec.py#L18"}}, "/mgmt/tm/ltm/dns/dnssec/key": {"bigip": {"class": "LtmDnsKey", "doc": " To F5 resource for /mgmt/tm/ltm/dns/dnssec/key\n    ", "module_name": "get_ltm_dnskey", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/dnssec/key", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnskey.py#L18"}}, "/mgmt/tm/ltm/dns/nameserver": {"bigip": {"class": "LtmDnsNameserver", "doc": " To F5 resource for /mgmt/tm/ltm/dns/nameserver\n    ", "module_name": "get_ltm_dnsnameserver", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/nameserver", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnsnameserver.py#L18"}}, "/mgmt/tm/ltm/dns/tsig-key": {"bigip": {"class": "LtmDnsTsigkey", "doc": " To F5 resource for /mgmt/tm/ltm/dns/tsig-key\n    ", "module_name": "get_ltm_dnstsig_key", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/tsig-key", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnstsig_key.py#L18"}}, "/mgmt/tm/ltm/dns/zone": {"bigip": {"class": "LtmDnsZone", "doc": " To F5 resource for /mgmt/tm/ltm/dns/zone\n    ", "module_name": "get_ltm_dnszone", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/dns/zone", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_dnszone.py#L18"}}, "/mgmt/tm/ltm/eviction-policy": {"bigip": {"class": "LtmEvictionpolicy", "doc": " To F5 resource for /mgmt/tm/ltm/eviction-policy\n    ", "module_name": "get_ltm_eviction_policy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/eviction-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_eviction_policy.py#L18"}}, "/mgmt/tm/ltm/global-settings": {"bigip": {"class": "LtmGlobalsettings", "doc": " To F5 resource for /mgmt/tm/ltm/global-settings\n    ", "module_name": "get_ltm_global_settings", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/global-settings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_global_settings.py#L18"}}, "/mgmt/tm/ltm/global-settings/connection": {"bigip": {"class": "LtmGlobalsettingsConnection", "doc": " To F5 resource for /mgmt/tm/ltm/global-settings/connection\n    ", "module_name": "get_ltm_global_settingsconnection", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/global-settings/connection", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_global_settingsconnection.py#L18"}}, "/mgmt/tm/ltm/global-settings/general": {"bigip": {"class": "LtmGlobalsettingsGeneral", "doc": " To F5 resource for /mgmt/tm/ltm/global-settings/general\n    ", "module_name": "get_ltm_global_settingsgeneral", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/global-settings/general", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_global_settingsgeneral.py#L18"}}, "/mgmt/tm/ltm/global-settings/rule": {"bigip": {"class": "LtmGlobalsettingsRule", "doc": " To F5 resource for /mgmt/tm/ltm/global-settings/rule\n    ", "module_name": "get_ltm_global_settingsrule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/global-settings/rule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_global_settingsrule.py#L18"}}, "/mgmt/tm/ltm/global-settings/traffic-control": {"bigip": {"class": "LtmGlobalsettingsTrafficcontrol", "doc": " To F5 resource for /mgmt/tm/ltm/global-settings/traffic-control\n    ", "module_name": "get_ltm_global_settingstraffic_control", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/global-settings/traffic-control", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_global_settingstraffic_control.py#L18"}}, "/mgmt/tm/ltm/html-rule": {"bigip": {"class": "LtmHtmlrule", "doc": " To F5 resource for /mgmt/tm/ltm/html-rule\n    ", "module_name": "get_ltm_html_rule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/html-rule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_html_rule.py#L18"}}, "/mgmt/tm/ltm/html-rule/comment-raise-event": {"bigip": {"class": "LtmHtmlruleCommentraiseevent", "doc": " To F5 resource for /mgmt/tm/ltm/html-rule/comment-raise-event\n    ", "module_name": "get_ltm_html_rulecomment_raise_event", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/html-rule/comment-raise-event", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_html_rulecomment_raise_event.py#L18"}}, "/mgmt/tm/ltm/html-rule/comment-remove": {"bigip": {"class": "LtmHtmlruleCommentremove", "doc": " To F5 resource for /mgmt/tm/ltm/html-rule/comment-remove\n    ", "module_name": "get_ltm_html_rulecomment_remove", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/html-rule/comment-remove", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_html_rulecomment_remove.py#L18"}}, "/mgmt/tm/ltm/html-rule/tag-append-html": {"bigip": {"class": "LtmHtmlruleTagappendhtml", "doc": " To F5 resource for /mgmt/tm/ltm/html-rule/tag-append-html\n    ", "module_name": "get_ltm_html_ruletag_append_html", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/html-rule/tag-append-html", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_html_ruletag_append_html.py#L18"}}, "/mgmt/tm/ltm/html-rule/tag-prepend-html": {"bigip": {"class": "LtmHtmlruleTagprependhtml", "doc": " To F5 resource for /mgmt/tm/ltm/html-rule/tag-prepend-html\n    ", "module_name": "get_ltm_html_ruletag_prepend_html", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/html-rule/tag-prepend-html", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_html_ruletag_prepend_html.py#L18"}}, "/mgmt/tm/ltm/html-rule/tag-raise-event": {"bigip": {"class": "LtmHtmlruleTagraiseevent", "doc": " To F5 resource for /mgmt/tm/ltm/html-rule/tag-raise-event\n    ", "module_name": "get_ltm_html_ruletag_raise_event", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/html-rule/tag-raise-event", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_html_ruletag_raise_event.py#L18"}}, "/mgmt/tm/ltm/html-rule/tag-remove": {"bigip": {"class": "LtmHtmlruleTagremove", "doc": " To F5 resource for /mgmt/tm/ltm/html-rule/tag-remove\n    ", "module_name": "get_ltm_html_ruletag_remove", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/html-rule/tag-remove", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_html_ruletag_remove.py#L18"}}, "/mgmt/tm/ltm/html-rule/tag-remove-attribute": {"bigip": {"class": "LtmHtmlruleTagremoveattribute", "doc": " To F5 resource for /mgmt/tm/ltm/html-rule/tag-remove-attribute\n    ", "module_name": "get_ltm_html_ruletag_remove_attribute", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/html-rule/tag-remove-attribute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_html_ruletag_remove_attribute.py#L18"}}, "/mgmt/tm/ltm/ifile": {"bigip": {"class": "LtmIfile", "doc": " To F5 resource for /mgmt/tm/ltm/ifile\n    ", "module_name": "get_ltm_ifile", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/ifile", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_ifile.py#L18"}}, "/mgmt/tm/ltm/message-routing": {"bigip": {"class": "LtmMessagerouting", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing\n    ", "module_name": "get_ltm_message_routing", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routing.py#L18"}}, "/mgmt/tm/ltm/message-routing/diameter": {"bigip": {"class": "LtmMessageroutingDiameter", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/diameter\n    ", "module_name": "get_ltm_message_routingdiameter", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/diameter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routingdiameter.py#L18"}}, "/mgmt/tm/ltm/message-routing/diameter/peer": {"bigip": {"class": "LtmMessageroutingPeer", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/diameter/peer\n    ", "module_name": "get_ltm_message_routingpeer", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/diameter/peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routingpeer.py#L18"}}, "/mgmt/tm/ltm/message-routing/diameter/profile": {"bigip": {"class": "LtmMessageroutingProfile", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/diameter/profile\n    ", "module_name": "get_ltm_message_routingprofile", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/diameter/profile", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routingprofile.py#L18"}}, "/mgmt/tm/ltm/message-routing/generic": {"bigip": {"class": "LtmMessageroutingGeneric", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/generic\n    ", "module_name": "get_ltm_message_routinggeneric", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/generic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routinggeneric.py#L18"}}, "/mgmt/tm/ltm/message-routing/generic/protocol": {"bigip": {"class": "LtmMessageroutingProtocol", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/generic/protocol\n    ", "module_name": "get_ltm_message_routingprotocol", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/generic/protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routingprotocol.py#L18"}}, "/mgmt/tm/ltm/message-routing/generic/route": {"bigip": {"class": "LtmMessageroutingRoute", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/generic/route\n    ", "module_name": "get_ltm_message_routingroute", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/generic/route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routingroute.py#L18"}}, "/mgmt/tm/ltm/message-routing/generic/transport-config": {"bigip": {"class": "LtmMessageroutingTransportconfig", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/generic/transport-config\n    ", "module_name": "get_ltm_message_routingtransport_config", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/generic/transport-config", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routingtransport_config.py#L18"}}, "/mgmt/tm/ltm/message-routing/mqtt": {"bigip": {"class": "LtmMessageroutingMqtt", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/mqtt\n    ", "module_name": "get_ltm_message_routingmqtt", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/mqtt", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routingmqtt.py#L18"}}, "/mgmt/tm/ltm/message-routing/mqtt/profile/router": {"bigip": {"class": "LtmMessageroutingRouter", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/mqtt/profile/router\n    ", "module_name": "get_ltm_message_routingrouter", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/mqtt/profile/router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routingrouter.py#L18"}}, "/mgmt/tm/ltm/message-routing/mqtt/profile/session": {"bigip": {"class": "LtmMessageroutingSession", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/mqtt/profile/session\n    ", "module_name": "get_ltm_message_routingsession", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/mqtt/profile/session", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routingsession.py#L18"}}, "/mgmt/tm/ltm/message-routing/sip": {"bigip": {"class": "LtmMessageroutingSip", "doc": " To F5 resource for /mgmt/tm/ltm/message-routing/sip\n    ", "module_name": "get_ltm_message_routingsip", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/message-routing/sip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_message_routingsip.py#L18"}}, "/mgmt/tm/ltm/monitor": {"bigip": {"class": "LtmMonitor", "doc": " To F5 resource for /mgmt/tm/ltm/monitor\n    ", "module_name": "get_ltm_monitor", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitor.py#L18"}}, "/mgmt/tm/ltm/monitor/diameter": {"bigip": {"class": "LtmMonitorDiameter", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/diameter\n    ", "module_name": "get_ltm_monitordiameter", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/diameter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitordiameter.py#L18"}}, "/mgmt/tm/ltm/monitor/dns": {"bigip": {"class": "LtmMonitorDns", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/dns\n    ", "module_name": "get_ltm_monitordns", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/dns", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitordns.py#L18"}}, "/mgmt/tm/ltm/monitor/external": {"bigip": {"class": "LtmMonitorExternal", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/external\n    ", "module_name": "get_ltm_monitorexternal", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/external", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorexternal.py#L18"}}, "/mgmt/tm/ltm/monitor/firepass": {"bigip": {"class": "LtmMonitorFirepass", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/firepass\n    ", "module_name": "get_ltm_monitorfirepass", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/firepass", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorfirepass.py#L18"}}, "/mgmt/tm/ltm/monitor/ftp": {"bigip": {"class": "LtmMonitorFtp", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/ftp\n    ", "module_name": "get_ltm_monitorftp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/ftp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorftp.py#L18"}}, "/mgmt/tm/ltm/monitor/gateway-icmp": {"bigip": {"class": "LtmMonitorGatewayicmp", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/gateway-icmp\n    ", "module_name": "get_ltm_monitorgateway_icmp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/gateway-icmp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorgateway_icmp.py#L18"}}, "/mgmt/tm/ltm/monitor/http": {"bigip": {"class": "LtmMonitorHttp", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/http\n    ", "module_name": "get_ltm_monitorhttp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/http", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorhttp.py#L18"}}, "/mgmt/tm/ltm/monitor/https": {"bigip": {"class": "LtmMonitorHttps", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/https\n    ", "module_name": "get_ltm_monitorhttps", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/https", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorhttps.py#L18"}}, "/mgmt/tm/ltm/monitor/icmp": {"bigip": {"class": "LtmMonitorIcmp", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/icmp\n    ", "module_name": "get_ltm_monitoricmp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/icmp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitoricmp.py#L18"}}, "/mgmt/tm/ltm/monitor/imap": {"bigip": {"class": "LtmMonitorImap", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/imap\n    ", "module_name": "get_ltm_monitorimap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/imap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorimap.py#L18"}}, "/mgmt/tm/ltm/monitor/inband": {"bigip": {"class": "LtmMonitorInband", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/inband\n    ", "module_name": "get_ltm_monitorinband", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/inband", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorinband.py#L18"}}, "/mgmt/tm/ltm/monitor/ldap": {"bigip": {"class": "LtmMonitorLdap", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/ldap\n    ", "module_name": "get_ltm_monitorldap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/ldap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorldap.py#L18"}}, "/mgmt/tm/ltm/monitor/module-score": {"bigip": {"class": "LtmMonitorModulescore", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/module-score\n    ", "module_name": "get_ltm_monitormodule_score", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/module-score", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitormodule_score.py#L18"}}, "/mgmt/tm/ltm/monitor/mqtt": {"bigip": {"class": "LtmMonitorMqtt", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/mqtt\n    ", "module_name": "get_ltm_monitormqtt", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/mqtt", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitormqtt.py#L18"}}, "/mgmt/tm/ltm/monitor/mssql": {"bigip": {"class": "LtmMonitorMssql", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/mssql\n    ", "module_name": "get_ltm_monitormssql", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/mssql", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitormssql.py#L18"}}, "/mgmt/tm/ltm/monitor/mysql": {"bigip": {"class": "LtmMonitorMysql", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/mysql\n    ", "module_name": "get_ltm_monitormysql", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/mysql", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitormysql.py#L18"}}, "/mgmt/tm/ltm/monitor/nntp": {"bigip": {"class": "LtmMonitorNntp", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/nntp\n    ", "module_name": "get_ltm_monitornntp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/nntp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitornntp.py#L18"}}, "/mgmt/tm/ltm/monitor/none": {"bigip": {"class": "LtmMonitorNone", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/none\n    ", "module_name": "get_ltm_monitornone", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/none", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitornone.py#L18"}}, "/mgmt/tm/ltm/monitor/oracle": {"bigip": {"class": "LtmMonitorOracle", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/oracle\n    ", "module_name": "get_ltm_monitororacle", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/oracle", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitororacle.py#L18"}}, "/mgmt/tm/ltm/monitor/pop3": {"bigip": {"class": "LtmMonitorPop3", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/pop3\n    ", "module_name": "get_ltm_monitorpop3", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/pop3", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorpop3.py#L18"}}, "/mgmt/tm/ltm/monitor/postgresql": {"bigip": {"class": "LtmMonitorPostgresql", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/postgresql\n    ", "module_name": "get_ltm_monitorpostgresql", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/postgresql", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorpostgresql.py#L18"}}, "/mgmt/tm/ltm/monitor/radius": {"bigip": {"class": "LtmMonitorRadius", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/radius\n    ", "module_name": "get_ltm_monitorradius", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/radius", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorradius.py#L18"}}, "/mgmt/tm/ltm/monitor/radius-accounting": {"bigip": {"class": "LtmMonitorRadiusaccounting", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/radius-accounting\n    ", "module_name": "get_ltm_monitorradius_accounting", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/radius-accounting", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorradius_accounting.py#L18"}}, "/mgmt/tm/ltm/monitor/real-server": {"bigip": {"class": "LtmMonitorRealserver", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/real-server\n    ", "module_name": "get_ltm_monitorreal_server", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/real-server", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorreal_server.py#L18"}}, "/mgmt/tm/ltm/monitor/rpc": {"bigip": {"class": "LtmMonitorRpc", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/rpc\n    ", "module_name": "get_ltm_monitorrpc", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/rpc", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorrpc.py#L18"}}, "/mgmt/tm/ltm/monitor/sasp": {"bigip": {"class": "LtmMonitorSasp", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/sasp\n    ", "module_name": "get_ltm_monitorsasp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/sasp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorsasp.py#L18"}}, "/mgmt/tm/ltm/monitor/scripted": {"bigip": {"class": "LtmMonitorScripted", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/scripted\n    ", "module_name": "get_ltm_monitorscripted", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/scripted", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorscripted.py#L18"}}, "/mgmt/tm/ltm/monitor/sip": {"bigip": {"class": "LtmMonitorSip", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/sip\n    ", "module_name": "get_ltm_monitorsip", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/sip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorsip.py#L18"}}, "/mgmt/tm/ltm/monitor/smb": {"bigip": {"class": "LtmMonitorSmb", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/smb\n    ", "module_name": "get_ltm_monitorsmb", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/smb", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorsmb.py#L18"}}, "/mgmt/tm/ltm/monitor/smtp": {"bigip": {"class": "LtmMonitorSmtp", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/smtp\n    ", "module_name": "get_ltm_monitorsmtp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/smtp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorsmtp.py#L18"}}, "/mgmt/tm/ltm/monitor/snmp-dca": {"bigip": {"class": "LtmMonitorSnmpdca", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/snmp-dca\n    ", "module_name": "get_ltm_monitorsnmp_dca", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/snmp-dca", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorsnmp_dca.py#L18"}}, "/mgmt/tm/ltm/monitor/snmp-dca-base": {"bigip": {"class": "LtmMonitorSnmpdcabase", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/snmp-dca-base\n    ", "module_name": "get_ltm_monitorsnmp_dca_base", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/snmp-dca-base", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorsnmp_dca_base.py#L18"}}, "/mgmt/tm/ltm/monitor/soap": {"bigip": {"class": "LtmMonitorSoap", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/soap\n    ", "module_name": "get_ltm_monitorsoap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/soap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorsoap.py#L18"}}, "/mgmt/tm/ltm/monitor/tcp": {"bigip": {"class": "LtmMonitorTcp", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/tcp\n    ", "module_name": "get_ltm_monitortcp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/tcp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitortcp.py#L18"}}, "/mgmt/tm/ltm/monitor/tcp-echo": {"bigip": {"class": "LtmMonitorTcpecho", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/tcp-echo\n    ", "module_name": "get_ltm_monitortcp_echo", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/tcp-echo", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitortcp_echo.py#L18"}}, "/mgmt/tm/ltm/monitor/tcp-half-open": {"bigip": {"class": "LtmMonitorTcphalfopen", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/tcp-half-open\n    ", "module_name": "get_ltm_monitortcp_half_open", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/tcp-half-open", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitortcp_half_open.py#L18"}}, "/mgmt/tm/ltm/monitor/udp": {"bigip": {"class": "LtmMonitorUdp", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/udp\n    ", "module_name": "get_ltm_monitorudp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/udp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorudp.py#L18"}}, "/mgmt/tm/ltm/monitor/virtual-location": {"bigip": {"class": "LtmMonitorVirtuallocation", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/virtual-location\n    ", "module_name": "get_ltm_monitorvirtual_location", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/virtual-location", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorvirtual_location.py#L18"}}, "/mgmt/tm/ltm/monitor/wap": {"bigip": {"class": "LtmMonitorWap", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/wap\n    ", "module_name": "get_ltm_monitorwap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/wap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorwap.py#L18"}}, "/mgmt/tm/ltm/monitor/wmi": {"bigip": {"class": "LtmMonitorWmi", "doc": " To F5 resource for /mgmt/tm/ltm/monitor/wmi\n    ", "module_name": "get_ltm_monitorwmi", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/monitor/wmi", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_monitorwmi.py#L18"}}, "/mgmt/tm/ltm/nat": {"bigip": {"class": "LtmNat", "doc": " To F5 resource for /mgmt/tm/ltm/nat\n    ", "module_name": "get_ltm_nat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/nat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_nat.py#L18"}}, "/mgmt/tm/ltm/node": {"bigip": {"class": "LtmNode", "doc": " To F5 resource for /mgmt/tm/ltm/node\n    ", "module_name": "get_ltm_node", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/node", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_node.py#L18"}}, "/mgmt/tm/ltm/persistence": {"bigip": {"class": "LtmPersistence", "doc": " To F5 resource for /mgmt/tm/ltm/persistence\n    ", "module_name": "get_ltm_persistence", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistence.py#L18"}}, "/mgmt/tm/ltm/persistence/cookie": {"bigip": {"class": "LtmPersistenceCookie", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/cookie\n    ", "module_name": "get_ltm_persistencecookie", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/cookie", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistencecookie.py#L18"}}, "/mgmt/tm/ltm/persistence/dest-addr": {"bigip": {"class": "LtmPersistenceDestaddr", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/dest-addr\n    ", "module_name": "get_ltm_persistencedest_addr", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/dest-addr", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistencedest_addr.py#L18"}}, "/mgmt/tm/ltm/persistence/global-settings": {"bigip": {"class": "LtmPersistenceGlobalsettings", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/global-settings\n    ", "module_name": "get_ltm_persistenceglobal_settings", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/global-settings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistenceglobal_settings.py#L18"}}, "/mgmt/tm/ltm/persistence/hash": {"bigip": {"class": "LtmPersistenceHash", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/hash\n    ", "module_name": "get_ltm_persistencehash", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/hash", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistencehash.py#L18"}}, "/mgmt/tm/ltm/persistence/host": {"bigip": {"class": "LtmPersistenceHost", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/host\n    ", "module_name": "get_ltm_persistencehost", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/host", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistencehost.py#L18"}}, "/mgmt/tm/ltm/persistence/msrdp": {"bigip": {"class": "LtmPersistenceMsrdp", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/msrdp\n    ", "module_name": "get_ltm_persistencemsrdp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/msrdp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistencemsrdp.py#L18"}}, "/mgmt/tm/ltm/persistence/persist-records": {"bigip": {"class": "LtmPersistencePersistrecords", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/persist-records\n    ", "module_name": "get_ltm_persistencepersist_records", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/persist-records", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistencepersist_records.py#L18"}}, "/mgmt/tm/ltm/persistence/sip": {"bigip": {"class": "LtmPersistenceSip", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/sip\n    ", "module_name": "get_ltm_persistencesip", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/sip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistencesip.py#L18"}}, "/mgmt/tm/ltm/persistence/source-addr": {"bigip": {"class": "LtmPersistenceSourceaddr", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/source-addr\n    ", "module_name": "get_ltm_persistencesource_addr", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/source-addr", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistencesource_addr.py#L18"}}, "/mgmt/tm/ltm/persistence/ssl": {"bigip": {"class": "LtmPersistenceSsl", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/ssl\n    ", "module_name": "get_ltm_persistencessl", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/ssl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistencessl.py#L18"}}, "/mgmt/tm/ltm/persistence/universal": {"bigip": {"class": "LtmPersistenceUniversal", "doc": " To F5 resource for /mgmt/tm/ltm/persistence/universal\n    ", "module_name": "get_ltm_persistenceuniversal", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/persistence/universal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_persistenceuniversal.py#L18"}}, "/mgmt/tm/ltm/policy": {"bigip": {"class": "LtmPolicy", "doc": " To F5 resource for /mgmt/tm/ltm/policy\n    ", "module_name": "get_ltm_policy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_policy.py#L18"}}, "/mgmt/tm/ltm/policy-strategy": {"bigip": {"class": "LtmPolicystrategy", "doc": " To F5 resource for /mgmt/tm/ltm/policy-strategy\n    ", "module_name": "get_ltm_policy_strategy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/policy-strategy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_policy_strategy.py#L18"}}, "/mgmt/tm/ltm/pool": {"bigip": {"class": "LtmPool", "doc": " To F5 resource for /mgmt/tm/ltm/pool\n    ", "module_name": "get_ltm_pool", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/pool", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_pool.py#L18"}}, "/mgmt/tm/ltm/profile": {"bigip": {"class": "LtmProfile", "doc": " To F5 resource for /mgmt/tm/ltm/profile\n    ", "module_name": "get_ltm_profile", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profile.py#L18"}}, "/mgmt/tm/ltm/profile/certificate-authority": {"bigip": {"class": "LtmProfileCertificateauthority", "doc": " To F5 resource for /mgmt/tm/ltm/profile/certificate-authority\n    ", "module_name": "get_ltm_profilecertificate_authority", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/certificate-authority", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilecertificate_authority.py#L18"}}, "/mgmt/tm/ltm/profile/client-ldap": {"bigip": {"class": "LtmProfileClientldap", "doc": " To F5 resource for /mgmt/tm/ltm/profile/client-ldap\n    ", "module_name": "get_ltm_profileclient_ldap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/client-ldap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileclient_ldap.py#L18"}}, "/mgmt/tm/ltm/profile/client-ssl": {"bigip": {"class": "LtmProfileClientssl", "doc": " To F5 resource for /mgmt/tm/ltm/profile/client-ssl\n    ", "module_name": "get_ltm_profileclient_ssl", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/client-ssl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileclient_ssl.py#L18"}}, "/mgmt/tm/ltm/profile/connector": {"bigip": {"class": "LtmProfileConnector", "doc": " To F5 resource for /mgmt/tm/ltm/profile/connector\n    ", "module_name": "get_ltm_profileconnector", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/connector", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileconnector.py#L18"}}, "/mgmt/tm/ltm/profile/dhcpv4": {"bigip": {"class": "LtmProfileDhcpv4", "doc": " To F5 resource for /mgmt/tm/ltm/profile/dhcpv4\n    ", "module_name": "get_ltm_profiledhcpv4", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/dhcpv4", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profiledhcpv4.py#L18"}}, "/mgmt/tm/ltm/profile/dhcpv6": {"bigip": {"class": "LtmProfileDhcpv6", "doc": " To F5 resource for /mgmt/tm/ltm/profile/dhcpv6\n    ", "module_name": "get_ltm_profiledhcpv6", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/dhcpv6", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profiledhcpv6.py#L18"}}, "/mgmt/tm/ltm/profile/diameter": {"bigip": {"class": "LtmProfileDiameter", "doc": " To F5 resource for /mgmt/tm/ltm/profile/diameter\n    ", "module_name": "get_ltm_profilediameter", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/diameter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilediameter.py#L18"}}, "/mgmt/tm/ltm/profile/dns": {"bigip": {"class": "LtmProfileDns", "doc": " To F5 resource for /mgmt/tm/ltm/profile/dns\n    ", "module_name": "get_ltm_profiledns", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/dns", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profiledns.py#L18"}}, "/mgmt/tm/ltm/profile/dns-logging": {"bigip": {"class": "LtmProfileDnslogging", "doc": " To F5 resource for /mgmt/tm/ltm/profile/dns-logging\n    ", "module_name": "get_ltm_profiledns_logging", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/dns-logging", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profiledns_logging.py#L18"}}, "/mgmt/tm/ltm/profile/fasthttp": {"bigip": {"class": "LtmProfileFasthttp", "doc": " To F5 resource for /mgmt/tm/ltm/profile/fasthttp\n    ", "module_name": "get_ltm_profilefasthttp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/fasthttp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilefasthttp.py#L18"}}, "/mgmt/tm/ltm/profile/fastl4": {"bigip": {"class": "LtmProfileFastl4", "doc": " To F5 resource for /mgmt/tm/ltm/profile/fastl4\n    ", "module_name": "get_ltm_profilefastl4", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/fastl4", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilefastl4.py#L18"}}, "/mgmt/tm/ltm/profile/fix": {"bigip": {"class": "LtmProfileFix", "doc": " To F5 resource for /mgmt/tm/ltm/profile/fix\n    ", "module_name": "get_ltm_profilefix", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/fix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilefix.py#L18"}}, "/mgmt/tm/ltm/profile/ftp": {"bigip": {"class": "LtmProfileFtp", "doc": " To F5 resource for /mgmt/tm/ltm/profile/ftp\n    ", "module_name": "get_ltm_profileftp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/ftp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileftp.py#L18"}}, "/mgmt/tm/ltm/profile/gtp": {"bigip": {"class": "LtmProfileGtp", "doc": " To F5 resource for /mgmt/tm/ltm/profile/gtp\n    ", "module_name": "get_ltm_profilegtp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/gtp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilegtp.py#L18"}}, "/mgmt/tm/ltm/profile/html": {"bigip": {"class": "LtmProfileHtml", "doc": " To F5 resource for /mgmt/tm/ltm/profile/html\n    ", "module_name": "get_ltm_profilehtml", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/html", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilehtml.py#L18"}}, "/mgmt/tm/ltm/profile/http": {"bigip": {"class": "LtmProfileHttp", "doc": " To F5 resource for /mgmt/tm/ltm/profile/http\n    ", "module_name": "get_ltm_profilehttp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/http", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilehttp.py#L18"}}, "/mgmt/tm/ltm/profile/http-compression": {"bigip": {"class": "LtmProfileHttpcompression", "doc": " To F5 resource for /mgmt/tm/ltm/profile/http-compression\n    ", "module_name": "get_ltm_profilehttp_compression", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/http-compression", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilehttp_compression.py#L18"}}, "/mgmt/tm/ltm/profile/http-proxy-connect": {"bigip": {"class": "LtmProfileHttpproxyconnect", "doc": " To F5 resource for /mgmt/tm/ltm/profile/http-proxy-connect\n    ", "module_name": "get_ltm_profilehttp_proxy_connect", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/http-proxy-connect", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilehttp_proxy_connect.py#L18"}}, "/mgmt/tm/ltm/profile/http2": {"bigip": {"class": "LtmProfileHttp2", "doc": " To F5 resource for /mgmt/tm/ltm/profile/http2\n    ", "module_name": "get_ltm_profilehttp2", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/http2", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilehttp2.py#L18"}}, "/mgmt/tm/ltm/profile/httprouter": {"bigip": {"class": "LtmProfileHttprouter", "doc": " To F5 resource for /mgmt/tm/ltm/profile/httprouter\n    ", "module_name": "get_ltm_profilehttprouter", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/httprouter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilehttprouter.py#L18"}}, "/mgmt/tm/ltm/profile/icap": {"bigip": {"class": "LtmProfileIcap", "doc": " To F5 resource for /mgmt/tm/ltm/profile/icap\n    ", "module_name": "get_ltm_profileicap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/icap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileicap.py#L18"}}, "/mgmt/tm/ltm/profile/imap": {"bigip": {"class": "LtmProfileImap", "doc": " To F5 resource for /mgmt/tm/ltm/profile/imap\n    ", "module_name": "get_ltm_profileimap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/imap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileimap.py#L18"}}, "/mgmt/tm/ltm/profile/ipother": {"bigip": {"class": "LtmProfileIpother", "doc": " To F5 resource for /mgmt/tm/ltm/profile/ipother\n    ", "module_name": "get_ltm_profileipother", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/ipother", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileipother.py#L18"}}, "/mgmt/tm/ltm/profile/ipsecalg": {"bigip": {"class": "LtmProfileIpsecalg", "doc": " To F5 resource for /mgmt/tm/ltm/profile/ipsecalg\n    ", "module_name": "get_ltm_profileipsecalg", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/ipsecalg", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileipsecalg.py#L18"}}, "/mgmt/tm/ltm/profile/mblb": {"bigip": {"class": "LtmProfileMblb", "doc": " To F5 resource for /mgmt/tm/ltm/profile/mblb\n    ", "module_name": "get_ltm_profilemblb", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/mblb", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilemblb.py#L18"}}, "/mgmt/tm/ltm/profile/mqtt": {"bigip": {"class": "LtmProfileMqtt", "doc": " To F5 resource for /mgmt/tm/ltm/profile/mqtt\n    ", "module_name": "get_ltm_profilemqtt", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/mqtt", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilemqtt.py#L18"}}, "/mgmt/tm/ltm/profile/netflow": {"bigip": {"class": "LtmProfileNetflow", "doc": " To F5 resource for /mgmt/tm/ltm/profile/netflow\n    ", "module_name": "get_ltm_profilenetflow", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/netflow", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilenetflow.py#L18"}}, "/mgmt/tm/ltm/profile/ntlm": {"bigip": {"class": "LtmProfileNtlm", "doc": " To F5 resource for /mgmt/tm/ltm/profile/ntlm\n    ", "module_name": "get_ltm_profilentlm", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/ntlm", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilentlm.py#L18"}}, "/mgmt/tm/ltm/profile/ocsp-stapling-params": {"bigip": {"class": "LtmProfileOcspstaplingparams", "doc": " To F5 resource for /mgmt/tm/ltm/profile/ocsp-stapling-params\n    ", "module_name": "get_ltm_profileocsp_stapling_params", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/ocsp-stapling-params", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileocsp_stapling_params.py#L18"}}, "/mgmt/tm/ltm/profile/one-connect": {"bigip": {"class": "LtmProfileOneconnect", "doc": " To F5 resource for /mgmt/tm/ltm/profile/one-connect\n    ", "module_name": "get_ltm_profileone_connect", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/one-connect", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileone_connect.py#L18"}}, "/mgmt/tm/ltm/profile/pop3": {"bigip": {"class": "LtmProfilePop3", "doc": " To F5 resource for /mgmt/tm/ltm/profile/pop3\n    ", "module_name": "get_ltm_profilepop3", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/pop3", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilepop3.py#L18"}}, "/mgmt/tm/ltm/profile/pptp": {"bigip": {"class": "LtmProfilePptp", "doc": " To F5 resource for /mgmt/tm/ltm/profile/pptp\n    ", "module_name": "get_ltm_profilepptp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/pptp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilepptp.py#L18"}}, "/mgmt/tm/ltm/profile/qoe": {"bigip": {"class": "LtmProfileQoe", "doc": " To F5 resource for /mgmt/tm/ltm/profile/qoe\n    ", "module_name": "get_ltm_profileqoe", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/qoe", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileqoe.py#L18"}}, "/mgmt/tm/ltm/profile/radius": {"bigip": {"class": "LtmProfileRadius", "doc": " To F5 resource for /mgmt/tm/ltm/profile/radius\n    ", "module_name": "get_ltm_profileradius", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/radius", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileradius.py#L18"}}, "/mgmt/tm/ltm/profile/request-adapt": {"bigip": {"class": "LtmProfileRequestadapt", "doc": " To F5 resource for /mgmt/tm/ltm/profile/request-adapt\n    ", "module_name": "get_ltm_profilerequest_adapt", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/request-adapt", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilerequest_adapt.py#L18"}}, "/mgmt/tm/ltm/profile/request-log": {"bigip": {"class": "LtmProfileRequestlog", "doc": " To F5 resource for /mgmt/tm/ltm/profile/request-log\n    ", "module_name": "get_ltm_profilerequest_log", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/request-log", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilerequest_log.py#L18"}}, "/mgmt/tm/ltm/profile/response-adapt": {"bigip": {"class": "LtmProfileResponseadapt", "doc": " To F5 resource for /mgmt/tm/ltm/profile/response-adapt\n    ", "module_name": "get_ltm_profileresponse_adapt", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/response-adapt", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileresponse_adapt.py#L18"}}, "/mgmt/tm/ltm/profile/rewrite": {"bigip": {"class": "LtmProfileRewrite", "doc": " To F5 resource for /mgmt/tm/ltm/profile/rewrite\n    ", "module_name": "get_ltm_profilerewrite", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/rewrite", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilerewrite.py#L18"}}, "/mgmt/tm/ltm/profile/rtsp": {"bigip": {"class": "LtmProfileRtsp", "doc": " To F5 resource for /mgmt/tm/ltm/profile/rtsp\n    ", "module_name": "get_ltm_profilertsp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/rtsp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilertsp.py#L18"}}, "/mgmt/tm/ltm/profile/sctp": {"bigip": {"class": "LtmProfileSctp", "doc": " To F5 resource for /mgmt/tm/ltm/profile/sctp\n    ", "module_name": "get_ltm_profilesctp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/sctp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilesctp.py#L18"}}, "/mgmt/tm/ltm/profile/server-ldap": {"bigip": {"class": "LtmProfileServerldap", "doc": " To F5 resource for /mgmt/tm/ltm/profile/server-ldap\n    ", "module_name": "get_ltm_profileserver_ldap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/server-ldap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileserver_ldap.py#L18"}}, "/mgmt/tm/ltm/profile/server-ssl": {"bigip": {"class": "LtmProfileServerssl", "doc": " To F5 resource for /mgmt/tm/ltm/profile/server-ssl\n    ", "module_name": "get_ltm_profileserver_ssl", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/server-ssl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileserver_ssl.py#L18"}}, "/mgmt/tm/ltm/profile/service": {"bigip": {"class": "LtmProfileService", "doc": " To F5 resource for /mgmt/tm/ltm/profile/service\n    ", "module_name": "get_ltm_profileservice", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/service", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileservice.py#L18"}}, "/mgmt/tm/ltm/profile/sip": {"bigip": {"class": "LtmProfileSip", "doc": " To F5 resource for /mgmt/tm/ltm/profile/sip\n    ", "module_name": "get_ltm_profilesip", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/sip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilesip.py#L18"}}, "/mgmt/tm/ltm/profile/smtps": {"bigip": {"class": "LtmProfileSmtps", "doc": " To F5 resource for /mgmt/tm/ltm/profile/smtps\n    ", "module_name": "get_ltm_profilesmtps", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/smtps", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilesmtps.py#L18"}}, "/mgmt/tm/ltm/profile/socks": {"bigip": {"class": "LtmProfileSocks", "doc": " To F5 resource for /mgmt/tm/ltm/profile/socks\n    ", "module_name": "get_ltm_profilesocks", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/socks", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilesocks.py#L18"}}, "/mgmt/tm/ltm/profile/splitsessionclient": {"bigip": {"class": "LtmProfileSplitsessionclient", "doc": " To F5 resource for /mgmt/tm/ltm/profile/splitsessionclient\n    ", "module_name": "get_ltm_profilesplitsessionclient", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/splitsessionclient", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilesplitsessionclient.py#L18"}}, "/mgmt/tm/ltm/profile/splitsessionserver": {"bigip": {"class": "LtmProfileSplitsessionserver", "doc": " To F5 resource for /mgmt/tm/ltm/profile/splitsessionserver\n    ", "module_name": "get_ltm_profilesplitsessionserver", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/splitsessionserver", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilesplitsessionserver.py#L18"}}, "/mgmt/tm/ltm/profile/statistics": {"bigip": {"class": "LtmProfileStatistics", "doc": " To F5 resource for /mgmt/tm/ltm/profile/statistics\n    ", "module_name": "get_ltm_profilestatistics", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilestatistics.py#L18"}}, "/mgmt/tm/ltm/profile/stream": {"bigip": {"class": "LtmProfileStream", "doc": " To F5 resource for /mgmt/tm/ltm/profile/stream\n    ", "module_name": "get_ltm_profilestream", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/stream", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilestream.py#L18"}}, "/mgmt/tm/ltm/profile/tcp": {"bigip": {"class": "LtmProfileTcp", "doc": " To F5 resource for /mgmt/tm/ltm/profile/tcp\n    ", "module_name": "get_ltm_profiletcp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/tcp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profiletcp.py#L18"}}, "/mgmt/tm/ltm/profile/tcp-analytics": {"bigip": {"class": "LtmProfileTcpanalytics", "doc": " To F5 resource for /mgmt/tm/ltm/profile/tcp-analytics\n    ", "module_name": "get_ltm_profiletcp_analytics", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/tcp-analytics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profiletcp_analytics.py#L18"}}, "/mgmt/tm/ltm/profile/tftp": {"bigip": {"class": "LtmProfileTftp", "doc": " To F5 resource for /mgmt/tm/ltm/profile/tftp\n    ", "module_name": "get_ltm_profiletftp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/tftp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profiletftp.py#L18"}}, "/mgmt/tm/ltm/profile/udp": {"bigip": {"class": "LtmProfileUdp", "doc": " To F5 resource for /mgmt/tm/ltm/profile/udp\n    ", "module_name": "get_ltm_profileudp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/udp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileudp.py#L18"}}, "/mgmt/tm/ltm/profile/web-acceleration": {"bigip": {"class": "LtmProfileWebacceleration", "doc": " To F5 resource for /mgmt/tm/ltm/profile/web-acceleration\n    ", "module_name": "get_ltm_profileweb_acceleration", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/web-acceleration", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profileweb_acceleration.py#L18"}}, "/mgmt/tm/ltm/profile/websocket": {"bigip": {"class": "LtmProfileWebsocket", "doc": " To F5 resource for /mgmt/tm/ltm/profile/websocket\n    ", "module_name": "get_ltm_profilewebsocket", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/websocket", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilewebsocket.py#L18"}}, "/mgmt/tm/ltm/profile/xml": {"bigip": {"class": "LtmProfileXml", "doc": " To F5 resource for /mgmt/tm/ltm/profile/xml\n    ", "module_name": "get_ltm_profilexml", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/profile/xml", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_profilexml.py#L18"}}, "/mgmt/tm/ltm/rule": {"bigip": {"class": "LtmRule", "doc": " To F5 resource for /mgmt/tm/ltm/rule\n    ", "module_name": "get_ltm_rule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/rule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_rule.py#L18"}}, "/mgmt/tm/ltm/rule-profiler": {"bigip": {"class": "LtmRuleprofiler", "doc": " To F5 resource for /mgmt/tm/ltm/rule-profiler\n    ", "module_name": "get_ltm_rule_profiler", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/rule-profiler", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_rule_profiler.py#L18"}}, "/mgmt/tm/ltm/snat": {"bigip": {"class": "LtmSnat", "doc": " To F5 resource for /mgmt/tm/ltm/snat\n    ", "module_name": "get_ltm_snat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/snat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_snat.py#L18"}}, "/mgmt/tm/ltm/snat-translation": {"bigip": {"class": "LtmSnattranslation", "doc": " To F5 resource for /mgmt/tm/ltm/snat-translation\n    ", "module_name": "get_ltm_snat_translation", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/snat-translation", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_snat_translation.py#L18"}}, "/mgmt/tm/ltm/snatpool": {"bigip": {"class": "LtmSnatpool", "doc": " To F5 resource for /mgmt/tm/ltm/snatpool\n    ", "module_name": "get_ltm_snatpool", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/snatpool", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_snatpool.py#L18"}}, "/mgmt/tm/ltm/tacdb": {"bigip": {"class": "LtmTacdb", "doc": " To F5 resource for /mgmt/tm/ltm/tacdb\n    ", "module_name": "get_ltm_tacdb", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/tacdb", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_tacdb.py#L18"}}, "/mgmt/tm/ltm/tacdb/customdb": {"bigip": {"class": "LtmTacdbCustomdb", "doc": " To F5 resource for /mgmt/tm/ltm/tacdb/customdb\n    ", "module_name": "get_ltm_tacdbcustomdb", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/tacdb/customdb", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_tacdbcustomdb.py#L18"}}, "/mgmt/tm/ltm/tacdb/customdb-file": {"bigip": {"class": "LtmTacdbCustomdbfile", "doc": " To F5 resource for /mgmt/tm/ltm/tacdb/customdb-file\n    ", "module_name": "get_ltm_tacdbcustomdb_file", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/tacdb/customdb-file", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_tacdbcustomdb_file.py#L18"}}, "/mgmt/tm/ltm/tacdb/licenseddb": {"bigip": {"class": "LtmTacdbLicenseddb", "doc": " To F5 resource for /mgmt/tm/ltm/tacdb/licenseddb\n    ", "module_name": "get_ltm_tacdblicenseddb", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/tacdb/licenseddb", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_tacdblicenseddb.py#L18"}}, "/mgmt/tm/ltm/tacdb/licenseddb-file": {"bigip": {"class": "LtmTacdbLicenseddbfile", "doc": " To F5 resource for /mgmt/tm/ltm/tacdb/licenseddb-file\n    ", "module_name": "get_ltm_tacdblicenseddb_file", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/tacdb/licenseddb-file", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_tacdblicenseddb_file.py#L18"}}, "/mgmt/tm/ltm/tacdb/query": {"bigip": {"class": "LtmTacdbQuery", "doc": " To F5 resource for /mgmt/tm/ltm/tacdb/query\n    ", "module_name": "get_ltm_tacdbquery", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/tacdb/query", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_tacdbquery.py#L18"}}, "/mgmt/tm/ltm/traffic-class": {"bigip": {"class": "LtmTrafficclass", "doc": " To F5 resource for /mgmt/tm/ltm/traffic-class\n    ", "module_name": "get_ltm_traffic_class", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/traffic-class", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_traffic_class.py#L18"}}, "/mgmt/tm/ltm/traffic-matching-criteria": {"bigip": {"class": "LtmTrafficmatchingcriteria", "doc": " To F5 resource for /mgmt/tm/ltm/traffic-matching-criteria\n    ", "module_name": "get_ltm_traffic_matching_criteria", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/traffic-matching-criteria", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_traffic_matching_criteria.py#L18"}}, "/mgmt/tm/ltm/urlcat-query": {"bigip": {"class": "LtmUrlcatquery", "doc": " To F5 resource for /mgmt/tm/ltm/urlcat-query\n    ", "module_name": "get_ltm_urlcat_query", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/urlcat-query", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_urlcat_query.py#L18"}}, "/mgmt/tm/ltm/virtual": {"bigip": {"class": "LtmVirtual", "doc": " To F5 resource for /mgmt/tm/ltm/virtual\n    ", "module_name": "get_ltm_virtual", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/virtual", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_virtual.py#L18"}}, "/mgmt/tm/ltm/virtual-address": {"bigip": {"class": "LtmVirtualaddress", "doc": " To F5 resource for /mgmt/tm/ltm/virtual-address\n    ", "module_name": "get_ltm_virtual_address", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/ltm/virtual-address", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_ltm_virtual_address.py#L18"}}, "/mgmt/tm/net/address-list": {"bigip": {"class": "NetAddresslist", "doc": " To F5 resource for /mgmt/tm/net/address-list\n    ", "module_name": "get_net_address_list", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/address-list", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_address_list.py#L18"}}, "/mgmt/tm/net/arp": {"bigip": {"class": "NetArp", "doc": " To F5 resource for /mgmt/tm/net/arp\n    ", "module_name": "get_net_arp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/arp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_arp.py#L18"}}, "/mgmt/tm/net/bwc": {"bigip": {"class": "NetBwc", "doc": " To F5 resource for /mgmt/tm/net/bwc\n    ", "module_name": "get_net_bwc", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/bwc", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_bwc.py#L18"}}, "/mgmt/tm/net/bwc/policy": {"bigip": {"class": "NetBwcPolicy", "doc": " To F5 resource for /mgmt/tm/net/bwc/policy\n    ", "module_name": "get_net_bwcpolicy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/bwc/policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_bwcpolicy.py#L18"}}, "/mgmt/tm/net/bwc/priority-group": {"bigip": {"class": "NetBwcPrioritygroup", "doc": " To F5 resource for /mgmt/tm/net/bwc/priority-group\n    ", "module_name": "get_net_bwcpriority_group", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/bwc/priority-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_bwcpriority_group.py#L18"}}, "/mgmt/tm/net/bwc/probe": {"bigip": {"class": "NetBwcProbe", "doc": " To F5 resource for /mgmt/tm/net/bwc/probe\n    ", "module_name": "get_net_bwcprobe", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/bwc/probe", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_bwcprobe.py#L18"}}, "/mgmt/tm/net/clone-stats": {"bigip": {"class": "NetClonestats", "doc": " To F5 resource for /mgmt/tm/net/clone-stats\n    ", "module_name": "get_net_clone_stats", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/clone-stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_clone_stats.py#L18"}}, "/mgmt/tm/net/cmetrics": {"bigip": {"class": "NetCmetrics", "doc": " To F5 resource for /mgmt/tm/net/cmetrics\n    ", "module_name": "get_net_cmetrics", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/cmetrics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_cmetrics.py#L18"}}, "/mgmt/tm/net/cos": {"bigip": {"class": "NetCos", "doc": " To F5 resource for /mgmt/tm/net/cos\n    ", "module_name": "get_net_cos", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/cos", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_cos.py#L18"}}, "/mgmt/tm/net/cos/global-settings": {"bigip": {"class": "NetCosGlobalsettings", "doc": " To F5 resource for /mgmt/tm/net/cos/global-settings\n    ", "module_name": "get_net_cosglobal_settings", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/cos/global-settings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_cosglobal_settings.py#L18"}}, "/mgmt/tm/net/cos/map-8021p": {"bigip": {"class": "NetCosMap8021p", "doc": " To F5 resource for /mgmt/tm/net/cos/map-8021p\n    ", "module_name": "get_net_cosmap_8021p", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/cos/map-8021p", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_cosmap_8021p.py#L18"}}, "/mgmt/tm/net/cos/map-dscp": {"bigip": {"class": "NetCosMapdscp", "doc": " To F5 resource for /mgmt/tm/net/cos/map-dscp\n    ", "module_name": "get_net_cosmap_dscp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/cos/map-dscp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_cosmap_dscp.py#L18"}}, "/mgmt/tm/net/cos/traffic-priority": {"bigip": {"class": "NetCosTrafficpriority", "doc": " To F5 resource for /mgmt/tm/net/cos/traffic-priority\n    ", "module_name": "get_net_costraffic_priority", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/cos/traffic-priority", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_costraffic_priority.py#L18"}}, "/mgmt/tm/net/dag-globals": {"bigip": {"class": "NetDagglobals", "doc": " To F5 resource for /mgmt/tm/net/dag-globals\n    ", "module_name": "get_net_dag_globals", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/dag-globals", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_dag_globals.py#L18"}}, "/mgmt/tm/net/dns-resolver": {"bigip": {"class": "NetDnsresolver", "doc": " To F5 resource for /mgmt/tm/net/dns-resolver\n    ", "module_name": "get_net_dns_resolver", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/dns-resolver", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_dns_resolver.py#L18"}}, "/mgmt/tm/net/fdb": {"bigip": {"class": "NetFdb", "doc": " To F5 resource for /mgmt/tm/net/fdb\n    ", "module_name": "get_net_fdb", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/fdb", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_fdb.py#L18"}}, "/mgmt/tm/net/fdb/tunnel": {"bigip": {"class": "NetFdbTunnel", "doc": " To F5 resource for /mgmt/tm/net/fdb/tunnel\n    ", "module_name": "get_net_fdbtunnel", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/fdb/tunnel", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_fdbtunnel.py#L18"}}, "/mgmt/tm/net/fdb/vlan": {"bigip": {"class": "NetFdbVlan", "doc": " To F5 resource for /mgmt/tm/net/fdb/vlan\n    ", "module_name": "get_net_fdbvlan", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/fdb/vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_fdbvlan.py#L18"}}, "/mgmt/tm/net/ike-evt-stat": {"bigip": {"class": "NetIkeevtstat", "doc": " To F5 resource for /mgmt/tm/net/ike-evt-stat\n    ", "module_name": "get_net_ike_evt_stat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ike-evt-stat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ike_evt_stat.py#L18"}}, "/mgmt/tm/net/ike-msg-stat": {"bigip": {"class": "NetIkemsgstat", "doc": " To F5 resource for /mgmt/tm/net/ike-msg-stat\n    ", "module_name": "get_net_ike_msg_stat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ike-msg-stat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ike_msg_stat.py#L18"}}, "/mgmt/tm/net/interface": {"bigip": {"class": "NetInterface", "doc": " To F5 resource for /mgmt/tm/net/interface\n    ", "module_name": "get_net_interface", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_interface.py#L18"}}, "/mgmt/tm/net/interface-cos": {"bigip": {"class": "NetInterfacecos", "doc": " To F5 resource for /mgmt/tm/net/interface-cos\n    ", "module_name": "get_net_interface_cos", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/interface-cos", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_interface_cos.py#L18"}}, "/mgmt/tm/net/interface-ddm": {"bigip": {"class": "NetInterfaceddm", "doc": " To F5 resource for /mgmt/tm/net/interface-ddm\n    ", "module_name": "get_net_interface_ddm", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/interface-ddm", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_interface_ddm.py#L18"}}, "/mgmt/tm/net/ipsec": {"bigip": {"class": "NetIpsec", "doc": " To F5 resource for /mgmt/tm/net/ipsec\n    ", "module_name": "get_net_ipsec", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ipsec", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ipsec.py#L18"}}, "/mgmt/tm/net/ipsec-stat": {"bigip": {"class": "NetIpsecstat", "doc": " To F5 resource for /mgmt/tm/net/ipsec-stat\n    ", "module_name": "get_net_ipsec_stat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ipsec-stat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ipsec_stat.py#L18"}}, "/mgmt/tm/net/ipsec/ike-daemon": {"bigip": {"class": "NetIpsecIkedaemon", "doc": " To F5 resource for /mgmt/tm/net/ipsec/ike-daemon\n    ", "module_name": "get_net_ipsecike_daemon", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ipsec/ike-daemon", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ipsecike_daemon.py#L18"}}, "/mgmt/tm/net/ipsec/ike-peer": {"bigip": {"class": "NetIpsecIkepeer", "doc": " To F5 resource for /mgmt/tm/net/ipsec/ike-peer\n    ", "module_name": "get_net_ipsecike_peer", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ipsec/ike-peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ipsecike_peer.py#L18"}}, "/mgmt/tm/net/ipsec/ike-sa": {"bigip": {"class": "NetIpsecIkesa", "doc": " To F5 resource for /mgmt/tm/net/ipsec/ike-sa\n    ", "module_name": "get_net_ipsecike_sa", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ipsec/ike-sa", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ipsecike_sa.py#L18"}}, "/mgmt/tm/net/ipsec/ipsec-policy": {"bigip": {"class": "NetIpsecIpsecpolicy", "doc": " To F5 resource for /mgmt/tm/net/ipsec/ipsec-policy\n    ", "module_name": "get_net_ipsecipsec_policy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ipsec/ipsec-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ipsecipsec_policy.py#L18"}}, "/mgmt/tm/net/ipsec/ipsec-sa": {"bigip": {"class": "NetIpsecIpsecsa", "doc": " To F5 resource for /mgmt/tm/net/ipsec/ipsec-sa\n    ", "module_name": "get_net_ipsecipsec_sa", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ipsec/ipsec-sa", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ipsecipsec_sa.py#L18"}}, "/mgmt/tm/net/ipsec/manual-security-association": {"bigip": {"class": "NetIpsecManualsecurityassociation", "doc": " To F5 resource for /mgmt/tm/net/ipsec/manual-security-association\n    ", "module_name": "get_net_ipsecmanual_security_association", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ipsec/manual-security-association", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ipsecmanual_security_association.py#L18"}}, "/mgmt/tm/net/ipsec/traffic-selector": {"bigip": {"class": "NetIpsecTrafficselector", "doc": " To F5 resource for /mgmt/tm/net/ipsec/traffic-selector\n    ", "module_name": "get_net_ipsectraffic_selector", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ipsec/traffic-selector", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ipsectraffic_selector.py#L18"}}, "/mgmt/tm/net/lldp-globals": {"bigip": {"class": "NetLldpglobals", "doc": " To F5 resource for /mgmt/tm/net/lldp-globals\n    ", "module_name": "get_net_lldp_globals", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/lldp-globals", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_lldp_globals.py#L18"}}, "/mgmt/tm/net/lldp-neighbors": {"bigip": {"class": "NetLldpneighbors", "doc": " To F5 resource for /mgmt/tm/net/lldp-neighbors\n    ", "module_name": "get_net_lldp_neighbors", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/lldp-neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_lldp_neighbors.py#L18"}}, "/mgmt/tm/net/mroute": {"bigip": {"class": "NetMroute", "doc": " To F5 resource for /mgmt/tm/net/mroute\n    ", "module_name": "get_net_mroute", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/mroute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_mroute.py#L18"}}, "/mgmt/tm/net/multicast-globals": {"bigip": {"class": "NetMulticastglobals", "doc": " To F5 resource for /mgmt/tm/net/multicast-globals\n    ", "module_name": "get_net_multicast_globals", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/multicast-globals", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_multicast_globals.py#L18"}}, "/mgmt/tm/net/ndp": {"bigip": {"class": "NetNdp", "doc": " To F5 resource for /mgmt/tm/net/ndp\n    ", "module_name": "get_net_ndp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/ndp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_ndp.py#L18"}}, "/mgmt/tm/net/packet-filter": {"bigip": {"class": "NetPacketfilter", "doc": " To F5 resource for /mgmt/tm/net/packet-filter\n    ", "module_name": "get_net_packet_filter", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/packet-filter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_packet_filter.py#L18"}}, "/mgmt/tm/net/packet-filter-trusted": {"bigip": {"class": "NetPacketfiltertrusted", "doc": " To F5 resource for /mgmt/tm/net/packet-filter-trusted\n    ", "module_name": "get_net_packet_filter_trusted", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/packet-filter-trusted", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_packet_filter_trusted.py#L18"}}, "/mgmt/tm/net/packet-tester": {"bigip": {"class": "NetPackettester", "doc": " To F5 resource for /mgmt/tm/net/packet-tester\n    ", "module_name": "get_net_packet_tester", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/packet-tester", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_packet_tester.py#L18"}}, "/mgmt/tm/net/packet-tester/security": {"bigip": {"class": "NetPackettesterSecurity", "doc": " To F5 resource for /mgmt/tm/net/packet-tester/security\n    ", "module_name": "get_net_packet_testersecurity", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/packet-tester/security", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_packet_testersecurity.py#L18"}}, "/mgmt/tm/net/port-list": {"bigip": {"class": "NetPortlist", "doc": " To F5 resource for /mgmt/tm/net/port-list\n    ", "module_name": "get_net_port_list", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/port-list", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_port_list.py#L18"}}, "/mgmt/tm/net/port-mirror": {"bigip": {"class": "NetPortmirror", "doc": " To F5 resource for /mgmt/tm/net/port-mirror\n    ", "module_name": "get_net_port_mirror", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/port-mirror", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_port_mirror.py#L18"}}, "/mgmt/tm/net/rate-shaping": {"bigip": {"class": "NetRateshaping", "doc": " To F5 resource for /mgmt/tm/net/rate-shaping\n    ", "module_name": "get_net_rate_shaping", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/rate-shaping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_rate_shaping.py#L18"}}, "/mgmt/tm/net/rate-shaping/class": {"bigip": {"class": "NetRateshapingClass", "doc": " To F5 resource for /mgmt/tm/net/rate-shaping/class\n    ", "module_name": "get_net_rate_shapingclass", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/rate-shaping/class", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_rate_shapingclass.py#L18"}}, "/mgmt/tm/net/rate-shaping/color-policer": {"bigip": {"class": "NetRateshapingColorpolicer", "doc": " To F5 resource for /mgmt/tm/net/rate-shaping/color-policer\n    ", "module_name": "get_net_rate_shapingcolor_policer", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/rate-shaping/color-policer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_rate_shapingcolor_policer.py#L18"}}, "/mgmt/tm/net/rate-shaping/drop-policy": {"bigip": {"class": "NetRateshapingDroppolicy", "doc": " To F5 resource for /mgmt/tm/net/rate-shaping/drop-policy\n    ", "module_name": "get_net_rate_shapingdrop_policy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/rate-shaping/drop-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_rate_shapingdrop_policy.py#L18"}}, "/mgmt/tm/net/rate-shaping/queue": {"bigip": {"class": "NetRateshapingQueue", "doc": " To F5 resource for /mgmt/tm/net/rate-shaping/queue\n    ", "module_name": "get_net_rate_shapingqueue", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/rate-shaping/queue", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_rate_shapingqueue.py#L18"}}, "/mgmt/tm/net/rate-shaping/shaping-policy": {"bigip": {"class": "NetRateshapingShapingpolicy", "doc": " To F5 resource for /mgmt/tm/net/rate-shaping/shaping-policy\n    ", "module_name": "get_net_rate_shapingshaping_policy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/rate-shaping/shaping-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_rate_shapingshaping_policy.py#L18"}}, "/mgmt/tm/net/route": {"bigip": {"class": "NetRoute", "doc": " To F5 resource for /mgmt/tm/net/route\n    ", "module_name": "get_net_route", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_route.py#L18"}}, "/mgmt/tm/net/route-domain": {"bigip": {"class": "NetRoutedomain", "doc": " To F5 resource for /mgmt/tm/net/route-domain\n    ", "module_name": "get_net_route_domain", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/route-domain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_route_domain.py#L18"}}, "/mgmt/tm/net/router-advertisement": {"bigip": {"class": "NetRouteradvertisement", "doc": " To F5 resource for /mgmt/tm/net/router-advertisement\n    ", "module_name": "get_net_router_advertisement", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/router-advertisement", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_router_advertisement.py#L18"}}, "/mgmt/tm/net/routing": {"bigip": {"class": "NetRouting", "doc": " To F5 resource for /mgmt/tm/net/routing\n    ", "module_name": "get_net_routing", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routing.py#L18"}}, "/mgmt/tm/net/routing/access-list": {"bigip": {"class": "NetRoutingAccesslist", "doc": " To F5 resource for /mgmt/tm/net/routing/access-list\n    ", "module_name": "get_net_routingaccess_list", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing/access-list", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routingaccess_list.py#L18"}}, "/mgmt/tm/net/routing/as-path": {"bigip": {"class": "NetRoutingAspath", "doc": " To F5 resource for /mgmt/tm/net/routing/as-path\n    ", "module_name": "get_net_routingas_path", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing/as-path", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routingas_path.py#L18"}}, "/mgmt/tm/net/routing/bfd": {"bigip": {"class": "NetRoutingBfd", "doc": " To F5 resource for /mgmt/tm/net/routing/bfd\n    ", "module_name": "get_net_routingbfd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing/bfd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routingbfd.py#L18"}}, "/mgmt/tm/net/routing/bgp": {"bigip": {"class": "NetRoutingBgp", "doc": " To F5 resource for /mgmt/tm/net/routing/bgp\n    ", "module_name": "get_net_routingbgp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing/bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routingbgp.py#L18"}}, "/mgmt/tm/net/routing/community-list": {"bigip": {"class": "NetRoutingCommunitylist", "doc": " To F5 resource for /mgmt/tm/net/routing/community-list\n    ", "module_name": "get_net_routingcommunity_list", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing/community-list", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routingcommunity_list.py#L18"}}, "/mgmt/tm/net/routing/debug": {"bigip": {"class": "NetRoutingDebug", "doc": " To F5 resource for /mgmt/tm/net/routing/debug\n    ", "module_name": "get_net_routingdebug", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing/debug", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routingdebug.py#L18"}}, "/mgmt/tm/net/routing/extcommunity-list": {"bigip": {"class": "NetRoutingExtcommunitylist", "doc": " To F5 resource for /mgmt/tm/net/routing/extcommunity-list\n    ", "module_name": "get_net_routingextcommunity_list", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing/extcommunity-list", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routingextcommunity_list.py#L18"}}, "/mgmt/tm/net/routing/prefix-list": {"bigip": {"class": "NetRoutingPrefixlist", "doc": " To F5 resource for /mgmt/tm/net/routing/prefix-list\n    ", "module_name": "get_net_routingprefix_list", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing/prefix-list", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routingprefix_list.py#L18"}}, "/mgmt/tm/net/routing/profile": {"bigip": {"class": "NetRoutingProfile", "doc": " To F5 resource for /mgmt/tm/net/routing/profile\n    ", "module_name": "get_net_routingprofile", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing/profile", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routingprofile.py#L18"}}, "/mgmt/tm/net/routing/route-map": {"bigip": {"class": "NetRoutingRoutemap", "doc": " To F5 resource for /mgmt/tm/net/routing/route-map\n    ", "module_name": "get_net_routingroute_map", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/routing/route-map", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_routingroute_map.py#L18"}}, "/mgmt/tm/net/rst-cause": {"bigip": {"class": "NetRstcause", "doc": " To F5 resource for /mgmt/tm/net/rst-cause\n    ", "module_name": "get_net_rst_cause", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/rst-cause", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_rst_cause.py#L18"}}, "/mgmt/tm/net/self": {"bigip": {"class": "NetSelf", "doc": " To F5 resource for /mgmt/tm/net/self\n    ", "module_name": "get_net_self", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/self", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_self.py#L18"}}, "/mgmt/tm/net/self-allow": {"bigip": {"class": "NetSelfallow", "doc": " To F5 resource for /mgmt/tm/net/self-allow\n    ", "module_name": "get_net_self_allow", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/self-allow", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_self_allow.py#L18"}}, "/mgmt/tm/net/service-policy": {"bigip": {"class": "NetServicepolicy", "doc": " To F5 resource for /mgmt/tm/net/service-policy\n    ", "module_name": "get_net_service_policy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/service-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_service_policy.py#L18"}}, "/mgmt/tm/net/sfc": {"bigip": {"class": "NetSfc", "doc": " To F5 resource for /mgmt/tm/net/sfc\n    ", "module_name": "get_net_sfc", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/sfc", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_sfc.py#L18"}}, "/mgmt/tm/net/sfc/chain": {"bigip": {"class": "NetSfcChain", "doc": " To F5 resource for /mgmt/tm/net/sfc/chain\n    ", "module_name": "get_net_sfcchain", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/sfc/chain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_sfcchain.py#L18"}}, "/mgmt/tm/net/sfc/hop": {"bigip": {"class": "NetSfcHop", "doc": " To F5 resource for /mgmt/tm/net/sfc/hop\n    ", "module_name": "get_net_sfchop", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/sfc/hop", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_sfchop.py#L18"}}, "/mgmt/tm/net/sfc/sf": {"bigip": {"class": "NetSfcSf", "doc": " To F5 resource for /mgmt/tm/net/sfc/sf\n    ", "module_name": "get_net_sfcsf", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/sfc/sf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_sfcsf.py#L18"}}, "/mgmt/tm/net/stp": {"bigip": {"class": "NetStp", "doc": " To F5 resource for /mgmt/tm/net/stp\n    ", "module_name": "get_net_stp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/stp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_stp.py#L18"}}, "/mgmt/tm/net/stp-globals": {"bigip": {"class": "NetStpglobals", "doc": " To F5 resource for /mgmt/tm/net/stp-globals\n    ", "module_name": "get_net_stp_globals", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/stp-globals", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_stp_globals.py#L18"}}, "/mgmt/tm/net/timer-policy": {"bigip": {"class": "NetTimerpolicy", "doc": " To F5 resource for /mgmt/tm/net/timer-policy\n    ", "module_name": "get_net_timer_policy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/timer-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_timer_policy.py#L18"}}, "/mgmt/tm/net/trunk": {"bigip": {"class": "NetTrunk", "doc": " To F5 resource for /mgmt/tm/net/trunk\n    ", "module_name": "get_net_trunk", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/trunk", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_trunk.py#L18"}}, "/mgmt/tm/net/tunnels": {"bigip": {"class": "NetTunnels", "doc": " To F5 resource for /mgmt/tm/net/tunnels\n    ", "module_name": "get_net_tunnels", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnels.py#L18"}}, "/mgmt/tm/net/tunnels/etherip": {"bigip": {"class": "NetTunnelsEtherip", "doc": " To F5 resource for /mgmt/tm/net/tunnels/etherip\n    ", "module_name": "get_net_tunnelsetherip", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/etherip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsetherip.py#L18"}}, "/mgmt/tm/net/tunnels/fec": {"bigip": {"class": "NetTunnelsFec", "doc": " To F5 resource for /mgmt/tm/net/tunnels/fec\n    ", "module_name": "get_net_tunnelsfec", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/fec", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsfec.py#L18"}}, "/mgmt/tm/net/tunnels/fec-stat": {"bigip": {"class": "NetTunnelsFecstat", "doc": " To F5 resource for /mgmt/tm/net/tunnels/fec-stat\n    ", "module_name": "get_net_tunnelsfec_stat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/fec-stat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsfec_stat.py#L18"}}, "/mgmt/tm/net/tunnels/geneve": {"bigip": {"class": "NetTunnelsGeneve", "doc": " To F5 resource for /mgmt/tm/net/tunnels/geneve\n    ", "module_name": "get_net_tunnelsgeneve", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/geneve", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsgeneve.py#L18"}}, "/mgmt/tm/net/tunnels/gre": {"bigip": {"class": "NetTunnelsGre", "doc": " To F5 resource for /mgmt/tm/net/tunnels/gre\n    ", "module_name": "get_net_tunnelsgre", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/gre", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsgre.py#L18"}}, "/mgmt/tm/net/tunnels/ipip": {"bigip": {"class": "NetTunnelsIpip", "doc": " To F5 resource for /mgmt/tm/net/tunnels/ipip\n    ", "module_name": "get_net_tunnelsipip", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/ipip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsipip.py#L18"}}, "/mgmt/tm/net/tunnels/ipsec": {"bigip": {"class": "NetTunnelsIpsec", "doc": " To F5 resource for /mgmt/tm/net/tunnels/ipsec\n    ", "module_name": "get_net_tunnelsipsec", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/ipsec", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsipsec.py#L18"}}, "/mgmt/tm/net/tunnels/lw4o6": {"bigip": {"class": "NetTunnelsLw4o6", "doc": " To F5 resource for /mgmt/tm/net/tunnels/lw4o6\n    ", "module_name": "get_net_tunnelslw4o6", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/lw4o6", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelslw4o6.py#L18"}}, "/mgmt/tm/net/tunnels/map": {"bigip": {"class": "NetTunnelsMap", "doc": " To F5 resource for /mgmt/tm/net/tunnels/map\n    ", "module_name": "get_net_tunnelsmap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/map", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsmap.py#L18"}}, "/mgmt/tm/net/tunnels/ppp": {"bigip": {"class": "NetTunnelsPpp", "doc": " To F5 resource for /mgmt/tm/net/tunnels/ppp\n    ", "module_name": "get_net_tunnelsppp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/ppp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsppp.py#L18"}}, "/mgmt/tm/net/tunnels/tcp-forward": {"bigip": {"class": "NetTunnelsTcpforward", "doc": " To F5 resource for /mgmt/tm/net/tunnels/tcp-forward\n    ", "module_name": "get_net_tunnelstcp_forward", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/tcp-forward", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelstcp_forward.py#L18"}}, "/mgmt/tm/net/tunnels/tunnel": {"bigip": {"class": "NetTunnelsTunnel", "doc": " To F5 resource for /mgmt/tm/net/tunnels/tunnel\n    ", "module_name": "get_net_tunnelstunnel", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/tunnel", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelstunnel.py#L18"}}, "/mgmt/tm/net/tunnels/v6rd": {"bigip": {"class": "NetTunnelsV6rd", "doc": " To F5 resource for /mgmt/tm/net/tunnels/v6rd\n    ", "module_name": "get_net_tunnelsv6rd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/v6rd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsv6rd.py#L18"}}, "/mgmt/tm/net/tunnels/vxlan": {"bigip": {"class": "NetTunnelsVxlan", "doc": " To F5 resource for /mgmt/tm/net/tunnels/vxlan\n    ", "module_name": "get_net_tunnelsvxlan", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/vxlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelsvxlan.py#L18"}}, "/mgmt/tm/net/tunnels/wccp": {"bigip": {"class": "NetTunnelsWccp", "doc": " To F5 resource for /mgmt/tm/net/tunnels/wccp\n    ", "module_name": "get_net_tunnelswccp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/tunnels/wccp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_tunnelswccp.py#L18"}}, "/mgmt/tm/net/vlan": {"bigip": {"class": "NetVlan", "doc": " To F5 resource for /mgmt/tm/net/vlan\n    ", "module_name": "get_net_vlan", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_vlan.py#L18"}}, "/mgmt/tm/net/vlan-allowed": {"bigip": {"class": "NetVlanallowed", "doc": " To F5 resource for /mgmt/tm/net/vlan-allowed\n    ", "module_name": "get_net_vlan_allowed", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/vlan-allowed", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_vlan_allowed.py#L18"}}, "/mgmt/tm/net/vlan-group": {"bigip": {"class": "NetVlangroup", "doc": " To F5 resource for /mgmt/tm/net/vlan-group\n    ", "module_name": "get_net_vlan_group", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/vlan-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_vlan_group.py#L18"}}, "/mgmt/tm/net/wccp": {"bigip": {"class": "NetWccp", "doc": " To F5 resource for /mgmt/tm/net/wccp\n    ", "module_name": "get_net_wccp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/net/wccp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_net_wccp.py#L18"}}, "/mgmt/tm/security/firewall": {"bigip": {"class": "SecurityFirewall", "doc": " To F5 resource for /mgmt/tm/security/firewall\n    ", "module_name": "get_security_firewall", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/security/firewall", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_security_firewall.py#L18"}}, "/mgmt/tm/security/firewall/management-ip-rules": {"bigip": {"class": "SecurityFirewallManagementiprules", "doc": " To F5 resource for /mgmt/tm/security/firewall/management-ip-rules\n    ", "module_name": "get_security_firewallmanagement_ip_rules", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/security/firewall/management-ip-rules", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_security_firewallmanagement_ip_rules.py#L18"}}, "/mgmt/tm/security/firewall/uuid-default-autogenerate": {"bigip": {"class": "SecurityFirewallUuiddefaultautogenerate", "doc": " To F5 resource for /mgmt/tm/security/firewall/uuid-default-autogenerate\n    ", "module_name": "get_security_firewalluuid_default_autogenerate", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/security/firewall/uuid-default-autogenerate", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_security_firewalluuid_default_autogenerate.py#L18"}}, "/mgmt/tm/shared/bigip-failover-state": {"bigip": {"class": "SharedBigipfailoverstate", "doc": " To F5 resource for /mgmt/tm/shared/bigip-failover-state\n    ", "module_name": "get_shared_bigip_failover_state", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/shared/bigip-failover-state", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_shared_bigip_failover_state.py#L18"}}, "/mgmt/tm/shared/licensing/activation": {"bigip": {"class": "SharedLicensingActivation", "doc": " To F5 resource for /mgmt/tm/shared/licensing/activation\n    ", "module_name": "get_shared_licensingactivation", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/shared/licensing/activation", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_shared_licensingactivation.py#L18"}}, "/mgmt/tm/shared/licensing/registration": {"bigip": {"class": "SharedLicensingRegistration", "doc": " To F5 resource for /mgmt/tm/shared/licensing/registration\n    ", "module_name": "get_shared_licensingregistration", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/shared/licensing/registration", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_shared_licensingregistration.py#L18"}}, "/mgmt/tm/shared/sys/backup": {"bigip": {"class": "SharedSysBackup", "doc": " To F5 resource for /mgmt/tm/shared/sys/backup\n    ", "module_name": "get_shared_sysbackup", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/shared/sys/backup", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_shared_sysbackup.py#L18"}}, "/mgmt/tm/sys/alert": {"bigip": {"class": "SysAlert", "doc": " To F5 resource for /mgmt/tm/sys/alert\n    ", "module_name": "get_sys_alert", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/alert", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_alert.py#L18"}}, "/mgmt/tm/sys/alert/lcd": {"bigip": {"class": "SysAlertLcd", "doc": " To F5 resource for /mgmt/tm/sys/alert/lcd\n    ", "module_name": "get_sys_alertlcd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/alert/lcd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_alertlcd.py#L18"}}, "/mgmt/tm/sys/aom": {"bigip": {"class": "SysAom", "doc": " To F5 resource for /mgmt/tm/sys/aom\n    ", "module_name": "get_sys_aom", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/aom", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_aom.py#L18"}}, "/mgmt/tm/sys/application": {"bigip": {"class": "SysApplication", "doc": " To F5 resource for /mgmt/tm/sys/application\n    ", "module_name": "get_sys_application", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/application", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_application.py#L18"}}, "/mgmt/tm/sys/application/apl-script": {"bigip": {"class": "SysApplicationAplscript", "doc": " To F5 resource for /mgmt/tm/sys/application/apl-script\n    ", "module_name": "get_sys_applicationapl_script", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/application/apl-script", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_applicationapl_script.py#L18"}}, "/mgmt/tm/sys/application/custom-stat": {"bigip": {"class": "SysApplicationCustomstat", "doc": " To F5 resource for /mgmt/tm/sys/application/custom-stat\n    ", "module_name": "get_sys_applicationcustom_stat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/application/custom-stat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_applicationcustom_stat.py#L18"}}, "/mgmt/tm/sys/application/service": {"bigip": {"class": "SysApplicationService", "doc": " To F5 resource for /mgmt/tm/sys/application/service\n    ", "module_name": "get_sys_applicationservice", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/application/service", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_applicationservice.py#L18"}}, "/mgmt/tm/sys/application/template": {"bigip": {"class": "SysApplicationTemplate", "doc": " To F5 resource for /mgmt/tm/sys/application/template\n    ", "module_name": "get_sys_applicationtemplate", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/application/template", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_applicationtemplate.py#L18"}}, "/mgmt/tm/sys/application/template-model-tasks": {"bigip": {"class": "SysApplicationTemplatemodeltasks", "doc": " To F5 resource for /mgmt/tm/sys/application/template-model-tasks\n    ", "module_name": "get_sys_applicationtemplate_model_tasks", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/application/template-model-tasks", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_applicationtemplate_model_tasks.py#L18"}}, "/mgmt/tm/sys/autoscale-group": {"bigip": {"class": "SysAutoscalegroup", "doc": " To F5 resource for /mgmt/tm/sys/autoscale-group\n    ", "module_name": "get_sys_autoscale_group", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/autoscale-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_autoscale_group.py#L18"}}, "/mgmt/tm/sys/clock": {"bigip": {"class": "SysClock", "doc": " To F5 resource for /mgmt/tm/sys/clock\n    ", "module_name": "get_sys_clock", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/clock", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_clock.py#L18"}}, "/mgmt/tm/sys/cluster": {"bigip": {"class": "SysCluster", "doc": " To F5 resource for /mgmt/tm/sys/cluster\n    ", "module_name": "get_sys_cluster", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/cluster", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cluster.py#L18"}}, "/mgmt/tm/sys/connection": {"bigip": {"class": "SysConnection", "doc": " To F5 resource for /mgmt/tm/sys/connection\n    ", "module_name": "get_sys_connection", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/connection", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_connection.py#L18"}}, "/mgmt/tm/sys/console": {"bigip": {"class": "SysConsole", "doc": " To F5 resource for /mgmt/tm/sys/console\n    ", "module_name": "get_sys_console", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/console", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_console.py#L18"}}, "/mgmt/tm/sys/cpu": {"bigip": {"class": "SysCpu", "doc": " To F5 resource for /mgmt/tm/sys/cpu\n    ", "module_name": "get_sys_cpu", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/cpu", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cpu.py#L18"}}, "/mgmt/tm/sys/crypto": {"bigip": {"class": "SysCrypto", "doc": " To F5 resource for /mgmt/tm/sys/crypto\n    ", "module_name": "get_sys_crypto", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_crypto.py#L18"}}, "/mgmt/tm/sys/crypto/allow-key-export": {"bigip": {"class": "SysCryptoAllowkeyexport", "doc": " To F5 resource for /mgmt/tm/sys/crypto/allow-key-export\n    ", "module_name": "get_sys_cryptoallow_key_export", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/allow-key-export", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptoallow_key_export.py#L18"}}, "/mgmt/tm/sys/crypto/ca-bundle-manager": {"bigip": {"class": "SysCryptoCabundlemanager", "doc": " To F5 resource for /mgmt/tm/sys/crypto/ca-bundle-manager\n    ", "module_name": "get_sys_cryptoca_bundle_manager", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/ca-bundle-manager", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptoca_bundle_manager.py#L18"}}, "/mgmt/tm/sys/crypto/cert": {"bigip": {"class": "SysCryptoCert", "doc": " To F5 resource for /mgmt/tm/sys/crypto/cert\n    ", "module_name": "get_sys_cryptocert", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/cert", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptocert.py#L18"}}, "/mgmt/tm/sys/crypto/cert-order-manager": {"bigip": {"class": "SysCryptoCertordermanager", "doc": " To F5 resource for /mgmt/tm/sys/crypto/cert-order-manager\n    ", "module_name": "get_sys_cryptocert_order_manager", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/cert-order-manager", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptocert_order_manager.py#L18"}}, "/mgmt/tm/sys/crypto/cert-validator": {"bigip": {"class": "SysCryptoCertvalidator", "doc": " To F5 resource for /mgmt/tm/sys/crypto/cert-validator\n    ", "module_name": "get_sys_cryptocert_validator", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/cert-validator", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptocert_validator.py#L18"}}, "/mgmt/tm/sys/crypto/cert-validator/crl": {"bigip": {"class": "SysCryptoCrl", "doc": " To F5 resource for /mgmt/tm/sys/crypto/cert-validator/crl\n    ", "module_name": "get_sys_cryptocrl", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/cert-validator/crl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptocrl.py#L18"}}, "/mgmt/tm/sys/crypto/cert-validator/ocsp": {"bigip": {"class": "SysCryptoOcsp", "doc": " To F5 resource for /mgmt/tm/sys/crypto/cert-validator/ocsp\n    ", "module_name": "get_sys_cryptoocsp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/cert-validator/ocsp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptoocsp.py#L18"}}, "/mgmt/tm/sys/crypto/client": {"bigip": {"class": "SysCryptoClient", "doc": " To F5 resource for /mgmt/tm/sys/crypto/client\n    ", "module_name": "get_sys_cryptoclient", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/client", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptoclient.py#L18"}}, "/mgmt/tm/sys/crypto/csr": {"bigip": {"class": "SysCryptoCsr", "doc": " To F5 resource for /mgmt/tm/sys/crypto/csr\n    ", "module_name": "get_sys_cryptocsr", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/csr", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptocsr.py#L18"}}, "/mgmt/tm/sys/crypto/encrypted-attributes": {"bigip": {"class": "SysCryptoEncryptedattributes", "doc": " To F5 resource for /mgmt/tm/sys/crypto/encrypted-attributes\n    ", "module_name": "get_sys_cryptoencrypted_attributes", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/encrypted-attributes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptoencrypted_attributes.py#L18"}}, "/mgmt/tm/sys/crypto/fips": {"bigip": {"class": "SysCryptoFips", "doc": " To F5 resource for /mgmt/tm/sys/crypto/fips\n    ", "module_name": "get_sys_cryptofips", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/fips", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptofips.py#L18"}}, "/mgmt/tm/sys/crypto/fips/external-hsm": {"bigip": {"class": "SysCryptoExternalhsm", "doc": " To F5 resource for /mgmt/tm/sys/crypto/fips/external-hsm\n    ", "module_name": "get_sys_cryptoexternal_hsm", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/fips/external-hsm", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptoexternal_hsm.py#L18"}}, "/mgmt/tm/sys/crypto/fips/nethsm-partition": {"bigip": {"class": "SysCryptoNethsmpartition", "doc": " To F5 resource for /mgmt/tm/sys/crypto/fips/nethsm-partition\n    ", "module_name": "get_sys_cryptonethsm_partition", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/fips/nethsm-partition", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptonethsm_partition.py#L18"}}, "/mgmt/tm/sys/crypto/key": {"bigip": {"class": "SysCryptoKey", "doc": " To F5 resource for /mgmt/tm/sys/crypto/key\n    ", "module_name": "get_sys_cryptokey", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/key", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptokey.py#L18"}}, "/mgmt/tm/sys/crypto/master-key": {"bigip": {"class": "SysCryptoMasterkey", "doc": " To F5 resource for /mgmt/tm/sys/crypto/master-key\n    ", "module_name": "get_sys_cryptomaster_key", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/master-key", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptomaster_key.py#L18"}}, "/mgmt/tm/sys/crypto/server": {"bigip": {"class": "SysCryptoServer", "doc": " To F5 resource for /mgmt/tm/sys/crypto/server\n    ", "module_name": "get_sys_cryptoserver", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/crypto/server", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_cryptoserver.py#L18"}}, "/mgmt/tm/sys/daemon-ha": {"bigip": {"class": "SysDaemonha", "doc": " To F5 resource for /mgmt/tm/sys/daemon-ha\n    ", "module_name": "get_sys_daemon_ha", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/daemon-ha", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_daemon_ha.py#L18"}}, "/mgmt/tm/sys/daemon-log-settings": {"bigip": {"class": "SysDaemonlogsettings", "doc": " To F5 resource for /mgmt/tm/sys/daemon-log-settings\n    ", "module_name": "get_sys_daemon_log_settings", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/daemon-log-settings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_daemon_log_settings.py#L18"}}, "/mgmt/tm/sys/daemon-log-settings/clusterd": {"bigip": {"class": "SysDaemonlogsettingsClusterd", "doc": " To F5 resource for /mgmt/tm/sys/daemon-log-settings/clusterd\n    ", "module_name": "get_sys_daemon_log_settingsclusterd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/daemon-log-settings/clusterd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_daemon_log_settingsclusterd.py#L18"}}, "/mgmt/tm/sys/daemon-log-settings/csyncd": {"bigip": {"class": "SysDaemonlogsettingsCsyncd", "doc": " To F5 resource for /mgmt/tm/sys/daemon-log-settings/csyncd\n    ", "module_name": "get_sys_daemon_log_settingscsyncd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/daemon-log-settings/csyncd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_daemon_log_settingscsyncd.py#L18"}}, "/mgmt/tm/sys/daemon-log-settings/icr-eventd": {"bigip": {"class": "SysDaemonlogsettingsIcreventd", "doc": " To F5 resource for /mgmt/tm/sys/daemon-log-settings/icr-eventd\n    ", "module_name": "get_sys_daemon_log_settingsicr_eventd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/daemon-log-settings/icr-eventd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_daemon_log_settingsicr_eventd.py#L18"}}, "/mgmt/tm/sys/daemon-log-settings/icrd": {"bigip": {"class": "SysDaemonlogsettingsIcrd", "doc": " To F5 resource for /mgmt/tm/sys/daemon-log-settings/icrd\n    ", "module_name": "get_sys_daemon_log_settingsicrd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/daemon-log-settings/icrd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_daemon_log_settingsicrd.py#L18"}}, "/mgmt/tm/sys/daemon-log-settings/lind": {"bigip": {"class": "SysDaemonlogsettingsLind", "doc": " To F5 resource for /mgmt/tm/sys/daemon-log-settings/lind\n    ", "module_name": "get_sys_daemon_log_settingslind", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/daemon-log-settings/lind", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_daemon_log_settingslind.py#L18"}}, "/mgmt/tm/sys/daemon-log-settings/mcpd": {"bigip": {"class": "SysDaemonlogsettingsMcpd", "doc": " To F5 resource for /mgmt/tm/sys/daemon-log-settings/mcpd\n    ", "module_name": "get_sys_daemon_log_settingsmcpd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/daemon-log-settings/mcpd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_daemon_log_settingsmcpd.py#L18"}}, "/mgmt/tm/sys/daemon-log-settings/tmm": {"bigip": {"class": "SysDaemonlogsettingsTmm", "doc": " To F5 resource for /mgmt/tm/sys/daemon-log-settings/tmm\n    ", "module_name": "get_sys_daemon_log_settingstmm", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/daemon-log-settings/tmm", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_daemon_log_settingstmm.py#L18"}}, "/mgmt/tm/sys/datastor": {"bigip": {"class": "SysDatastor", "doc": " To F5 resource for /mgmt/tm/sys/datastor\n    ", "module_name": "get_sys_datastor", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/datastor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_datastor.py#L18"}}, "/mgmt/tm/sys/db": {"bigip": {"class": "SysDb", "doc": " To F5 resource for /mgmt/tm/sys/db\n    ", "module_name": "get_sys_db", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/db", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_db.py#L18"}}, "/mgmt/tm/sys/diags": {"bigip": {"class": "SysDiags", "doc": " To F5 resource for /mgmt/tm/sys/diags\n    ", "module_name": "get_sys_diags", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/diags", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_diags.py#L18"}}, "/mgmt/tm/sys/diags/ihealth": {"bigip": {"class": "SysDiagsIhealth", "doc": " To F5 resource for /mgmt/tm/sys/diags/ihealth\n    ", "module_name": "get_sys_diagsihealth", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/diags/ihealth", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_diagsihealth.py#L18"}}, "/mgmt/tm/sys/diags/ihealth-request": {"bigip": {"class": "SysDiagsIhealthrequest", "doc": " To F5 resource for /mgmt/tm/sys/diags/ihealth-request\n    ", "module_name": "get_sys_diagsihealth_request", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/diags/ihealth-request", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_diagsihealth_request.py#L18"}}, "/mgmt/tm/sys/diags/ihealth-result": {"bigip": {"class": "SysDiagsIhealthresult", "doc": " To F5 resource for /mgmt/tm/sys/diags/ihealth-result\n    ", "module_name": "get_sys_diagsihealth_result", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/diags/ihealth-result", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_diagsihealth_result.py#L18"}}, "/mgmt/tm/sys/disk": {"bigip": {"class": "SysDisk", "doc": " To F5 resource for /mgmt/tm/sys/disk\n    ", "module_name": "get_sys_disk", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/disk", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_disk.py#L18"}}, "/mgmt/tm/sys/disk/application-volume": {"bigip": {"class": "SysDiskApplicationvolume", "doc": " To F5 resource for /mgmt/tm/sys/disk/application-volume\n    ", "module_name": "get_sys_diskapplication_volume", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/disk/application-volume", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_diskapplication_volume.py#L18"}}, "/mgmt/tm/sys/disk/directory": {"bigip": {"class": "SysDiskDirectory", "doc": " To F5 resource for /mgmt/tm/sys/disk/directory\n    ", "module_name": "get_sys_diskdirectory", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/disk/directory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_diskdirectory.py#L18"}}, "/mgmt/tm/sys/disk/logical-disk": {"bigip": {"class": "SysDiskLogicaldisk", "doc": " To F5 resource for /mgmt/tm/sys/disk/logical-disk\n    ", "module_name": "get_sys_disklogical_disk", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/disk/logical-disk", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_disklogical_disk.py#L18"}}, "/mgmt/tm/sys/dns": {"bigip": {"class": "SysDns", "doc": " To F5 resource for /mgmt/tm/sys/dns\n    ", "module_name": "get_sys_dns", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/dns", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_dns.py#L18"}}, "/mgmt/tm/sys/dynad": {"bigip": {"class": "SysDynad", "doc": " To F5 resource for /mgmt/tm/sys/dynad\n    ", "module_name": "get_sys_dynad", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/dynad", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_dynad.py#L18"}}, "/mgmt/tm/sys/dynad/instrumentation": {"bigip": {"class": "SysDynadInstrumentation", "doc": " To F5 resource for /mgmt/tm/sys/dynad/instrumentation\n    ", "module_name": "get_sys_dynadinstrumentation", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/dynad/instrumentation", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_dynadinstrumentation.py#L18"}}, "/mgmt/tm/sys/dynad/key": {"bigip": {"class": "SysDynadKey", "doc": " To F5 resource for /mgmt/tm/sys/dynad/key\n    ", "module_name": "get_sys_dynadkey", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/dynad/key", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_dynadkey.py#L18"}}, "/mgmt/tm/sys/dynad/rpm": {"bigip": {"class": "SysDynadRpm", "doc": " To F5 resource for /mgmt/tm/sys/dynad/rpm\n    ", "module_name": "get_sys_dynadrpm", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/dynad/rpm", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_dynadrpm.py#L18"}}, "/mgmt/tm/sys/dynad/settings": {"bigip": {"class": "SysDynadSettings", "doc": " To F5 resource for /mgmt/tm/sys/dynad/settings\n    ", "module_name": "get_sys_dynadsettings", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/dynad/settings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_dynadsettings.py#L18"}}, "/mgmt/tm/sys/dynad/status": {"bigip": {"class": "SysDynadStatus", "doc": " To F5 resource for /mgmt/tm/sys/dynad/status\n    ", "module_name": "get_sys_dynadstatus", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/dynad/status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_dynadstatus.py#L18"}}, "/mgmt/tm/sys/ecm": {"bigip": {"class": "SysEcm", "doc": " To F5 resource for /mgmt/tm/sys/ecm\n    ", "module_name": "get_sys_ecm", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ecm", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ecm.py#L18"}}, "/mgmt/tm/sys/ecm/cloud-provider": {"bigip": {"class": "SysEcmCloudprovider", "doc": " To F5 resource for /mgmt/tm/sys/ecm/cloud-provider\n    ", "module_name": "get_sys_ecmcloud_provider", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ecm/cloud-provider", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ecmcloud_provider.py#L18"}}, "/mgmt/tm/sys/ecm/config": {"bigip": {"class": "SysEcmConfig", "doc": " To F5 resource for /mgmt/tm/sys/ecm/config\n    ", "module_name": "get_sys_ecmconfig", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ecm/config", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ecmconfig.py#L18"}}, "/mgmt/tm/sys/failover": {"bigip": {"class": "SysFailover", "doc": " To F5 resource for /mgmt/tm/sys/failover\n    ", "module_name": "get_sys_failover", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/failover", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_failover.py#L18"}}, "/mgmt/tm/sys/feature-module": {"bigip": {"class": "SysFeaturemodule", "doc": " To F5 resource for /mgmt/tm/sys/feature-module\n    ", "module_name": "get_sys_feature_module", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/feature-module", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_feature_module.py#L18"}}, "/mgmt/tm/sys/file": {"bigip": {"class": "SysFile", "doc": " To F5 resource for /mgmt/tm/sys/file\n    ", "module_name": "get_sys_file", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_file.py#L18"}}, "/mgmt/tm/sys/file/apache-ssl-cert": {"bigip": {"class": "SysFileApachesslcert", "doc": " To F5 resource for /mgmt/tm/sys/file/apache-ssl-cert\n    ", "module_name": "get_sys_fileapache_ssl_cert", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/apache-ssl-cert", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_fileapache_ssl_cert.py#L18"}}, "/mgmt/tm/sys/file/browser-capabilities-db": {"bigip": {"class": "SysFileBrowsercapabilitiesdb", "doc": " To F5 resource for /mgmt/tm/sys/file/browser-capabilities-db\n    ", "module_name": "get_sys_filebrowser_capabilities_db", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/browser-capabilities-db", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filebrowser_capabilities_db.py#L18"}}, "/mgmt/tm/sys/file/dashboard-viewset": {"bigip": {"class": "SysFileDashboardviewset", "doc": " To F5 resource for /mgmt/tm/sys/file/dashboard-viewset\n    ", "module_name": "get_sys_filedashboard_viewset", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/dashboard-viewset", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filedashboard_viewset.py#L18"}}, "/mgmt/tm/sys/file/data-group": {"bigip": {"class": "SysFileDatagroup", "doc": " To F5 resource for /mgmt/tm/sys/file/data-group\n    ", "module_name": "get_sys_filedata_group", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/data-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filedata_group.py#L18"}}, "/mgmt/tm/sys/file/device-capabilities-db": {"bigip": {"class": "SysFileDevicecapabilitiesdb", "doc": " To F5 resource for /mgmt/tm/sys/file/device-capabilities-db\n    ", "module_name": "get_sys_filedevice_capabilities_db", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/device-capabilities-db", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filedevice_capabilities_db.py#L18"}}, "/mgmt/tm/sys/file/external-monitor": {"bigip": {"class": "SysFileExternalmonitor", "doc": " To F5 resource for /mgmt/tm/sys/file/external-monitor\n    ", "module_name": "get_sys_fileexternal_monitor", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/external-monitor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_fileexternal_monitor.py#L18"}}, "/mgmt/tm/sys/file/ifile": {"bigip": {"class": "SysFileIfile", "doc": " To F5 resource for /mgmt/tm/sys/file/ifile\n    ", "module_name": "get_sys_fileifile", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/ifile", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_fileifile.py#L18"}}, "/mgmt/tm/sys/file/lwtunneltbl": {"bigip": {"class": "SysFileLwtunneltbl", "doc": " To F5 resource for /mgmt/tm/sys/file/lwtunneltbl\n    ", "module_name": "get_sys_filelwtunneltbl", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/lwtunneltbl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filelwtunneltbl.py#L18"}}, "/mgmt/tm/sys/file/ssl-cert": {"bigip": {"class": "SysFileSslcert", "doc": " To F5 resource for /mgmt/tm/sys/file/ssl-cert\n    ", "module_name": "get_sys_filessl_cert", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/ssl-cert", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filessl_cert.py#L18"}}, "/mgmt/tm/sys/file/ssl-crl": {"bigip": {"class": "SysFileSslcrl", "doc": " To F5 resource for /mgmt/tm/sys/file/ssl-crl\n    ", "module_name": "get_sys_filessl_crl", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/ssl-crl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filessl_crl.py#L18"}}, "/mgmt/tm/sys/file/ssl-csr": {"bigip": {"class": "SysFileSslcsr", "doc": " To F5 resource for /mgmt/tm/sys/file/ssl-csr\n    ", "module_name": "get_sys_filessl_csr", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/ssl-csr", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filessl_csr.py#L18"}}, "/mgmt/tm/sys/file/ssl-key": {"bigip": {"class": "SysFileSslkey", "doc": " To F5 resource for /mgmt/tm/sys/file/ssl-key\n    ", "module_name": "get_sys_filessl_key", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/ssl-key", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filessl_key.py#L18"}}, "/mgmt/tm/sys/file/system-ssl-cert": {"bigip": {"class": "SysFileSystemsslcert", "doc": " To F5 resource for /mgmt/tm/sys/file/system-ssl-cert\n    ", "module_name": "get_sys_filesystem_ssl_cert", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/system-ssl-cert", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filesystem_ssl_cert.py#L18"}}, "/mgmt/tm/sys/file/system-ssl-key": {"bigip": {"class": "SysFileSystemsslkey", "doc": " To F5 resource for /mgmt/tm/sys/file/system-ssl-key\n    ", "module_name": "get_sys_filesystem_ssl_key", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/file/system-ssl-key", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_filesystem_ssl_key.py#L18"}}, "/mgmt/tm/sys/fix-connection": {"bigip": {"class": "SysFixconnection", "doc": " To F5 resource for /mgmt/tm/sys/fix-connection\n    ", "module_name": "get_sys_fix_connection", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/fix-connection", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_fix_connection.py#L18"}}, "/mgmt/tm/sys/folder": {"bigip": {"class": "SysFolder", "doc": " To F5 resource for /mgmt/tm/sys/folder\n    ", "module_name": "get_sys_folder", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/folder", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_folder.py#L18"}}, "/mgmt/tm/sys/fpga": {"bigip": {"class": "SysFpga", "doc": " To F5 resource for /mgmt/tm/sys/fpga\n    ", "module_name": "get_sys_fpga", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/fpga", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_fpga.py#L18"}}, "/mgmt/tm/sys/fpga/firmware-config": {"bigip": {"class": "SysFpgaFirmwareconfig", "doc": " To F5 resource for /mgmt/tm/sys/fpga/firmware-config\n    ", "module_name": "get_sys_fpgafirmware_config", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/fpga/firmware-config", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_fpgafirmware_config.py#L18"}}, "/mgmt/tm/sys/fpga/info": {"bigip": {"class": "SysFpgaInfo", "doc": " To F5 resource for /mgmt/tm/sys/fpga/info\n    ", "module_name": "get_sys_fpgainfo", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/fpga/info", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_fpgainfo.py#L18"}}, "/mgmt/tm/sys/fpga/turboflex-profile": {"bigip": {"class": "SysFpgaTurboflexprofile", "doc": " To F5 resource for /mgmt/tm/sys/fpga/turboflex-profile\n    ", "module_name": "get_sys_fpgaturboflex_profile", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/fpga/turboflex-profile", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_fpgaturboflex_profile.py#L18"}}, "/mgmt/tm/sys/global-settings": {"bigip": {"class": "SysGlobalsettings", "doc": " To F5 resource for /mgmt/tm/sys/global-settings\n    ", "module_name": "get_sys_global_settings", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/global-settings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_global_settings.py#L18"}}, "/mgmt/tm/sys/ha-group": {"bigip": {"class": "SysHagroup", "doc": " To F5 resource for /mgmt/tm/sys/ha-group\n    ", "module_name": "get_sys_ha_group", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ha-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ha_group.py#L18"}}, "/mgmt/tm/sys/ha-mirror": {"bigip": {"class": "SysHamirror", "doc": " To F5 resource for /mgmt/tm/sys/ha-mirror\n    ", "module_name": "get_sys_ha_mirror", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ha-mirror", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ha_mirror.py#L18"}}, "/mgmt/tm/sys/ha-status": {"bigip": {"class": "SysHastatus", "doc": " To F5 resource for /mgmt/tm/sys/ha-status\n    ", "module_name": "get_sys_ha_status", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ha-status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ha_status.py#L18"}}, "/mgmt/tm/sys/hardware": {"bigip": {"class": "SysHardware", "doc": " To F5 resource for /mgmt/tm/sys/hardware\n    ", "module_name": "get_sys_hardware", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/hardware", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_hardware.py#L18"}}, "/mgmt/tm/sys/host-info": {"bigip": {"class": "SysHostinfo", "doc": " To F5 resource for /mgmt/tm/sys/host-info\n    ", "module_name": "get_sys_host_info", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/host-info", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_host_info.py#L18"}}, "/mgmt/tm/sys/httpd": {"bigip": {"class": "SysHttpd", "doc": " To F5 resource for /mgmt/tm/sys/httpd\n    ", "module_name": "get_sys_httpd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/httpd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_httpd.py#L18"}}, "/mgmt/tm/sys/hypervisor-info": {"bigip": {"class": "SysHypervisorinfo", "doc": " To F5 resource for /mgmt/tm/sys/hypervisor-info\n    ", "module_name": "get_sys_hypervisor_info", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/hypervisor-info", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_hypervisor_info.py#L18"}}, "/mgmt/tm/sys/icall": {"bigip": {"class": "SysIcall", "doc": " To F5 resource for /mgmt/tm/sys/icall\n    ", "module_name": "get_sys_icall", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/icall", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_icall.py#L18"}}, "/mgmt/tm/sys/icall/handler": {"bigip": {"class": "SysIcallHandler", "doc": " To F5 resource for /mgmt/tm/sys/icall/handler\n    ", "module_name": "get_sys_icallhandler", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/icall/handler", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_icallhandler.py#L18"}}, "/mgmt/tm/sys/icall/handler/periodic": {"bigip": {"class": "SysIcallPeriodic", "doc": " To F5 resource for /mgmt/tm/sys/icall/handler/periodic\n    ", "module_name": "get_sys_icallperiodic", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/icall/handler/periodic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_icallperiodic.py#L18"}}, "/mgmt/tm/sys/icall/handler/perpetual": {"bigip": {"class": "SysIcallPerpetual", "doc": " To F5 resource for /mgmt/tm/sys/icall/handler/perpetual\n    ", "module_name": "get_sys_icallperpetual", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/icall/handler/perpetual", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_icallperpetual.py#L18"}}, "/mgmt/tm/sys/icall/handler/triggered": {"bigip": {"class": "SysIcallTriggered", "doc": " To F5 resource for /mgmt/tm/sys/icall/handler/triggered\n    ", "module_name": "get_sys_icalltriggered", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/icall/handler/triggered", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_icalltriggered.py#L18"}}, "/mgmt/tm/sys/icall/istats-trigger": {"bigip": {"class": "SysIcallIstatstrigger", "doc": " To F5 resource for /mgmt/tm/sys/icall/istats-trigger\n    ", "module_name": "get_sys_icallistats_trigger", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/icall/istats-trigger", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_icallistats_trigger.py#L18"}}, "/mgmt/tm/sys/icall/publisher": {"bigip": {"class": "SysIcallPublisher", "doc": " To F5 resource for /mgmt/tm/sys/icall/publisher\n    ", "module_name": "get_sys_icallpublisher", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/icall/publisher", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_icallpublisher.py#L18"}}, "/mgmt/tm/sys/icall/script": {"bigip": {"class": "SysIcallScript", "doc": " To F5 resource for /mgmt/tm/sys/icall/script\n    ", "module_name": "get_sys_icallscript", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/icall/script", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_icallscript.py#L18"}}, "/mgmt/tm/sys/icmp-stat": {"bigip": {"class": "SysIcmpstat", "doc": " To F5 resource for /mgmt/tm/sys/icmp-stat\n    ", "module_name": "get_sys_icmp_stat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/icmp-stat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_icmp_stat.py#L18"}}, "/mgmt/tm/sys/icontrol-soap": {"bigip": {"class": "SysIcontrolsoap", "doc": " To F5 resource for /mgmt/tm/sys/icontrol-soap\n    ", "module_name": "get_sys_icontrol_soap", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/icontrol-soap", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_icontrol_soap.py#L18"}}, "/mgmt/tm/sys/internal-proxy": {"bigip": {"class": "SysInternalproxy", "doc": " To F5 resource for /mgmt/tm/sys/internal-proxy\n    ", "module_name": "get_sys_internal_proxy", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/internal-proxy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_internal_proxy.py#L18"}}, "/mgmt/tm/sys/ip-address": {"bigip": {"class": "SysIpaddress", "doc": " To F5 resource for /mgmt/tm/sys/ip-address\n    ", "module_name": "get_sys_ip_address", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ip-address", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ip_address.py#L18"}}, "/mgmt/tm/sys/ip-stat": {"bigip": {"class": "SysIpstat", "doc": " To F5 resource for /mgmt/tm/sys/ip-stat\n    ", "module_name": "get_sys_ip_stat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ip-stat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ip_stat.py#L18"}}, "/mgmt/tm/sys/ipfix": {"bigip": {"class": "SysIpfix", "doc": " To F5 resource for /mgmt/tm/sys/ipfix\n    ", "module_name": "get_sys_ipfix", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ipfix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ipfix.py#L18"}}, "/mgmt/tm/sys/ipfix/destination": {"bigip": {"class": "SysIpfixDestination", "doc": " To F5 resource for /mgmt/tm/sys/ipfix/destination\n    ", "module_name": "get_sys_ipfixdestination", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ipfix/destination", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ipfixdestination.py#L18"}}, "/mgmt/tm/sys/ipfix/element": {"bigip": {"class": "SysIpfixElement", "doc": " To F5 resource for /mgmt/tm/sys/ipfix/element\n    ", "module_name": "get_sys_ipfixelement", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ipfix/element", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ipfixelement.py#L18"}}, "/mgmt/tm/sys/ipfix/irules": {"bigip": {"class": "SysIpfixIrules", "doc": " To F5 resource for /mgmt/tm/sys/ipfix/irules\n    ", "module_name": "get_sys_ipfixirules", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ipfix/irules", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ipfixirules.py#L18"}}, "/mgmt/tm/sys/iprep-status": {"bigip": {"class": "SysIprepstatus", "doc": " To F5 resource for /mgmt/tm/sys/iprep-status\n    ", "module_name": "get_sys_iprep_status", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/iprep-status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_iprep_status.py#L18"}}, "/mgmt/tm/sys/license": {"bigip": {"class": "SysLicense", "doc": " To F5 resource for /mgmt/tm/sys/license\n    ", "module_name": "get_sys_license", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/license", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_license.py#L18"}}, "/mgmt/tm/sys/log": {"bigip": {"class": "SysLog", "doc": " To F5 resource for /mgmt/tm/sys/log\n    ", "module_name": "get_sys_log", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log.py#L18"}}, "/mgmt/tm/sys/log-config": {"bigip": {"class": "SysLogconfig", "doc": " To F5 resource for /mgmt/tm/sys/log-config\n    ", "module_name": "get_sys_log_config", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_config.py#L18"}}, "/mgmt/tm/sys/log-config/destination": {"bigip": {"class": "SysLogconfigDestination", "doc": " To F5 resource for /mgmt/tm/sys/log-config/destination\n    ", "module_name": "get_sys_log_configdestination", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/destination", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configdestination.py#L18"}}, "/mgmt/tm/sys/log-config/destination/alertd": {"bigip": {"class": "SysLogconfigAlertd", "doc": " To F5 resource for /mgmt/tm/sys/log-config/destination/alertd\n    ", "module_name": "get_sys_log_configalertd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/destination/alertd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configalertd.py#L18"}}, "/mgmt/tm/sys/log-config/destination/arcsight": {"bigip": {"class": "SysLogconfigArcsight", "doc": " To F5 resource for /mgmt/tm/sys/log-config/destination/arcsight\n    ", "module_name": "get_sys_log_configarcsight", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/destination/arcsight", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configarcsight.py#L18"}}, "/mgmt/tm/sys/log-config/destination/ipfix": {"bigip": {"class": "SysLogconfigIpfix", "doc": " To F5 resource for /mgmt/tm/sys/log-config/destination/ipfix\n    ", "module_name": "get_sys_log_configipfix", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/destination/ipfix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configipfix.py#L18"}}, "/mgmt/tm/sys/log-config/destination/local-database": {"bigip": {"class": "SysLogconfigLocaldatabase", "doc": " To F5 resource for /mgmt/tm/sys/log-config/destination/local-database\n    ", "module_name": "get_sys_log_configlocal_database", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/destination/local-database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configlocal_database.py#L18"}}, "/mgmt/tm/sys/log-config/destination/local-syslog": {"bigip": {"class": "SysLogconfigLocalsyslog", "doc": " To F5 resource for /mgmt/tm/sys/log-config/destination/local-syslog\n    ", "module_name": "get_sys_log_configlocal_syslog", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/destination/local-syslog", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configlocal_syslog.py#L18"}}, "/mgmt/tm/sys/log-config/destination/management-port": {"bigip": {"class": "SysLogconfigManagementport", "doc": " To F5 resource for /mgmt/tm/sys/log-config/destination/management-port\n    ", "module_name": "get_sys_log_configmanagement_port", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/destination/management-port", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configmanagement_port.py#L18"}}, "/mgmt/tm/sys/log-config/destination/remote-high-speed-log": {"bigip": {"class": "SysLogconfigRemotehighspeedlog", "doc": " To F5 resource for /mgmt/tm/sys/log-config/destination/remote-high-speed-log\n    ", "module_name": "get_sys_log_configremote_high_speed_log", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/destination/remote-high-speed-log", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configremote_high_speed_log.py#L18"}}, "/mgmt/tm/sys/log-config/destination/remote-syslog": {"bigip": {"class": "SysLogconfigRemotesyslog", "doc": " To F5 resource for /mgmt/tm/sys/log-config/destination/remote-syslog\n    ", "module_name": "get_sys_log_configremote_syslog", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/destination/remote-syslog", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configremote_syslog.py#L18"}}, "/mgmt/tm/sys/log-config/destination/splunk": {"bigip": {"class": "SysLogconfigSplunk", "doc": " To F5 resource for /mgmt/tm/sys/log-config/destination/splunk\n    ", "module_name": "get_sys_log_configsplunk", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/destination/splunk", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configsplunk.py#L18"}}, "/mgmt/tm/sys/log-config/filter": {"bigip": {"class": "SysLogconfigFilter", "doc": " To F5 resource for /mgmt/tm/sys/log-config/filter\n    ", "module_name": "get_sys_log_configfilter", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/filter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configfilter.py#L18"}}, "/mgmt/tm/sys/log-config/publisher": {"bigip": {"class": "SysLogconfigPublisher", "doc": " To F5 resource for /mgmt/tm/sys/log-config/publisher\n    ", "module_name": "get_sys_log_configpublisher", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-config/publisher", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_configpublisher.py#L18"}}, "/mgmt/tm/sys/log-rotate": {"bigip": {"class": "SysLogrotate", "doc": " To F5 resource for /mgmt/tm/sys/log-rotate\n    ", "module_name": "get_sys_log_rotate", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/log-rotate", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_log_rotate.py#L18"}}, "/mgmt/tm/sys/mac-address": {"bigip": {"class": "SysMacaddress", "doc": " To F5 resource for /mgmt/tm/sys/mac-address\n    ", "module_name": "get_sys_mac_address", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/mac-address", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_mac_address.py#L18"}}, "/mgmt/tm/sys/management-dhcp": {"bigip": {"class": "SysManagementdhcp", "doc": " To F5 resource for /mgmt/tm/sys/management-dhcp\n    ", "module_name": "get_sys_management_dhcp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/management-dhcp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_management_dhcp.py#L18"}}, "/mgmt/tm/sys/management-ip": {"bigip": {"class": "SysManagementip", "doc": " To F5 resource for /mgmt/tm/sys/management-ip\n    ", "module_name": "get_sys_management_ip", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/management-ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_management_ip.py#L18"}}, "/mgmt/tm/sys/management-ovsdb": {"bigip": {"class": "SysManagementovsdb", "doc": " To F5 resource for /mgmt/tm/sys/management-ovsdb\n    ", "module_name": "get_sys_management_ovsdb", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/management-ovsdb", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_management_ovsdb.py#L18"}}, "/mgmt/tm/sys/management-proxy-config": {"bigip": {"class": "SysManagementproxyconfig", "doc": " To F5 resource for /mgmt/tm/sys/management-proxy-config\n    ", "module_name": "get_sys_management_proxy_config", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/management-proxy-config", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_management_proxy_config.py#L18"}}, "/mgmt/tm/sys/management-route": {"bigip": {"class": "SysManagementroute", "doc": " To F5 resource for /mgmt/tm/sys/management-route\n    ", "module_name": "get_sys_management_route", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/management-route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_management_route.py#L18"}}, "/mgmt/tm/sys/mcp-state": {"bigip": {"class": "SysMcpstate", "doc": " To F5 resource for /mgmt/tm/sys/mcp-state\n    ", "module_name": "get_sys_mcp_state", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/mcp-state", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_mcp_state.py#L18"}}, "/mgmt/tm/sys/memory": {"bigip": {"class": "SysMemory", "doc": " To F5 resource for /mgmt/tm/sys/memory\n    ", "module_name": "get_sys_memory", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/memory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_memory.py#L18"}}, "/mgmt/tm/sys/nethsm": {"bigip": {"class": "SysNethsm", "doc": " To F5 resource for /mgmt/tm/sys/nethsm\n    ", "module_name": "get_sys_nethsm", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/nethsm", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_nethsm.py#L18"}}, "/mgmt/tm/sys/nethsm/async-queue-stat": {"bigip": {"class": "SysNethsmAsyncqueuestat", "doc": " To F5 resource for /mgmt/tm/sys/nethsm/async-queue-stat\n    ", "module_name": "get_sys_nethsmasync_queue_stat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/nethsm/async-queue-stat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_nethsmasync_queue_stat.py#L18"}}, "/mgmt/tm/sys/nethsm/pkcs11d-stat": {"bigip": {"class": "SysNethsmPkcs11dstat", "doc": " To F5 resource for /mgmt/tm/sys/nethsm/pkcs11d-stat\n    ", "module_name": "get_sys_nethsmpkcs11d_stat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/nethsm/pkcs11d-stat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_nethsmpkcs11d_stat.py#L18"}}, "/mgmt/tm/sys/nethsm/sync-queue-stat": {"bigip": {"class": "SysNethsmSyncqueuestat", "doc": " To F5 resource for /mgmt/tm/sys/nethsm/sync-queue-stat\n    ", "module_name": "get_sys_nethsmsync_queue_stat", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/nethsm/sync-queue-stat", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_nethsmsync_queue_stat.py#L18"}}, "/mgmt/tm/sys/ntp": {"bigip": {"class": "SysNtp", "doc": " To F5 resource for /mgmt/tm/sys/ntp\n    ", "module_name": "get_sys_ntp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ntp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ntp.py#L18"}}, "/mgmt/tm/sys/outbound-smtp": {"bigip": {"class": "SysOutboundsmtp", "doc": " To F5 resource for /mgmt/tm/sys/outbound-smtp\n    ", "module_name": "get_sys_outbound_smtp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/outbound-smtp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_outbound_smtp.py#L18"}}, "/mgmt/tm/sys/performance": {"bigip": {"class": "SysPerformance", "doc": " To F5 resource for /mgmt/tm/sys/performance\n    ", "module_name": "get_sys_performance", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/performance", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_performance.py#L18"}}, "/mgmt/tm/sys/performance/all-stats": {"bigip": {"class": "SysPerformanceAllstats", "doc": " To F5 resource for /mgmt/tm/sys/performance/all-stats\n    ", "module_name": "get_sys_performanceall_stats", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/performance/all-stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_performanceall_stats.py#L18"}}, "/mgmt/tm/sys/performance/connections": {"bigip": {"class": "SysPerformanceConnections", "doc": " To F5 resource for /mgmt/tm/sys/performance/connections\n    ", "module_name": "get_sys_performanceconnections", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/performance/connections", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_performanceconnections.py#L18"}}, "/mgmt/tm/sys/performance/dnsexpress": {"bigip": {"class": "SysPerformanceDnsexpress", "doc": " To F5 resource for /mgmt/tm/sys/performance/dnsexpress\n    ", "module_name": "get_sys_performancednsexpress", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/performance/dnsexpress", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_performancednsexpress.py#L18"}}, "/mgmt/tm/sys/performance/dnssec": {"bigip": {"class": "SysPerformanceDnssec", "doc": " To F5 resource for /mgmt/tm/sys/performance/dnssec\n    ", "module_name": "get_sys_performancednssec", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/performance/dnssec", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_performancednssec.py#L18"}}, "/mgmt/tm/sys/performance/gtm": {"bigip": {"class": "SysPerformanceGtm", "doc": " To F5 resource for /mgmt/tm/sys/performance/gtm\n    ", "module_name": "get_sys_performancegtm", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/performance/gtm", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_performancegtm.py#L18"}}, "/mgmt/tm/sys/performance/ramcache": {"bigip": {"class": "SysPerformanceRamcache", "doc": " To F5 resource for /mgmt/tm/sys/performance/ramcache\n    ", "module_name": "get_sys_performanceramcache", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/performance/ramcache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_performanceramcache.py#L18"}}, "/mgmt/tm/sys/performance/system": {"bigip": {"class": "SysPerformanceSystem", "doc": " To F5 resource for /mgmt/tm/sys/performance/system\n    ", "module_name": "get_sys_performancesystem", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/performance/system", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_performancesystem.py#L18"}}, "/mgmt/tm/sys/performance/throughput": {"bigip": {"class": "SysPerformanceThroughput", "doc": " To F5 resource for /mgmt/tm/sys/performance/throughput\n    ", "module_name": "get_sys_performancethroughput", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/performance/throughput", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_performancethroughput.py#L18"}}, "/mgmt/tm/sys/pfman": {"bigip": {"class": "SysPfman", "doc": " To F5 resource for /mgmt/tm/sys/pfman\n    ", "module_name": "get_sys_pfman", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/pfman", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_pfman.py#L18"}}, "/mgmt/tm/sys/pfman/consumer": {"bigip": {"class": "SysPfmanConsumer", "doc": " To F5 resource for /mgmt/tm/sys/pfman/consumer\n    ", "module_name": "get_sys_pfmanconsumer", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/pfman/consumer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_pfmanconsumer.py#L18"}}, "/mgmt/tm/sys/pfman/device": {"bigip": {"class": "SysPfmanDevice", "doc": " To F5 resource for /mgmt/tm/sys/pfman/device\n    ", "module_name": "get_sys_pfmandevice", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/pfman/device", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_pfmandevice.py#L18"}}, "/mgmt/tm/sys/pptp-call-info": {"bigip": {"class": "SysPptpcallinfo", "doc": " To F5 resource for /mgmt/tm/sys/pptp-call-info\n    ", "module_name": "get_sys_pptp_call_info", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/pptp-call-info", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_pptp_call_info.py#L18"}}, "/mgmt/tm/sys/proc-info": {"bigip": {"class": "SysProcinfo", "doc": " To F5 resource for /mgmt/tm/sys/proc-info\n    ", "module_name": "get_sys_proc_info", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/proc-info", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_proc_info.py#L18"}}, "/mgmt/tm/sys/provision": {"bigip": {"class": "SysProvision", "doc": " To F5 resource for /mgmt/tm/sys/provision\n    ", "module_name": "get_sys_provision", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/provision", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_provision.py#L18"}}, "/mgmt/tm/sys/pva-traffic": {"bigip": {"class": "SysPvatraffic", "doc": " To F5 resource for /mgmt/tm/sys/pva-traffic\n    ", "module_name": "get_sys_pva_traffic", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/pva-traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_pva_traffic.py#L18"}}, "/mgmt/tm/sys/raid": {"bigip": {"class": "SysRaid", "doc": " To F5 resource for /mgmt/tm/sys/raid\n    ", "module_name": "get_sys_raid", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/raid", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_raid.py#L18"}}, "/mgmt/tm/sys/raid/array": {"bigip": {"class": "SysRaidArray", "doc": " To F5 resource for /mgmt/tm/sys/raid/array\n    ", "module_name": "get_sys_raidarray", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/raid/array", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_raidarray.py#L18"}}, "/mgmt/tm/sys/raid/bay": {"bigip": {"class": "SysRaidBay", "doc": " To F5 resource for /mgmt/tm/sys/raid/bay\n    ", "module_name": "get_sys_raidbay", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/raid/bay", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_raidbay.py#L18"}}, "/mgmt/tm/sys/raid/disk": {"bigip": {"class": "SysRaidDisk", "doc": " To F5 resource for /mgmt/tm/sys/raid/disk\n    ", "module_name": "get_sys_raiddisk", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/raid/disk", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_raiddisk.py#L18"}}, "/mgmt/tm/sys/ready": {"bigip": {"class": "SysReady", "doc": " To F5 resource for /mgmt/tm/sys/ready\n    ", "module_name": "get_sys_ready", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ready", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ready.py#L18"}}, "/mgmt/tm/sys/scriptd": {"bigip": {"class": "SysScriptd", "doc": " To F5 resource for /mgmt/tm/sys/scriptd\n    ", "module_name": "get_sys_scriptd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/scriptd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_scriptd.py#L18"}}, "/mgmt/tm/sys/service": {"bigip": {"class": "SysService", "doc": " To F5 resource for /mgmt/tm/sys/service\n    ", "module_name": "get_sys_service", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/service", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_service.py#L18"}}, "/mgmt/tm/sys/sflow": {"bigip": {"class": "SysSflow", "doc": " To F5 resource for /mgmt/tm/sys/sflow\n    ", "module_name": "get_sys_sflow", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/sflow", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_sflow.py#L18"}}, "/mgmt/tm/sys/sflow/data-source": {"bigip": {"class": "SysSflowDatasource", "doc": " To F5 resource for /mgmt/tm/sys/sflow/data-source\n    ", "module_name": "get_sys_sflowdata_source", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/sflow/data-source", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_sflowdata_source.py#L18"}}, "/mgmt/tm/sys/sflow/data-source/http": {"bigip": {"class": "SysSflowHttp", "doc": " To F5 resource for /mgmt/tm/sys/sflow/data-source/http\n    ", "module_name": "get_sys_sflowhttp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/sflow/data-source/http", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_sflowhttp.py#L18"}}, "/mgmt/tm/sys/sflow/data-source/interface": {"bigip": {"class": "SysSflowInterface", "doc": " To F5 resource for /mgmt/tm/sys/sflow/data-source/interface\n    ", "module_name": "get_sys_sflowinterface", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/sflow/data-source/interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_sflowinterface.py#L18"}}, "/mgmt/tm/sys/sflow/data-source/system": {"bigip": {"class": "SysSflowSystem", "doc": " To F5 resource for /mgmt/tm/sys/sflow/data-source/system\n    ", "module_name": "get_sys_sflowsystem", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/sflow/data-source/system", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_sflowsystem.py#L18"}}, "/mgmt/tm/sys/sflow/global-settings": {"bigip": {"class": "SysSflowGlobalsettings", "doc": " To F5 resource for /mgmt/tm/sys/sflow/global-settings\n    ", "module_name": "get_sys_sflowglobal_settings", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/sflow/global-settings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_sflowglobal_settings.py#L18"}}, "/mgmt/tm/sys/sflow/global-settings/vlan": {"bigip": {"class": "SysSflowVlan", "doc": " To F5 resource for /mgmt/tm/sys/sflow/global-settings/vlan\n    ", "module_name": "get_sys_sflowvlan", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/sflow/global-settings/vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_sflowvlan.py#L18"}}, "/mgmt/tm/sys/sflow/receiver": {"bigip": {"class": "SysSflowReceiver", "doc": " To F5 resource for /mgmt/tm/sys/sflow/receiver\n    ", "module_name": "get_sys_sflowreceiver", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/sflow/receiver", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_sflowreceiver.py#L18"}}, "/mgmt/tm/sys/smtp-server": {"bigip": {"class": "SysSmtpserver", "doc": " To F5 resource for /mgmt/tm/sys/smtp-server\n    ", "module_name": "get_sys_smtp_server", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/smtp-server", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_smtp_server.py#L18"}}, "/mgmt/tm/sys/snmp": {"bigip": {"class": "SysSnmp", "doc": " To F5 resource for /mgmt/tm/sys/snmp\n    ", "module_name": "get_sys_snmp", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/snmp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_snmp.py#L18"}}, "/mgmt/tm/sys/software": {"bigip": {"class": "SysSoftware", "doc": " To F5 resource for /mgmt/tm/sys/software\n    ", "module_name": "get_sys_software", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/software", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_software.py#L18"}}, "/mgmt/tm/sys/software/block-device-hotfix": {"bigip": {"class": "SysSoftwareBlockdevicehotfix", "doc": " To F5 resource for /mgmt/tm/sys/software/block-device-hotfix\n    ", "module_name": "get_sys_softwareblock_device_hotfix", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/software/block-device-hotfix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_softwareblock_device_hotfix.py#L18"}}, "/mgmt/tm/sys/software/block-device-image": {"bigip": {"class": "SysSoftwareBlockdeviceimage", "doc": " To F5 resource for /mgmt/tm/sys/software/block-device-image\n    ", "module_name": "get_sys_softwareblock_device_image", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/software/block-device-image", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_softwareblock_device_image.py#L18"}}, "/mgmt/tm/sys/software/hotfix": {"bigip": {"class": "SysSoftwareHotfix", "doc": " To F5 resource for /mgmt/tm/sys/software/hotfix\n    ", "module_name": "get_sys_softwarehotfix", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/software/hotfix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_softwarehotfix.py#L18"}}, "/mgmt/tm/sys/software/image": {"bigip": {"class": "SysSoftwareImage", "doc": " To F5 resource for /mgmt/tm/sys/software/image\n    ", "module_name": "get_sys_softwareimage", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/software/image", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_softwareimage.py#L18"}}, "/mgmt/tm/sys/software/signature": {"bigip": {"class": "SysSoftwareSignature", "doc": " To F5 resource for /mgmt/tm/sys/software/signature\n    ", "module_name": "get_sys_softwaresignature", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/software/signature", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_softwaresignature.py#L18"}}, "/mgmt/tm/sys/software/status": {"bigip": {"class": "SysSoftwareStatus", "doc": " To F5 resource for /mgmt/tm/sys/software/status\n    ", "module_name": "get_sys_softwarestatus", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/software/status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_softwarestatus.py#L18"}}, "/mgmt/tm/sys/software/update": {"bigip": {"class": "SysSoftwareUpdate", "doc": " To F5 resource for /mgmt/tm/sys/software/update\n    ", "module_name": "get_sys_softwareupdate", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/software/update", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_softwareupdate.py#L18"}}, "/mgmt/tm/sys/software/update-status": {"bigip": {"class": "SysSoftwareUpdatestatus", "doc": " To F5 resource for /mgmt/tm/sys/software/update-status\n    ", "module_name": "get_sys_softwareupdate_status", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/software/update-status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_softwareupdate_status.py#L18"}}, "/mgmt/tm/sys/software/volume": {"bigip": {"class": "SysSoftwareVolume", "doc": " To F5 resource for /mgmt/tm/sys/software/volume\n    ", "module_name": "get_sys_softwarevolume", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/software/volume", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_softwarevolume.py#L18"}}, "/mgmt/tm/sys/sshd": {"bigip": {"class": "SysSshd", "doc": " To F5 resource for /mgmt/tm/sys/sshd\n    ", "module_name": "get_sys_sshd", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/sshd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_sshd.py#L18"}}, "/mgmt/tm/sys/state-mirroring": {"bigip": {"class": "SysStatemirroring", "doc": " To F5 resource for /mgmt/tm/sys/state-mirroring\n    ", "module_name": "get_sys_state_mirroring", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/state-mirroring", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_state_mirroring.py#L18"}}, "/mgmt/tm/sys/sync-sys-files": {"bigip": {"class": "SysSyncsysfiles", "doc": " To F5 resource for /mgmt/tm/sys/sync-sys-files\n    ", "module_name": "get_sys_sync_sys_files", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/sync-sys-files", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_sync_sys_files.py#L18"}}, "/mgmt/tm/sys/syslog": {"bigip": {"class": "SysSyslog", "doc": " To F5 resource for /mgmt/tm/sys/syslog\n    ", "module_name": "get_sys_syslog", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/syslog", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_syslog.py#L18"}}, "/mgmt/tm/sys/tmm-info": {"bigip": {"class": "SysTmminfo", "doc": " To F5 resource for /mgmt/tm/sys/tmm-info\n    ", "module_name": "get_sys_tmm_info", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/tmm-info", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_tmm_info.py#L18"}}, "/mgmt/tm/sys/tmm-traffic": {"bigip": {"class": "SysTmmtraffic", "doc": " To F5 resource for /mgmt/tm/sys/tmm-traffic\n    ", "module_name": "get_sys_tmm_traffic", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/tmm-traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_tmm_traffic.py#L18"}}, "/mgmt/tm/sys/traffic": {"bigip": {"class": "SysTraffic", "doc": " To F5 resource for /mgmt/tm/sys/traffic\n    ", "module_name": "get_sys_traffic", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_traffic.py#L18"}}, "/mgmt/tm/sys/turboflex": {"bigip": {"class": "SysTurboflex", "doc": " To F5 resource for /mgmt/tm/sys/turboflex\n    ", "module_name": "get_sys_turboflex", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/turboflex", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_turboflex.py#L18"}}, "/mgmt/tm/sys/turboflex/features": {"bigip": {"class": "SysTurboflexFeatures", "doc": " To F5 resource for /mgmt/tm/sys/turboflex/features\n    ", "module_name": "get_sys_turboflexfeatures", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/turboflex/features", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_turboflexfeatures.py#L18"}}, "/mgmt/tm/sys/turboflex/profile": {"bigip": {"class": "SysTurboflexProfile", "doc": " To F5 resource for /mgmt/tm/sys/turboflex/profile\n    ", "module_name": "get_sys_turboflexprofile", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/turboflex/profile", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_turboflexprofile.py#L18"}}, "/mgmt/tm/sys/turboflex/profile-config": {"bigip": {"class": "SysTurboflexProfileconfig", "doc": " To F5 resource for /mgmt/tm/sys/turboflex/profile-config\n    ", "module_name": "get_sys_turboflexprofile_config", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/turboflex/profile-config", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_turboflexprofile_config.py#L18"}}, "/mgmt/tm/sys/turboflex/profile/all": {"bigip": {"class": "SysTurboflexAll", "doc": " To F5 resource for /mgmt/tm/sys/turboflex/profile/all\n    ", "module_name": "get_sys_turboflexall", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/turboflex/profile/all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_turboflexall.py#L18"}}, "/mgmt/tm/sys/turboflex/profile/feature": {"bigip": {"class": "SysTurboflexFeature", "doc": " To F5 resource for /mgmt/tm/sys/turboflex/profile/feature\n    ", "module_name": "get_sys_turboflexfeature", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/turboflex/profile/feature", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_turboflexfeature.py#L18"}}, "/mgmt/tm/sys/turboflex/warning": {"bigip": {"class": "SysTurboflexWarning", "doc": " To F5 resource for /mgmt/tm/sys/turboflex/warning\n    ", "module_name": "get_sys_turboflexwarning", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/turboflex/warning", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_turboflexwarning.py#L18"}}, "/mgmt/tm/sys/ucs": {"bigip": {"class": "SysUcs", "doc": " To F5 resource for /mgmt/tm/sys/ucs\n    ", "module_name": "get_sys_ucs", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/ucs", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_ucs.py#L18"}}, "/mgmt/tm/sys/url-db": {"bigip": {"class": "SysUrldb", "doc": " To F5 resource for /mgmt/tm/sys/url-db\n    ", "module_name": "get_sys_url_db", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/url-db", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_url_db.py#L18"}}, "/mgmt/tm/sys/url-db/download-result": {"bigip": {"class": "SysUrldbDownloadresult", "doc": " To F5 resource for /mgmt/tm/sys/url-db/download-result\n    ", "module_name": "get_sys_url_dbdownload_result", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/url-db/download-result", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_url_dbdownload_result.py#L18"}}, "/mgmt/tm/sys/url-db/download-schedule": {"bigip": {"class": "SysUrldbDownloadschedule", "doc": " To F5 resource for /mgmt/tm/sys/url-db/download-schedule\n    ", "module_name": "get_sys_url_dbdownload_schedule", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/url-db/download-schedule", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_url_dbdownload_schedule.py#L18"}}, "/mgmt/tm/sys/url-db/url-category": {"bigip": {"class": "SysUrldbUrlcategory", "doc": " To F5 resource for /mgmt/tm/sys/url-db/url-category\n    ", "module_name": "get_sys_url_dburl_category", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/url-db/url-category", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_url_dburl_category.py#L18"}}, "/mgmt/tm/sys/version": {"bigip": {"class": "SysVersion", "doc": " To F5 resource for /mgmt/tm/sys/version\n    ", "module_name": "get_sys_version", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/sys/version", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_sys_version.py#L18"}}, "/mgmt/tm/wom/profile": {"bigip": {"class": "WomProfile", "doc": " To F5 resource for /mgmt/tm/wom/profile\n    ", "module_name": "get_wom_profile", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/wom/profile", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_wom_profile.py#L18"}}, "/mgmt/tm/wom/profile/isession": {"bigip": {"class": "WomProfileIsession", "doc": " To F5 resource for /mgmt/tm/wom/profile/isession\n    ", "module_name": "get_wom_profileisession", "package": "genie.libs.parser", "schema": "{\n}", "uid": "/mgmt/tm/wom/profile/isession", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/bigip/get_wom_profileisession.py#L18"}}, "admin show diag chassis": {"iosxr": {"class": "AdminShowDiagChassis", "doc": "Parser for admin show diag chassis", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) device_family: <class 'str'>,\nOptional  (str) device_series: <class 'str'>,\nOptional  (str) num_line_cards: <class 'int'>,\nOptional  (str) chassis_feature: <class 'str'>,\n'rack_num': <class 'int'>,\nOptional  (str) sn: <class 'str'>,\n'pid': <class 'str'>,\n'vid': <class 'str'>,\nOptional  (str) desc: <class 'str'>,\n'clei': <class 'str'>,\nOptional  (str) eci: <class 'str'>,\nOptional  (str) pca: <class 'str'>,\nOptional  (str) top_assy_num: <class 'str'>,\nOptional  (str) main: {\n  'board_type': <class 'str'>,\n  'part': <class 'str'>,\n  'dev': <class 'str'>,\n  'serial_number': <class 'str'>,\n  },\nOptional  (str) part_number: <class 'str'>,\nOptional  (str) part_revision: <class 'str'>,\nOptional  (str) hw_version: <class 'str'>,\nOptional  (str) top_assembly_block: {\n  'serial_number': <class 'str'>,\n  'part_number': <class 'str'>,\n  'part_revision': <class 'str'>,\n  'mfg_deviation': <class 'str'>,\n  'hw_version': <class 'str'>,\n  'mfg_bits': <class 'str'>,\n  },\n}", "uid": "admin_show_diag_chassis", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L835"}}, "dir": {"ios": {"c7600": {"class": "Dir", "doc": "\n    parser for command: dir\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  'dir': <class 'str'>,\n  Any  (str) *: {\n    'files': {\n      Any  (str) *: {\n        Optional  (str) index: <class 'str'>,\n        Optional  (str) permissions: <class 'str'>,\n        'size': <class 'str'>,\n        Optional  (str) last_modified_date: <class 'str'>,\n        },\n      },\n    Optional  (str) bytes_total: <class 'str'>,\n    Optional  (str) bytes_free: <class 'str'>,\n    },\n  },\n}", "uid": "dir", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py#L23"}, "cat6k": {"class": "Dir", "doc": "\n    Parser for command:\n        * dir\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  'dir': <class 'str'>,\n  Any  (str) *: {\n    'files': {\n      Any  (str) *: {\n        Optional  (str) index: <class 'str'>,\n        Optional  (str) permissions: <class 'str'>,\n        'size': <class 'str'>,\n        Optional  (str) last_modified_date: <class 'str'>,\n        },\n      },\n    Optional  (str) bytes_total: <class 'str'>,\n    Optional  (str) bytes_free: <class 'str'>,\n    },\n  },\n}", "uid": "dir", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py#L458"}, "class": "Dir", "doc": "Parser for dir\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  'dir': <class 'str'>,\n  Any  (str) *: {\n    'files': {\n      Any  (str) *: {\n        Optional  (str) index: <class 'str'>,\n        Optional  (str) permissions: <class 'str'>,\n        'size': <class 'str'>,\n        Optional  (str) last_modified_date: <class 'str'>,\n        },\n      },\n    Optional  (str) bytes_total: <class 'str'>,\n    Optional  (str) bytes_free: <class 'str'>,\n    },\n  },\n}", "uid": "dir", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L64"}, "iosxe": {"class": "Dir", "doc": "Parser for dir\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  'dir': <class 'str'>,\n  Any  (str) *: {\n    'files': {\n      Any  (str) *: {\n        Optional  (str) index: <class 'str'>,\n        Optional  (str) permissions: <class 'str'>,\n        'size': <class 'str'>,\n        Optional  (str) last_modified_date: <class 'str'>,\n        },\n      },\n    Optional  (str) bytes_total: <class 'str'>,\n    Optional  (str) bytes_free: <class 'str'>,\n    },\n  },\n}", "uid": "dir", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1149"}, "iosxr": {"class": "Dir", "doc": "Parser for dir", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  'dir_name': <class 'str'>,\n  'total_bytes': <class 'str'>,\n  'total_free_bytes': <class 'str'>,\n  Optional  (str) files: {\n    Any  (str) *: {\n      Optional  (str) size: <class 'str'>,\n      Optional  (str) date: <class 'str'>,\n      Optional  (str) permission: <class 'str'>,\n      Optional  (str) index: <class 'str'>,\n      Optional  (str) time: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "dir", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L1478"}, "nxos": {"class": "Dir", "doc": "Parser for dir", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'disk_used_space': <class 'str'>,\n'disk_free_space': <class 'str'>,\n'disk_total_space': <class 'str'>,\n'dir': <class 'str'>,\nOptional  (str) files: {\n  Any  (str) *: {\n    'size': <class 'str'>,\n    'date': <class 'str'>,\n    'time': <class 'str'>,\n    },\n  },\n}", "uid": "dir", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L1071"}}, "dir {directory}": {"ios": {"c7600": {"class": "Dir", "doc": "\n    parser for command: dir\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  'dir': <class 'str'>,\n  Any  (str) *: {\n    'files': {\n      Any  (str) *: {\n        Optional  (str) index: <class 'str'>,\n        Optional  (str) permissions: <class 'str'>,\n        'size': <class 'str'>,\n        Optional  (str) last_modified_date: <class 'str'>,\n        },\n      },\n    Optional  (str) bytes_total: <class 'str'>,\n    Optional  (str) bytes_free: <class 'str'>,\n    },\n  },\n}", "uid": "dir_directory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py#L23"}, "cat6k": {"class": "Dir", "doc": "\n    Parser for command:\n        * dir\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  'dir': <class 'str'>,\n  Any  (str) *: {\n    'files': {\n      Any  (str) *: {\n        Optional  (str) index: <class 'str'>,\n        Optional  (str) permissions: <class 'str'>,\n        'size': <class 'str'>,\n        Optional  (str) last_modified_date: <class 'str'>,\n        },\n      },\n    Optional  (str) bytes_total: <class 'str'>,\n    Optional  (str) bytes_free: <class 'str'>,\n    },\n  },\n}", "uid": "dir_directory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py#L458"}, "class": "Dir", "doc": "Parser for dir\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  'dir': <class 'str'>,\n  Any  (str) *: {\n    'files': {\n      Any  (str) *: {\n        Optional  (str) index: <class 'str'>,\n        Optional  (str) permissions: <class 'str'>,\n        'size': <class 'str'>,\n        Optional  (str) last_modified_date: <class 'str'>,\n        },\n      },\n    Optional  (str) bytes_total: <class 'str'>,\n    Optional  (str) bytes_free: <class 'str'>,\n    },\n  },\n}", "uid": "dir_directory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L64"}, "iosxe": {"class": "Dir", "doc": "Parser for dir\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  'dir': <class 'str'>,\n  Any  (str) *: {\n    'files': {\n      Any  (str) *: {\n        Optional  (str) index: <class 'str'>,\n        Optional  (str) permissions: <class 'str'>,\n        'size': <class 'str'>,\n        Optional  (str) last_modified_date: <class 'str'>,\n        },\n      },\n    Optional  (str) bytes_total: <class 'str'>,\n    Optional  (str) bytes_free: <class 'str'>,\n    },\n  },\n}", "uid": "dir_directory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1149"}, "iosxr": {"class": "Dir", "doc": "Parser for dir", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  'dir_name': <class 'str'>,\n  'total_bytes': <class 'str'>,\n  'total_free_bytes': <class 'str'>,\n  Optional  (str) files: {\n    Any  (str) *: {\n      Optional  (str) size: <class 'str'>,\n      Optional  (str) date: <class 'str'>,\n      Optional  (str) permission: <class 'str'>,\n      Optional  (str) index: <class 'str'>,\n      Optional  (str) time: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "dir_directory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L1478"}, "nxos": {"class": "Dir", "doc": "Parser for dir", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'disk_used_space': <class 'str'>,\n'disk_free_space': <class 'str'>,\n'disk_total_space': <class 'str'>,\n'dir': <class 'str'>,\nOptional  (str) files: {\n  Any  (str) *: {\n    'size': <class 'str'>,\n    'date': <class 'str'>,\n    'time': <class 'str'>,\n    },\n  },\n}", "uid": "dir_directory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L1071"}}, "file list": {"junos": {"class": "FileList", "doc": " Parser for:\n        * 'file list'\n        * 'file list {filename}'\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  Any  (str) *: {\n    Optional  (str) files: {\n      Any  (str) *: {\n        Optional  (str) path: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "file_list", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_platform.py#L45"}}, "file list {filename}": {"junos": {"class": "FileList", "doc": " Parser for:\n        * 'file list'\n        * 'file list {filename}'\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'dir': {\n  Any  (str) *: {\n    Optional  (str) files: {\n      Any  (str) *: {\n        Optional  (str) path: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "file_list_filename", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_platform.py#L45"}}, "ifconfig": {"linux": {"class": "Ifconfig", "doc": "Parser for ifconfig [<interface>]", "module_name": "ifconfig", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'interface': <class 'str'>,\n  'flags': <class 'str'>,\n  'mtu': <class 'int'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      'netmask': <class 'str'>,\n      'broadcast': <class 'str'>,\n      },\n    },\n  Optional  (str) ipv6: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      'prefixlen': <class 'int'>,\n      'scopeid': <class 'str'>,\n      },\n    },\n  'type': <class 'str'>,\n  Optional  (str) txqueuelen: <class 'int'>,\n  Optional  (str) mac: <class 'str'>,\n  'destription': <class 'str'>,\n  'counters': {\n    'rx_pkts': <class 'int'>,\n    'rx_bytes': <class 'int'>,\n    'rx_value': <class 'str'>,\n    'rx_errors': <class 'int'>,\n    'rx_dropped': <class 'int'>,\n    'rx_overruns': <class 'int'>,\n    'rx_frame': <class 'int'>,\n    'tx_pkts': <class 'int'>,\n    'tx_bytes': <class 'int'>,\n    'tx_value': <class 'str'>,\n    'tx_errors': <class 'int'>,\n    'tx_dropped': <class 'int'>,\n    'tx_overruns': <class 'int'>,\n    'tx_carrier': <class 'int'>,\n    'tx_collisions': <class 'int'>,\n    },\n  Optional  (str) device_interrupt: <class 'int'>,\n  Optional  (str) device_memory: <class 'str'>,\n  },\n}", "uid": "ifconfig", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/linux/ifconfig.py#L69"}}, "ifconfig {interface}": {"linux": {"class": "Ifconfig", "doc": "Parser for ifconfig [<interface>]", "module_name": "ifconfig", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'interface': <class 'str'>,\n  'flags': <class 'str'>,\n  'mtu': <class 'int'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      'netmask': <class 'str'>,\n      'broadcast': <class 'str'>,\n      },\n    },\n  Optional  (str) ipv6: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      'prefixlen': <class 'int'>,\n      'scopeid': <class 'str'>,\n      },\n    },\n  'type': <class 'str'>,\n  Optional  (str) txqueuelen: <class 'int'>,\n  Optional  (str) mac: <class 'str'>,\n  'destription': <class 'str'>,\n  'counters': {\n    'rx_pkts': <class 'int'>,\n    'rx_bytes': <class 'int'>,\n    'rx_value': <class 'str'>,\n    'rx_errors': <class 'int'>,\n    'rx_dropped': <class 'int'>,\n    'rx_overruns': <class 'int'>,\n    'rx_frame': <class 'int'>,\n    'tx_pkts': <class 'int'>,\n    'tx_bytes': <class 'int'>,\n    'tx_value': <class 'str'>,\n    'tx_errors': <class 'int'>,\n    'tx_dropped': <class 'int'>,\n    'tx_overruns': <class 'int'>,\n    'tx_carrier': <class 'int'>,\n    'tx_collisions': <class 'int'>,\n    },\n  Optional  (str) device_interrupt: <class 'int'>,\n  Optional  (str) device_memory: <class 'str'>,\n  },\n}", "uid": "ifconfig_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/linux/ifconfig.py#L69"}}, "ping {addr}": {"junos": {"class": "Ping", "doc": null, "module_name": "ping", "package": "genie.libs.parser", "schema": "{\n'ping': {\n  'address': <class 'str'>,\n  'source': <class 'str'>,\n  'data-bytes': <class 'int'>,\n  Optional  (str) result: Use  (function) <function PingSchema.validate_ping_result_list at 0x1093d5950>,\n  'statistics': {\n    'send': <class 'int'>,\n    'received': <class 'int'>,\n    'loss-rate': <class 'int'>,\n    Optional  (str) round-trip: {\n      'min': <class 'str'>,\n      'avg': <class 'str'>,\n      'max': <class 'str'>,\n      'stddev': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "ping_addr", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/ping.py#L85"}}, "ping {addr} count {count}": {"junos": {"class": "Ping", "doc": null, "module_name": "ping", "package": "genie.libs.parser", "schema": "{\n'ping': {\n  'address': <class 'str'>,\n  'source': <class 'str'>,\n  'data-bytes': <class 'int'>,\n  Optional  (str) result: Use  (function) <function PingSchema.validate_ping_result_list at 0x1093d5950>,\n  'statistics': {\n    'send': <class 'int'>,\n    'received': <class 'int'>,\n    'loss-rate': <class 'int'>,\n    Optional  (str) round-trip: {\n      'min': <class 'str'>,\n      'avg': <class 'str'>,\n      'max': <class 'str'>,\n      'stddev': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "ping_addr_count_count", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/ping.py#L85"}}, "ps -ef": {"linux": {"class": "Ps", "doc": " Parser for \"ps -ef\"", "module_name": "ps", "package": "genie.libs.parser", "schema": "{\n'pid': {\n  Any  (str) *: {\n    'uid': <class 'str'>,\n    'ppid': <class 'str'>,\n    'c': <class 'str'>,\n    'stime': <class 'str'>,\n    'tty': <class 'str'>,\n    'time': <class 'str'>,\n    'cmd': <class 'str'>,\n    },\n  },\n}", "uid": "ps_-ef", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/linux/ps.py#L41"}}, "ps -ef | grep {grep}": {"linux": {"class": "Ps", "doc": " Parser for \"ps -ef\"", "module_name": "ps", "package": "genie.libs.parser", "schema": "{\n'pid': {\n  Any  (str) *: {\n    'uid': <class 'str'>,\n    'ppid': <class 'str'>,\n    'c': <class 'str'>,\n    'stime': <class 'str'>,\n    'tty': <class 'str'>,\n    'time': <class 'str'>,\n    'cmd': <class 'str'>,\n    },\n  },\n}", "uid": "ps_-ef___grep_grep", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/linux/ps.py#L41"}}, "show access-lists": {"ios": {"class": "ShowAccessLists", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) lsap: <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            Optional  (str) dscp: <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) precedence_code: <class 'int'>,\n            Optional  (str) destination_network: {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'int'>,\n                },\n              },\n            Optional  (str) msg_type: <class 'str'>,\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_access-lists", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_acl.py#L9"}, "iosxe": {"class": "ShowAccessLists", "doc": "Parser for show access-lists\n                  show access-lists <acl>", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) lsap: <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            Optional  (str) dscp: <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) precedence_code: <class 'int'>,\n            Optional  (str) destination_network: {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'int'>,\n                },\n              },\n            Optional  (str) msg_type: <class 'str'>,\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_access-lists", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L120"}, "nxos": {"class": "ShowAccessLists", "doc": " Parser for\n        'show access-lists'\n        'show access-lists {acl}'\n    ", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) mac_protocol_number: <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) precedence_code: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_access-lists", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_acl.py#L118"}}, "show access-lists afi-all": {"iosxr": {"class": "ShowAclAfiAll", "doc": "Parser for\n        'show access-lists afi-all'\n    ", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            },\n          },\n        Optional  (str) l3: {\n          Optional  (str) ipv4: {\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            'destination_ipv4_network': {\n              Any  (str) *: {\n                'destination_ipv4_network': <class 'str'>,\n                },\n              },\n            'source_ipv4_network': {\n              Any  (str) *: {\n                'source_ipv4_network': <class 'str'>,\n                },\n              },\n            },\n          Optional  (str) ipv6: {\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            'destination_ipv6_network': {\n              Any  (str) *: {\n                'destination_ipv6_network': <class 'str'>,\n                },\n              },\n            'source_ipv6_network': {\n              Any  (str) *: {\n                'source_ipv6_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source-port: {\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_access-lists_afi-all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_acl.py#L104"}}, "show access-lists ethernet-services": {"iosxr": {"class": "ShowAclEthernetServices", "doc": "Parser for:\n        'show access-lists ethernet-services'\n    ", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            },\n          },\n        Optional  (str) l3: {\n          Optional  (str) ipv4: {\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            'destination_ipv4_network': {\n              Any  (str) *: {\n                'destination_ipv4_network': <class 'str'>,\n                },\n              },\n            'source_ipv4_network': {\n              Any  (str) *: {\n                'source_ipv4_network': <class 'str'>,\n                },\n              },\n            },\n          Optional  (str) ipv6: {\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            'destination_ipv6_network': {\n              Any  (str) *: {\n                'destination_ipv6_network': <class 'str'>,\n                },\n              },\n            'source_ipv6_network': {\n              Any  (str) *: {\n                'source_ipv6_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source-port: {\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_access-lists_ethernet-services", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_acl.py#L218"}}, "show access-lists summary": {"nxos": {"class": "ShowAccessListsSummary", "doc": " Parser for\n        'show access-lists summary'\n    ", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\n'acl': {\n  Any  (str) *: {\n    'total_aces_configured': <class 'int'>,\n    },\n  },\n'attachment_points': {\n  Any  (str) *: {\n    'interface_id': <class 'str'>,\n    Optional  (str) ingress: {\n      Any  (str) *: {\n        'name': <class 'str'>,\n        'type': <class 'str'>,\n        'active': <class 'bool'>,\n        'total_aces_configured': <class 'int'>,\n        },\n      },\n    Optional  (str) egress: {\n      Any  (str) *: {\n        'name': <class 'str'>,\n        'type': <class 'str'>,\n        'active': <class 'bool'>,\n        'total_aces_configured': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_access-lists_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_acl.py#L350"}}, "show access-lists {acl}": {"ios": {"class": "ShowAccessLists", "doc": "Parser for show access-lists\n                  show ip access-lists\n                  show ip access-lists <acl>\n                  show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) lsap: <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            Optional  (str) dscp: <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) precedence_code: <class 'int'>,\n            Optional  (str) destination_network: {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'int'>,\n                },\n              },\n            Optional  (str) msg_type: <class 'str'>,\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_access-lists_acl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_acl.py#L9"}, "iosxe": {"class": "ShowAccessLists", "doc": "Parser for show access-lists\n                  show access-lists <acl>", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) lsap: <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            Optional  (str) dscp: <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) precedence_code: <class 'int'>,\n            Optional  (str) destination_network: {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'int'>,\n                },\n              },\n            Optional  (str) msg_type: <class 'str'>,\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_access-lists_acl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L120"}, "nxos": {"class": "ShowAccessLists", "doc": " Parser for\n        'show access-lists'\n        'show access-lists {acl}'\n    ", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) mac_protocol_number: <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            'protocol': <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) precedence_code: <class 'int'>,\n            'destination_network': {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source_port: {\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_access-lists_acl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_acl.py#L118"}}, "show access-session": {"ios": {"class": "ShowAccessSession", "doc": "Parser for show access-session", "module_name": "show_access_session", "package": "genie.libs.parser", "schema": "{\n'session_count': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'client': {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'method': <class 'str'>,\n        'domain': <class 'str'>,\n        'status': <class 'str'>,\n        'session': {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_access-session", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_access_session.py#L19"}, "iosxe": {"class": "ShowAccessSession", "doc": "Parser for show access-session", "module_name": "show_access_session", "package": "genie.libs.parser", "schema": "{\n'session_count': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'client': {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'method': <class 'str'>,\n        'domain': <class 'str'>,\n        'status': <class 'str'>,\n        'session': {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_access-session", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_access_session.py#L54"}}, "show access-session interface {interface} details": {"ios": {"class": "ShowAccessSessionInterfaceDetails", "doc": "\n        Parser for the following show commands:\n            * show access-session interface {interface} details\n    ", "module_name": "show_access_session", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        Optional  (str) iif_id: <class 'str'>,\n        Optional  (str) ipv6_address: <class 'str'>,\n        'ipv4_address': <class 'str'>,\n        Optional  (str) user_name: <class 'str'>,\n        Optional  (str) periodic_acct_timeout: <class 'str'>,\n        Optional  (str) timeout_action: <class 'str'>,\n        Optional  (str) restart_timeout: <class 'str'>,\n        Optional  (str) session_uptime: <class 'str'>,\n        'status': <class 'str'>,\n        'domain': <class 'str'>,\n        'oper_host_mode': <class 'str'>,\n        'oper_control_dir': <class 'str'>,\n        Optional  (str) authorized_by: <class 'str'>,\n        Optional  (str) vlan_policy: <class 'str'>,\n        'session_timeout': {\n          'type': <class 'str'>,\n          Optional  (str) timeout: <class 'str'>,\n          Optional  (str) remaining: <class 'str'>,\n          },\n        'common_session_id': <class 'str'>,\n        'acct_session_id': <class 'str'>,\n        'handle': <class 'str'>,\n        Optional  (str) idle_timeout: <class 'str'>,\n        Optional  (str) current_policy: <class 'str'>,\n        Optional  (str) server_policies: {\n          Any  (str) *: {\n            Optional  (str) name: <class 'str'>,\n            Optional  (str) policies: <class 'str'>,\n            Optional  (str) security_policy: <class 'str'>,\n            Optional  (str) security_status: <class 'str'>,\n            },\n          },\n        Optional  (str) local_policies: {\n          Optional  (str) template: {\n            Any  (str) *: {\n              'priority': <class 'int'>,\n              },\n            },\n          Optional  (str) vlan_group: {\n            'vlan': <class 'int'>,\n            },\n          Optional  (str) security_policy: <class 'str'>,\n          Optional  (str) security_status: <class 'str'>,\n          },\n        Optional  (str) method_status: {\n          Any  (str) *: {\n            'method': <class 'str'>,\n            'state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_access-session_interface_interface_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_access_session.py#L23"}, "iosxe": {"class": "ShowAccessSessionInterfaceDetails", "doc": "\n        Parser for the following show commands:\n            * show access-session interface {interface} details\n    ", "module_name": "show_access_session", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        Optional  (str) iif_id: <class 'str'>,\n        Optional  (str) ipv6_address: <class 'str'>,\n        'ipv4_address': <class 'str'>,\n        Optional  (str) user_name: <class 'str'>,\n        Optional  (str) periodic_acct_timeout: <class 'str'>,\n        Optional  (str) timeout_action: <class 'str'>,\n        Optional  (str) restart_timeout: <class 'str'>,\n        Optional  (str) session_uptime: <class 'str'>,\n        'status': <class 'str'>,\n        'domain': <class 'str'>,\n        'oper_host_mode': <class 'str'>,\n        'oper_control_dir': <class 'str'>,\n        Optional  (str) authorized_by: <class 'str'>,\n        Optional  (str) vlan_policy: <class 'str'>,\n        'session_timeout': {\n          'type': <class 'str'>,\n          Optional  (str) timeout: <class 'str'>,\n          Optional  (str) remaining: <class 'str'>,\n          },\n        'common_session_id': <class 'str'>,\n        'acct_session_id': <class 'str'>,\n        'handle': <class 'str'>,\n        Optional  (str) idle_timeout: <class 'str'>,\n        Optional  (str) current_policy: <class 'str'>,\n        Optional  (str) server_policies: {\n          Any  (str) *: {\n            Optional  (str) name: <class 'str'>,\n            Optional  (str) policies: <class 'str'>,\n            Optional  (str) security_policy: <class 'str'>,\n            Optional  (str) security_status: <class 'str'>,\n            },\n          },\n        Optional  (str) local_policies: {\n          Optional  (str) template: {\n            Any  (str) *: {\n              'priority': <class 'int'>,\n              },\n            },\n          Optional  (str) vlan_group: {\n            'vlan': <class 'int'>,\n            },\n          Optional  (str) security_policy: <class 'str'>,\n          Optional  (str) security_status: <class 'str'>,\n          },\n        Optional  (str) method_status: {\n          Any  (str) *: {\n            'method': <class 'str'>,\n            'state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_access-session_interface_interface_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_access_session.py#L113"}}, "show archive": {"ios": {"class": "ShowArchive", "doc": " Parser for show archive ", "module_name": "show_archive", "package": "genie.libs.parser", "schema": "{\n'archive': {\n  'total': <class 'int'>,\n  Optional  (str) max_archive_configurations: <class 'int'>,\n  'most_recent_file': <class 'str'>,\n  Any  (str) *: {\n    'file': <class 'str'>,\n    },\n  },\n}", "uid": "show_archive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py#L12"}, "iosxe": {"class": "ShowArchive", "doc": " Parser for show archive ", "module_name": "show_archive", "package": "genie.libs.parser", "schema": "{\n'archive': {\n  'total': <class 'int'>,\n  Optional  (str) max_archive_configurations: <class 'int'>,\n  'most_recent_file': <class 'str'>,\n  Any  (str) *: {\n    'file': <class 'str'>,\n    },\n  },\n}", "uid": "show_archive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py#L38"}}, "show archive config differences": {"ios": {"class": "ShowArchiveConfigDifferences", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "module_name": "show_archive", "package": "genie.libs.parser", "schema": "{\nOptional  (str) diff: <class 'list'>,\nOptional  (str) list_of_commands: <class 'list'>,\n}", "uid": "show_archive_config_differences", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py#L16"}, "iosxe": {"class": "ShowArchiveConfigDifferences", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "module_name": "show_archive", "package": "genie.libs.parser", "schema": "{\nOptional  (str) diff: <class 'list'>,\nOptional  (str) list_of_commands: <class 'list'>,\n}", "uid": "show_archive_config_differences", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py#L115"}}, "show archive config differences {fileA}": {"ios": {"class": "ShowArchiveConfigDifferences", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "module_name": "show_archive", "package": "genie.libs.parser", "schema": "{\nOptional  (str) diff: <class 'list'>,\nOptional  (str) list_of_commands: <class 'list'>,\n}", "uid": "show_archive_config_differences_fileA", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py#L16"}, "iosxe": {"class": "ShowArchiveConfigDifferences", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "module_name": "show_archive", "package": "genie.libs.parser", "schema": "{\nOptional  (str) diff: <class 'list'>,\nOptional  (str) list_of_commands: <class 'list'>,\n}", "uid": "show_archive_config_differences_fileA", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py#L115"}}, "show archive config differences {fileA} {fileB}": {"ios": {"class": "ShowArchiveConfigDifferences", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "module_name": "show_archive", "package": "genie.libs.parser", "schema": "{\nOptional  (str) diff: <class 'list'>,\nOptional  (str) list_of_commands: <class 'list'>,\n}", "uid": "show_archive_config_differences_fileA_fileB", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py#L16"}, "iosxe": {"class": "ShowArchiveConfigDifferences", "doc": " Parser for the following commands:\n        * show archive config differences\n        * show archive config differences {fileA} {fileB}\n        * show archive config differences {fileA}\n    ", "module_name": "show_archive", "package": "genie.libs.parser", "schema": "{\nOptional  (str) diff: <class 'list'>,\nOptional  (str) list_of_commands: <class 'list'>,\n}", "uid": "show_archive_config_differences_fileA_fileB", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py#L115"}}, "show archive config incremental-diffs {fileA}": {"ios": {"class": "ShowArchiveConfigIncrementalDiffs", "doc": " Parser for show archive config incremental-diffs <fileA>", "module_name": "show_archive", "package": "genie.libs.parser", "schema": "{\nOptional  (str) diff: <class 'list'>,\nOptional  (str) list_of_commands: <class 'list'>,\n}", "uid": "show_archive_config_incremental-diffs_fileA", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_archive.py#L24"}, "iosxe": {"class": "ShowArchiveConfigIncrementalDiffs", "doc": " Parser for show archive config incremental-diffs <fileA>", "module_name": "show_archive", "package": "genie.libs.parser", "schema": "{\nOptional  (str) diff: <class 'list'>,\nOptional  (str) list_of_commands: <class 'list'>,\n}", "uid": "show_archive_config_incremental-diffs_fileA", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_archive.py#L216"}}, "show arp": {"asa": {"class": "ShowArp", "doc": "Parser for\n        * show arp\n    ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'ipv4': {\n    'neighbors': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) prefix_length: <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_arp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_arp.py#L40"}, "ios": {"class": "ShowArp", "doc": " Parser for show arp", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_arp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L62"}, "iosxe": {"class": "ShowArp", "doc": " Parser for show arp\n                  show arp <WROD>\n                  show arp vrf <vrf>\n                  show arp vrf <vrf> <WROD> ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_arp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L67"}, "junos": {"class": "ShowArp", "doc": " Parser for:\n            * show arp\n    ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'arp-table-information': {\n  'arp-entry-count': <class 'str'>,\n  'arp-table-entry': Use  (function) <function ShowArpSchema.validate_arp_table_entry_list at 0x1095da598>,\n  },\n}", "uid": "show_arp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_arp.py#L60"}}, "show arp application": {"ios": {"class": "ShowArpApplication", "doc": "Parser for show arp application", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'num_of_clients_registered': <class 'int'>,\n'applications': {\n  Any  (str) *: {\n    'id': <class 'int'>,\n    'num_of_subblocks': <class 'int'>,\n    },\n  },\n}", "uid": "show_arp_application", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L66"}, "iosxe": {"class": "ShowArpApplication", "doc": "\n    Parser for show arp application\n    ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'num_of_clients_registered': <class 'int'>,\n'applications': {\n  Any  (str) *: {\n    'id': <class 'int'>,\n    'num_of_subblocks': <class 'int'>,\n    },\n  },\n}", "uid": "show_arp_application", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L1209"}}, "show arp detail": {"iosxr": {"class": "ShowArpDetail", "doc": "Parser for:\n        show arp detail\n        show arp vrf <WORD> detail\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_arp_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_arp.py#L51"}}, "show arp summary": {"ios": {"class": "ShowArpSummary", "doc": " Parser for 'show arp summary'", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'total_num_of_entries': {\n  Any  (str) *: <class 'int'>,\n  },\n'interface_entries': {\n  Any  (str) *: <class 'int'>,\n  },\nOptional  (str) maximum_entries: {\n  Any  (str) *: <class 'int'>,\n  },\nOptional  (str) arp_entry_threshold: <class 'int'>,\nOptional  (str) permit_threshold: <class 'int'>,\n}", "uid": "show_arp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L70"}, "iosxe": {"class": "ShowArpSummary", "doc": " Parser for 'show arp summary'", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'total_num_of_entries': {\n  Any  (str) *: <class 'int'>,\n  },\n'interface_entries': {\n  Any  (str) *: <class 'int'>,\n  },\nOptional  (str) maximum_entries: {\n  Any  (str) *: <class 'int'>,\n  },\nOptional  (str) arp_entry_threshold: <class 'int'>,\nOptional  (str) permit_threshold: <class 'int'>,\n}", "uid": "show_arp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L1276"}}, "show arp traffic detail": {"iosxr": {"class": "ShowArpTrafficDetail", "doc": " Parser for show arp traffic detail ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'statistics': {\n    'in_requests_pkts': <class 'int'>,\n    'in_replies_pkts': <class 'int'>,\n    'out_requests_pkts': <class 'int'>,\n    'out_replies_pkts': <class 'int'>,\n    'out_gratuitous_pkts': <class 'int'>,\n    'out_proxy': <class 'int'>,\n    'out_local_proxy': <class 'int'>,\n    'subscriber_intf_requests': <class 'int'>,\n    'subscriber_intf_replies': <class 'int'>,\n    'subscriber_intf_gratuitous': <class 'int'>,\n    'resolve_rcvd_requests': <class 'int'>,\n    'resolve_dropped_requests': <class 'int'>,\n    'out_of_memory_errors': <class 'int'>,\n    'no_buffers_errors': <class 'int'>,\n    'out_of_subnet_errors': <class 'int'>,\n    Optional  (str) unsolicited: <class 'int'>,\n    },\n  'cache': {\n    'total_arp_entries': <class 'int'>,\n    'dynamic': <class 'int'>,\n    'interface': <class 'int'>,\n    'standby': <class 'int'>,\n    'alias': <class 'int'>,\n    'static': <class 'int'>,\n    'dhcp': <class 'int'>,\n    Optional  (str) drop_adj: <class 'int'>,\n    'ip_packet_drop_count': <class 'int'>,\n    'total_arp_idb': <class 'int'>,\n    },\n  },\n}", "uid": "show_arp_traffic_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_arp.py#L149"}}, "show arp vrf {vrf}": {"ios": {"class": "ShowArp", "doc": " Parser for show arp", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_arp_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L62"}, "iosxe": {"class": "ShowArp", "doc": " Parser for show arp\n                  show arp <WROD>\n                  show arp vrf <vrf>\n                  show arp vrf <vrf> <WROD> ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_arp_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L67"}}, "show arp vrf {vrf} detail": {"iosxr": {"class": "ShowArpDetail", "doc": "Parser for:\n        show arp detail\n        show arp vrf <WORD> detail\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_arp_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_arp.py#L51"}}, "show arp vrf {vrf} {intf_or_ip}": {"ios": {"class": "ShowArp", "doc": " Parser for show arp", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_arp_vrf_vrf_intf_or_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L62"}, "iosxe": {"class": "ShowArp", "doc": " Parser for show arp\n                  show arp <WROD>\n                  show arp vrf <vrf>\n                  show arp vrf <vrf> <WROD> ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_arp_vrf_vrf_intf_or_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L67"}}, "show arp {intf_or_ip}": {"ios": {"class": "ShowArp", "doc": " Parser for show arp", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_arp_intf_or_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L62"}, "iosxe": {"class": "ShowArp", "doc": " Parser for show arp\n                  show arp <WROD>\n                  show arp vrf <vrf>\n                  show arp vrf <vrf> <WROD> ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_arp_intf_or_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L67"}}, "show arp | no-more": {"junos": {"class": "ShowArpNoMore", "doc": " Parser for:\n            * show arp | no-more\n    ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'arp-table-information': {\n  'arp-entry-count': <class 'str'>,\n  'arp-table-entry': Use  (function) <function ShowArpSchema.validate_arp_table_entry_list at 0x1095da598>,\n  },\n}", "uid": "show_arp___no-more", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_arp.py#L106"}}, "show asp drop": {"asa": {"class": "ShowAspDrop", "doc": "Parser for\n        * show asp drop\n    ", "module_name": "show_asp", "package": "genie.libs.parser", "schema": "{\n'frame_drop': {\n  Any  (str) *: <class 'int'>,\n  'last_clearing': <class 'str'>,\n  },\n'flow_drop': {\n  Any  (str) *: <class 'int'>,\n  'last_clearing': <class 'str'>,\n  },\n}", "uid": "show_asp_drop", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_asp.py#L37"}}, "show authentication sessions": {"ios": {"class": "ShowAuthenticationSessions", "doc": "\n\t\tIOS parsers for the following show commands:\n\t    \t\t* show authentication sessions\n\t", "module_name": "show_authentication_sessions", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'client': {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'method': <class 'str'>,\n        'domain': <class 'str'>,\n        'status': <class 'str'>,\n        'session': {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) session_count: <class 'int'>,\n}", "uid": "show_authentication_sessions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_authentication_sessions.py#L34"}, "iosxe": {"class": "ShowAuthenticationSessions", "doc": "Parser for 'show authentication sessions'\n                  'show authentication sessions interface {interface}''\n    ", "module_name": "show_authentication_sessions", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'client': {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'method': <class 'str'>,\n        'domain': <class 'str'>,\n        'status': <class 'str'>,\n        'session': {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) session_count: <class 'int'>,\n}", "uid": "show_authentication_sessions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_authentication_sessions.py#L66"}}, "show authentication sessions interface {interface}": {"ios": {"class": "ShowAuthenticationSessions", "doc": "\n\t\tIOS parsers for the following show commands:\n\t    \t\t* show authentication sessions\n\t", "module_name": "show_authentication_sessions", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'client': {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'method': <class 'str'>,\n        'domain': <class 'str'>,\n        'status': <class 'str'>,\n        'session': {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) session_count: <class 'int'>,\n}", "uid": "show_authentication_sessions_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_authentication_sessions.py#L34"}, "iosxe": {"class": "ShowAuthenticationSessions", "doc": "Parser for 'show authentication sessions'\n                  'show authentication sessions interface {interface}''\n    ", "module_name": "show_authentication_sessions", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'client': {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'method': <class 'str'>,\n        'domain': <class 'str'>,\n        'status': <class 'str'>,\n        'session': {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) session_count: <class 'int'>,\n}", "uid": "show_authentication_sessions_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_authentication_sessions.py#L66"}}, "show authentication sessions interface {interface} details": {"ios": {"class": "ShowAuthenticationSessionsInterface", "doc": "\n\t\tIOS parsers for the following show commands:\n\t    \t* show authentication sessions interface {interfaces}\n\t", "module_name": "show_authentication_sessions", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        Optional  (str) iif_id: <class 'str'>,\n        Optional  (str) ipv6_address: <class 'str'>,\n        'ipv4_address': <class 'str'>,\n        Optional  (str) user_name: <class 'str'>,\n        Optional  (str) periodic_acct_timeout: <class 'str'>,\n        Optional  (str) timeout_action: <class 'str'>,\n        Optional  (str) restart_timeout: <class 'str'>,\n        Optional  (str) session_uptime: <class 'str'>,\n        'status': <class 'str'>,\n        'domain': <class 'str'>,\n        'oper_host_mode': <class 'str'>,\n        'oper_control_dir': <class 'str'>,\n        Optional  (str) authorized_by: <class 'str'>,\n        Optional  (str) vlan_policy: <class 'str'>,\n        'session_timeout': {\n          'type': <class 'str'>,\n          Optional  (str) timeout: <class 'str'>,\n          Optional  (str) remaining: <class 'str'>,\n          },\n        'common_session_id': <class 'str'>,\n        'acct_session_id': <class 'str'>,\n        'handle': <class 'str'>,\n        Optional  (str) idle_timeout: <class 'str'>,\n        Optional  (str) current_policy: <class 'str'>,\n        Optional  (str) server_policies: {\n          Any  (str) *: {\n            Optional  (str) name: <class 'str'>,\n            Optional  (str) policies: <class 'str'>,\n            Optional  (str) security_policy: <class 'str'>,\n            Optional  (str) security_status: <class 'str'>,\n            },\n          },\n        Optional  (str) local_policies: {\n          Optional  (str) template: {\n            Any  (str) *: {\n              'priority': <class 'int'>,\n              },\n            },\n          Optional  (str) vlan_group: {\n            'vlan': <class 'int'>,\n            },\n          Optional  (str) security_policy: <class 'str'>,\n          Optional  (str) security_status: <class 'str'>,\n          },\n        Optional  (str) method_status: {\n          Any  (str) *: {\n            'method': <class 'str'>,\n            'state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_authentication_sessions_interface_interface_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_authentication_sessions.py#L41"}, "iosxe": {"class": "ShowAuthenticationSessionsInterfaceDetails", "doc": "Parser for 'show authentication sessions interface {interface} details'\n    ", "module_name": "show_authentication_sessions", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        Optional  (str) iif_id: <class 'str'>,\n        Optional  (str) ipv6_address: <class 'str'>,\n        'ipv4_address': <class 'str'>,\n        Optional  (str) user_name: <class 'str'>,\n        Optional  (str) periodic_acct_timeout: <class 'str'>,\n        Optional  (str) timeout_action: <class 'str'>,\n        Optional  (str) restart_timeout: <class 'str'>,\n        Optional  (str) session_uptime: <class 'str'>,\n        'status': <class 'str'>,\n        'domain': <class 'str'>,\n        'oper_host_mode': <class 'str'>,\n        'oper_control_dir': <class 'str'>,\n        Optional  (str) authorized_by: <class 'str'>,\n        Optional  (str) vlan_policy: <class 'str'>,\n        'session_timeout': {\n          'type': <class 'str'>,\n          Optional  (str) timeout: <class 'str'>,\n          Optional  (str) remaining: <class 'str'>,\n          },\n        'common_session_id': <class 'str'>,\n        'acct_session_id': <class 'str'>,\n        'handle': <class 'str'>,\n        Optional  (str) idle_timeout: <class 'str'>,\n        Optional  (str) current_policy: <class 'str'>,\n        Optional  (str) server_policies: {\n          Any  (str) *: {\n            Optional  (str) name: <class 'str'>,\n            Optional  (str) policies: <class 'str'>,\n            Optional  (str) security_policy: <class 'str'>,\n            Optional  (str) security_status: <class 'str'>,\n            },\n          },\n        Optional  (str) local_policies: {\n          Optional  (str) template: {\n            Any  (str) *: {\n              'priority': <class 'int'>,\n              },\n            },\n          Optional  (str) vlan_group: {\n            'vlan': <class 'int'>,\n            },\n          Optional  (str) security_policy: <class 'str'>,\n          Optional  (str) security_status: <class 'str'>,\n          },\n        Optional  (str) method_status: {\n          Any  (str) *: {\n            'method': <class 'str'>,\n            'state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_authentication_sessions_interface_interface_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_authentication_sessions.py#L218"}}, "show bfd neighbors client {client} details": {"ios": {"class": "ShowBfdNeighborsDetails", "doc": "\n    IOS parser for the following show command\n\t  'show bfd neighbors details'\n\t  'show bfd neighbors client <client> details'\n\t", "module_name": "show_bfd", "package": "genie.libs.parser", "schema": "{\n'our_address': {\n  Any  (str) *: {\n    'neighbor_address': {\n      Any  (str) *: {\n        'ld_rd': <class 'str'>,\n        'rh_rs': <class 'str'>,\n        Optional  (str) holdown_timer: <class 'int'>,\n        Optional  (str) holdown_timer_multiplier: <class 'int'>,\n        'state': <class 'str'>,\n        'interface': <class 'str'>,\n        Optional  (str) session: {\n          'state': <class 'str'>,\n          'echo_function': <class 'bool'>,\n          Optional  (str) echo_interval_ms: <class 'int'>,\n          },\n        Optional  (str) session_host: <class 'str'>,\n        Optional  (str) handle: <class 'int'>,\n        Optional  (str) local_diag: <class 'int'>,\n        Optional  (str) demand_mode: <class 'int'>,\n        Optional  (str) poll_bit: <class 'int'>,\n        Optional  (str) min_tx_int: <class 'int'>,\n        Optional  (str) min_rx_int: <class 'int'>,\n        Optional  (str) multiplier: <class 'int'>,\n        Optional  (str) received_min_rx_int: <class 'int'>,\n        Optional  (str) received_multiplier: <class 'int'>,\n        Optional  (str) holddown: <class 'int'>,\n        Optional  (str) holddown_hits: <class 'int'>,\n        Optional  (str) hello: <class 'int'>,\n        Optional  (str) hello_hits: <class 'int'>,\n        Optional  (str) rx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) tx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) elapsed_time_watermarks: <class 'str'>,\n        Optional  (str) elapsed_time_watermarks_last: <class 'int'>,\n        Optional  (str) registered_protocols: <class 'list'>,\n        Optional  (str) up_time: <class 'str'>,\n        Optional  (str) last_packet: {\n          Optional  (str) version: <class 'int'>,\n          Optional  (str) diagnostic: <class 'int'>,\n          Optional  (str) state_bit: <class 'str'>,\n          Optional  (str) i_hear_you_bit: <class 'str'>,\n          Optional  (str) demand_bit: <class 'int'>,\n          Optional  (str) poll_bit: <class 'int'>,\n          Optional  (str) final_bit: <class 'int'>,\n          Optional  (str) c_bit: <class 'int'>,\n          Optional  (str) multiplier: <class 'int'>,\n          Optional  (str) length: <class 'int'>,\n          Optional  (str) my_discr: <class 'int'>,\n          Optional  (str) your_discr: <class 'int'>,\n          Optional  (str) min_tx_int: <class 'int'>,\n          Optional  (str) min_rx_int: <class 'int'>,\n          Optional  (str) min_echo_int: <class 'int'>,\n          },\n        Optional  (str) cleanup_timer_hits: <class 'int'>,\n        Optional  (str) sso_cleanup_timer_called: <class 'int'>,\n        Optional  (str) sso_cleanup_action_taken: <class 'int'>,\n        Optional  (str) pseudo_preemtive_process: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min: <class 'int'>,\n          Optional  (str) max: <class 'int'>,\n          Optional  (str) avg: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) ipc_tx_failure_count: <class 'int'>,\n        Optional  (str) ipc_rx_failure_count: <class 'int'>,\n        Optional  (str) total_adjs_found: <class 'int'>,\n        Optional  (str) holddown_negotiated: <class 'int'>,\n        Optional  (str) holddown_adjusted: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bfd_neighbors_client_client_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bfd.py#L12"}, "iosxe": {"class": "ShowBfdNeighborsDetails", "doc": " Parser for the following commands:\n\t\t\t* 'show bfd neighbors details'\n\t\t\t* 'show bfd neighbors client {client} details'\n            * 'show bfd neighbors interface {interface} details'\n\t", "module_name": "show_bfd", "package": "genie.libs.parser", "schema": "{\n'our_address': {\n  Any  (str) *: {\n    'neighbor_address': {\n      Any  (str) *: {\n        'ld_rd': <class 'str'>,\n        'rh_rs': <class 'str'>,\n        Optional  (str) holdown_timer: <class 'int'>,\n        Optional  (str) holdown_timer_multiplier: <class 'int'>,\n        'state': <class 'str'>,\n        'interface': <class 'str'>,\n        Optional  (str) session: {\n          'state': <class 'str'>,\n          'echo_function': <class 'bool'>,\n          Optional  (str) echo_interval_ms: <class 'int'>,\n          },\n        Optional  (str) session_host: <class 'str'>,\n        Optional  (str) handle: <class 'int'>,\n        Optional  (str) local_diag: <class 'int'>,\n        Optional  (str) demand_mode: <class 'int'>,\n        Optional  (str) poll_bit: <class 'int'>,\n        Optional  (str) min_tx_int: <class 'int'>,\n        Optional  (str) min_rx_int: <class 'int'>,\n        Optional  (str) multiplier: <class 'int'>,\n        Optional  (str) received_min_rx_int: <class 'int'>,\n        Optional  (str) received_multiplier: <class 'int'>,\n        Optional  (str) holddown: <class 'int'>,\n        Optional  (str) holddown_hits: <class 'int'>,\n        Optional  (str) hello: <class 'int'>,\n        Optional  (str) hello_hits: <class 'int'>,\n        Optional  (str) rx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) tx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) elapsed_time_watermarks: <class 'str'>,\n        Optional  (str) elapsed_time_watermarks_last: <class 'int'>,\n        Optional  (str) registered_protocols: <class 'list'>,\n        Optional  (str) up_time: <class 'str'>,\n        Optional  (str) last_packet: {\n          Optional  (str) version: <class 'int'>,\n          Optional  (str) diagnostic: <class 'int'>,\n          Optional  (str) state_bit: <class 'str'>,\n          Optional  (str) i_hear_you_bit: <class 'str'>,\n          Optional  (str) demand_bit: <class 'int'>,\n          Optional  (str) poll_bit: <class 'int'>,\n          Optional  (str) final_bit: <class 'int'>,\n          Optional  (str) c_bit: <class 'int'>,\n          Optional  (str) multiplier: <class 'int'>,\n          Optional  (str) length: <class 'int'>,\n          Optional  (str) my_discr: <class 'int'>,\n          Optional  (str) your_discr: <class 'int'>,\n          Optional  (str) min_tx_int: <class 'int'>,\n          Optional  (str) min_rx_int: <class 'int'>,\n          Optional  (str) min_echo_int: <class 'int'>,\n          },\n        Optional  (str) cleanup_timer_hits: <class 'int'>,\n        Optional  (str) sso_cleanup_timer_called: <class 'int'>,\n        Optional  (str) sso_cleanup_action_taken: <class 'int'>,\n        Optional  (str) pseudo_preemtive_process: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min: <class 'int'>,\n          Optional  (str) max: <class 'int'>,\n          Optional  (str) avg: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) ipc_tx_failure_count: <class 'int'>,\n        Optional  (str) ipc_rx_failure_count: <class 'int'>,\n        Optional  (str) total_adjs_found: <class 'int'>,\n        Optional  (str) holddown_negotiated: <class 'int'>,\n        Optional  (str) holddown_adjusted: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bfd_neighbors_client_client_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bfd.py#L121"}}, "show bfd neighbors details": {"ios": {"class": "ShowBfdNeighborsDetails", "doc": "\n    IOS parser for the following show command\n\t  'show bfd neighbors details'\n\t  'show bfd neighbors client <client> details'\n\t", "module_name": "show_bfd", "package": "genie.libs.parser", "schema": "{\n'our_address': {\n  Any  (str) *: {\n    'neighbor_address': {\n      Any  (str) *: {\n        'ld_rd': <class 'str'>,\n        'rh_rs': <class 'str'>,\n        Optional  (str) holdown_timer: <class 'int'>,\n        Optional  (str) holdown_timer_multiplier: <class 'int'>,\n        'state': <class 'str'>,\n        'interface': <class 'str'>,\n        Optional  (str) session: {\n          'state': <class 'str'>,\n          'echo_function': <class 'bool'>,\n          Optional  (str) echo_interval_ms: <class 'int'>,\n          },\n        Optional  (str) session_host: <class 'str'>,\n        Optional  (str) handle: <class 'int'>,\n        Optional  (str) local_diag: <class 'int'>,\n        Optional  (str) demand_mode: <class 'int'>,\n        Optional  (str) poll_bit: <class 'int'>,\n        Optional  (str) min_tx_int: <class 'int'>,\n        Optional  (str) min_rx_int: <class 'int'>,\n        Optional  (str) multiplier: <class 'int'>,\n        Optional  (str) received_min_rx_int: <class 'int'>,\n        Optional  (str) received_multiplier: <class 'int'>,\n        Optional  (str) holddown: <class 'int'>,\n        Optional  (str) holddown_hits: <class 'int'>,\n        Optional  (str) hello: <class 'int'>,\n        Optional  (str) hello_hits: <class 'int'>,\n        Optional  (str) rx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) tx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) elapsed_time_watermarks: <class 'str'>,\n        Optional  (str) elapsed_time_watermarks_last: <class 'int'>,\n        Optional  (str) registered_protocols: <class 'list'>,\n        Optional  (str) up_time: <class 'str'>,\n        Optional  (str) last_packet: {\n          Optional  (str) version: <class 'int'>,\n          Optional  (str) diagnostic: <class 'int'>,\n          Optional  (str) state_bit: <class 'str'>,\n          Optional  (str) i_hear_you_bit: <class 'str'>,\n          Optional  (str) demand_bit: <class 'int'>,\n          Optional  (str) poll_bit: <class 'int'>,\n          Optional  (str) final_bit: <class 'int'>,\n          Optional  (str) c_bit: <class 'int'>,\n          Optional  (str) multiplier: <class 'int'>,\n          Optional  (str) length: <class 'int'>,\n          Optional  (str) my_discr: <class 'int'>,\n          Optional  (str) your_discr: <class 'int'>,\n          Optional  (str) min_tx_int: <class 'int'>,\n          Optional  (str) min_rx_int: <class 'int'>,\n          Optional  (str) min_echo_int: <class 'int'>,\n          },\n        Optional  (str) cleanup_timer_hits: <class 'int'>,\n        Optional  (str) sso_cleanup_timer_called: <class 'int'>,\n        Optional  (str) sso_cleanup_action_taken: <class 'int'>,\n        Optional  (str) pseudo_preemtive_process: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min: <class 'int'>,\n          Optional  (str) max: <class 'int'>,\n          Optional  (str) avg: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) ipc_tx_failure_count: <class 'int'>,\n        Optional  (str) ipc_rx_failure_count: <class 'int'>,\n        Optional  (str) total_adjs_found: <class 'int'>,\n        Optional  (str) holddown_negotiated: <class 'int'>,\n        Optional  (str) holddown_adjusted: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bfd_neighbors_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bfd.py#L12"}, "iosxe": {"class": "ShowBfdNeighborsDetails", "doc": " Parser for the following commands:\n\t\t\t* 'show bfd neighbors details'\n\t\t\t* 'show bfd neighbors client {client} details'\n            * 'show bfd neighbors interface {interface} details'\n\t", "module_name": "show_bfd", "package": "genie.libs.parser", "schema": "{\n'our_address': {\n  Any  (str) *: {\n    'neighbor_address': {\n      Any  (str) *: {\n        'ld_rd': <class 'str'>,\n        'rh_rs': <class 'str'>,\n        Optional  (str) holdown_timer: <class 'int'>,\n        Optional  (str) holdown_timer_multiplier: <class 'int'>,\n        'state': <class 'str'>,\n        'interface': <class 'str'>,\n        Optional  (str) session: {\n          'state': <class 'str'>,\n          'echo_function': <class 'bool'>,\n          Optional  (str) echo_interval_ms: <class 'int'>,\n          },\n        Optional  (str) session_host: <class 'str'>,\n        Optional  (str) handle: <class 'int'>,\n        Optional  (str) local_diag: <class 'int'>,\n        Optional  (str) demand_mode: <class 'int'>,\n        Optional  (str) poll_bit: <class 'int'>,\n        Optional  (str) min_tx_int: <class 'int'>,\n        Optional  (str) min_rx_int: <class 'int'>,\n        Optional  (str) multiplier: <class 'int'>,\n        Optional  (str) received_min_rx_int: <class 'int'>,\n        Optional  (str) received_multiplier: <class 'int'>,\n        Optional  (str) holddown: <class 'int'>,\n        Optional  (str) holddown_hits: <class 'int'>,\n        Optional  (str) hello: <class 'int'>,\n        Optional  (str) hello_hits: <class 'int'>,\n        Optional  (str) rx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) tx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) elapsed_time_watermarks: <class 'str'>,\n        Optional  (str) elapsed_time_watermarks_last: <class 'int'>,\n        Optional  (str) registered_protocols: <class 'list'>,\n        Optional  (str) up_time: <class 'str'>,\n        Optional  (str) last_packet: {\n          Optional  (str) version: <class 'int'>,\n          Optional  (str) diagnostic: <class 'int'>,\n          Optional  (str) state_bit: <class 'str'>,\n          Optional  (str) i_hear_you_bit: <class 'str'>,\n          Optional  (str) demand_bit: <class 'int'>,\n          Optional  (str) poll_bit: <class 'int'>,\n          Optional  (str) final_bit: <class 'int'>,\n          Optional  (str) c_bit: <class 'int'>,\n          Optional  (str) multiplier: <class 'int'>,\n          Optional  (str) length: <class 'int'>,\n          Optional  (str) my_discr: <class 'int'>,\n          Optional  (str) your_discr: <class 'int'>,\n          Optional  (str) min_tx_int: <class 'int'>,\n          Optional  (str) min_rx_int: <class 'int'>,\n          Optional  (str) min_echo_int: <class 'int'>,\n          },\n        Optional  (str) cleanup_timer_hits: <class 'int'>,\n        Optional  (str) sso_cleanup_timer_called: <class 'int'>,\n        Optional  (str) sso_cleanup_action_taken: <class 'int'>,\n        Optional  (str) pseudo_preemtive_process: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min: <class 'int'>,\n          Optional  (str) max: <class 'int'>,\n          Optional  (str) avg: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) ipc_tx_failure_count: <class 'int'>,\n        Optional  (str) ipc_rx_failure_count: <class 'int'>,\n        Optional  (str) total_adjs_found: <class 'int'>,\n        Optional  (str) holddown_negotiated: <class 'int'>,\n        Optional  (str) holddown_adjusted: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bfd_neighbors_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bfd.py#L121"}}, "show bfd neighbors interface {interface} details": {"ios": {"class": "ShowBfdNeighborsDetails", "doc": "\n    IOS parser for the following show command\n\t  'show bfd neighbors details'\n\t  'show bfd neighbors client <client> details'\n\t", "module_name": "show_bfd", "package": "genie.libs.parser", "schema": "{\n'our_address': {\n  Any  (str) *: {\n    'neighbor_address': {\n      Any  (str) *: {\n        'ld_rd': <class 'str'>,\n        'rh_rs': <class 'str'>,\n        Optional  (str) holdown_timer: <class 'int'>,\n        Optional  (str) holdown_timer_multiplier: <class 'int'>,\n        'state': <class 'str'>,\n        'interface': <class 'str'>,\n        Optional  (str) session: {\n          'state': <class 'str'>,\n          'echo_function': <class 'bool'>,\n          Optional  (str) echo_interval_ms: <class 'int'>,\n          },\n        Optional  (str) session_host: <class 'str'>,\n        Optional  (str) handle: <class 'int'>,\n        Optional  (str) local_diag: <class 'int'>,\n        Optional  (str) demand_mode: <class 'int'>,\n        Optional  (str) poll_bit: <class 'int'>,\n        Optional  (str) min_tx_int: <class 'int'>,\n        Optional  (str) min_rx_int: <class 'int'>,\n        Optional  (str) multiplier: <class 'int'>,\n        Optional  (str) received_min_rx_int: <class 'int'>,\n        Optional  (str) received_multiplier: <class 'int'>,\n        Optional  (str) holddown: <class 'int'>,\n        Optional  (str) holddown_hits: <class 'int'>,\n        Optional  (str) hello: <class 'int'>,\n        Optional  (str) hello_hits: <class 'int'>,\n        Optional  (str) rx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) tx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) elapsed_time_watermarks: <class 'str'>,\n        Optional  (str) elapsed_time_watermarks_last: <class 'int'>,\n        Optional  (str) registered_protocols: <class 'list'>,\n        Optional  (str) up_time: <class 'str'>,\n        Optional  (str) last_packet: {\n          Optional  (str) version: <class 'int'>,\n          Optional  (str) diagnostic: <class 'int'>,\n          Optional  (str) state_bit: <class 'str'>,\n          Optional  (str) i_hear_you_bit: <class 'str'>,\n          Optional  (str) demand_bit: <class 'int'>,\n          Optional  (str) poll_bit: <class 'int'>,\n          Optional  (str) final_bit: <class 'int'>,\n          Optional  (str) c_bit: <class 'int'>,\n          Optional  (str) multiplier: <class 'int'>,\n          Optional  (str) length: <class 'int'>,\n          Optional  (str) my_discr: <class 'int'>,\n          Optional  (str) your_discr: <class 'int'>,\n          Optional  (str) min_tx_int: <class 'int'>,\n          Optional  (str) min_rx_int: <class 'int'>,\n          Optional  (str) min_echo_int: <class 'int'>,\n          },\n        Optional  (str) cleanup_timer_hits: <class 'int'>,\n        Optional  (str) sso_cleanup_timer_called: <class 'int'>,\n        Optional  (str) sso_cleanup_action_taken: <class 'int'>,\n        Optional  (str) pseudo_preemtive_process: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min: <class 'int'>,\n          Optional  (str) max: <class 'int'>,\n          Optional  (str) avg: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) ipc_tx_failure_count: <class 'int'>,\n        Optional  (str) ipc_rx_failure_count: <class 'int'>,\n        Optional  (str) total_adjs_found: <class 'int'>,\n        Optional  (str) holddown_negotiated: <class 'int'>,\n        Optional  (str) holddown_adjusted: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bfd_neighbors_interface_interface_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bfd.py#L12"}, "iosxe": {"class": "ShowBfdNeighborsDetails", "doc": " Parser for the following commands:\n\t\t\t* 'show bfd neighbors details'\n\t\t\t* 'show bfd neighbors client {client} details'\n            * 'show bfd neighbors interface {interface} details'\n\t", "module_name": "show_bfd", "package": "genie.libs.parser", "schema": "{\n'our_address': {\n  Any  (str) *: {\n    'neighbor_address': {\n      Any  (str) *: {\n        'ld_rd': <class 'str'>,\n        'rh_rs': <class 'str'>,\n        Optional  (str) holdown_timer: <class 'int'>,\n        Optional  (str) holdown_timer_multiplier: <class 'int'>,\n        'state': <class 'str'>,\n        'interface': <class 'str'>,\n        Optional  (str) session: {\n          'state': <class 'str'>,\n          'echo_function': <class 'bool'>,\n          Optional  (str) echo_interval_ms: <class 'int'>,\n          },\n        Optional  (str) session_host: <class 'str'>,\n        Optional  (str) handle: <class 'int'>,\n        Optional  (str) local_diag: <class 'int'>,\n        Optional  (str) demand_mode: <class 'int'>,\n        Optional  (str) poll_bit: <class 'int'>,\n        Optional  (str) min_tx_int: <class 'int'>,\n        Optional  (str) min_rx_int: <class 'int'>,\n        Optional  (str) multiplier: <class 'int'>,\n        Optional  (str) received_min_rx_int: <class 'int'>,\n        Optional  (str) received_multiplier: <class 'int'>,\n        Optional  (str) holddown: <class 'int'>,\n        Optional  (str) holddown_hits: <class 'int'>,\n        Optional  (str) hello: <class 'int'>,\n        Optional  (str) hello_hits: <class 'int'>,\n        Optional  (str) rx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) tx: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min_int_ms: <class 'int'>,\n          Optional  (str) max_int_ms: <class 'int'>,\n          Optional  (str) avg_int_ms: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) elapsed_time_watermarks: <class 'str'>,\n        Optional  (str) elapsed_time_watermarks_last: <class 'int'>,\n        Optional  (str) registered_protocols: <class 'list'>,\n        Optional  (str) up_time: <class 'str'>,\n        Optional  (str) last_packet: {\n          Optional  (str) version: <class 'int'>,\n          Optional  (str) diagnostic: <class 'int'>,\n          Optional  (str) state_bit: <class 'str'>,\n          Optional  (str) i_hear_you_bit: <class 'str'>,\n          Optional  (str) demand_bit: <class 'int'>,\n          Optional  (str) poll_bit: <class 'int'>,\n          Optional  (str) final_bit: <class 'int'>,\n          Optional  (str) c_bit: <class 'int'>,\n          Optional  (str) multiplier: <class 'int'>,\n          Optional  (str) length: <class 'int'>,\n          Optional  (str) my_discr: <class 'int'>,\n          Optional  (str) your_discr: <class 'int'>,\n          Optional  (str) min_tx_int: <class 'int'>,\n          Optional  (str) min_rx_int: <class 'int'>,\n          Optional  (str) min_echo_int: <class 'int'>,\n          },\n        Optional  (str) cleanup_timer_hits: <class 'int'>,\n        Optional  (str) sso_cleanup_timer_called: <class 'int'>,\n        Optional  (str) sso_cleanup_action_taken: <class 'int'>,\n        Optional  (str) pseudo_preemtive_process: {\n          Optional  (str) count: <class 'int'>,\n          Optional  (str) min: <class 'int'>,\n          Optional  (str) max: <class 'int'>,\n          Optional  (str) avg: <class 'int'>,\n          Optional  (str) last_ms_ago: <class 'int'>,\n          },\n        Optional  (str) ipc_tx_failure_count: <class 'int'>,\n        Optional  (str) ipc_rx_failure_count: <class 'int'>,\n        Optional  (str) total_adjs_found: <class 'int'>,\n        Optional  (str) holddown_negotiated: <class 'int'>,\n        Optional  (str) holddown_adjusted: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bfd_neighbors_interface_interface_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bfd.py#L121"}}, "show bgp all": {"ios": {"class": "ShowBgpAll", "doc": "Parser for show bgp all", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L122"}, "iosxe": {"class": "ShowBgpAll", "doc": " Parser for:\n        * 'show bgp all'\n        * 'show bgp {address_family} all'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L576"}}, "show bgp all cluster-ids": {"ios": {"class": "ShowBgpAllClusterIds", "doc": "\n       Parser for show bgp all cluster-ids\n       Executing 'show vrf detail | inc \\(VRF' to collect vrf names.\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) cluster_id: <class 'str'>,\n    Optional  (str) configured_id: <class 'str'>,\n    Optional  (str) reflection_all_configured: <class 'str'>,\n    Optional  (str) reflection_intra_cluster_configured: <class 'str'>,\n    Optional  (str) reflection_intra_cluster_used: <class 'str'>,\n    Optional  (str) list_of_cluster_ids: {\n      Any  (str) *: {\n        Optional  (str) num_neighbors: <class 'int'>,\n        Optional  (str) client_to_client_reflection_configured: <class 'str'>,\n        Optional  (str) client_to_client_reflection_used: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_cluster-ids", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L77"}, "iosxe": {"class": "ShowBgpAllClusterIds", "doc": " Parser for \"show bgp all cluster-ids\" ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) cluster_id: <class 'str'>,\n    Optional  (str) configured_id: <class 'str'>,\n    Optional  (str) reflection_all_configured: <class 'str'>,\n    Optional  (str) reflection_intra_cluster_configured: <class 'str'>,\n    Optional  (str) reflection_intra_cluster_used: <class 'str'>,\n    Optional  (str) list_of_cluster_ids: {\n      Any  (str) *: {\n        Optional  (str) num_neighbors: <class 'int'>,\n        Optional  (str) client_to_client_reflection_configured: <class 'str'>,\n        Optional  (str) client_to_client_reflection_used: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_cluster-ids", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6220"}}, "show bgp all dampening flap-statistics": {"nxos": {"class": "ShowBgpAllDampeningFlapStatistics", "doc": "Parser for:\n        show bgp all dampening flap-statistics\n        parser class implements detail parsing mechanisms for cli,xml output.", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) network: {\n          Any  (str) *: {\n            'peer': <class 'str'>,\n            'flaps': <class 'int'>,\n            'duration': <class 'str'>,\n            'current_penalty': <class 'int'>,\n            'suppress_limit': <class 'int'>,\n            'reuse_limit': <class 'int'>,\n            'best': <class 'bool'>,\n            Optional  (str) status: <class 'str'>,\n            Optional  (str) reuse_time: <class 'str'>,\n            Optional  (str) pathtype: <class 'str'>,\n            },\n          },\n        Optional  (str) history_paths: <class 'int'>,\n        Optional  (str) dampened_paths: <class 'int'>,\n        Optional  (str) dampening_enabled: <class 'bool'>,\n        Optional  (str) route_identifier: {\n          Any  (str) *: {\n            Optional  (str) network: {\n              Any  (str) *: {\n                'peer': <class 'str'>,\n                'flaps': <class 'int'>,\n                'duration': <class 'str'>,\n                Optional  (str) reuse_time: <class 'str'>,\n                'current_penalty': <class 'int'>,\n                'suppress_limit': <class 'int'>,\n                'reuse_limit': <class 'int'>,\n                'best': <class 'bool'>,\n                Optional  (str) status: <class 'str'>,\n                Optional  (str) pathtype: <class 'str'>,\n                },\n              },\n            'history_paths': <class 'int'>,\n            'dampened_paths': <class 'int'>,\n            'dampening_enabled': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_dampening_flap-statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L7423"}}, "show bgp all detail": {"ios": {"class": "ShowBgpAllDetail", "doc": "Parser for show bgp all detail", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L53"}, "iosxe": {"class": "ShowBgpAllDetail", "doc": " Parser for:\n        * 'show bgp all detail'\n        * 'show bgp vrf {vrf} {route}'\n        * 'show bgp {address_family} vrf {vrf} {route}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1551"}}, "show bgp all neighbors": {"ios": {"class": "ShowBgpAllNeighbors", "doc": "\n    Parser for show bgp all neighbors\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L85"}, "iosxe": {"class": "ShowBgpAllNeighbors", "doc": " Parser for:\n        * 'show bgp all neighbors'\n        * 'show bgp all neighbors {neighbor}'\n        * 'show bgp {address_family} all neighbors'\n        * 'show bgp {address_family} all neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3982"}}, "show bgp all neighbors {neighbor}": {"ios": {"class": "ShowBgpAllNeighbors", "doc": "\n    Parser for show bgp all neighbors\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L85"}, "iosxe": {"class": "ShowBgpAllNeighbors", "doc": " Parser for:\n        * 'show bgp all neighbors'\n        * 'show bgp all neighbors {neighbor}'\n        * 'show bgp {address_family} all neighbors'\n        * 'show bgp {address_family} all neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3982"}}, "show bgp all neighbors {neighbor} advertised-routes": {"ios": {"class": "ShowBgpAllNeighborsAdvertisedRoutes", "doc": "Parser for show bgp all neighbors <WORD> advertised-routes", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L66"}, "iosxe": {"class": "ShowBgpAllNeighborsAdvertisedRoutes", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} advertised-routes'\n        * 'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4787"}}, "show bgp all neighbors {neighbor} policy": {"ios": {"class": "ShowBgpAllNeighborsPolicy", "doc": "Parser for show bgp all neighbors <neighbor> policy", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) nbr_af_route_map_name_in: <class 'str'>,\n            Optional  (str) nbr_af_route_map_name_out: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors_neighbor_policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L58"}, "iosxe": {"class": "ShowBgpAllNeighborsPolicy", "doc": " Parser for \"show bgp all neighbors {neighbor} policy\" ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) nbr_af_route_map_name_in: <class 'str'>,\n            Optional  (str) nbr_af_route_map_name_out: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors_neighbor_policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6382"}}, "show bgp all neighbors {neighbor} received-routes": {"ios": {"class": "ShowBgpAllNeighborsReceivedRoutes", "doc": "\n    Parser for show bgp all neighbors <WORD> received-routes\n    executing 'show bgp all neighbors | i BGP neighbor' for finging vrf names\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L92"}, "iosxe": {"class": "ShowBgpAllNeighborsReceivedRoutes", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} received-routes'\n        * 'show bgp {address_family} all neighbors {neighbor} received-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5398"}}, "show bgp all neighbors {neighbor} routes": {"ios": {"class": "ShowBgpAllNeighborsRoutes", "doc": "\n    Parser for show bgp all neighbors <WORD> routes\n    executing 'show bgp all neighbors | i BGP neighbor' for finding vrf names\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L104"}, "iosxe": {"class": "ShowBgpAllNeighborsRoutes", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} routes'\n        * 'show bgp {address_family} all neighbors {neighbor} routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6035"}}, "show bgp all nexthop-database": {"nxos": {"class": "ShowBgpAllNexthopDatabase", "doc": "Parser for:\n        show bgp all nexthop-database\n        parser class implements detail parsing mechanisms for cli,xml output.", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'af_nexthop_trigger_enable': <class 'bool'>,\n        'nexthop_trigger_delay_critical': <class 'int'>,\n        'nexthop_trigger_delay_non_critical': <class 'int'>,\n        Optional  (str) next_hop: {\n          Any  (str) *: {\n            Optional  (str) refcount: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) multipath: <class 'str'>,\n            Optional  (str) igp_cost: <class 'int'>,\n            Optional  (str) igp_route_type: <class 'int'>,\n            Optional  (str) igp_preference: <class 'int'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) local: <class 'bool'>,\n            Optional  (str) reachable: <class 'bool'>,\n            Optional  (str) labeled: <class 'bool'>,\n            Optional  (str) filtered: <class 'bool'>,\n            Optional  (str) pending_update: <class 'bool'>,\n            Optional  (str) resolve_time: <class 'str'>,\n            Optional  (str) rib_route: <class 'str'>,\n            Optional  (str) metric_next_advertise: <class 'str'>,\n            Optional  (str) rnh_epoch: <class 'int'>,\n            Optional  (str) attached_nexthop: {\n              Any  (str) *: {\n                'attached_nexthop_interface': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_nexthop-database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L7802"}}, "show bgp all summary": {"ios": {"class": "ShowBgpAllSummary", "doc": "\n    Parser for show bgp All Summary\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L70"}, "iosxe": {"class": "ShowBgpAllSummary", "doc": " Parser for:\n        * 'show bgp all summary'\n        * 'show bgp {address_family} all summary'\n        * 'show bgp vrf {vrf} all summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2329"}}, "show bgp egress-engineering": {"iosxr": {"class": "ShowBgpEgressEngineering", "doc": " Parser for show bgp egress-engineering", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_set': {\n  Any  (str) *: {\n    'peer_set_id': <class 'str'>,\n    'nexthop': <class 'str'>,\n    'version': <class 'int'>,\n    'rn_version': <class 'int'>,\n    'flags': <class 'str'>,\n    'local_asn': <class 'int'>,\n    'remote_asn': <class 'int'>,\n    'local_rid': <class 'str'>,\n    'remote_rid': <class 'str'>,\n    Optional  (str) local_address: <class 'str'>,\n    'first_hop': <class 'list'>,\n    'nhid': <class 'list'>,\n    Optional  (str) ifh: <class 'list'>,\n    'label': <class 'int'>,\n    'refcount': <class 'int'>,\n    'rpc_set': <class 'str'>,\n    Optional  (str) id: <class 'int'>,\n    },\n  },\n}", "uid": "show_bgp_egress-engineering", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L97"}}, "show bgp group brief": {"junos": {"class": "ShowBgpGroupBrief", "doc": " Parser for:\n            * show bgp group brief\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp-group-information': {\n  'bgp-group': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_group_list at 0x1093a86a8>,\n  'bgp-information': {\n    'bgp-rib': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_info_bgp_rib_list at 0x1093a8730>,\n    'down-peer-count': <class 'str'>,\n    'external-peer-count': <class 'str'>,\n    'group-count': <class 'str'>,\n    'internal-peer-count': <class 'str'>,\n    'peer-count': <class 'str'>,\n    'flap-count': <class 'str'>,\n    },\n  },\n}", "uid": "show_bgp_group_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_bgp.py#L180"}}, "show bgp group brief | no-more": {"junos": {"class": "ShowBgpGroupBriefNoMore", "doc": " Parser for:\n            * show bgp group brief | no-more\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp-group-information': {\n  'bgp-group': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_group_list at 0x1093a86a8>,\n  'bgp-information': {\n    'bgp-rib': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_info_bgp_rib_list at 0x1093a8730>,\n    'down-peer-count': <class 'str'>,\n    'external-peer-count': <class 'str'>,\n    'group-count': <class 'str'>,\n    'internal-peer-count': <class 'str'>,\n    'peer-count': <class 'str'>,\n    'flap-count': <class 'str'>,\n    },\n  },\n}", "uid": "show_bgp_group_brief___no-more", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_bgp.py#L602"}}, "show bgp group detail": {"junos": {"class": "ShowBgpGroupDetail", "doc": " Parser for:\n            * show bgp group detail\n            * show bgp group detail | no-more\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp-group-information': {\n  'bgp-group': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_group_list at 0x1093a86a8>,\n  'bgp-information': {\n    'bgp-rib': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_info_bgp_rib_list at 0x1093a8730>,\n    'down-peer-count': <class 'str'>,\n    'external-peer-count': <class 'str'>,\n    'group-count': <class 'str'>,\n    'internal-peer-count': <class 'str'>,\n    'peer-count': <class 'str'>,\n    'flap-count': <class 'str'>,\n    },\n  },\n}", "uid": "show_bgp_group_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_bgp.py#L617"}}, "show bgp group detail | no-more": {"junos": {"class": "ShowBgpGroupDetailNoMore", "doc": " Parser for:\n            * show bgp group detail | no-more\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp-group-information': {\n  'bgp-group': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_group_list at 0x1093a86a8>,\n  'bgp-information': {\n    'bgp-rib': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_info_bgp_rib_list at 0x1093a8730>,\n    'down-peer-count': <class 'str'>,\n    'external-peer-count': <class 'str'>,\n    'group-count': <class 'str'>,\n    'internal-peer-count': <class 'str'>,\n    'peer-count': <class 'str'>,\n    'flap-count': <class 'str'>,\n    },\n  },\n}", "uid": "show_bgp_group_detail___no-more", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_bgp.py#L634"}}, "show bgp group summary": {"junos": {"class": "ShowBgpGroupSummary", "doc": "\n    Parser for:\n    * show bgp group summary\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp-group-information': {\n  'bgp-group': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_group_list at 0x1093a86a8>,\n  'bgp-information': {\n    'bgp-rib': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_info_bgp_rib_list at 0x1093a8730>,\n    'down-peer-count': <class 'str'>,\n    'external-peer-count': <class 'str'>,\n    'group-count': <class 'str'>,\n    'internal-peer-count': <class 'str'>,\n    'peer-count': <class 'str'>,\n    'flap-count': <class 'str'>,\n    },\n  },\n}", "uid": "show_bgp_group_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_bgp.py#L649"}}, "show bgp group summary | no-more": {"junos": {"class": "ShowBgpGroupSummaryNoMore", "doc": "\n    Parser for:\n    * show bgp group summary | no-more\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp-group-information': {\n  'bgp-group': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_group_list at 0x1093a86a8>,\n  'bgp-information': {\n    'bgp-rib': Use  (function) <function ShowBgpGroupBriefSchema.validate_bgp_info_bgp_rib_list at 0x1093a8730>,\n    'down-peer-count': <class 'str'>,\n    'external-peer-count': <class 'str'>,\n    'group-count': <class 'str'>,\n    'internal-peer-count': <class 'str'>,\n    'peer-count': <class 'str'>,\n    'flap-count': <class 'str'>,\n    },\n  },\n}", "uid": "show_bgp_group_summary___no-more", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_bgp.py#L665"}}, "show bgp instance all sessions": {"iosxr": {"class": "ShowBgpInstanceAllSessions", "doc": "Parser for show bgp instance all sessions", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'spk': <class 'int'>,\n            'as_number': <class 'int'>,\n            'in_q': <class 'int'>,\n            'out_q': <class 'int'>,\n            'nbr_state': <class 'str'>,\n            'nsr_state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_all_sessions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L5440"}}, "show bgp instance {instance} all all": {"iosxr": {"class": "ShowBgpInstanceAllAll", "doc": "Parser for:\n        show bgp instance all all all\n        show bgp instance all vrf all\n        show bgp instance all vrf all ipv4 unicast\n        show bgp instance all vrf all ipv6 unicast\n        show bgp instance {instance} all all\n        show bgp instance {instance} vrf {vrf} {address_family}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) router_identifier: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) instance_number: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) vrf_state: <class 'str'>,\n            Optional  (str) bgp_vrf: <class 'str'>,\n            Optional  (str) generic_scan_interval: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) processed_prefix: <class 'int'>,\n            Optional  (str) processed_paths: <class 'int'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) prefix: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    'next_hop': <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_all_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4909"}}, "show bgp instance {instance} all all neighbors detail": {"iosxr": {"class": "ShowBgpInstanceNeighborsDetail", "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_all_all_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L2432"}}, "show bgp instance {instance} all all neighbors {neighbor} advertised-routes": {"iosxr": {"class": "ShowBgpInstanceNeighborsAdvertisedRoutes", "doc": " Parser for:\n        show bgp instance all all all neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all ipv4 unicast neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all ipv6 unicast neighbors <neighbor> advertised-routes\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> advertised-routes\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) processed_prefixes: <class 'str'>,\n            Optional  (str) processed_paths: <class 'str'>,\n            Optional  (str) advertised: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) froms: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_code: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_all_all_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4105"}}, "show bgp instance {instance} all all neighbors {neighbor} detail": {"iosxr": {"class": "ShowBgpInstanceNeighborsDetail", "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_all_all_neighbors_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L2432"}}, "show bgp instance {instance} all all neighbors {neighbor} {route_type}": {"iosxr": {"class": "ShowBgpInstanceNeighborsRoutes", "doc": " Parser for:\n        show bgp instance all all all neighbors <WORD> routes\n        show bgp instance all vrf all neighbors <WORD> routes\n        show bgp instance <instance> vrf <vrf> neighbors <WORD> routes\n        show bgp instance <instance> all all neighbors <WORD> routes\n        show bgp instance all vrf all ipv4 unicast neighbors <WORD> routes\n        show bgp instance all vrf all ipv6 unicast neighbors <WORD> routes\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) router_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) state: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) generic_scan_interval: <class 'int'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'str'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) processed_prefixes: <class 'int'>,\n            Optional  (str) processed_paths: <class 'int'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_all_all_neighbors_neighbor_route_type", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4366"}}, "show bgp instance {instance} all all process detail": {"iosxr": {"class": "ShowBgpInstanceProcessDetail", "doc": "Parser for:\n        show bgp instance all all all process detail\n        show bgp instance all vrf all process detail\n        show bgp instance all vrf all ipv4 unicast process detail\n        show bgp instance all vrf all ipv6 unicast process detail\n        parser class - implements detail parsing mechanisms for cli, yang output.\n        If there is output args in cli ,need to have below key(s) that are mandatory and used in this parser.\n\n        - vrf_type\n\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) operation_mode: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) as_system_number_format: <class 'str'>,\n        Optional  (str) as_number: <class 'int'>,\n        Optional  (str) default_cluster_id: <class 'str'>,\n        Optional  (str) active_cluster_id: <class 'str'>,\n        Optional  (str) fast_external_fallover: <class 'bool'>,\n        Optional  (str) platform_rlimit_max: <class 'int'>,\n        Optional  (str) max_limit_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) default_value_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) current_limit_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) current_utilization_of_bmp_buffer_limit: <class 'int'>,\n        Optional  (str) log_neighbor_changes: <class 'bool'>,\n        Optional  (str) default_local_preference: <class 'int'>,\n        Optional  (str) default_keepalive: <class 'int'>,\n        Optional  (str) non_stop_routing: <class 'bool'>,\n        Optional  (str) update_delay: <class 'int'>,\n        Optional  (str) generic_scan_interval: <class 'int'>,\n        Optional  (str) bgp_speaker_process: <class 'int'>,\n        Optional  (str) node: <class 'str'>,\n        Optional  (str) restart_count: <class 'int'>,\n        Optional  (str) sent_updates: <class 'int'>,\n        Optional  (str) received_updates: <class 'int'>,\n        Optional  (str) sent_notifications: <class 'int'>,\n        Optional  (str) received_notifications: <class 'int'>,\n        Optional  (str) always_compare_med: <class 'bool'>,\n        Optional  (str) bestpath_compare_routerid: <class 'bool'>,\n        Optional  (str) bestpath_cost_community_ignore: <class 'bool'>,\n        Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>,\n        Optional  (str) enforce_first_as: <class 'bool'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n        Optional  (str) graceful_restart_restart_time: <class 'int'>,\n        Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n        Optional  (str) log_neighbor_changes: <class 'bool'>,\n        Optional  (str) vrf_info: {\n          Any  (str) *: {\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) nbrs_estab: <class 'int'>,\n            Optional  (str) cfg: <class 'int'>,\n            },\n          },\n        Optional  (str) att: {\n          Any  (str) *: {\n            Optional  (str) number: <class 'int'>,\n            Optional  (str) memory_used: <class 'int'>,\n            },\n          },\n        Optional  (str) pool: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) message_logging_pool_summary: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) bmp_pool_summary: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) dampening: <class 'bool'>,\n            Optional  (str) client_to_client_reflection: <class 'bool'>,\n            Optional  (str) dynamic_med: <class 'bool'>,\n            Optional  (str) dynamic_med_int: <class 'str'>,\n            Optional  (str) dynamic_med_timer: <class 'str'>,\n            Optional  (str) dynamic_med_periodic_timer: <class 'str'>,\n            Optional  (str) scan_interval: <class 'str'>,\n            Optional  (str) total_prefixes_scanned: <class 'str'>,\n            Optional  (str) prefix_scanned_per_segment: <class 'str'>,\n            Optional  (str) num_of_scan_segments: <class 'str'>,\n            Optional  (str) nexthop_resolution_minimum_prefix_length: <class 'str'>,\n            Optional  (str) main_table_version: <class 'str'>,\n            Optional  (str) table_version_synced_to_rib: <class 'str'>,\n            Optional  (str) table_version_acked_by_rib: <class 'str'>,\n            Optional  (str) rib_has_not_converged: <class 'str'>,\n            Optional  (str) rib_table_prefix_limit_reached: <class 'str'>,\n            Optional  (str) rib_table_prefix_limit_ver: <class 'str'>,\n            Optional  (str) permanent_network: <class 'str'>,\n            Optional  (str) current_vrf: <class 'str'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) state: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'str'>,\n            Optional  (str) attribute_download: <class 'str'>,\n            Optional  (str) label_retention_timer_value: <class 'str'>,\n            Optional  (str) soft_reconfig_entries: <class 'str'>,\n            Optional  (str) table_bit_field_size: <class 'str'>,\n            Optional  (str) chunk_elememt_size: <class 'str'>,\n            Optional  (str) enabled: <class 'bool'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) advertise_inactive_routes: <class 'bool'>,\n            Optional  (str) ebgp_max_paths: <class 'int'>,\n            Optional  (str) ibgp_max_paths: <class 'int'>,\n            Optional  (str) total_paths: <class 'int'>,\n            Optional  (str) total_prefixes: <class 'int'>,\n            Optional  (str) thread: {\n              Any  (str) *: {\n                Optional  (str) triggers: {\n                  Any  (str) *: {\n                    Optional  (str) ver: <class 'int'>,\n                    Optional  (str) tbl_ver: <class 'int'>,\n                    Optional  (str) trig_tid: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) remote_local: {\n              Any  (str) *: {\n                Optional  (str) allocated: <class 'int'>,\n                Optional  (str) freed: <class 'int'>,\n                },\n              },\n            Optional  (str) prefixes_path: {\n              Any  (str) *: {\n                Optional  (str) number: <class 'int'>,\n                Optional  (str) mem_used: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_all_all_process_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L1149"}}, "show bgp instance {instance} all all summary": {"iosxr": {"class": "ShowBgpInstanceSummary", "doc": " Parser for:\n        show bgp instance all all all summary\n        show bgp instance all vrf all summary\n        show bgp instance all vrf all ipv4 unicast summary\n        show bgp instance all vrf all ipv6 unicast summary\n        show bgp instance <instance> all all summary\n        show bgp instance <instance> vrf <vrf> <address_family> summary\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_vrf: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'str'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) generic_scan_interval: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'int'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) operation_mode: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) instance_number: <class 'str'>,\n            Optional  (str) vrf_state: <class 'str'>,\n            Optional  (str) process: {\n              Any  (str) *: {\n                'rcvtblver': <class 'int'>,\n                'brib_rib': <class 'int'>,\n                'labelver': <class 'int'>,\n                'importver': <class 'int'>,\n                'sendtblver': <class 'int'>,\n                'standbyver': <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) neighbor: {\n          Any  (str) *: {\n            'remote_as': <class 'int'>,\n            'address_family': {\n              Any  (str) *: {\n                'tbl_ver': <class 'int'>,\n                'spk': <class 'int'>,\n                'msg_rcvd': <class 'int'>,\n                'msg_sent': <class 'int'>,\n                'input_queue': <class 'int'>,\n                'output_queue': <class 'int'>,\n                'up_down': <class 'str'>,\n                'state_pfxrcd': <class 'str'>,\n                Optional  (str) route_distinguisher: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_all_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4459"}}, "show bgp instance {instance} sessions": {"iosxr": {"class": "ShowBgpInstanceSessions", "doc": "Parser for show bgp instance {instance} sessions", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'spk': <class 'int'>,\n            'as_number': <class 'int'>,\n            'in_q': <class 'int'>,\n            'out_q': <class 'int'>,\n            'nbr_state': <class 'str'>,\n            'nsr_state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_sessions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L5426"}}, "show bgp instance {instance} {vrf_type} {vrf}": {"iosxr": {"class": "ShowBgpInstanceAllAll", "doc": "Parser for:\n        show bgp instance all all all\n        show bgp instance all vrf all\n        show bgp instance all vrf all ipv4 unicast\n        show bgp instance all vrf all ipv6 unicast\n        show bgp instance {instance} all all\n        show bgp instance {instance} vrf {vrf} {address_family}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) router_identifier: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) instance_number: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) vrf_state: <class 'str'>,\n            Optional  (str) bgp_vrf: <class 'str'>,\n            Optional  (str) generic_scan_interval: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) processed_prefix: <class 'int'>,\n            Optional  (str) processed_paths: <class 'int'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) prefix: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    'next_hop': <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4909"}}, "show bgp instance {instance} {vrf_type} {vrf} neighbors detail": {"iosxr": {"class": "ShowBgpInstanceNeighborsDetail", "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L2432"}}, "show bgp instance {instance} {vrf_type} {vrf} neighbors {neighbor} advertised-routes": {"iosxr": {"class": "ShowBgpInstanceNeighborsAdvertisedRoutes", "doc": " Parser for:\n        show bgp instance all all all neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all ipv4 unicast neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all ipv6 unicast neighbors <neighbor> advertised-routes\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> advertised-routes\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) processed_prefixes: <class 'str'>,\n            Optional  (str) processed_paths: <class 'str'>,\n            Optional  (str) advertised: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) froms: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_code: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4105"}}, "show bgp instance {instance} {vrf_type} {vrf} neighbors {neighbor} detail": {"iosxr": {"class": "ShowBgpInstanceNeighborsDetail", "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_neighbors_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L2432"}}, "show bgp instance {instance} {vrf_type} {vrf} neighbors {neighbor} {route_type}": {"iosxr": {"class": "ShowBgpInstanceNeighborsRoutes", "doc": " Parser for:\n        show bgp instance all all all neighbors <WORD> routes\n        show bgp instance all vrf all neighbors <WORD> routes\n        show bgp instance <instance> vrf <vrf> neighbors <WORD> routes\n        show bgp instance <instance> all all neighbors <WORD> routes\n        show bgp instance all vrf all ipv4 unicast neighbors <WORD> routes\n        show bgp instance all vrf all ipv6 unicast neighbors <WORD> routes\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) router_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) state: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) generic_scan_interval: <class 'int'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'str'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) processed_prefixes: <class 'int'>,\n            Optional  (str) processed_paths: <class 'int'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_neighbors_neighbor_route_type", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4366"}}, "show bgp instance {instance} {vrf_type} {vrf} process detail": {"iosxr": {"class": "ShowBgpInstanceProcessDetail", "doc": "Parser for:\n        show bgp instance all all all process detail\n        show bgp instance all vrf all process detail\n        show bgp instance all vrf all ipv4 unicast process detail\n        show bgp instance all vrf all ipv6 unicast process detail\n        parser class - implements detail parsing mechanisms for cli, yang output.\n        If there is output args in cli ,need to have below key(s) that are mandatory and used in this parser.\n\n        - vrf_type\n\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) operation_mode: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) as_system_number_format: <class 'str'>,\n        Optional  (str) as_number: <class 'int'>,\n        Optional  (str) default_cluster_id: <class 'str'>,\n        Optional  (str) active_cluster_id: <class 'str'>,\n        Optional  (str) fast_external_fallover: <class 'bool'>,\n        Optional  (str) platform_rlimit_max: <class 'int'>,\n        Optional  (str) max_limit_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) default_value_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) current_limit_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) current_utilization_of_bmp_buffer_limit: <class 'int'>,\n        Optional  (str) log_neighbor_changes: <class 'bool'>,\n        Optional  (str) default_local_preference: <class 'int'>,\n        Optional  (str) default_keepalive: <class 'int'>,\n        Optional  (str) non_stop_routing: <class 'bool'>,\n        Optional  (str) update_delay: <class 'int'>,\n        Optional  (str) generic_scan_interval: <class 'int'>,\n        Optional  (str) bgp_speaker_process: <class 'int'>,\n        Optional  (str) node: <class 'str'>,\n        Optional  (str) restart_count: <class 'int'>,\n        Optional  (str) sent_updates: <class 'int'>,\n        Optional  (str) received_updates: <class 'int'>,\n        Optional  (str) sent_notifications: <class 'int'>,\n        Optional  (str) received_notifications: <class 'int'>,\n        Optional  (str) always_compare_med: <class 'bool'>,\n        Optional  (str) bestpath_compare_routerid: <class 'bool'>,\n        Optional  (str) bestpath_cost_community_ignore: <class 'bool'>,\n        Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>,\n        Optional  (str) enforce_first_as: <class 'bool'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n        Optional  (str) graceful_restart_restart_time: <class 'int'>,\n        Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n        Optional  (str) log_neighbor_changes: <class 'bool'>,\n        Optional  (str) vrf_info: {\n          Any  (str) *: {\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) nbrs_estab: <class 'int'>,\n            Optional  (str) cfg: <class 'int'>,\n            },\n          },\n        Optional  (str) att: {\n          Any  (str) *: {\n            Optional  (str) number: <class 'int'>,\n            Optional  (str) memory_used: <class 'int'>,\n            },\n          },\n        Optional  (str) pool: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) message_logging_pool_summary: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) bmp_pool_summary: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) dampening: <class 'bool'>,\n            Optional  (str) client_to_client_reflection: <class 'bool'>,\n            Optional  (str) dynamic_med: <class 'bool'>,\n            Optional  (str) dynamic_med_int: <class 'str'>,\n            Optional  (str) dynamic_med_timer: <class 'str'>,\n            Optional  (str) dynamic_med_periodic_timer: <class 'str'>,\n            Optional  (str) scan_interval: <class 'str'>,\n            Optional  (str) total_prefixes_scanned: <class 'str'>,\n            Optional  (str) prefix_scanned_per_segment: <class 'str'>,\n            Optional  (str) num_of_scan_segments: <class 'str'>,\n            Optional  (str) nexthop_resolution_minimum_prefix_length: <class 'str'>,\n            Optional  (str) main_table_version: <class 'str'>,\n            Optional  (str) table_version_synced_to_rib: <class 'str'>,\n            Optional  (str) table_version_acked_by_rib: <class 'str'>,\n            Optional  (str) rib_has_not_converged: <class 'str'>,\n            Optional  (str) rib_table_prefix_limit_reached: <class 'str'>,\n            Optional  (str) rib_table_prefix_limit_ver: <class 'str'>,\n            Optional  (str) permanent_network: <class 'str'>,\n            Optional  (str) current_vrf: <class 'str'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) state: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'str'>,\n            Optional  (str) attribute_download: <class 'str'>,\n            Optional  (str) label_retention_timer_value: <class 'str'>,\n            Optional  (str) soft_reconfig_entries: <class 'str'>,\n            Optional  (str) table_bit_field_size: <class 'str'>,\n            Optional  (str) chunk_elememt_size: <class 'str'>,\n            Optional  (str) enabled: <class 'bool'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) advertise_inactive_routes: <class 'bool'>,\n            Optional  (str) ebgp_max_paths: <class 'int'>,\n            Optional  (str) ibgp_max_paths: <class 'int'>,\n            Optional  (str) total_paths: <class 'int'>,\n            Optional  (str) total_prefixes: <class 'int'>,\n            Optional  (str) thread: {\n              Any  (str) *: {\n                Optional  (str) triggers: {\n                  Any  (str) *: {\n                    Optional  (str) ver: <class 'int'>,\n                    Optional  (str) tbl_ver: <class 'int'>,\n                    Optional  (str) trig_tid: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) remote_local: {\n              Any  (str) *: {\n                Optional  (str) allocated: <class 'int'>,\n                Optional  (str) freed: <class 'int'>,\n                },\n              },\n            Optional  (str) prefixes_path: {\n              Any  (str) *: {\n                Optional  (str) number: <class 'int'>,\n                Optional  (str) mem_used: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_process_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L1149"}}, "show bgp instance {instance} {vrf_type} {vrf} summary": {"iosxr": {"class": "ShowBgpInstanceSummary", "doc": " Parser for:\n        show bgp instance all all all summary\n        show bgp instance all vrf all summary\n        show bgp instance all vrf all ipv4 unicast summary\n        show bgp instance all vrf all ipv6 unicast summary\n        show bgp instance <instance> all all summary\n        show bgp instance <instance> vrf <vrf> <address_family> summary\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_vrf: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'str'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) generic_scan_interval: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'int'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) operation_mode: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) instance_number: <class 'str'>,\n            Optional  (str) vrf_state: <class 'str'>,\n            Optional  (str) process: {\n              Any  (str) *: {\n                'rcvtblver': <class 'int'>,\n                'brib_rib': <class 'int'>,\n                'labelver': <class 'int'>,\n                'importver': <class 'int'>,\n                'sendtblver': <class 'int'>,\n                'standbyver': <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) neighbor: {\n          Any  (str) *: {\n            'remote_as': <class 'int'>,\n            'address_family': {\n              Any  (str) *: {\n                'tbl_ver': <class 'int'>,\n                'spk': <class 'int'>,\n                'msg_rcvd': <class 'int'>,\n                'msg_sent': <class 'int'>,\n                'input_queue': <class 'int'>,\n                'output_queue': <class 'int'>,\n                'up_down': <class 'str'>,\n                'state_pfxrcd': <class 'str'>,\n                Optional  (str) route_distinguisher: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4459"}}, "show bgp instance {instance} {vrf_type} {vrf} {address_family}": {"iosxr": {"class": "ShowBgpInstanceAllAll", "doc": "Parser for:\n        show bgp instance all all all\n        show bgp instance all vrf all\n        show bgp instance all vrf all ipv4 unicast\n        show bgp instance all vrf all ipv6 unicast\n        show bgp instance {instance} all all\n        show bgp instance {instance} vrf {vrf} {address_family}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) router_identifier: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) instance_number: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) vrf_state: <class 'str'>,\n            Optional  (str) bgp_vrf: <class 'str'>,\n            Optional  (str) generic_scan_interval: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) processed_prefix: <class 'int'>,\n            Optional  (str) processed_paths: <class 'int'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) prefix: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    'next_hop': <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_address_family", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4909"}}, "show bgp instance {instance} {vrf_type} {vrf} {address_family} neighbors detail": {"iosxr": {"class": "ShowBgpInstanceNeighborsDetail", "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_address_family_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L2432"}}, "show bgp instance {instance} {vrf_type} {vrf} {address_family} neighbors {neighbor} advertised-routes": {"iosxr": {"class": "ShowBgpInstanceNeighborsAdvertisedRoutes", "doc": " Parser for:\n        show bgp instance all all all neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all ipv4 unicast neighbors <neighbor> advertised-routes\n        show bgp instance all vrf all ipv6 unicast neighbors <neighbor> advertised-routes\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> advertised-routes\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) processed_prefixes: <class 'str'>,\n            Optional  (str) processed_paths: <class 'str'>,\n            Optional  (str) advertised: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) froms: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_code: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_address_family_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4105"}}, "show bgp instance {instance} {vrf_type} {vrf} {address_family} neighbors {neighbor} detail": {"iosxr": {"class": "ShowBgpInstanceNeighborsDetail", "doc": " Parser for:\n        show bgp instance all all all neighbors detail\n        show bgp instance all vrf all neighbors detail\n        show bgp instance all vrf all ipv4 unicast neighbors detail\n        show bgp instance all vrf all ipv6 unicast neighbors detail\n        show bgp instance <instance> vrf <vrf> <address_family> neighbors <neighbor> detail\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_address_family_neighbors_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L2432"}}, "show bgp instance {instance} {vrf_type} {vrf} {address_family} neighbors {neighbor} {route_type}": {"iosxr": {"class": "ShowBgpInstanceNeighborsRoutes", "doc": " Parser for:\n        show bgp instance all all all neighbors <WORD> routes\n        show bgp instance all vrf all neighbors <WORD> routes\n        show bgp instance <instance> vrf <vrf> neighbors <WORD> routes\n        show bgp instance <instance> all all neighbors <WORD> routes\n        show bgp instance all vrf all ipv4 unicast neighbors <WORD> routes\n        show bgp instance all vrf all ipv6 unicast neighbors <WORD> routes\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) router_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) state: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) generic_scan_interval: <class 'int'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'str'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) processed_prefixes: <class 'int'>,\n            Optional  (str) processed_paths: <class 'int'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Any  (str) *: {\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) metric: <class 'str'>,\n                    Optional  (str) locprf: <class 'str'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_address_family_neighbors_neighbor_route_type", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4366"}}, "show bgp instance {instance} {vrf_type} {vrf} {address_family} process detail": {"iosxr": {"class": "ShowBgpInstanceProcessDetail", "doc": "Parser for:\n        show bgp instance all all all process detail\n        show bgp instance all vrf all process detail\n        show bgp instance all vrf all ipv4 unicast process detail\n        show bgp instance all vrf all ipv6 unicast process detail\n        parser class - implements detail parsing mechanisms for cli, yang output.\n        If there is output args in cli ,need to have below key(s) that are mandatory and used in this parser.\n\n        - vrf_type\n\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) operation_mode: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) as_system_number_format: <class 'str'>,\n        Optional  (str) as_number: <class 'int'>,\n        Optional  (str) default_cluster_id: <class 'str'>,\n        Optional  (str) active_cluster_id: <class 'str'>,\n        Optional  (str) fast_external_fallover: <class 'bool'>,\n        Optional  (str) platform_rlimit_max: <class 'int'>,\n        Optional  (str) max_limit_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) default_value_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) current_limit_for_bmp_buffer_size: <class 'int'>,\n        Optional  (str) current_utilization_of_bmp_buffer_limit: <class 'int'>,\n        Optional  (str) log_neighbor_changes: <class 'bool'>,\n        Optional  (str) default_local_preference: <class 'int'>,\n        Optional  (str) default_keepalive: <class 'int'>,\n        Optional  (str) non_stop_routing: <class 'bool'>,\n        Optional  (str) update_delay: <class 'int'>,\n        Optional  (str) generic_scan_interval: <class 'int'>,\n        Optional  (str) bgp_speaker_process: <class 'int'>,\n        Optional  (str) node: <class 'str'>,\n        Optional  (str) restart_count: <class 'int'>,\n        Optional  (str) sent_updates: <class 'int'>,\n        Optional  (str) received_updates: <class 'int'>,\n        Optional  (str) sent_notifications: <class 'int'>,\n        Optional  (str) received_notifications: <class 'int'>,\n        Optional  (str) always_compare_med: <class 'bool'>,\n        Optional  (str) bestpath_compare_routerid: <class 'bool'>,\n        Optional  (str) bestpath_cost_community_ignore: <class 'bool'>,\n        Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>,\n        Optional  (str) enforce_first_as: <class 'bool'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n        Optional  (str) graceful_restart_restart_time: <class 'int'>,\n        Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n        Optional  (str) log_neighbor_changes: <class 'bool'>,\n        Optional  (str) vrf_info: {\n          Any  (str) *: {\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) nbrs_estab: <class 'int'>,\n            Optional  (str) cfg: <class 'int'>,\n            },\n          },\n        Optional  (str) att: {\n          Any  (str) *: {\n            Optional  (str) number: <class 'int'>,\n            Optional  (str) memory_used: <class 'int'>,\n            },\n          },\n        Optional  (str) pool: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) message_logging_pool_summary: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) bmp_pool_summary: {\n          Any  (str) *: {\n            Optional  (str) alloc: <class 'int'>,\n            Optional  (str) free: <class 'int'>,\n            },\n          },\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) dampening: <class 'bool'>,\n            Optional  (str) client_to_client_reflection: <class 'bool'>,\n            Optional  (str) dynamic_med: <class 'bool'>,\n            Optional  (str) dynamic_med_int: <class 'str'>,\n            Optional  (str) dynamic_med_timer: <class 'str'>,\n            Optional  (str) dynamic_med_periodic_timer: <class 'str'>,\n            Optional  (str) scan_interval: <class 'str'>,\n            Optional  (str) total_prefixes_scanned: <class 'str'>,\n            Optional  (str) prefix_scanned_per_segment: <class 'str'>,\n            Optional  (str) num_of_scan_segments: <class 'str'>,\n            Optional  (str) nexthop_resolution_minimum_prefix_length: <class 'str'>,\n            Optional  (str) main_table_version: <class 'str'>,\n            Optional  (str) table_version_synced_to_rib: <class 'str'>,\n            Optional  (str) table_version_acked_by_rib: <class 'str'>,\n            Optional  (str) rib_has_not_converged: <class 'str'>,\n            Optional  (str) rib_table_prefix_limit_reached: <class 'str'>,\n            Optional  (str) rib_table_prefix_limit_ver: <class 'str'>,\n            Optional  (str) permanent_network: <class 'str'>,\n            Optional  (str) current_vrf: <class 'str'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) state: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'str'>,\n            Optional  (str) attribute_download: <class 'str'>,\n            Optional  (str) label_retention_timer_value: <class 'str'>,\n            Optional  (str) soft_reconfig_entries: <class 'str'>,\n            Optional  (str) table_bit_field_size: <class 'str'>,\n            Optional  (str) chunk_elememt_size: <class 'str'>,\n            Optional  (str) enabled: <class 'bool'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) advertise_inactive_routes: <class 'bool'>,\n            Optional  (str) ebgp_max_paths: <class 'int'>,\n            Optional  (str) ibgp_max_paths: <class 'int'>,\n            Optional  (str) total_paths: <class 'int'>,\n            Optional  (str) total_prefixes: <class 'int'>,\n            Optional  (str) thread: {\n              Any  (str) *: {\n                Optional  (str) triggers: {\n                  Any  (str) *: {\n                    Optional  (str) ver: <class 'int'>,\n                    Optional  (str) tbl_ver: <class 'int'>,\n                    Optional  (str) trig_tid: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) remote_local: {\n              Any  (str) *: {\n                Optional  (str) allocated: <class 'int'>,\n                Optional  (str) freed: <class 'int'>,\n                },\n              },\n            Optional  (str) prefixes_path: {\n              Any  (str) *: {\n                Optional  (str) number: <class 'int'>,\n                Optional  (str) mem_used: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_address_family_process_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L1149"}}, "show bgp instance {instance} {vrf_type} {vrf} {address_family} summary": {"iosxr": {"class": "ShowBgpInstanceSummary", "doc": " Parser for:\n        show bgp instance all all all summary\n        show bgp instance all vrf all summary\n        show bgp instance all vrf all ipv4 unicast summary\n        show bgp instance all vrf all ipv6 unicast summary\n        show bgp instance <instance> all all summary\n        show bgp instance <instance> vrf <vrf> <address_family> summary\n        For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n        - vrf_type\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_vrf: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'str'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) generic_scan_interval: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'int'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) operation_mode: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) instance_number: <class 'str'>,\n            Optional  (str) vrf_state: <class 'str'>,\n            Optional  (str) process: {\n              Any  (str) *: {\n                'rcvtblver': <class 'int'>,\n                'brib_rib': <class 'int'>,\n                'labelver': <class 'int'>,\n                'importver': <class 'int'>,\n                'sendtblver': <class 'int'>,\n                'standbyver': <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) neighbor: {\n          Any  (str) *: {\n            'remote_as': <class 'int'>,\n            'address_family': {\n              Any  (str) *: {\n                'tbl_ver': <class 'int'>,\n                'spk': <class 'int'>,\n                'msg_rcvd': <class 'int'>,\n                'msg_sent': <class 'int'>,\n                'input_queue': <class 'int'>,\n                'output_queue': <class 'int'>,\n                'up_down': <class 'str'>,\n                'state_pfxrcd': <class 'str'>,\n                Optional  (str) route_distinguisher: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_instance_instance_vrf_type_vrf_address_family_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L4459"}}, "show bgp instances": {"iosxr": {"class": "ShowBgpInstances", "doc": "Parser for show bgp instances", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'bgp_id': <class 'int'>,\n    'instance_id': <class 'int'>,\n    'placed_grp': <class 'str'>,\n    'num_vrfs': <class 'int'>,\n    Optional  (str) address_families: <class 'list'>,\n    },\n  },\nOptional  (str) number_of_bgp_instances: <class 'int'>,\n}", "uid": "show_bgp_instances", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L203"}}, "show bgp ipv4 mvpn": {"nxos": {"class": "ShowBgpIpMvpnRouteType", "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'af_name': <class 'str'>,\n            'table_version': <class 'str'>,\n            'router_id': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd_val: <class 'str'>,\n                Optional  (str) rd_vrf: <class 'str'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'nonipprefix': <class 'str'>,\n                    'path': {\n                      Any  (str) *: {\n                        'pathnr': <class 'int'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) statuscode: <class 'str'>,\n                        Optional  (str) bestcode: <class 'str'>,\n                        Optional  (str) typecode: <class 'str'>,\n                        'ipnexthop': <class 'str'>,\n                        'weight': <class 'str'>,\n                        'origin': <class 'str'>,\n                        'localpref': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_ipv4_mvpn", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11324"}}, "show bgp ipv4 mvpn route-type {route_type}": {"nxos": {"class": "ShowBgpIpMvpnRouteType", "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'af_name': <class 'str'>,\n            'table_version': <class 'str'>,\n            'router_id': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd_val: <class 'str'>,\n                Optional  (str) rd_vrf: <class 'str'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'nonipprefix': <class 'str'>,\n                    'path': {\n                      Any  (str) *: {\n                        'pathnr': <class 'int'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) statuscode: <class 'str'>,\n                        Optional  (str) bestcode: <class 'str'>,\n                        Optional  (str) typecode: <class 'str'>,\n                        'ipnexthop': <class 'str'>,\n                        'weight': <class 'str'>,\n                        'origin': <class 'str'>,\n                        'localpref': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_ipv4_mvpn_route-type_route_type", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11324"}}, "show bgp ipv4 mvpn route-type {route_type} vrf {vrf}": {"nxos": {"class": "ShowBgpIpMvpnRouteType", "doc": "Parser for:\n               show bgp ipv4 mvpn\n               show bgp ipv4 mvpn route-type <route_type>\n               show bgp ipv4 mvpn route-type <route_type> vrf <vrf>\n               show bgp ipv4 mvpn route-type <route_type> vrf all", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'af_name': <class 'str'>,\n            'table_version': <class 'str'>,\n            'router_id': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd_val: <class 'str'>,\n                Optional  (str) rd_vrf: <class 'str'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'nonipprefix': <class 'str'>,\n                    'path': {\n                      Any  (str) *: {\n                        'pathnr': <class 'int'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) statuscode: <class 'str'>,\n                        Optional  (str) bestcode: <class 'str'>,\n                        Optional  (str) typecode: <class 'str'>,\n                        'ipnexthop': <class 'str'>,\n                        'weight': <class 'str'>,\n                        'origin': <class 'str'>,\n                        'localpref': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_ipv4_mvpn_route-type_route_type_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11324"}}, "show bgp ipv4 mvpn sa-ad detail": {"nxos": {"class": "ShowBgpIpMvpnSaadDetail", "doc": "parser for:\n        show bgp ipv4 mvpn sa-ad detail\n        show bgp ipv4 mvpn sa-ad detail vrf <vrf>\n        show bgp ipv4 mvpn sa-ad detail vrf all", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'af_name': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd_val: <class 'str'>,\n                Optional  (str) rd_vrf: <class 'str'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'nonipprefix': <class 'str'>,\n                    'prefixversion': <class 'int'>,\n                    Optional  (str) totalpaths: <class 'int'>,\n                    'bestpathnr': <class 'int'>,\n                    Optional  (str) mpath: <class 'str'>,\n                    Optional  (str) on_newlist: <class 'bool'>,\n                    Optional  (str) on_xmitlist: <class 'bool'>,\n                    Optional  (str) suppressed: <class 'bool'>,\n                    Optional  (str) needsresync: <class 'bool'>,\n                    Optional  (str) locked: <class 'bool'>,\n                    'path': {\n                      Any  (str) *: {\n                        Optional  (str) pathnr: <class 'int'>,\n                        'pathtype': <class 'str'>,\n                        Optional  (str) policyincomplete: <class 'bool'>,\n                        'pathvalid': <class 'bool'>,\n                        'pathbest': <class 'bool'>,\n                        Optional  (str) pathdeleted: <class 'bool'>,\n                        Optional  (str) pathstaled: <class 'bool'>,\n                        Optional  (str) pathhistory: <class 'bool'>,\n                        Optional  (str) pathovermaxaslimit: <class 'bool'>,\n                        Optional  (str) pathmultipath: <class 'bool'>,\n                        Optional  (str) pathnolabeledrnh: <class 'bool'>,\n                        'ipnexthop': <class 'str'>,\n                        Optional  (str) nexthop_status: <class 'str'>,\n                        'nexthopmetric': <class 'int'>,\n                        'neighbor': <class 'str'>,\n                        'neighborid': <class 'str'>,\n                        Optional  (str) origin: <class 'str'>,\n                        'localpref': <class 'int'>,\n                        'weight': <class 'int'>,\n                        Optional  (str) inlabel: <class 'int'>,\n                        Optional  (str) extcommunity: <class 'list'>,\n                        Optional  (str) advertisedto: <class 'list'>,\n                        Optional  (str) originatorid: <class 'str'>,\n                        Optional  (str) clusterlist: <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_ipv4_mvpn_sa-ad_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11563"}}, "show bgp ipv4 mvpn sa-ad detail vrf {vrf}": {"nxos": {"class": "ShowBgpIpMvpnSaadDetail", "doc": "parser for:\n        show bgp ipv4 mvpn sa-ad detail\n        show bgp ipv4 mvpn sa-ad detail vrf <vrf>\n        show bgp ipv4 mvpn sa-ad detail vrf all", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'af_name': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd_val: <class 'str'>,\n                Optional  (str) rd_vrf: <class 'str'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'nonipprefix': <class 'str'>,\n                    'prefixversion': <class 'int'>,\n                    Optional  (str) totalpaths: <class 'int'>,\n                    'bestpathnr': <class 'int'>,\n                    Optional  (str) mpath: <class 'str'>,\n                    Optional  (str) on_newlist: <class 'bool'>,\n                    Optional  (str) on_xmitlist: <class 'bool'>,\n                    Optional  (str) suppressed: <class 'bool'>,\n                    Optional  (str) needsresync: <class 'bool'>,\n                    Optional  (str) locked: <class 'bool'>,\n                    'path': {\n                      Any  (str) *: {\n                        Optional  (str) pathnr: <class 'int'>,\n                        'pathtype': <class 'str'>,\n                        Optional  (str) policyincomplete: <class 'bool'>,\n                        'pathvalid': <class 'bool'>,\n                        'pathbest': <class 'bool'>,\n                        Optional  (str) pathdeleted: <class 'bool'>,\n                        Optional  (str) pathstaled: <class 'bool'>,\n                        Optional  (str) pathhistory: <class 'bool'>,\n                        Optional  (str) pathovermaxaslimit: <class 'bool'>,\n                        Optional  (str) pathmultipath: <class 'bool'>,\n                        Optional  (str) pathnolabeledrnh: <class 'bool'>,\n                        'ipnexthop': <class 'str'>,\n                        Optional  (str) nexthop_status: <class 'str'>,\n                        'nexthopmetric': <class 'int'>,\n                        'neighbor': <class 'str'>,\n                        'neighborid': <class 'str'>,\n                        Optional  (str) origin: <class 'str'>,\n                        'localpref': <class 'int'>,\n                        'weight': <class 'int'>,\n                        Optional  (str) inlabel: <class 'int'>,\n                        Optional  (str) extcommunity: <class 'list'>,\n                        Optional  (str) advertisedto: <class 'list'>,\n                        Optional  (str) originatorid: <class 'str'>,\n                        Optional  (str) clusterlist: <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_ipv4_mvpn_sa-ad_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11563"}}, "show bgp l2vpn evpn": {"iosxr": {"class": "ShowBgpL2vpnEvpn", "doc": "Parser for show bgp l2vpn evpn", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) router_identifier: <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) generic_scan_interval: <class 'str'>,\n        Optional  (str) non_stop_routing: <class 'str'>,\n        Optional  (str) table_state: <class 'str'>,\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) rd_version: <class 'int'>,\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) local_router_id: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) nsr_initial_initsync_version: <class 'str'>,\n        Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n        Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n        Optional  (str) scan_interval: <class 'int'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) aggregate_address_ipv4_address: <class 'str'>,\n        Optional  (str) aggregate_address_ipv4_mask: <class 'str'>,\n        Optional  (str) aggregate_address_as_set: <class 'bool'>,\n        Optional  (str) aggregate_address_summary_only: <class 'bool'>,\n        Optional  (str) v6_aggregate_address_ipv6_address: <class 'str'>,\n        Optional  (str) v6_aggregate_address_as_set: <class 'bool'>,\n        Optional  (str) v6_aggregate_address_summary_only: <class 'bool'>,\n        Optional  (str) processed_prefix: <class 'int'>,\n        Optional  (str) processed_paths: <class 'int'>,\n        Optional  (str) prefixes: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) path_type: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localprf: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L5608"}, "nxos": {"class": "ShowBgpL2vpnEvpn", "doc": "Parser for:\n           show bgp l2vpn evpn\n           show bgp l2vpn evpn vrf <vrf>\n           show bgp l2vpn evpn vrf all", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'af_name': <class 'str'>,\n            'table_version': <class 'str'>,\n            'router_id': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd_val: <class 'str'>,\n                Optional  (str) rd_vrf: <class 'str'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'nonipprefix': <class 'str'>,\n                    'path': {\n                      Any  (str) *: {\n                        'pathnr': <class 'int'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) statuscode: <class 'str'>,\n                        Optional  (str) bestcode: <class 'str'>,\n                        Optional  (str) typecode: <class 'str'>,\n                        'ipnexthop': <class 'str'>,\n                        'weight': <class 'str'>,\n                        'origin': <class 'str'>,\n                        'localpref': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11808"}}, "show bgp l2vpn evpn advertised": {"iosxr": {"class": "ShowBgpL2vpnEvpnAdvertised", "doc": "Parser for:\n        * 'show bgp l2vpn evpn advertised'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'neighbor': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'advertised': {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                'neighbor': <class 'str'>,\n                'neighbor_router_id': <class 'str'>,\n                'flags': <class 'list'>,\n                'rx_path_id': <class 'int'>,\n                'local_path_id': <class 'int'>,\n                'version': <class 'int'>,\n                'inbound_attributes': {\n                  'nexthop': <class 'str'>,\n                  'community_attributes': <class 'str'>,\n                  Optional  (str) origin: <class 'str'>,\n                  Optional  (str) aspath: <class 'str'>,\n                  Optional  (str) community: <class 'list'>,\n                  Optional  (str) extended_community: <class 'list'>,\n                  },\n                'outbound_attributes': {\n                  'nexthop': <class 'str'>,\n                  'community_attributes': <class 'str'>,\n                  Optional  (str) origin: <class 'str'>,\n                  Optional  (str) aspath: <class 'str'>,\n                  Optional  (str) community: <class 'list'>,\n                  Optional  (str) extended_community: <class 'list'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn_advertised", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6354"}}, "show bgp l2vpn evpn neighbors": {"iosxr": {"class": "ShowBgpL2vpnEvpnNeighbors", "doc": "Parser for show bgp l2vpn evpn neighbors\n                  show bgp l2vpn evpn neighbors <neighbor>\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6527"}, "nxos": {"class": "ShowBgpL2vpnEvpnNeighbors", "doc": "parser for:\n        show bgp l2vpn evpn neighbors", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbor': {\n              Any  (str) *: {\n                'neighbor': <class 'str'>,\n                'remoteas': <class 'int'>,\n                Optional  (str) localas: <class 'int'>,\n                Optional  (str) link: <class 'str'>,\n                Optional  (str) index: <class 'int'>,\n                Optional  (str) version: <class 'int'>,\n                Optional  (str) remote_id: <class 'str'>,\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) up: <class 'bool'>,\n                Optional  (str) retry: <class 'str'>,\n                Optional  (str) elapsedtime: <class 'str'>,\n                Optional  (str) connectedif: <class 'str'>,\n                Optional  (str) bfd: <class 'bool'>,\n                Optional  (str) ttlsecurity: <class 'bool'>,\n                Optional  (str) password: <class 'bool'>,\n                Optional  (str) passiveonly: <class 'bool'>,\n                Optional  (str) localas_inactive: <class 'bool'>,\n                Optional  (str) remote_privateas: <class 'bool'>,\n                'lastread': <class 'str'>,\n                'holdtime': <class 'int'>,\n                'keepalivetime': <class 'int'>,\n                Optional  (str) lastwrite: <class 'str'>,\n                Optional  (str) keepalive: <class 'str'>,\n                'msgrecvd': <class 'int'>,\n                'notificationsrcvd': <class 'int'>,\n                'recvbufbytes': <class 'int'>,\n                'msgsent': <class 'int'>,\n                'notificationssent': <class 'int'>,\n                'sentbytesoutstanding': <class 'int'>,\n                Optional  (str) totalbytessent: <class 'int'>,\n                'connsestablished': <class 'int'>,\n                'connsdropped': <class 'int'>,\n                Optional  (str) resettime: <class 'str'>,\n                Optional  (str) resetreason: <class 'str'>,\n                Optional  (str) peerresettime: <class 'str'>,\n                Optional  (str) peerresetreason: <class 'str'>,\n                Optional  (str) capsnegotiated: <class 'bool'>,\n                Optional  (str) capmpadvertised: <class 'bool'>,\n                Optional  (str) caprefreshadvertised: <class 'bool'>,\n                Optional  (str) capgrdynamicadvertised: <class 'bool'>,\n                Optional  (str) capmprecvd: <class 'bool'>,\n                Optional  (str) caprefreshrecvd: <class 'bool'>,\n                Optional  (str) capgrdynamicrecvd: <class 'bool'>,\n                Optional  (str) capolddynamicadvertised: <class 'bool'>,\n                Optional  (str) capolddynamicrecvd: <class 'bool'>,\n                Optional  (str) caprradvertised: <class 'bool'>,\n                Optional  (str) caprrrecvd: <class 'bool'>,\n                Optional  (str) capoldrradvertised: <class 'bool'>,\n                Optional  (str) capoldrrrecvd: <class 'bool'>,\n                Optional  (str) capas4advertised: <class 'bool'>,\n                Optional  (str) capas4recvd: <class 'bool'>,\n                Optional  (str) af: {\n                  Any  (str) *: {\n                    'af_advertised': <class 'bool'>,\n                    'af_recvd': <class 'bool'>,\n                    'af_name': <class 'str'>,\n                    },\n                  },\n                Optional  (str) capgradvertised: <class 'bool'>,\n                Optional  (str) capgrrecvd: <class 'bool'>,\n                Optional  (str) graf: {\n                  Any  (str) *: {\n                    Optional  (str) gr_af_name: <class 'str'>,\n                    Optional  (str) gr_adv: <class 'bool'>,\n                    Optional  (str) gr_recv: <class 'bool'>,\n                    Optional  (str) gr_fwd: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) grrestarttime: <class 'int'>,\n                Optional  (str) grstaletiem: <class 'int'>,\n                Optional  (str) grrecvdrestarttime: <class 'int'>,\n                Optional  (str) capextendednhadvertised: <class 'bool'>,\n                Optional  (str) capextendednhrecvd: <class 'bool'>,\n                Optional  (str) capextendednhaf: {\n                  Any  (str) *: {\n                    Optional  (str) capextendednh_af_name: <class 'str'>,\n                    },\n                  },\n                Optional  (str) epe: <class 'bool'>,\n                Optional  (str) firstkeepalive: <class 'bool'>,\n                'openssent': <class 'int'>,\n                'opensrecvd': <class 'int'>,\n                'updatessent': <class 'int'>,\n                'updatesrecvd': <class 'int'>,\n                'keepalivesent': <class 'int'>,\n                'keepaliverecvd': <class 'int'>,\n                'rtrefreshsent': <class 'int'>,\n                'rtrefreshrecvd': <class 'int'>,\n                'capabilitiessent': <class 'int'>,\n                'capabilitiesrecvd': <class 'int'>,\n                'bytessent': <class 'int'>,\n                'bytesrecvd': <class 'int'>,\n                Optional  (str) peraf: {\n                  Any  (str) *: {\n                    Optional  (str) per_af_name: <class 'str'>,\n                    Optional  (str) tableversion: <class 'int'>,\n                    Optional  (str) neighbortableversion: <class 'int'>,\n                    Optional  (str) pfxrecvd: <class 'int'>,\n                    Optional  (str) pfxbytes: <class 'int'>,\n                    Optional  (str) insoftreconfigallowed: <class 'bool'>,\n                    Optional  (str) sendcommunity: <class 'bool'>,\n                    Optional  (str) sendextcommunity: <class 'bool'>,\n                    Optional  (str) asoverride: <class 'bool'>,\n                    Optional  (str) peerascheckdisabled: <class 'bool'>,\n                    Optional  (str) rrconfigured: <class 'bool'>,\n                    Optional  (str) pfxbytes: <class 'int'>,\n                    },\n                  },\n                Optional  (str) localaddr: <class 'str'>,\n                Optional  (str) localport: <class 'int'>,\n                Optional  (str) remoteaddr: <class 'str'>,\n                Optional  (str) remoteport: <class 'int'>,\n                Optional  (str) fd: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L10735"}}, "show bgp l2vpn evpn neighbors {neighbor}": {"iosxr": {"class": "ShowBgpL2vpnEvpnNeighbors", "doc": "Parser for show bgp l2vpn evpn neighbors\n                  show bgp l2vpn evpn neighbors <neighbor>\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6527"}}, "show bgp l2vpn evpn neighbors {neighbor} advertised-routes": {"nxos": {"class": "ShowBgpL2vpnEvpnNeighborsAdvertisedRoutes", "doc": "Parser for show bgp l2vpn evpn neighbors <neighbor> advertised-routes", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) rd_l2vni: <class 'int'>,\n            Optional  (str) rd_l3vni: <class 'int'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) locprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L4986"}}, "show bgp l2vpn evpn route-type {route_type}": {"nxos": {"class": "ShowBgpL2vpnEvpnRouteType", "doc": "parser for:\n        show bgp l2vpn evpn route-type <1>\n        show bgp l2vpn evpn route-type <2>\n        show bgp l2vpn evpn route-type <3>\n        show bgp l2vpn evpn route-type <4>", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd: <class 'str'>,\n                Optional  (str) rd_vrf: <class 'str'>,\n                Optional  (str) rd_vniid: <class 'int'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'nonipprefix': <class 'str'>,\n                    'prefixversion': <class 'int'>,\n                    Optional  (str) totalpaths: <class 'int'>,\n                    'bestpathnr': <class 'int'>,\n                    Optional  (str) mpath: <class 'str'>,\n                    Optional  (str) on_newlist: <class 'bool'>,\n                    Optional  (str) on_xmitlist: <class 'bool'>,\n                    Optional  (str) suppressed: <class 'bool'>,\n                    Optional  (str) needsresync: <class 'bool'>,\n                    Optional  (str) locked: <class 'bool'>,\n                    'path': {\n                      Any  (str) *: {\n                        Optional  (str) pathnr: <class 'int'>,\n                        Optional  (str) policyincomplete: <class 'bool'>,\n                        'pathvalid': <class 'bool'>,\n                        'pathbest': <class 'bool'>,\n                        Optional  (str) pathdeleted: <class 'bool'>,\n                        Optional  (str) pathstaled: <class 'bool'>,\n                        Optional  (str) pathhistory: <class 'bool'>,\n                        Optional  (str) pathovermaxaslimit: <class 'bool'>,\n                        Optional  (str) pathmultipath: <class 'bool'>,\n                        Optional  (str) pathnolabeledrnh: <class 'bool'>,\n                        'ipnexthop': <class 'str'>,\n                        'nexthopmetric': <class 'int'>,\n                        'neighbor': <class 'str'>,\n                        'neighborid': <class 'str'>,\n                        Optional  (str) inaccessible: <class 'bool'>,\n                        'origin': <class 'str'>,\n                        'localpref': <class 'int'>,\n                        'weight': <class 'int'>,\n                        Optional  (str) inlabel: <class 'int'>,\n                        Optional  (str) extcommunity: <class 'list'>,\n                        Optional  (str) advertisedto: <class 'list'>,\n                        Optional  (str) originatorid: <class 'str'>,\n                        Optional  (str) clusterlist: <class 'list'>,\n                        Optional  (str) pmsi_tunnel_attribute: {\n                          Optional  (str) flags: <class 'str'>,\n                          Optional  (str) label: <class 'str'>,\n                          Optional  (str) tunnel_type: <class 'str'>,\n                          Optional  (str) tunnel_id: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn_route-type_route_type", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L10335"}}, "show bgp l2vpn evpn summary": {"nxos": {"class": "ShowBgpL2vpnEvpnSummary", "doc": "parser for:\n        show bgp l2vpn evpn summary", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'vrf_router_id': <class 'str'>,\n        'vrf_local_as': <class 'int'>,\n        'address_family': {\n          Any  (str) *: {\n            'tableversion': <class 'int'>,\n            'configuredpeers': <class 'int'>,\n            'capablepeers': <class 'int'>,\n            'totalnetworks': <class 'int'>,\n            'totalpaths': <class 'int'>,\n            'memoryused': <class 'int'>,\n            'numberattrs': <class 'int'>,\n            'bytesattrs': <class 'int'>,\n            'numberpaths': <class 'int'>,\n            'bytespaths': <class 'int'>,\n            'numbercommunities': <class 'int'>,\n            'bytescommunities': <class 'int'>,\n            'numberclusterlist': <class 'int'>,\n            'bytesclusterlist': <class 'int'>,\n            'dampening': <class 'str'>,\n            'neighbor': {\n              Any  (str) *: {\n                'neighbor': <class 'str'>,\n                'version': <class 'int'>,\n                'msgrecvd': <class 'int'>,\n                'msgsent': <class 'int'>,\n                'neighbortableversion': <class 'int'>,\n                'inq': <class 'int'>,\n                'outq': <class 'int'>,\n                'remoteas': <class 'int'>,\n                'time': <class 'str'>,\n                'state': <class 'str'>,\n                Optional  (str) prefixreceived: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L10121"}}, "show bgp l2vpn evpn vrf {vrf}": {"nxos": {"class": "ShowBgpL2vpnEvpn", "doc": "Parser for:\n           show bgp l2vpn evpn\n           show bgp l2vpn evpn vrf <vrf>\n           show bgp l2vpn evpn vrf all", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'vrf_name_out': <class 'str'>,\n        'address_family': {\n          Any  (str) *: {\n            'af_name': <class 'str'>,\n            'table_version': <class 'str'>,\n            'router_id': <class 'str'>,\n            'rd': {\n              Any  (str) *: {\n                Optional  (str) rd_val: <class 'str'>,\n                Optional  (str) rd_vrf: <class 'str'>,\n                'prefix': {\n                  Any  (str) *: {\n                    'nonipprefix': <class 'str'>,\n                    'path': {\n                      Any  (str) *: {\n                        'pathnr': <class 'int'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) statuscode: <class 'str'>,\n                        Optional  (str) bestcode: <class 'str'>,\n                        Optional  (str) typecode: <class 'str'>,\n                        'ipnexthop': <class 'str'>,\n                        'weight': <class 'str'>,\n                        'origin': <class 'str'>,\n                        'localpref': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11808"}}, "show bgp l2vpn evpn {mac} | be \"best path, in rib\" n {count2}": {"nxos": {"class": "ShowBgpL2vpnEvpnWord", "doc": "Parser for show bgp l2vpn evpn <WORD> | be \"best path, in rib\" n <WORD>", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'mac_address': {\n  Any  (str) *: {\n    'next_hop': <class 'str'>,\n    'received_label': <class 'str'>,\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn_mac___be_\"best_path,_in_rib\"_n_count2", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11214"}}, "show bgp l2vpn evpn {mac} | grep -b {count1} -a {count2} \"best path\"": {"nxos": {"class": "ShowBgpL2vpnEvpnWord", "doc": "Parser for show bgp l2vpn evpn <WORD> | be \"best path, in rib\" n <WORD>", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'mac_address': {\n  Any  (str) *: {\n    'next_hop': <class 'str'>,\n    'received_label': <class 'str'>,\n    },\n  },\n}", "uid": "show_bgp_l2vpn_evpn_mac___grep_-b_count1_-a_count2_\"best_path\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11214"}}, "show bgp neighbors": {"iosxe": {"class": "ShowBgpNeighbors", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4050"}, "iosxr": {"class": "ShowBgpNeighbors", "doc": "Parser for show bgp neighbors\n                  show bgp neighbors {neighbor}\n                  show bgp vrf {vrf} neighbors\n                  show bgp vrf {vrf} neighbors {neighbor}\n                  show bgp {address_family} neighbors\n                  show bgp {address_family} neighbors {neighbor}\n                  show bgp vrf {vrf} {address_family} neighbors\n                  show bgp vrf {vrf} {address_family} neighbors {neighbor}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6549"}}, "show bgp neighbors {neighbor}": {"iosxe": {"class": "ShowBgpNeighbors", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4050"}, "iosxr": {"class": "ShowBgpNeighbors", "doc": "Parser for show bgp neighbors\n                  show bgp neighbors {neighbor}\n                  show bgp vrf {vrf} neighbors\n                  show bgp vrf {vrf} neighbors {neighbor}\n                  show bgp {address_family} neighbors\n                  show bgp {address_family} neighbors {neighbor}\n                  show bgp vrf {vrf} {address_family} neighbors\n                  show bgp vrf {vrf} {address_family} neighbors {neighbor}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6549"}}, "show bgp neighbors {neighbor} advertised-routes": {"iosxe": {"class": "ShowBgpNeighborsAdvertisedRoutes", "doc": " Parser for:\n        * 'show bgp {address_family} neighbors {neighbor} advertised-routes'\n        * 'show bgp neighbors {neighbor} advertised-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4822"}}, "show bgp neighbors {neighbor} received-routes": {"iosxe": {"class": "ShowBgpNeighborsReceivedRoutes", "doc": " Parser for:\n        * 'show bgp {address_family} neighbors {neighbor} received-routes'\n        * 'show bgp neighbors {neighbor} received-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5433"}}, "show bgp neighbors {neighbor} routes": {"iosxe": {"class": "ShowBgpNeighborsRoutes", "doc": " Parser for:\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor} routes'\n        * 'show bgp {address_family} neighbors {neighbor} routes'\n        * 'show bgp neighbors {neighbor} routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6071"}}, "show bgp peer-template": {"nxos": {"class": "ShowBgpPeerTemplateCmd", "doc": "Parser for:\n        show bgp peer-template\n    parser class implements detail parsing mechanisms for cli,xml output.", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'template': {\n  Any  (str) *: {\n    Optional  (str) source_interface: <class 'str'>,\n    Optional  (str) low_mem_exempt: <class 'bool'>,\n    Optional  (str) logging_neighbor_events: <class 'bool'>,\n    Optional  (str) external_bgp_peer_hops_limit: <class 'int'>,\n    Optional  (str) passive_only: <class 'bool'>,\n    Optional  (str) local_as_inactive: <class 'bool'>,\n    Optional  (str) remove_private_as: <class 'bool'>,\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'inheriting_peer': {\n          Any  (str) *: {\n            'inheriting_peer': <class 'str'>,\n            },\n          },\n        },\n      },\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) condition_map: <class 'str'>,\n        Optional  (str) advertise_map: <class 'str'>,\n        Optional  (str) advertise_map_status: <class 'str'>,\n        Optional  (str) in_soft_reconfig_allowed: <class 'bool'>,\n        Optional  (str) send_community: <class 'bool'>,\n        Optional  (str) send_ext_community: <class 'bool'>,\n        Optional  (str) local_nexthop: <class 'str'>,\n        Optional  (str) third_party_nexthop: <class 'bool'>,\n        Optional  (str) max_pfx: <class 'int'>,\n        Optional  (str) soo: <class 'str'>,\n        Optional  (str) weight: <class 'int'>,\n        Optional  (str) allow_as_in: <class 'int'>,\n        Optional  (str) as_override: <class 'bool'>,\n        Optional  (str) peer_as_check_disabled: <class 'bool'>,\n        Optional  (str) rr_configured: <class 'bool'>,\n        Optional  (str) default_originate: <class 'bool'>,\n        Optional  (str) default_originate_route_map: <class 'str'>,\n        Optional  (str) unsuppress_map: <class 'str'>,\n        Optional  (str) in_policy: {\n          Any  (str) *: {\n            'type': <class 'str'>,\n            'name': <class 'str'>,\n            },\n          },\n        Optional  (str) out_policy: {\n          Any  (str) *: {\n            'type': <class 'str'>,\n            'name': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_peer-template", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L8115"}}, "show bgp process vrf all": {"nxos": {"class": "ShowBgpProcessVrfAll", "doc": "Parser for:\n        show bgp process vrf all\n        show bgp process vrf <vrf>\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) bgp_pid: <class 'int'>,\nOptional  (str) bgp_protocol_started_reason: <class 'str'>,\nOptional  (str) bgp_performance_mode: <class 'str'>,\nOptional  (str) bgp_tag: <class 'str'>,\nOptional  (str) bgp_protocol_state: <class 'str'>,\nOptional  (str) bgp_isolate_mode: <class 'str'>,\nOptional  (str) bgp_mmode: <class 'str'>,\nOptional  (str) bgp_memory_state: <class 'str'>,\nOptional  (str) bgp_asformat: <class 'str'>,\nOptional  (str) segment_routing_global_block: <class 'str'>,\nOptional  (str) num_attr_entries: <class 'int'>,\nOptional  (str) hwm_attr_entries: <class 'int'>,\nOptional  (str) bytes_used: <class 'int'>,\nOptional  (str) entries_pending_delete: <class 'int'>,\nOptional  (str) hwm_entries_pending_delete: <class 'int'>,\nOptional  (str) bgp_paths_per_hwm_attr: <class 'int'>,\nOptional  (str) bgp_as_path_entries: <class 'int'>,\nOptional  (str) bytes_used_as_path_entries: <class 'int'>,\nOptional  (str) vrf: {\n  Any  (str) *: {\n    'vrf_id': <class 'str'>,\n    'vrf_state': <class 'str'>,\n    Optional  (str) vnid: <class 'str'>,\n    Optional  (str) topo_id: <class 'str'>,\n    Optional  (str) encap_type: <class 'str'>,\n    Optional  (str) vtep_ip: <class 'str'>,\n    Optional  (str) vtep_virtual_ip: <class 'str'>,\n    Optional  (str) vtep_vip_r: <class 'str'>,\n    Optional  (str) router_mac: <class 'str'>,\n    Optional  (str) vip_derived_mac: <class 'str'>,\n    Optional  (str) router_id: <class 'str'>,\n    Optional  (str) conf_router_id: <class 'str'>,\n    Optional  (str) confed_id: <class 'int'>,\n    Optional  (str) cluster_id: <class 'str'>,\n    'num_conf_peers': <class 'int'>,\n    'num_pending_conf_peers': <class 'int'>,\n    'num_established_peers': <class 'int'>,\n    Optional  (str) vrf_rd: <class 'str'>,\n    Optional  (str) vrf_evpn_rd: <class 'str'>,\n    Optional  (str) graceful_restart: <class 'bool'>,\n    Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n    Optional  (str) graceful_restart_restart_time: <class 'int'>,\n    Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) table_state: <class 'str'>,\n        Optional  (str) enabled: <class 'bool'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) advertise_inactive_routes: <class 'bool'>,\n        Optional  (str) ebgp_max_paths: <class 'int'>,\n        Optional  (str) ibgp_max_paths: <class 'int'>,\n        Optional  (str) total_paths: <class 'int'>,\n        Optional  (str) total_prefixes: <class 'int'>,\n        Optional  (str) peers: {\n          Any  (str) *: {\n            'active_peers': <class 'int'>,\n            'routes': <class 'int'>,\n            'paths': <class 'int'>,\n            'networks': <class 'int'>,\n            'aggregates': <class 'int'>,\n            },\n          },\n        Optional  (str) redistribution: {\n          Any  (str) *: {\n            Optional  (str) route_map: <class 'str'>,\n            },\n          },\n        Optional  (str) export_rt_list: <class 'str'>,\n        Optional  (str) import_rt_list: <class 'str'>,\n        Optional  (str) evpn_export_rt_list: <class 'str'>,\n        Optional  (str) evpn_import_rt_list: <class 'str'>,\n        Optional  (str) mvpn_export_rt_list: <class 'str'>,\n        Optional  (str) mvpn_import_rt_list: <class 'str'>,\n        Optional  (str) label_mode: <class 'str'>,\n        Optional  (str) aggregate_label: <class 'str'>,\n        Optional  (str) allocate_index: <class 'str'>,\n        Optional  (str) route_reflector: <class 'bool'>,\n        Optional  (str) next_hop_trigger_delay: {\n          'critical': <class 'int'>,\n          'non_critical': <class 'int'>,\n          },\n        Optional  (str) import_default_map: <class 'str'>,\n        Optional  (str) import_default_prefix_limit: <class 'int'>,\n        Optional  (str) import_default_prefix_count: <class 'int'>,\n        Optional  (str) export_default_map: <class 'str'>,\n        Optional  (str) export_default_prefix_limit: <class 'int'>,\n        Optional  (str) export_default_prefix_count: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_process_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L173"}}, "show bgp process vrf {vrf}": {"nxos": {"class": "ShowBgpProcessVrfAll", "doc": "Parser for:\n        show bgp process vrf all\n        show bgp process vrf <vrf>\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) bgp_pid: <class 'int'>,\nOptional  (str) bgp_protocol_started_reason: <class 'str'>,\nOptional  (str) bgp_performance_mode: <class 'str'>,\nOptional  (str) bgp_tag: <class 'str'>,\nOptional  (str) bgp_protocol_state: <class 'str'>,\nOptional  (str) bgp_isolate_mode: <class 'str'>,\nOptional  (str) bgp_mmode: <class 'str'>,\nOptional  (str) bgp_memory_state: <class 'str'>,\nOptional  (str) bgp_asformat: <class 'str'>,\nOptional  (str) segment_routing_global_block: <class 'str'>,\nOptional  (str) num_attr_entries: <class 'int'>,\nOptional  (str) hwm_attr_entries: <class 'int'>,\nOptional  (str) bytes_used: <class 'int'>,\nOptional  (str) entries_pending_delete: <class 'int'>,\nOptional  (str) hwm_entries_pending_delete: <class 'int'>,\nOptional  (str) bgp_paths_per_hwm_attr: <class 'int'>,\nOptional  (str) bgp_as_path_entries: <class 'int'>,\nOptional  (str) bytes_used_as_path_entries: <class 'int'>,\nOptional  (str) vrf: {\n  Any  (str) *: {\n    'vrf_id': <class 'str'>,\n    'vrf_state': <class 'str'>,\n    Optional  (str) vnid: <class 'str'>,\n    Optional  (str) topo_id: <class 'str'>,\n    Optional  (str) encap_type: <class 'str'>,\n    Optional  (str) vtep_ip: <class 'str'>,\n    Optional  (str) vtep_virtual_ip: <class 'str'>,\n    Optional  (str) vtep_vip_r: <class 'str'>,\n    Optional  (str) router_mac: <class 'str'>,\n    Optional  (str) vip_derived_mac: <class 'str'>,\n    Optional  (str) router_id: <class 'str'>,\n    Optional  (str) conf_router_id: <class 'str'>,\n    Optional  (str) confed_id: <class 'int'>,\n    Optional  (str) cluster_id: <class 'str'>,\n    'num_conf_peers': <class 'int'>,\n    'num_pending_conf_peers': <class 'int'>,\n    'num_established_peers': <class 'int'>,\n    Optional  (str) vrf_rd: <class 'str'>,\n    Optional  (str) vrf_evpn_rd: <class 'str'>,\n    Optional  (str) graceful_restart: <class 'bool'>,\n    Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n    Optional  (str) graceful_restart_restart_time: <class 'int'>,\n    Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) table_state: <class 'str'>,\n        Optional  (str) enabled: <class 'bool'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) advertise_inactive_routes: <class 'bool'>,\n        Optional  (str) ebgp_max_paths: <class 'int'>,\n        Optional  (str) ibgp_max_paths: <class 'int'>,\n        Optional  (str) total_paths: <class 'int'>,\n        Optional  (str) total_prefixes: <class 'int'>,\n        Optional  (str) peers: {\n          Any  (str) *: {\n            'active_peers': <class 'int'>,\n            'routes': <class 'int'>,\n            'paths': <class 'int'>,\n            'networks': <class 'int'>,\n            'aggregates': <class 'int'>,\n            },\n          },\n        Optional  (str) redistribution: {\n          Any  (str) *: {\n            Optional  (str) route_map: <class 'str'>,\n            },\n          },\n        Optional  (str) export_rt_list: <class 'str'>,\n        Optional  (str) import_rt_list: <class 'str'>,\n        Optional  (str) evpn_export_rt_list: <class 'str'>,\n        Optional  (str) evpn_import_rt_list: <class 'str'>,\n        Optional  (str) mvpn_export_rt_list: <class 'str'>,\n        Optional  (str) mvpn_import_rt_list: <class 'str'>,\n        Optional  (str) label_mode: <class 'str'>,\n        Optional  (str) aggregate_label: <class 'str'>,\n        Optional  (str) allocate_index: <class 'str'>,\n        Optional  (str) route_reflector: <class 'bool'>,\n        Optional  (str) next_hop_trigger_delay: {\n          'critical': <class 'int'>,\n          'non_critical': <class 'int'>,\n          },\n        Optional  (str) import_default_map: <class 'str'>,\n        Optional  (str) import_default_prefix_limit: <class 'int'>,\n        Optional  (str) import_default_prefix_count: <class 'int'>,\n        Optional  (str) export_default_map: <class 'str'>,\n        Optional  (str) export_default_prefix_limit: <class 'int'>,\n        Optional  (str) export_default_prefix_count: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_process_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L173"}}, "show bgp sessions": {"iosxr": {"class": "ShowBgpSessions", "doc": "Parser for show bgp sessions", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'spk': <class 'int'>,\n            'as_number': <class 'int'>,\n            'in_q': <class 'int'>,\n            'out_q': <class 'int'>,\n            'nbr_state': <class 'str'>,\n            'nsr_state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_sessions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L5354"}, "nxos": {"class": "ShowBgpSessions", "doc": "Parser for:\n        show bgp sessions", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'total_peers': <class 'int'>,\n'total_established_peers': <class 'int'>,\n'local_as': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    'local_as': <class 'int'>,\n    'vrf_peers': <class 'int'>,\n    'vrf_established_peers': <class 'int'>,\n    'router_id': <class 'str'>,\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'connections_dropped': <class 'int'>,\n        'remote_as': <class 'int'>,\n        'last_flap': <class 'str'>,\n        'last_read': <class 'str'>,\n        'last_write': <class 'str'>,\n        'state': <class 'str'>,\n        'local_port': <class 'int'>,\n        'remote_port': <class 'int'>,\n        'notifications_sent': <class 'int'>,\n        'notifications_received': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_sessions", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9246"}}, "show bgp sessions vrf {vrf}": {"nxos": {"class": "ShowBgpSessions", "doc": "Parser for:\n        show bgp sessions", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'total_peers': <class 'int'>,\n'total_established_peers': <class 'int'>,\n'local_as': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    'local_as': <class 'int'>,\n    'vrf_peers': <class 'int'>,\n    'vrf_established_peers': <class 'int'>,\n    'router_id': <class 'str'>,\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'connections_dropped': <class 'int'>,\n        'remote_as': <class 'int'>,\n        'last_flap': <class 'str'>,\n        'last_read': <class 'str'>,\n        'last_write': <class 'str'>,\n        'state': <class 'str'>,\n        'local_port': <class 'int'>,\n        'remote_port': <class 'int'>,\n        'notifications_sent': <class 'int'>,\n        'notifications_received': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_sessions_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9246"}}, "show bgp summary": {"ios": {"class": "ShowBgpSummary", "doc": "Parser for show bgp summary", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L126"}, "iosxe": {"class": "ShowBgpSummary", "doc": " Parser for:\n        * 'show bgp summary'\n        * 'show bgp {address_family} summary'\n        * 'show bgp {address_family} vrf {vrf} summary'\n        * 'show bgp {address_family} rd {rd} summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2279"}, "iosxr": {"class": "ShowBgpSummary", "doc": " Parser for:\n        * 'show bgp summary'\n        * 'show bgp {address_family} summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_vrf: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'str'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) generic_scan_interval: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'int'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) operation_mode: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) instance_number: <class 'str'>,\n            Optional  (str) vrf_state: <class 'str'>,\n            Optional  (str) process: {\n              Any  (str) *: {\n                'rcvtblver': <class 'int'>,\n                'brib_rib': <class 'int'>,\n                'labelver': <class 'int'>,\n                'importver': <class 'int'>,\n                'sendtblver': <class 'int'>,\n                'standbyver': <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) neighbor: {\n          Any  (str) *: {\n            'remote_as': <class 'int'>,\n            'address_family': {\n              Any  (str) *: {\n                'tbl_ver': <class 'int'>,\n                'spk': <class 'int'>,\n                'msg_rcvd': <class 'int'>,\n                'msg_sent': <class 'int'>,\n                'input_queue': <class 'int'>,\n                'output_queue': <class 'int'>,\n                'up_down': <class 'str'>,\n                'state_pfxrcd': <class 'str'>,\n                Optional  (str) route_distinguisher: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6598"}, "junos": {"class": "ShowBgpSummary", "doc": "\n    Parser for:\n        * show bgp summary\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp-information': {\n  'bgp-peer': Use  (function) <function ShowBgpSummarySchema.validate_bgp_peer_list at 0x1093a8b70>,\n  'bgp-rib': Use  (function) <function ShowBgpSummarySchema.validate_bgp_rib_list at 0x1093a8ae8>,\n  'bgp-thread-mode': <class 'str'>,\n  'down-peer-count': <class 'str'>,\n  'group-count': <class 'str'>,\n  'peer-count': <class 'str'>,\n  },\n}", "uid": "show_bgp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_bgp.py#L825"}}, "show bgp vrf all all nexthop-database": {"nxos": {"class": "ShowBgpVrfAllAllNextHopDatabase", "doc": "Parser for show bgp vrf all all nexthop-database", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'af_nexthop_trigger_enable': <class 'bool'>,\n        'nexthop_trigger_delay_critical': <class 'int'>,\n        'nexthop_trigger_delay_non_critical': <class 'int'>,\n        Optional  (str) next_hop: {\n          Any  (str) *: {\n            Optional  (str) refcount: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) multipath: <class 'str'>,\n            Optional  (str) igp_cost: <class 'int'>,\n            Optional  (str) igp_route_type: <class 'int'>,\n            Optional  (str) igp_preference: <class 'int'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) local: <class 'bool'>,\n            Optional  (str) reachable: <class 'bool'>,\n            Optional  (str) labeled: <class 'bool'>,\n            Optional  (str) filtered: <class 'bool'>,\n            Optional  (str) pending_update: <class 'bool'>,\n            Optional  (str) resolve_time: <class 'str'>,\n            Optional  (str) rib_route: <class 'str'>,\n            Optional  (str) metric_next_advertise: <class 'str'>,\n            Optional  (str) rnh_epoch: <class 'int'>,\n            Optional  (str) attached_nexthop: {\n              Any  (str) *: {\n                'attached_nexthop_interface': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_all_all_nexthop-database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L3277"}}, "show bgp vrf all all summary": {"nxos": {"class": "ShowBgpVrfAllAllSummary", "doc": "Parser for show bgp vrf <WORD> all summary", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbor_table_version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'inq': <class 'int'>,\n            'outq': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            'state': <class 'str'>,\n            Optional  (str) prefix_received: <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) config_peers: <class 'int'>,\n            Optional  (str) capable_peers: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) as_path_entries: <class 'str'>,\n            Optional  (str) community_entries: <class 'str'>,\n            Optional  (str) clusterlist_entries: <class 'str'>,\n            Optional  (str) dampening: <class 'bool'>,\n            Optional  (str) history_paths: <class 'int'>,\n            Optional  (str) dampened_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_recvd_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_identical_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_combo_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_filtered_recvd: <class 'int'>,\n            Optional  (str) soft_reconfig_bytes: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_all_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L3521"}}, "show bgp vrf {vrf} all dampening parameters": {"nxos": {"class": "ShowBgpVrfAllAllDampeningParameters", "doc": "Parser for 'show bgp vrf <WROD> all dampening parameters", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) dampening: <class 'str'>,\n        Optional  (str) dampening_route_map: <class 'str'>,\n        Optional  (str) dampening_half_life_time: <class 'str'>,\n        Optional  (str) dampening_reuse_time: <class 'str'>,\n        Optional  (str) dampening_suppress_time: <class 'str'>,\n        Optional  (str) dampening_max_suppress_time: <class 'str'>,\n        Optional  (str) dampening_max_suppress_penalty: <class 'str'>,\n        Optional  (str) route_distinguisher: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) rd_vrf: <class 'str'>,\n            Optional  (str) rd_vni_id: <class 'str'>,\n            Optional  (str) dampening_route_map: <class 'str'>,\n            Optional  (str) dampening_half_life_time: <class 'str'>,\n            Optional  (str) dampening_reuse_time: <class 'str'>,\n            Optional  (str) dampening_suppress_time: <class 'str'>,\n            Optional  (str) dampening_max_suppress_time: <class 'str'>,\n            Optional  (str) dampening_max_suppress_penalty: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_all_dampening_parameters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L4189"}}, "show bgp vrf {vrf} all neighbors": {"nxos": {"class": "ShowBgpVrfAllNeighbors", "doc": "Parser for:\n        show bgp vrf <vrf> all neighbors\n        parser class - implements detail parsing mechanisms for cli and yang output.\n        ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'neighbor': {\n  Any  (str) *: {\n    'remote_as': <class 'int'>,\n    Optional  (str) local_as: <class 'str'>,\n    Optional  (str) peer_fab_type: <class 'str'>,\n    Optional  (str) link: <class 'str'>,\n    Optional  (str) peer_index: <class 'int'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) bgp_version: <class 'int'>,\n    Optional  (str) router_id: <class 'str'>,\n    Optional  (str) session_state: <class 'str'>,\n    Optional  (str) state_reason: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) up_time: <class 'str'>,\n    Optional  (str) peer_group: <class 'str'>,\n    Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n    Optional  (str) retry_time: <class 'str'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) bfd_live_detection: <class 'bool'>,\n    Optional  (str) bfd_enabled: <class 'bool'>,\n    Optional  (str) bfd_state: <class 'str'>,\n    Optional  (str) nbr_local_as_cmd: <class 'str'>,\n    Optional  (str) last_read: <class 'str'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) bgp_negotiated_keepalive_timers: {\n      Optional  (str) last_read: <class 'str'>,\n      Optional  (str) keepalive_interval: <class 'int'>,\n      Optional  (str) hold_time: <class 'int'>,\n      Optional  (str) last_written: <class 'str'>,\n      Optional  (str) keepalive_timer: <class 'str'>,\n      },\n    Optional  (str) minimum_advertisement_interval: <class 'int'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) inherit_peer_session: <class 'str'>,\n    Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) ebgp_multihop: <class 'bool'>,\n    Optional  (str) tcp_md5_auth: <class 'str'>,\n    Optional  (str) tcp_md5_auth_config: <class 'str'>,\n    Optional  (str) received_messages: <class 'int'>,\n    Optional  (str) received_notifications: <class 'int'>,\n    Optional  (str) received_bytes_queue: <class 'int'>,\n    Optional  (str) sent_messages: <class 'int'>,\n    Optional  (str) sent_notifications: <class 'int'>,\n    Optional  (str) sent_bytes_queue: <class 'int'>,\n    Optional  (str) enabled: <class 'bool'>,\n    Optional  (str) remove_private_as: <class 'bool'>,\n    Optional  (str) nbr_ebgp_multihop: <class 'bool'>,\n    Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) route_reflector_cluster_id: <class 'int'>,\n    Optional  (str) graceful_restart: <class 'bool'>,\n    Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n    Optional  (str) graceful_restart_restart_time: <class 'int'>,\n    Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n    Optional  (str) allow_own_as: <class 'int'>,\n    Optional  (str) send_community: <class 'str'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) bgp_session_transport: {\n      Optional  (str) connection: {\n        Optional  (str) mode: <class 'str'>,\n        Optional  (str) last_reset: <class 'str'>,\n        Optional  (str) reset_reason: <class 'str'>,\n        Optional  (str) reset_by: <class 'str'>,\n        Optional  (str) attempts: <class 'int'>,\n        Optional  (str) established: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        },\n      Optional  (str) transport: {\n        Optional  (str) local_port: <class 'str'>,\n        Optional  (str) local_host: <class 'str'>,\n        Optional  (str) foreign_port: <class 'str'>,\n        Optional  (str) foreign_host: <class 'str'>,\n        Optional  (str) fd: <class 'str'>,\n        Optional  (str) passive_mode: <class 'str'>,\n        },\n      },\n    Optional  (str) bgp_neighbor_counters: {\n      Optional  (str) messages: {\n        Optional  (str) sent: {\n          Any  (str) *: <class 'int'>,\n          },\n        Optional  (str) received: {\n          Any  (str) *: <class 'int'>,\n          },\n        },\n      },\n    Optional  (str) bgp_negotiated_capabilities: {\n      Optional  (str) route_refresh: <class 'str'>,\n      Optional  (str) route_refresh_old: <class 'str'>,\n      Optional  (str) vpnv4_unicast: <class 'str'>,\n      Optional  (str) vpnv6_unicast: <class 'str'>,\n      Optional  (str) ipv4_mvpn: <class 'str'>,\n      Optional  (str) graceful_restart: <class 'str'>,\n      Optional  (str) enhanced_refresh: <class 'str'>,\n      Optional  (str) multisession: <class 'str'>,\n      Optional  (str) stateful_switchover: <class 'str'>,\n      Optional  (str) dynamic_capability: <class 'str'>,\n      Optional  (str) dynamic_capability_old: <class 'str'>,\n      },\n    Optional  (str) graceful_restart_paramters: {\n      Optional  (str) address_families_advertised_to_peer: <class 'str'>,\n      Optional  (str) address_families_advertised_from_peer: <class 'str'>,\n      Optional  (str) restart_time_advertised_to_peer_seconds: <class 'int'>,\n      Optional  (str) restart_time_advertised_by_peer_seconds: <class 'int'>,\n      Optional  (str) stale_time_advertised_by_peer_seconds: <class 'int'>,\n      },\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) state_reason: <class 'str'>,\n        Optional  (str) neighbor_version: <class 'int'>,\n        Optional  (str) send_community: <class 'str'>,\n        Optional  (str) soo: <class 'str'>,\n        Optional  (str) soft_configuration: <class 'bool'>,\n        Optional  (str) next_hop_self: <class 'bool'>,\n        Optional  (str) third_party_nexthop: <class 'bool'>,\n        Optional  (str) as_override_count: <class 'int'>,\n        Optional  (str) as_override: <class 'bool'>,\n        Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n        Optional  (str) route_map_name_in: <class 'str'>,\n        Optional  (str) route_map_name_out: <class 'str'>,\n        Optional  (str) default_originate: <class 'bool'>,\n        Optional  (str) default_originate_route_map: <class 'str'>,\n        Optional  (str) route_reflector_client: <class 'bool'>,\n        Optional  (str) enabled: <class 'bool'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n        Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n        Optional  (str) path: {\n          Optional  (str) total_entries: <class 'int'>,\n          Optional  (str) memory_usage: <class 'int'>,\n          Optional  (str) accepted_paths: <class 'int'>,\n          },\n        Optional  (str) inherit_peer_policy: {\n          Any  (str) *: {\n            Optional  (str) inherit_peer_seq: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_all_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L2339"}}, "show bgp vrf {vrf} all neighbors {neighbor} advertised-routes": {"nxos": {"class": "ShowBgpVrfAllNeighborsAdvertisedRoutes", "doc": "Parser for show bgp vrf <vrf> all neighbors <neighbor> advertised-routes", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) rd_l2vni: <class 'int'>,\n            Optional  (str) rd_l3vni: <class 'int'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) locprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_all_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L4572"}}, "show bgp vrf {vrf} all neighbors {neighbor} received-routes": {"nxos": {"class": "ShowBgpVrfAllNeighborsReceivedRoutes", "doc": "Parser for show bgp vrf <vrf> all neighbors <neighbor> received-routes", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) locprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_all_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L5494"}}, "show bgp vrf {vrf} all neighbors {neighbor} routes": {"nxos": {"class": "ShowBgpVrfAllNeighborsRoutes", "doc": "Parser for show bgp vrf <vrf> all neighbors <neighbor> routes", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) locprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_all_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L5044"}}, "show bgp vrf {vrf} all summary": {"ios": {"class": "ShowBgpAllSummary", "doc": "\n    Parser for show bgp All Summary\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L70"}, "iosxe": {"class": "ShowBgpAllSummary", "doc": " Parser for:\n        * 'show bgp all summary'\n        * 'show bgp {address_family} all summary'\n        * 'show bgp vrf {vrf} all summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2329"}, "nxos": {"class": "ShowBgpVrfAllAllSummary", "doc": "Parser for show bgp vrf <WORD> all summary", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbor_table_version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'inq': <class 'int'>,\n            'outq': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            'state': <class 'str'>,\n            Optional  (str) prefix_received: <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) config_peers: <class 'int'>,\n            Optional  (str) capable_peers: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) as_path_entries: <class 'str'>,\n            Optional  (str) community_entries: <class 'str'>,\n            Optional  (str) clusterlist_entries: <class 'str'>,\n            Optional  (str) dampening: <class 'bool'>,\n            Optional  (str) history_paths: <class 'int'>,\n            Optional  (str) dampened_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_recvd_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_identical_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_combo_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_filtered_recvd: <class 'int'>,\n            Optional  (str) soft_reconfig_bytes: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L3521"}}, "show bgp vrf {vrf} ipv4 unicast": {"nxos": {"class": "ShowBgpVrfIpv4Unicast", "doc": "Parser for show bgp vrf <vrf> ipv4 unicast", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'bgp_table_version': <class 'int'>,\n        'local_router_id': <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) aggregate_address_ipv4_address: <class 'str'>,\n        Optional  (str) aggregate_address_ipv4_mask: <class 'str'>,\n        Optional  (str) aggregate_address_as_set: <class 'bool'>,\n        Optional  (str) aggregate_address_summary_only: <class 'bool'>,\n        Optional  (str) v6_aggregate_address_ipv6_address: <class 'str'>,\n        Optional  (str) v6_aggregate_address_as_set: <class 'bool'>,\n        Optional  (str) v6_aggregate_address_summary_only: <class 'bool'>,\n        Optional  (str) prefixes: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                'next_hop': <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) path_type: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localprf: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_ipv4_unicast", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L11848"}}, "show bgp vrf {vrf} neighbors": {"iosxr": {"class": "ShowBgpNeighbors", "doc": "Parser for show bgp neighbors\n                  show bgp neighbors {neighbor}\n                  show bgp vrf {vrf} neighbors\n                  show bgp vrf {vrf} neighbors {neighbor}\n                  show bgp {address_family} neighbors\n                  show bgp {address_family} neighbors {neighbor}\n                  show bgp vrf {vrf} {address_family} neighbors\n                  show bgp vrf {vrf} {address_family} neighbors {neighbor}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6549"}}, "show bgp vrf {vrf} neighbors {neighbor}": {"iosxr": {"class": "ShowBgpNeighbors", "doc": "Parser for show bgp neighbors\n                  show bgp neighbors {neighbor}\n                  show bgp vrf {vrf} neighbors\n                  show bgp vrf {vrf} neighbors {neighbor}\n                  show bgp {address_family} neighbors\n                  show bgp {address_family} neighbors {neighbor}\n                  show bgp vrf {vrf} {address_family} neighbors\n                  show bgp vrf {vrf} {address_family} neighbors {neighbor}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6549"}}, "show bgp vrf {vrf} {address_family}": {"nxos": {"class": "ShowBgpVrfAllAll", "doc": "Parser for show bgp vrf <vrf>> <address_family>", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'bgp_table_version': <class 'int'>,\n        'local_router_id': <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) aggregate_address_ipv4_address: <class 'str'>,\n        Optional  (str) aggregate_address_ipv4_mask: <class 'str'>,\n        Optional  (str) aggregate_address_as_set: <class 'bool'>,\n        Optional  (str) aggregate_address_summary_only: <class 'bool'>,\n        Optional  (str) v6_aggregate_address_ipv6_address: <class 'str'>,\n        Optional  (str) v6_aggregate_address_as_set: <class 'bool'>,\n        Optional  (str) v6_aggregate_address_summary_only: <class 'bool'>,\n        Optional  (str) prefixes: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                'next_hop': <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) path_type: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localprf: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L1725"}}, "show bgp vrf {vrf} {address_family} dampening parameters": {"nxos": {"class": "ShowBgpVrfAllAllDampeningParameters", "doc": "Parser for 'show bgp vrf <WROD> all dampening parameters", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) dampening: <class 'str'>,\n        Optional  (str) dampening_route_map: <class 'str'>,\n        Optional  (str) dampening_half_life_time: <class 'str'>,\n        Optional  (str) dampening_reuse_time: <class 'str'>,\n        Optional  (str) dampening_suppress_time: <class 'str'>,\n        Optional  (str) dampening_max_suppress_time: <class 'str'>,\n        Optional  (str) dampening_max_suppress_penalty: <class 'str'>,\n        Optional  (str) route_distinguisher: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) rd_vrf: <class 'str'>,\n            Optional  (str) rd_vni_id: <class 'str'>,\n            Optional  (str) dampening_route_map: <class 'str'>,\n            Optional  (str) dampening_half_life_time: <class 'str'>,\n            Optional  (str) dampening_reuse_time: <class 'str'>,\n            Optional  (str) dampening_suppress_time: <class 'str'>,\n            Optional  (str) dampening_max_suppress_time: <class 'str'>,\n            Optional  (str) dampening_max_suppress_penalty: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_dampening_parameters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L4189"}}, "show bgp vrf {vrf} {address_family} neighbors": {"iosxr": {"class": "ShowBgpNeighbors", "doc": "Parser for show bgp neighbors\n                  show bgp neighbors {neighbor}\n                  show bgp vrf {vrf} neighbors\n                  show bgp vrf {vrf} neighbors {neighbor}\n                  show bgp {address_family} neighbors\n                  show bgp {address_family} neighbors {neighbor}\n                  show bgp vrf {vrf} {address_family} neighbors\n                  show bgp vrf {vrf} {address_family} neighbors {neighbor}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6549"}, "nxos": {"class": "ShowBgpVrfAllNeighbors", "doc": "Parser for:\n        show bgp vrf <vrf> all neighbors\n        parser class - implements detail parsing mechanisms for cli and yang output.\n        ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'neighbor': {\n  Any  (str) *: {\n    'remote_as': <class 'int'>,\n    Optional  (str) local_as: <class 'str'>,\n    Optional  (str) peer_fab_type: <class 'str'>,\n    Optional  (str) link: <class 'str'>,\n    Optional  (str) peer_index: <class 'int'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) bgp_version: <class 'int'>,\n    Optional  (str) router_id: <class 'str'>,\n    Optional  (str) session_state: <class 'str'>,\n    Optional  (str) state_reason: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) up_time: <class 'str'>,\n    Optional  (str) peer_group: <class 'str'>,\n    Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n    Optional  (str) retry_time: <class 'str'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) bfd_live_detection: <class 'bool'>,\n    Optional  (str) bfd_enabled: <class 'bool'>,\n    Optional  (str) bfd_state: <class 'str'>,\n    Optional  (str) nbr_local_as_cmd: <class 'str'>,\n    Optional  (str) last_read: <class 'str'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) bgp_negotiated_keepalive_timers: {\n      Optional  (str) last_read: <class 'str'>,\n      Optional  (str) keepalive_interval: <class 'int'>,\n      Optional  (str) hold_time: <class 'int'>,\n      Optional  (str) last_written: <class 'str'>,\n      Optional  (str) keepalive_timer: <class 'str'>,\n      },\n    Optional  (str) minimum_advertisement_interval: <class 'int'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) inherit_peer_session: <class 'str'>,\n    Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) ebgp_multihop: <class 'bool'>,\n    Optional  (str) tcp_md5_auth: <class 'str'>,\n    Optional  (str) tcp_md5_auth_config: <class 'str'>,\n    Optional  (str) received_messages: <class 'int'>,\n    Optional  (str) received_notifications: <class 'int'>,\n    Optional  (str) received_bytes_queue: <class 'int'>,\n    Optional  (str) sent_messages: <class 'int'>,\n    Optional  (str) sent_notifications: <class 'int'>,\n    Optional  (str) sent_bytes_queue: <class 'int'>,\n    Optional  (str) enabled: <class 'bool'>,\n    Optional  (str) remove_private_as: <class 'bool'>,\n    Optional  (str) nbr_ebgp_multihop: <class 'bool'>,\n    Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) route_reflector_cluster_id: <class 'int'>,\n    Optional  (str) graceful_restart: <class 'bool'>,\n    Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n    Optional  (str) graceful_restart_restart_time: <class 'int'>,\n    Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n    Optional  (str) allow_own_as: <class 'int'>,\n    Optional  (str) send_community: <class 'str'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) bgp_session_transport: {\n      Optional  (str) connection: {\n        Optional  (str) mode: <class 'str'>,\n        Optional  (str) last_reset: <class 'str'>,\n        Optional  (str) reset_reason: <class 'str'>,\n        Optional  (str) reset_by: <class 'str'>,\n        Optional  (str) attempts: <class 'int'>,\n        Optional  (str) established: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        },\n      Optional  (str) transport: {\n        Optional  (str) local_port: <class 'str'>,\n        Optional  (str) local_host: <class 'str'>,\n        Optional  (str) foreign_port: <class 'str'>,\n        Optional  (str) foreign_host: <class 'str'>,\n        Optional  (str) fd: <class 'str'>,\n        Optional  (str) passive_mode: <class 'str'>,\n        },\n      },\n    Optional  (str) bgp_neighbor_counters: {\n      Optional  (str) messages: {\n        Optional  (str) sent: {\n          Any  (str) *: <class 'int'>,\n          },\n        Optional  (str) received: {\n          Any  (str) *: <class 'int'>,\n          },\n        },\n      },\n    Optional  (str) bgp_negotiated_capabilities: {\n      Optional  (str) route_refresh: <class 'str'>,\n      Optional  (str) route_refresh_old: <class 'str'>,\n      Optional  (str) vpnv4_unicast: <class 'str'>,\n      Optional  (str) vpnv6_unicast: <class 'str'>,\n      Optional  (str) ipv4_mvpn: <class 'str'>,\n      Optional  (str) graceful_restart: <class 'str'>,\n      Optional  (str) enhanced_refresh: <class 'str'>,\n      Optional  (str) multisession: <class 'str'>,\n      Optional  (str) stateful_switchover: <class 'str'>,\n      Optional  (str) dynamic_capability: <class 'str'>,\n      Optional  (str) dynamic_capability_old: <class 'str'>,\n      },\n    Optional  (str) graceful_restart_paramters: {\n      Optional  (str) address_families_advertised_to_peer: <class 'str'>,\n      Optional  (str) address_families_advertised_from_peer: <class 'str'>,\n      Optional  (str) restart_time_advertised_to_peer_seconds: <class 'int'>,\n      Optional  (str) restart_time_advertised_by_peer_seconds: <class 'int'>,\n      Optional  (str) stale_time_advertised_by_peer_seconds: <class 'int'>,\n      },\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) state_reason: <class 'str'>,\n        Optional  (str) neighbor_version: <class 'int'>,\n        Optional  (str) send_community: <class 'str'>,\n        Optional  (str) soo: <class 'str'>,\n        Optional  (str) soft_configuration: <class 'bool'>,\n        Optional  (str) next_hop_self: <class 'bool'>,\n        Optional  (str) third_party_nexthop: <class 'bool'>,\n        Optional  (str) as_override_count: <class 'int'>,\n        Optional  (str) as_override: <class 'bool'>,\n        Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n        Optional  (str) route_map_name_in: <class 'str'>,\n        Optional  (str) route_map_name_out: <class 'str'>,\n        Optional  (str) default_originate: <class 'bool'>,\n        Optional  (str) default_originate_route_map: <class 'str'>,\n        Optional  (str) route_reflector_client: <class 'bool'>,\n        Optional  (str) enabled: <class 'bool'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n        Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n        Optional  (str) path: {\n          Optional  (str) total_entries: <class 'int'>,\n          Optional  (str) memory_usage: <class 'int'>,\n          Optional  (str) accepted_paths: <class 'int'>,\n          },\n        Optional  (str) inherit_peer_policy: {\n          Any  (str) *: {\n            Optional  (str) inherit_peer_seq: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L2339"}}, "show bgp vrf {vrf} {address_family} neighbors {neighbor}": {"iosxr": {"class": "ShowBgpNeighbors", "doc": "Parser for show bgp neighbors\n                  show bgp neighbors {neighbor}\n                  show bgp vrf {vrf} neighbors\n                  show bgp vrf {vrf} neighbors {neighbor}\n                  show bgp {address_family} neighbors\n                  show bgp {address_family} neighbors {neighbor}\n                  show bgp vrf {vrf} {address_family} neighbors\n                  show bgp vrf {vrf} {address_family} neighbors {neighbor}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6549"}, "nxos": {"class": "ShowBgpVrfAllNeighbors", "doc": "Parser for:\n        show bgp vrf <vrf> all neighbors\n        parser class - implements detail parsing mechanisms for cli and yang output.\n        ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'neighbor': {\n  Any  (str) *: {\n    'remote_as': <class 'int'>,\n    Optional  (str) local_as: <class 'str'>,\n    Optional  (str) peer_fab_type: <class 'str'>,\n    Optional  (str) link: <class 'str'>,\n    Optional  (str) peer_index: <class 'int'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) bgp_version: <class 'int'>,\n    Optional  (str) router_id: <class 'str'>,\n    Optional  (str) session_state: <class 'str'>,\n    Optional  (str) state_reason: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) up_time: <class 'str'>,\n    Optional  (str) peer_group: <class 'str'>,\n    Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n    Optional  (str) retry_time: <class 'str'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) bfd_live_detection: <class 'bool'>,\n    Optional  (str) bfd_enabled: <class 'bool'>,\n    Optional  (str) bfd_state: <class 'str'>,\n    Optional  (str) nbr_local_as_cmd: <class 'str'>,\n    Optional  (str) last_read: <class 'str'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) bgp_negotiated_keepalive_timers: {\n      Optional  (str) last_read: <class 'str'>,\n      Optional  (str) keepalive_interval: <class 'int'>,\n      Optional  (str) hold_time: <class 'int'>,\n      Optional  (str) last_written: <class 'str'>,\n      Optional  (str) keepalive_timer: <class 'str'>,\n      },\n    Optional  (str) minimum_advertisement_interval: <class 'int'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) inherit_peer_session: <class 'str'>,\n    Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) ebgp_multihop: <class 'bool'>,\n    Optional  (str) tcp_md5_auth: <class 'str'>,\n    Optional  (str) tcp_md5_auth_config: <class 'str'>,\n    Optional  (str) received_messages: <class 'int'>,\n    Optional  (str) received_notifications: <class 'int'>,\n    Optional  (str) received_bytes_queue: <class 'int'>,\n    Optional  (str) sent_messages: <class 'int'>,\n    Optional  (str) sent_notifications: <class 'int'>,\n    Optional  (str) sent_bytes_queue: <class 'int'>,\n    Optional  (str) enabled: <class 'bool'>,\n    Optional  (str) remove_private_as: <class 'bool'>,\n    Optional  (str) nbr_ebgp_multihop: <class 'bool'>,\n    Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) route_reflector_cluster_id: <class 'int'>,\n    Optional  (str) graceful_restart: <class 'bool'>,\n    Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n    Optional  (str) graceful_restart_restart_time: <class 'int'>,\n    Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n    Optional  (str) allow_own_as: <class 'int'>,\n    Optional  (str) send_community: <class 'str'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) bgp_session_transport: {\n      Optional  (str) connection: {\n        Optional  (str) mode: <class 'str'>,\n        Optional  (str) last_reset: <class 'str'>,\n        Optional  (str) reset_reason: <class 'str'>,\n        Optional  (str) reset_by: <class 'str'>,\n        Optional  (str) attempts: <class 'int'>,\n        Optional  (str) established: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        },\n      Optional  (str) transport: {\n        Optional  (str) local_port: <class 'str'>,\n        Optional  (str) local_host: <class 'str'>,\n        Optional  (str) foreign_port: <class 'str'>,\n        Optional  (str) foreign_host: <class 'str'>,\n        Optional  (str) fd: <class 'str'>,\n        Optional  (str) passive_mode: <class 'str'>,\n        },\n      },\n    Optional  (str) bgp_neighbor_counters: {\n      Optional  (str) messages: {\n        Optional  (str) sent: {\n          Any  (str) *: <class 'int'>,\n          },\n        Optional  (str) received: {\n          Any  (str) *: <class 'int'>,\n          },\n        },\n      },\n    Optional  (str) bgp_negotiated_capabilities: {\n      Optional  (str) route_refresh: <class 'str'>,\n      Optional  (str) route_refresh_old: <class 'str'>,\n      Optional  (str) vpnv4_unicast: <class 'str'>,\n      Optional  (str) vpnv6_unicast: <class 'str'>,\n      Optional  (str) ipv4_mvpn: <class 'str'>,\n      Optional  (str) graceful_restart: <class 'str'>,\n      Optional  (str) enhanced_refresh: <class 'str'>,\n      Optional  (str) multisession: <class 'str'>,\n      Optional  (str) stateful_switchover: <class 'str'>,\n      Optional  (str) dynamic_capability: <class 'str'>,\n      Optional  (str) dynamic_capability_old: <class 'str'>,\n      },\n    Optional  (str) graceful_restart_paramters: {\n      Optional  (str) address_families_advertised_to_peer: <class 'str'>,\n      Optional  (str) address_families_advertised_from_peer: <class 'str'>,\n      Optional  (str) restart_time_advertised_to_peer_seconds: <class 'int'>,\n      Optional  (str) restart_time_advertised_by_peer_seconds: <class 'int'>,\n      Optional  (str) stale_time_advertised_by_peer_seconds: <class 'int'>,\n      },\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) state_reason: <class 'str'>,\n        Optional  (str) neighbor_version: <class 'int'>,\n        Optional  (str) send_community: <class 'str'>,\n        Optional  (str) soo: <class 'str'>,\n        Optional  (str) soft_configuration: <class 'bool'>,\n        Optional  (str) next_hop_self: <class 'bool'>,\n        Optional  (str) third_party_nexthop: <class 'bool'>,\n        Optional  (str) as_override_count: <class 'int'>,\n        Optional  (str) as_override: <class 'bool'>,\n        Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n        Optional  (str) route_map_name_in: <class 'str'>,\n        Optional  (str) route_map_name_out: <class 'str'>,\n        Optional  (str) default_originate: <class 'bool'>,\n        Optional  (str) default_originate_route_map: <class 'str'>,\n        Optional  (str) route_reflector_client: <class 'bool'>,\n        Optional  (str) enabled: <class 'bool'>,\n        Optional  (str) graceful_restart: <class 'bool'>,\n        Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n        Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n        Optional  (str) path: {\n          Optional  (str) total_entries: <class 'int'>,\n          Optional  (str) memory_usage: <class 'int'>,\n          Optional  (str) accepted_paths: <class 'int'>,\n          },\n        Optional  (str) inherit_peer_policy: {\n          Any  (str) *: {\n            Optional  (str) inherit_peer_seq: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L2339"}}, "show bgp vrf {vrf} {address_family} neighbors {neighbor} advertised-routes": {"nxos": {"class": "ShowBgpVrfAllNeighborsAdvertisedRoutes", "doc": "Parser for show bgp vrf <vrf> all neighbors <neighbor> advertised-routes", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) rd_l2vni: <class 'int'>,\n            Optional  (str) rd_l3vni: <class 'int'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) locprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L4572"}}, "show bgp vrf {vrf} {address_family} neighbors {neighbor} received-routes": {"nxos": {"class": "ShowBgpVrfAllNeighborsReceivedRoutes", "doc": "Parser for show bgp vrf <vrf> all neighbors <neighbor> received-routes", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) locprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L5494"}}, "show bgp vrf {vrf} {address_family} neighbors {neighbor} routes": {"nxos": {"class": "ShowBgpVrfAllNeighborsRoutes", "doc": "Parser for show bgp vrf <vrf> all neighbors <neighbor> routes", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) locprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L5044"}}, "show bgp vrf {vrf} {address_family} nexthop-database": {"nxos": {"class": "ShowBgpVrfAllAllNextHopDatabase", "doc": "Parser for show bgp vrf all all nexthop-database", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'af_nexthop_trigger_enable': <class 'bool'>,\n        'nexthop_trigger_delay_critical': <class 'int'>,\n        'nexthop_trigger_delay_non_critical': <class 'int'>,\n        Optional  (str) next_hop: {\n          Any  (str) *: {\n            Optional  (str) refcount: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) multipath: <class 'str'>,\n            Optional  (str) igp_cost: <class 'int'>,\n            Optional  (str) igp_route_type: <class 'int'>,\n            Optional  (str) igp_preference: <class 'int'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) local: <class 'bool'>,\n            Optional  (str) reachable: <class 'bool'>,\n            Optional  (str) labeled: <class 'bool'>,\n            Optional  (str) filtered: <class 'bool'>,\n            Optional  (str) pending_update: <class 'bool'>,\n            Optional  (str) resolve_time: <class 'str'>,\n            Optional  (str) rib_route: <class 'str'>,\n            Optional  (str) metric_next_advertise: <class 'str'>,\n            Optional  (str) rnh_epoch: <class 'int'>,\n            Optional  (str) attached_nexthop: {\n              Any  (str) *: {\n                'attached_nexthop_interface': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_nexthop-database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L3277"}}, "show bgp vrf {vrf} {address_family} policy statistics dampening": {"nxos": {"class": "ShowBgpPolicyStatisticsDampening", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          'total_reject_count': <class 'int'>,\n          Optional  (str) command: {\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            'command': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_policy_statistics_dampening", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9179"}}, "show bgp vrf {vrf} {address_family} policy statistics neighbor {neighbor}": {"nxos": {"class": "ShowBgpPolicyStatisticsNeighbor", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics neighbor <neighbor>\n        parser class implements detail parsing mechanisms for cli,xml output", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          'total_reject_count': <class 'int'>,\n          Optional  (str) command: {\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            'command': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_policy_statistics_neighbor_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9148"}}, "show bgp vrf {vrf} {address_family} policy statistics redistribute": {"nxos": {"class": "ShowBgpPolicyStatisticsRedistribute", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          'total_reject_count': <class 'int'>,\n          Optional  (str) command: {\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            'command': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_policy_statistics_redistribute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9109"}}, "show bgp vrf {vrf} {address_family} summary": {"nxos": {"class": "ShowBgpVrfAllAllSummary", "doc": "Parser for show bgp vrf <WORD> all summary", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbor_table_version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'inq': <class 'int'>,\n            'outq': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            'state': <class 'str'>,\n            Optional  (str) prefix_received: <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) config_peers: <class 'int'>,\n            Optional  (str) capable_peers: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) as_path_entries: <class 'str'>,\n            Optional  (str) community_entries: <class 'str'>,\n            Optional  (str) clusterlist_entries: <class 'str'>,\n            Optional  (str) dampening: <class 'bool'>,\n            Optional  (str) history_paths: <class 'int'>,\n            Optional  (str) dampened_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_recvd_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_identical_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_combo_paths: <class 'int'>,\n            Optional  (str) soft_reconfig_filtered_recvd: <class 'int'>,\n            Optional  (str) soft_reconfig_bytes: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_address_family_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L3521"}}, "show bgp vrf {vrf} {route}": {"ios": {"class": "ShowBgpAllDetail", "doc": "Parser for show bgp all detail", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L53"}, "iosxe": {"class": "ShowBgpAllDetail", "doc": " Parser for:\n        * 'show bgp all detail'\n        * 'show bgp vrf {vrf} {route}'\n        * 'show bgp {address_family} vrf {vrf} {route}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_vrf_vrf_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1551"}}, "show bgp vrf-db vrf all": {"iosxr": {"class": "ShowBgpVrfDbVrfAll", "doc": " Parser for:\n        * 'show bgp vrf-db vrf all'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'id': <class 'str'>,\n    'rd': <class 'str'>,\n    'ref': <class 'int'>,\n    'afs': <class 'list'>,\n    },\n  },\n}", "uid": "show_bgp_vrf-db_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L5471"}}, "show bgp {address_family} all": {"ios": {"class": "ShowBgpAll", "doc": "Parser for show bgp all", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L122"}, "iosxe": {"class": "ShowBgpAll", "doc": " Parser for:\n        * 'show bgp all'\n        * 'show bgp {address_family} all'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L576"}}, "show bgp {address_family} all neighbors": {"ios": {"class": "ShowBgpAllNeighbors", "doc": "\n    Parser for show bgp all neighbors\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L85"}, "iosxe": {"class": "ShowBgpAllNeighbors", "doc": " Parser for:\n        * 'show bgp all neighbors'\n        * 'show bgp all neighbors {neighbor}'\n        * 'show bgp {address_family} all neighbors'\n        * 'show bgp {address_family} all neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3982"}}, "show bgp {address_family} all neighbors {neighbor}": {"ios": {"class": "ShowBgpAllNeighbors", "doc": "\n    Parser for show bgp all neighbors\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L85"}, "iosxe": {"class": "ShowBgpAllNeighbors", "doc": " Parser for:\n        * 'show bgp all neighbors'\n        * 'show bgp all neighbors {neighbor}'\n        * 'show bgp {address_family} all neighbors'\n        * 'show bgp {address_family} all neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L3982"}}, "show bgp {address_family} all neighbors {neighbor} advertised-routes": {"ios": {"class": "ShowBgpAllNeighborsAdvertisedRoutes", "doc": "Parser for show bgp all neighbors <WORD> advertised-routes", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L66"}, "iosxe": {"class": "ShowBgpAllNeighborsAdvertisedRoutes", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} advertised-routes'\n        * 'show bgp {address_family} all neighbors {neighbor} advertised-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4787"}}, "show bgp {address_family} all neighbors {neighbor} received-routes": {"ios": {"class": "ShowBgpAllNeighborsReceivedRoutes", "doc": "\n    Parser for show bgp all neighbors <WORD> received-routes\n    executing 'show bgp all neighbors | i BGP neighbor' for finging vrf names\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L92"}, "iosxe": {"class": "ShowBgpAllNeighborsReceivedRoutes", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} received-routes'\n        * 'show bgp {address_family} all neighbors {neighbor} received-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5398"}}, "show bgp {address_family} all neighbors {neighbor} routes": {"ios": {"class": "ShowBgpAllNeighborsRoutes", "doc": "\n    Parser for show bgp all neighbors <WORD> routes\n    executing 'show bgp all neighbors | i BGP neighbor' for finding vrf names\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L104"}, "iosxe": {"class": "ShowBgpAllNeighborsRoutes", "doc": " Parser for:\n        * 'show bgp all neighbors {neighbor} routes'\n        * 'show bgp {address_family} all neighbors {neighbor} routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6035"}}, "show bgp {address_family} all summary": {"ios": {"class": "ShowBgpAllSummary", "doc": "\n    Parser for show bgp All Summary\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L70"}, "iosxe": {"class": "ShowBgpAllSummary", "doc": " Parser for:\n        * 'show bgp all summary'\n        * 'show bgp {address_family} all summary'\n        * 'show bgp vrf {vrf} all summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2329"}}, "show bgp {address_family} labels": {"nxos": {"class": "ShowBgpLabels", "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'table_version': <class 'int'>,\n        'router_id': <class 'str'>,\n        Optional  (str) prefix: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                'status': <class 'str'>,\n                'best_path': <class 'bool'>,\n                Optional  (str) type: <class 'str'>,\n                Optional  (str) status_code: <class 'str'>,\n                Optional  (str) best_code: <class 'str'>,\n                Optional  (str) type_code: <class 'str'>,\n                'nexthop': <class 'str'>,\n                'in_label': <class 'str'>,\n                'out_label': <class 'str'>,\n                Optional  (str) vpn: <class 'str'>,\n                Optional  (str) hold_down: <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) route_distinguisher: {\n          Any  (str) *: {\n            Optional  (str) rd_vrf: <class 'str'>,\n            'prefix': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    'status': <class 'str'>,\n                    'best_path': <class 'bool'>,\n                    Optional  (str) type: <class 'str'>,\n                    Optional  (str) status_code: <class 'str'>,\n                    Optional  (str) best_code: <class 'str'>,\n                    Optional  (str) type_code: <class 'str'>,\n                    'nexthop': <class 'str'>,\n                    'in_label': <class 'str'>,\n                    'out_label': <class 'str'>,\n                    Optional  (str) vpn: <class 'str'>,\n                    Optional  (str) hold_down: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_labels", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9639"}}, "show bgp {address_family} labels vrf {vrf}": {"nxos": {"class": "ShowBgpLabels", "doc": "Parser for:\n        show bgp <address_family> labels [vrf <WROD>]", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'table_version': <class 'int'>,\n        'router_id': <class 'str'>,\n        Optional  (str) prefix: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                'status': <class 'str'>,\n                'best_path': <class 'bool'>,\n                Optional  (str) type: <class 'str'>,\n                Optional  (str) status_code: <class 'str'>,\n                Optional  (str) best_code: <class 'str'>,\n                Optional  (str) type_code: <class 'str'>,\n                'nexthop': <class 'str'>,\n                'in_label': <class 'str'>,\n                'out_label': <class 'str'>,\n                Optional  (str) vpn: <class 'str'>,\n                Optional  (str) hold_down: <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) route_distinguisher: {\n          Any  (str) *: {\n            Optional  (str) rd_vrf: <class 'str'>,\n            'prefix': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    'status': <class 'str'>,\n                    'best_path': <class 'bool'>,\n                    Optional  (str) type: <class 'str'>,\n                    Optional  (str) status_code: <class 'str'>,\n                    Optional  (str) best_code: <class 'str'>,\n                    Optional  (str) type_code: <class 'str'>,\n                    'nexthop': <class 'str'>,\n                    'in_label': <class 'str'>,\n                    'out_label': <class 'str'>,\n                    Optional  (str) vpn: <class 'str'>,\n                    Optional  (str) hold_down: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_labels_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9639"}}, "show bgp {address_family} neighbors": {"iosxe": {"class": "ShowBgpNeighbors", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4050"}, "iosxr": {"class": "ShowBgpNeighbors", "doc": "Parser for show bgp neighbors\n                  show bgp neighbors {neighbor}\n                  show bgp vrf {vrf} neighbors\n                  show bgp vrf {vrf} neighbors {neighbor}\n                  show bgp {address_family} neighbors\n                  show bgp {address_family} neighbors {neighbor}\n                  show bgp vrf {vrf} {address_family} neighbors\n                  show bgp vrf {vrf} {address_family} neighbors {neighbor}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6549"}}, "show bgp {address_family} neighbors {neighbor}": {"iosxe": {"class": "ShowBgpNeighbors", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4050"}, "iosxr": {"class": "ShowBgpNeighbors", "doc": "Parser for show bgp neighbors\n                  show bgp neighbors {neighbor}\n                  show bgp vrf {vrf} neighbors\n                  show bgp vrf {vrf} neighbors {neighbor}\n                  show bgp {address_family} neighbors\n                  show bgp {address_family} neighbors {neighbor}\n                  show bgp vrf {vrf} {address_family} neighbors\n                  show bgp vrf {vrf} {address_family} neighbors {neighbor}\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        'neighbor': {\n          Any  (str) *: {\n            Optional  (str) description: <class 'str'>,\n            Optional  (str) peer_group: <class 'str'>,\n            Optional  (str) send_community: <class 'str'>,\n            Optional  (str) input_queue: <class 'int'>,\n            Optional  (str) output_queue: <class 'int'>,\n            Optional  (str) graceful_restart: <class 'bool'>,\n            Optional  (str) graceful_restart_helper_only: <class 'bool'>,\n            Optional  (str) graceful_restart_restart_time: <class 'int'>,\n            Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n            Optional  (str) allow_own_as: <class 'int'>,\n            Optional  (str) minimum_advertisement_interval: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) route_reflector_cluster_id: <class 'int'>,\n            Optional  (str) remote_as: <class 'int'>,\n            Optional  (str) local_as_as_no: <class 'int'>,\n            Optional  (str) local_as_no_prepend: <class 'bool'>,\n            Optional  (str) local_as_replace_as: <class 'bool'>,\n            Optional  (str) local_as_dual_as: <class 'bool'>,\n            Optional  (str) remove_private_as: <class 'bool'>,\n            Optional  (str) keepalive_interval: <class 'int'>,\n            Optional  (str) holdtime: <class 'int'>,\n            Optional  (str) min_acceptable_hold_time: <class 'int'>,\n            Optional  (str) link_state: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) session_state_reason: <class 'str'>,\n            Optional  (str) nsr_state: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_read_before_reset: <class 'str'>,\n            Optional  (str) ebgp_multihop: <class 'bool'>,\n            Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n            Optional  (str) shutdown: <class 'bool'>,\n            Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) attempted: <class 'int'>,\n            Optional  (str) written: <class 'int'>,\n            Optional  (str) second_last_write: <class 'str'>,\n            Optional  (str) second_attempted: <class 'int'>,\n            Optional  (str) second_written: <class 'int'>,\n            Optional  (str) last_write_before_reset: <class 'str'>,\n            Optional  (str) last_write_attempted: <class 'int'>,\n            Optional  (str) last_write_written: <class 'int'>,\n            Optional  (str) second_last_write_before_reset: <class 'str'>,\n            Optional  (str) second_last_write_before_attempted: <class 'int'>,\n            Optional  (str) second_last_write_before_written: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd: <class 'str'>,\n            Optional  (str) last_full_not_set_pulse_count: <class 'int'>,\n            Optional  (str) last_write_pulse_rcvd_before_reset: <class 'str'>,\n            Optional  (str) socket_status: <class 'str'>,\n            Optional  (str) last_write_thread_event_before_reset: <class 'str'>,\n            Optional  (str) last_write_thread_event_second_last: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_reset: <class 'str'>,\n            Optional  (str) last_ka_expiry_before_second_last: <class 'str'>,\n            Optional  (str) last_ka_error_before_reset: <class 'str'>,\n            Optional  (str) last_ka_error_ka_not_sent: <class 'str'>,\n            Optional  (str) last_ka_start_before_reset: <class 'str'>,\n            Optional  (str) last_ka_start_before_second_last: <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'bool'>,\n            Optional  (str) tcp_initial_sync: <class 'str'>,\n            Optional  (str) tcp_initial_sync_phase_two: <class 'str'>,\n            Optional  (str) tcp_initial_sync_done: <class 'str'>,\n            Optional  (str) enforcing_first_as: <class 'str'>,\n            Optional  (str) multiprotocol_capability: <class 'str'>,\n            Optional  (str) bgp_negotiated_keepalive_timers: {\n              Optional  (str) hold_time: <class 'int'>,\n              Optional  (str) keepalive_interval: <class 'int'>,\n              },\n            Optional  (str) bgp_negotiated_capabilities: {\n              Any  (str) *: <class 'str'>,\n              },\n            Optional  (str) message_stats_input_queue: <class 'int'>,\n            Optional  (str) message_stats_output_queue: <class 'int'>,\n            Optional  (str) bgp_neighbor_counters: {\n              Optional  (str) messages: {\n                Optional  (str) sent: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                Optional  (str) received: {\n                  Any  (str) *: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) minimum_time_between_adv_runs: <class 'int'>,\n            Optional  (str) inbound_message: <class 'str'>,\n            Optional  (str) outbound_message: <class 'str'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                Optional  (str) enabled: <class 'bool'>,\n                Optional  (str) graceful_restart: <class 'bool'>,\n                Optional  (str) ipv4_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) ipv6_unicast_send_default_route: <class 'bool'>,\n                Optional  (str) prefixes_received: <class 'int'>,\n                Optional  (str) prefixes_sent: <class 'int'>,\n                Optional  (str) active: <class 'bool'>,\n                Optional  (str) neighbor_version: <class 'int'>,\n                Optional  (str) update_group: <class 'str'>,\n                Optional  (str) filter_group: <class 'str'>,\n                Optional  (str) refresh_request_status: <class 'str'>,\n                Optional  (str) route_refresh_request_received: <class 'int'>,\n                Optional  (str) route_refresh_request_sent: <class 'int'>,\n                Optional  (str) route_map_name_in: <class 'str'>,\n                Optional  (str) route_map_name_out: <class 'str'>,\n                Optional  (str) accepted_prefixes: <class 'int'>,\n                Optional  (str) best_paths: <class 'int'>,\n                Optional  (str) exact_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_prefixes_denied: <class 'int'>,\n                Optional  (str) cummulative_no_no_policy: <class 'int'>,\n                Optional  (str) cummulative_no_failed_rt_match: <class 'int'>,\n                Optional  (str) cummulative_no_by_orf_policy: <class 'int'>,\n                Optional  (str) cummulative_no_by_policy: <class 'int'>,\n                Optional  (str) prefix_advertised: <class 'int'>,\n                Optional  (str) prefix_suppressed: <class 'int'>,\n                Optional  (str) prefix_withdrawn: <class 'int'>,\n                Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n                Optional  (str) maximum_prefix_threshold: <class 'str'>,\n                Optional  (str) maximum_prefix_restart: <class 'int'>,\n                Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n                Optional  (str) eor_status: <class 'str'>,\n                Optional  (str) last_ack_version: <class 'int'>,\n                Optional  (str) last_synced_ack_version: <class 'int'>,\n                Optional  (str) outstanding_version_objects_current: <class 'int'>,\n                Optional  (str) outstanding_version_objects_max: <class 'int'>,\n                Optional  (str) additional_paths_operation: <class 'str'>,\n                Optional  (str) additional_routes_local_label: <class 'str'>,\n                Optional  (str) allowas_in: <class 'bool'>,\n                Optional  (str) allowas_in_as_number: <class 'int'>,\n                Optional  (str) route_reflector_client: <class 'bool'>,\n                Optional  (str) send_community: <class 'str'>,\n                Optional  (str) soft_configuration: <class 'bool'>,\n                Optional  (str) as_override: <class 'bool'>,\n                Optional  (str) default_originate: <class 'bool'>,\n                Optional  (str) default_originate_route_map: <class 'str'>,\n                Optional  (str) send_multicast_attributes: <class 'bool'>,\n                Optional  (str) soo: <class 'str'>,\n                },\n              },\n            Optional  (str) bgp_session_transport: {\n              Optional  (str) connection: {\n                Optional  (str) state: <class 'str'>,\n                Optional  (str) mode: <class 'str'>,\n                Optional  (str) last_reset: <class 'str'>,\n                Optional  (str) reset_reason: <class 'str'>,\n                Optional  (str) connections_established: <class 'int'>,\n                Optional  (str) connections_dropped: <class 'int'>,\n                },\n              Optional  (str) transport: {\n                Optional  (str) local_host: <class 'str'>,\n                Optional  (str) local_port: <class 'str'>,\n                Optional  (str) if_handle: <class 'str'>,\n                Optional  (str) foreign_host: <class 'str'>,\n                Optional  (str) foreign_port: <class 'str'>,\n                Optional  (str) mss: <class 'str'>,\n                Optional  (str) passive_mode: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6549"}}, "show bgp {address_family} neighbors {neighbor} advertised-routes": {"iosxe": {"class": "ShowBgpNeighborsAdvertisedRoutes", "doc": " Parser for:\n        * 'show bgp {address_family} neighbors {neighbor} advertised-routes'\n        * 'show bgp neighbors {neighbor} advertised-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4822"}}, "show bgp {address_family} neighbors {neighbor} received-routes": {"iosxe": {"class": "ShowBgpNeighborsReceivedRoutes", "doc": " Parser for:\n        * 'show bgp {address_family} neighbors {neighbor} received-routes'\n        * 'show bgp neighbors {neighbor} received-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5433"}}, "show bgp {address_family} neighbors {neighbor} routes": {"iosxe": {"class": "ShowBgpNeighborsRoutes", "doc": " Parser for:\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor} routes'\n        * 'show bgp {address_family} neighbors {neighbor} routes'\n        * 'show bgp neighbors {neighbor} routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6071"}}, "show bgp {address_family} policy statistics dampening": {"nxos": {"class": "ShowBgpPolicyStatisticsDampening", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics dampening\n        parser class implements detail parsing mechanisms for cli,xml output", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          'total_reject_count': <class 'int'>,\n          Optional  (str) command: {\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            'command': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_policy_statistics_dampening", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9179"}}, "show bgp {address_family} policy statistics neighbor {neighbor}": {"nxos": {"class": "ShowBgpPolicyStatisticsNeighbor", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics neighbor <neighbor>\n        parser class implements detail parsing mechanisms for cli,xml output", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          'total_reject_count': <class 'int'>,\n          Optional  (str) command: {\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            'command': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_policy_statistics_neighbor_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9148"}}, "show bgp {address_family} policy statistics redistribute": {"nxos": {"class": "ShowBgpPolicyStatisticsRedistribute", "doc": "Parser for:\n        show bgp [vrf <vrf>] <address_family> policy statistics redistribute\n        parser class implements detail parsing mechanisms for cli,xml output", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) rpm_handle_count: <class 'int'>,\n    Optional  (str) route_map: {\n      Any  (str) *: {\n        Any  (str) *: {\n          'action': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'total_accept_count': <class 'int'>,\n          'total_reject_count': <class 'int'>,\n          Optional  (str) command: {\n            'compare_count': <class 'int'>,\n            'match_count': <class 'int'>,\n            'command': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_policy_statistics_redistribute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L9109"}}, "show bgp {address_family} rd {rd}": {"iosxe": {"class": "ShowBgp", "doc": " Parser for:\n        * 'show bgp {address_family} rd {rd}'\n        * 'show bgp {address_family} vrf {vrf}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_rd_rd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L648"}}, "show bgp {address_family} rd {rd} detail": {"iosxe": {"class": "ShowBgpDetail", "doc": " Parser for:\n        * 'show bgp {address_family} vrf {vrf} detail'\n        * 'show bgp {address_family} rd {rd} detail'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_rd_rd_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1624"}}, "show bgp {address_family} rd {rd} summary": {"ios": {"class": "ShowBgpSummary", "doc": "Parser for show bgp summary", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_rd_rd_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L126"}, "iosxe": {"class": "ShowBgpSummary", "doc": " Parser for:\n        * 'show bgp summary'\n        * 'show bgp {address_family} summary'\n        * 'show bgp {address_family} vrf {vrf} summary'\n        * 'show bgp {address_family} rd {rd} summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_rd_rd_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2279"}}, "show bgp {address_family} summary": {"ios": {"class": "ShowBgpSummary", "doc": "Parser for show bgp summary", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L126"}, "iosxe": {"class": "ShowBgpSummary", "doc": " Parser for:\n        * 'show bgp summary'\n        * 'show bgp {address_family} summary'\n        * 'show bgp {address_family} vrf {vrf} summary'\n        * 'show bgp {address_family} rd {rd} summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2279"}, "iosxr": {"class": "ShowBgpSummary", "doc": " Parser for:\n        * 'show bgp summary'\n        * 'show bgp {address_family} summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    Optional  (str) vrf: {\n      Any  (str) *: {\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_vrf: <class 'str'>,\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) non_stop_routing: <class 'str'>,\n            Optional  (str) table_state: <class 'str'>,\n            Optional  (str) table_id: <class 'str'>,\n            Optional  (str) rd_version: <class 'int'>,\n            Optional  (str) generic_scan_interval: <class 'int'>,\n            Optional  (str) nsr_initial_initsync_version: <class 'int'>,\n            Optional  (str) nsr_initial_init_ver_status: <class 'str'>,\n            Optional  (str) nsr_issu_sync_group_versions: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            Optional  (str) operation_mode: <class 'str'>,\n            Optional  (str) vrf_id: <class 'str'>,\n            Optional  (str) instance_number: <class 'str'>,\n            Optional  (str) vrf_state: <class 'str'>,\n            Optional  (str) process: {\n              Any  (str) *: {\n                'rcvtblver': <class 'int'>,\n                'brib_rib': <class 'int'>,\n                'labelver': <class 'int'>,\n                'importver': <class 'int'>,\n                'sendtblver': <class 'int'>,\n                'standbyver': <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) neighbor: {\n          Any  (str) *: {\n            'remote_as': <class 'int'>,\n            'address_family': {\n              Any  (str) *: {\n                'tbl_ver': <class 'int'>,\n                'spk': <class 'int'>,\n                'msg_rcvd': <class 'int'>,\n                'msg_sent': <class 'int'>,\n                'input_queue': <class 'int'>,\n                'output_queue': <class 'int'>,\n                'up_down': <class 'str'>,\n                'state_pfxrcd': <class 'str'>,\n                Optional  (str) route_distinguisher: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L6598"}}, "show bgp {address_family} vrf {vrf}": {"iosxe": {"class": "ShowBgp", "doc": " Parser for:\n        * 'show bgp {address_family} rd {rd}'\n        * 'show bgp {address_family} vrf {vrf}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L648"}}, "show bgp {address_family} vrf {vrf} detail": {"iosxe": {"class": "ShowBgpDetail", "doc": " Parser for:\n        * 'show bgp {address_family} vrf {vrf} detail'\n        * 'show bgp {address_family} rd {rd} detail'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1624"}}, "show bgp {address_family} vrf {vrf} neighbors": {"iosxe": {"class": "ShowBgpNeighbors", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_vrf_vrf_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4050"}}, "show bgp {address_family} vrf {vrf} neighbors {neighbor}": {"iosxe": {"class": "ShowBgpNeighbors", "doc": " Parser for:\n        * 'show bgp neighbors'\n        * 'show bgp neighbors {neighbor}'\n        * 'show bgp {address_family} neighbors'\n        * 'show bgp {address_family} neighbors {neighbor}'\n        * 'show bgp {address_family} vrf {vrf} neighbors'\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_vrf_vrf_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4050"}}, "show bgp {address_family} vrf {vrf} neighbors {neighbor} routes": {"iosxe": {"class": "ShowBgpNeighborsRoutes", "doc": " Parser for:\n        * 'show bgp {address_family} vrf {vrf} neighbors {neighbor} routes'\n        * 'show bgp {address_family} neighbors {neighbor} routes'\n        * 'show bgp neighbors {neighbor} routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_vrf_vrf_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6071"}}, "show bgp {address_family} vrf {vrf} summary": {"ios": {"class": "ShowBgpSummary", "doc": "Parser for show bgp summary", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_vrf_vrf_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L126"}, "iosxe": {"class": "ShowBgpSummary", "doc": " Parser for:\n        * 'show bgp summary'\n        * 'show bgp {address_family} summary'\n        * 'show bgp {address_family} vrf {vrf} summary'\n        * 'show bgp {address_family} rd {rd} summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_vrf_vrf_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2279"}}, "show bgp {address_family} vrf {vrf} {route}": {"ios": {"class": "ShowBgpAllDetail", "doc": "Parser for show bgp all detail", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_vrf_vrf_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L53"}, "iosxe": {"class": "ShowBgpAllDetail", "doc": " Parser for:\n        * 'show bgp all detail'\n        * 'show bgp vrf {vrf} {route}'\n        * 'show bgp {address_family} vrf {vrf} {route}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bgp_address_family_vrf_vrf_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1551"}}, "show boot": {"ios": {"class": "ShowBoot", "doc": "Parser for show boot", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) current_boot_variable: <class 'str'>,\nOptional  (str) next_reload_boot_variable: <class 'str'>,\nOptional  (str) config_file: <class 'str'>,\nOptional  (str) bootldr: <class 'str'>,\nOptional  (str) active: {\n  'configuration_register': <class 'str'>,\n  Optional  (str) next_reload_configuration_register: <class 'str'>,\n  Optional  (str) boot_variable: <class 'str'>,\n  },\nOptional  (str) standby: {\n  'configuration_register': <class 'str'>,\n  Optional  (str) boot_variable: <class 'str'>,\n  },\n}", "uid": "show_boot", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L459"}, "iosxe": {"class": "ShowBoot", "doc": "Parser for show boot", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) current_boot_variable: <class 'str'>,\nOptional  (str) next_reload_boot_variable: <class 'str'>,\nOptional  (str) manual_boot: <class 'bool'>,\nOptional  (str) enable_break: <class 'bool'>,\nOptional  (str) boot_mode: <class 'str'>,\nOptional  (str) ipxe_timeout: <class 'int'>,\nOptional  (str) active: {\n  Optional  (str) configuration_register: <class 'str'>,\n  Optional  (str) boot_variable: <class 'str'>,\n  },\nOptional  (str) standby: {\n  Optional  (str) configuration_register: <class 'str'>,\n  Optional  (str) boot_variable: <class 'str'>,\n  },\nOptional  (str) boot_path_list: <class 'str'>,\nOptional  (str) config_file: <class 'str'>,\nOptional  (str) private_config_file: <class 'str'>,\nOptional  (str) enable_break: <class 'bool'>,\nOptional  (str) manual_boot: <class 'bool'>,\nOptional  (str) helper_path_list: <class 'str'>,\nOptional  (str) auto_upgrade: <class 'bool'>,\nOptional  (str) auto_upgrade_path: <class 'str'>,\nOptional  (str) boot_optimization: <class 'bool'>,\nOptional  (str) nvram_buffer_size: <class 'int'>,\nOptional  (str) timeout_config_download: <class 'str'>,\nOptional  (str) config_download_via_dhcp: <class 'bool'>,\nOptional  (str) next_boot: <class 'bool'>,\nOptional  (str) allow_dev_key: <class 'bool'>,\nOptional  (str) switches: {\n  Any  (str) *: {\n    'boot_path_list': <class 'str'>,\n    'config_file': <class 'str'>,\n    'private_config_file': <class 'str'>,\n    'enable_break': <class 'bool'>,\n    'manual_boot': <class 'bool'>,\n    Optional  (str) helper_path_list: <class 'str'>,\n    'auto_upgrade': <class 'bool'>,\n    Optional  (str) auto_upgrade_path: <class 'str'>,\n    Optional  (str) boot_optimization: <class 'bool'>,\n    Optional  (str) nvram_buffer_size: <class 'int'>,\n    Optional  (str) timeout_config_download: <class 'str'>,\n    Optional  (str) config_download_via_dhcp: <class 'bool'>,\n    Optional  (str) next_boot: <class 'bool'>,\n    Optional  (str) allow_dev_key: <class 'bool'>,\n    },\n  },\n}", "uid": "show_boot", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L145"}, "nxos": {"class": "ShowBoot", "doc": "Parser for show boot", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'current_boot_variable': {\n  Optional  (str) sup_number: {\n    Any  (str) *: {\n      Optional  (str) kickstart_variable: <class 'str'>,\n      Optional  (str) system_variable: <class 'str'>,\n      Optional  (str) boot_poap: <class 'str'>,\n      },\n    },\n  Optional  (str) kickstart_variable: <class 'str'>,\n  Optional  (str) system_variable: <class 'str'>,\n  Optional  (str) boot_poap: <class 'str'>,\n  },\n'next_reload_boot_variable': {\n  Optional  (str) sup_number: {\n    Any  (str) *: {\n      Optional  (str) kickstart_variable: <class 'str'>,\n      Optional  (str) system_variable: <class 'str'>,\n      Optional  (str) boot_poap: <class 'str'>,\n      },\n    },\n  Optional  (str) kickstart_variable: <class 'str'>,\n  Optional  (str) system_variable: <class 'str'>,\n  Optional  (str) boot_poap: <class 'str'>,\n  },\n}", "uid": "show_boot", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L697"}}, "show bootvar": {"ios": {"class": "ShowBootvar", "doc": "Parser for show bootvar", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) current_boot_variable: <class 'str'>,\nOptional  (str) next_reload_boot_variable: <class 'str'>,\nOptional  (str) config_file: <class 'str'>,\nOptional  (str) bootldr: <class 'str'>,\nOptional  (str) active: {\n  'configuration_register': <class 'str'>,\n  Optional  (str) next_reload_configuration_register: <class 'str'>,\n  Optional  (str) boot_variable: <class 'str'>,\n  },\nOptional  (str) standby: {\n  'configuration_register': <class 'str'>,\n  Optional  (str) boot_variable: <class 'str'>,\n  },\n}", "uid": "show_bootvar", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L445"}, "iosxe": {"class": "ShowBootvar", "doc": "Parser for show boot", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) current_boot_variable: <class 'str'>,\nOptional  (str) next_reload_boot_variable: <class 'str'>,\nOptional  (str) config_file: <class 'str'>,\nOptional  (str) bootldr: <class 'str'>,\nOptional  (str) active: {\n  'configuration_register': <class 'str'>,\n  Optional  (str) next_reload_configuration_register: <class 'str'>,\n  Optional  (str) boot_variable: <class 'str'>,\n  },\nOptional  (str) standby: {\n  'configuration_register': <class 'str'>,\n  Optional  (str) boot_variable: <class 'str'>,\n  },\n}", "uid": "show_bootvar", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L54"}}, "show bridge-domain": {"ios": {"class": "ShowBridgeDomain", "doc": "Parser for show bridge-domain\n                  show bridge-domain <WORD>\n                  show bridge-domain | count <WORD>\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'number_of_ports_in_all': <class 'int'>,\n    'bd_domain_id': <class 'int'>,\n    'aging_timer': <class 'int'>,\n    'state': <class 'str'>,\n    'mac_learning_state': <class 'str'>,\n    Optional  (str) member_ports: <class 'list'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    Optional  (str) mac_table: {\n      Any  (str) *: {\n        'pseudoport': <class 'str'>,\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bridge-domain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L80"}, "iosxe": {"class": "ShowBridgeDomain", "doc": "Parser for show bridge-domain\n                  show bridge-domain <BD_ID>\n                  show bridge-domain | count <WORD>", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'number_of_ports_in_all': <class 'int'>,\n    'bd_domain_id': <class 'int'>,\n    'aging_timer': <class 'int'>,\n    'state': <class 'str'>,\n    'mac_learning_state': <class 'str'>,\n    Optional  (str) member_ports: <class 'list'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    Optional  (str) mac_table: {\n      Any  (str) *: {\n        'pseudoport': <class 'str'>,\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bridge-domain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L76"}}, "show bridge-domain {bd_id}": {"ios": {"class": "ShowBridgeDomain", "doc": "Parser for show bridge-domain\n                  show bridge-domain <WORD>\n                  show bridge-domain | count <WORD>\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'number_of_ports_in_all': <class 'int'>,\n    'bd_domain_id': <class 'int'>,\n    'aging_timer': <class 'int'>,\n    'state': <class 'str'>,\n    'mac_learning_state': <class 'str'>,\n    Optional  (str) member_ports: <class 'list'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    Optional  (str) mac_table: {\n      Any  (str) *: {\n        'pseudoport': <class 'str'>,\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bridge-domain_bd_id", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L80"}, "iosxe": {"class": "ShowBridgeDomain", "doc": "Parser for show bridge-domain\n                  show bridge-domain <BD_ID>\n                  show bridge-domain | count <WORD>", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'number_of_ports_in_all': <class 'int'>,\n    'bd_domain_id': <class 'int'>,\n    'aging_timer': <class 'int'>,\n    'state': <class 'str'>,\n    'mac_learning_state': <class 'str'>,\n    Optional  (str) member_ports: <class 'list'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    Optional  (str) mac_table: {\n      Any  (str) *: {\n        'pseudoport': <class 'str'>,\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bridge-domain_bd_id", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L76"}}, "show bridge-domain | count {word}": {"ios": {"class": "ShowBridgeDomain", "doc": "Parser for show bridge-domain\n                  show bridge-domain <WORD>\n                  show bridge-domain | count <WORD>\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'number_of_ports_in_all': <class 'int'>,\n    'bd_domain_id': <class 'int'>,\n    'aging_timer': <class 'int'>,\n    'state': <class 'str'>,\n    'mac_learning_state': <class 'str'>,\n    Optional  (str) member_ports: <class 'list'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    Optional  (str) mac_table: {\n      Any  (str) *: {\n        'pseudoport': <class 'str'>,\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bridge-domain___count_word", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L80"}, "iosxe": {"class": "ShowBridgeDomain", "doc": "Parser for show bridge-domain\n                  show bridge-domain <BD_ID>\n                  show bridge-domain | count <WORD>", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) lines_match_regexp: <class 'int'>,\nOptional  (str) bridge_domain: {\n  Any  (str) *: {\n    'number_of_ports_in_all': <class 'int'>,\n    'bd_domain_id': <class 'int'>,\n    'aging_timer': <class 'int'>,\n    'state': <class 'str'>,\n    'mac_learning_state': <class 'str'>,\n    Optional  (str) member_ports: <class 'list'>,\n    Any  (str) *: {\n      Any  (str) *: {\n        'num_of_ports': <class 'str'>,\n        'interfaces': <class 'list'>,\n        },\n      },\n    Optional  (str) mac_table: {\n      Any  (str) *: {\n        'pseudoport': <class 'str'>,\n        'mac_address': {\n          Any  (str) *: {\n            'mac_address': <class 'str'>,\n            'aed': <class 'int'>,\n            'policy': <class 'str'>,\n            'tag': <class 'str'>,\n            'age': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_bridge-domain___count_word", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L76"}}, "show bundle": {"iosxr": {"class": "ShowBundle", "doc": "Parser for show bundle", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'bundle_id': <class 'int'>,\n    'oper_status': <class 'str'>,\n    'local_links': {\n      'active': <class 'int'>,\n      'standby': <class 'int'>,\n      'configured': <class 'int'>,\n      },\n    'local_bandwidth_kbps': {\n      'effective': <class 'int'>,\n      'available': <class 'int'>,\n      },\n    'mac_address': <class 'str'>,\n    'mac_address_source': <class 'str'>,\n    Optional  (str) inter_chassis_link: <class 'str'>,\n    'min_active_link': <class 'int'>,\n    'min_active_bw_kbps': <class 'int'>,\n    'max_active_link': <class 'int'>,\n    'wait_while_timer_ms': <class 'int'>,\n    Optional  (str) load_balance: {\n      Optional  (str) load_balance: <class 'str'>,\n      Optional  (str) link_order_signaling: <class 'str'>,\n      Optional  (str) hash_type: <class 'str'>,\n      Optional  (str) locality_threshold: <class 'str'>,\n      },\n    'lacp': {\n      'lacp': <class 'str'>,\n      Optional  (str) flap_suppression_timer: <class 'str'>,\n      Optional  (str) cisco_extensions: <class 'str'>,\n      Optional  (str) non_revertive: <class 'str'>,\n      },\n    'mlacp': {\n      'mlacp': <class 'str'>,\n      Optional  (str) iccp_group: <class 'str'>,\n      Optional  (str) role: <class 'str'>,\n      Optional  (str) foreign_links_active: <class 'int'>,\n      Optional  (str) foreign_links_configured: <class 'int'>,\n      Optional  (str) switchover_type: <class 'str'>,\n      Optional  (str) recovery_delay: <class 'str'>,\n      Optional  (str) maximize_threshold: <class 'str'>,\n      },\n    'ipv4_bfd': {\n      'ipv4_bfd': <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) fast_detect: <class 'str'>,\n      Optional  (str) start_timer: <class 'str'>,\n      Optional  (str) neighbor_unconfigured_timer: <class 'str'>,\n      Optional  (str) preferred_min_interval_ms: <class 'int'>,\n      Optional  (str) preferred_multiple: <class 'int'>,\n      Optional  (str) destination_address: <class 'str'>,\n      },\n    Optional  (str) ipv6_bfd: {\n      Optional  (str) ipv6_bfd: <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) fast_detect: <class 'str'>,\n      Optional  (str) start_timer: <class 'str'>,\n      Optional  (str) neighbor_unconfigured_timer: <class 'str'>,\n      Optional  (str) preferred_min_interval_ms: <class 'int'>,\n      Optional  (str) preferred_multiple: <class 'int'>,\n      Optional  (str) destination_address: <class 'str'>,\n      },\n    Optional  (str) port: {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'device': <class 'str'>,\n        'state': <class 'str'>,\n        'port_id': <class 'str'>,\n        'bw_kbps': <class 'int'>,\n        Optional  (str) link_state: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bundle", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lag.py#L146"}}, "show bundle reasons": {"iosxr": {"class": "ShowBundleReasons", "doc": "Parser for \n    show bundle reasons\n    show bundle {interface} reasons\n    ", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'bundle_id': <class 'int'>,\n    'oper_status': <class 'str'>,\n    'local_links': {\n      'active': <class 'int'>,\n      'standby': <class 'int'>,\n      'configured': <class 'int'>,\n      },\n    'local_bandwidth_kbps': {\n      'effective': <class 'int'>,\n      'available': <class 'int'>,\n      },\n    'mac_address': <class 'str'>,\n    'mac_address_source': <class 'str'>,\n    Optional  (str) inter_chassis_link: <class 'str'>,\n    'min_active_link': <class 'int'>,\n    'min_active_bw_kbps': <class 'int'>,\n    'max_active_link': <class 'int'>,\n    'wait_while_timer_ms': <class 'int'>,\n    Optional  (str) load_balance: {\n      Optional  (str) load_balance: <class 'str'>,\n      Optional  (str) link_order_signaling: <class 'str'>,\n      Optional  (str) hash_type: <class 'str'>,\n      Optional  (str) locality_threshold: <class 'str'>,\n      },\n    'lacp': {\n      'lacp': <class 'str'>,\n      Optional  (str) flap_suppression_timer: <class 'str'>,\n      Optional  (str) cisco_extensions: <class 'str'>,\n      Optional  (str) non_revertive: <class 'str'>,\n      },\n    'mlacp': {\n      'mlacp': <class 'str'>,\n      Optional  (str) iccp_group: <class 'str'>,\n      Optional  (str) role: <class 'str'>,\n      Optional  (str) foreign_links_active: <class 'int'>,\n      Optional  (str) foreign_links_configured: <class 'int'>,\n      Optional  (str) switchover_type: <class 'str'>,\n      Optional  (str) recovery_delay: <class 'str'>,\n      Optional  (str) maximize_threshold: <class 'str'>,\n      },\n    'ipv4_bfd': {\n      'ipv4_bfd': <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) fast_detect: <class 'str'>,\n      Optional  (str) start_timer: <class 'str'>,\n      Optional  (str) neighbor_unconfigured_timer: <class 'str'>,\n      Optional  (str) preferred_min_interval_ms: <class 'int'>,\n      Optional  (str) preferred_multiple: <class 'int'>,\n      Optional  (str) destination_address: <class 'str'>,\n      },\n    Optional  (str) ipv6_bfd: {\n      Optional  (str) ipv6_bfd: <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) fast_detect: <class 'str'>,\n      Optional  (str) start_timer: <class 'str'>,\n      Optional  (str) neighbor_unconfigured_timer: <class 'str'>,\n      Optional  (str) preferred_min_interval_ms: <class 'int'>,\n      Optional  (str) preferred_multiple: <class 'int'>,\n      Optional  (str) destination_address: <class 'str'>,\n      },\n    Optional  (str) port: {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'device': <class 'str'>,\n        'state': <class 'str'>,\n        'port_id': <class 'str'>,\n        'bw_kbps': <class 'int'>,\n        Optional  (str) link_state: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bundle_reasons", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lag.py#L576"}}, "show bundle {interface}": {"iosxr": {"class": "ShowBundle", "doc": "Parser for show bundle", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'bundle_id': <class 'int'>,\n    'oper_status': <class 'str'>,\n    'local_links': {\n      'active': <class 'int'>,\n      'standby': <class 'int'>,\n      'configured': <class 'int'>,\n      },\n    'local_bandwidth_kbps': {\n      'effective': <class 'int'>,\n      'available': <class 'int'>,\n      },\n    'mac_address': <class 'str'>,\n    'mac_address_source': <class 'str'>,\n    Optional  (str) inter_chassis_link: <class 'str'>,\n    'min_active_link': <class 'int'>,\n    'min_active_bw_kbps': <class 'int'>,\n    'max_active_link': <class 'int'>,\n    'wait_while_timer_ms': <class 'int'>,\n    Optional  (str) load_balance: {\n      Optional  (str) load_balance: <class 'str'>,\n      Optional  (str) link_order_signaling: <class 'str'>,\n      Optional  (str) hash_type: <class 'str'>,\n      Optional  (str) locality_threshold: <class 'str'>,\n      },\n    'lacp': {\n      'lacp': <class 'str'>,\n      Optional  (str) flap_suppression_timer: <class 'str'>,\n      Optional  (str) cisco_extensions: <class 'str'>,\n      Optional  (str) non_revertive: <class 'str'>,\n      },\n    'mlacp': {\n      'mlacp': <class 'str'>,\n      Optional  (str) iccp_group: <class 'str'>,\n      Optional  (str) role: <class 'str'>,\n      Optional  (str) foreign_links_active: <class 'int'>,\n      Optional  (str) foreign_links_configured: <class 'int'>,\n      Optional  (str) switchover_type: <class 'str'>,\n      Optional  (str) recovery_delay: <class 'str'>,\n      Optional  (str) maximize_threshold: <class 'str'>,\n      },\n    'ipv4_bfd': {\n      'ipv4_bfd': <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) fast_detect: <class 'str'>,\n      Optional  (str) start_timer: <class 'str'>,\n      Optional  (str) neighbor_unconfigured_timer: <class 'str'>,\n      Optional  (str) preferred_min_interval_ms: <class 'int'>,\n      Optional  (str) preferred_multiple: <class 'int'>,\n      Optional  (str) destination_address: <class 'str'>,\n      },\n    Optional  (str) ipv6_bfd: {\n      Optional  (str) ipv6_bfd: <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) fast_detect: <class 'str'>,\n      Optional  (str) start_timer: <class 'str'>,\n      Optional  (str) neighbor_unconfigured_timer: <class 'str'>,\n      Optional  (str) preferred_min_interval_ms: <class 'int'>,\n      Optional  (str) preferred_multiple: <class 'int'>,\n      Optional  (str) destination_address: <class 'str'>,\n      },\n    Optional  (str) port: {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'device': <class 'str'>,\n        'state': <class 'str'>,\n        'port_id': <class 'str'>,\n        'bw_kbps': <class 'int'>,\n        Optional  (str) link_state: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bundle_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lag.py#L146"}}, "show bundle {interface} reasons": {"iosxr": {"class": "ShowBundleReasons", "doc": "Parser for \n    show bundle reasons\n    show bundle {interface} reasons\n    ", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'bundle_id': <class 'int'>,\n    'oper_status': <class 'str'>,\n    'local_links': {\n      'active': <class 'int'>,\n      'standby': <class 'int'>,\n      'configured': <class 'int'>,\n      },\n    'local_bandwidth_kbps': {\n      'effective': <class 'int'>,\n      'available': <class 'int'>,\n      },\n    'mac_address': <class 'str'>,\n    'mac_address_source': <class 'str'>,\n    Optional  (str) inter_chassis_link: <class 'str'>,\n    'min_active_link': <class 'int'>,\n    'min_active_bw_kbps': <class 'int'>,\n    'max_active_link': <class 'int'>,\n    'wait_while_timer_ms': <class 'int'>,\n    Optional  (str) load_balance: {\n      Optional  (str) load_balance: <class 'str'>,\n      Optional  (str) link_order_signaling: <class 'str'>,\n      Optional  (str) hash_type: <class 'str'>,\n      Optional  (str) locality_threshold: <class 'str'>,\n      },\n    'lacp': {\n      'lacp': <class 'str'>,\n      Optional  (str) flap_suppression_timer: <class 'str'>,\n      Optional  (str) cisco_extensions: <class 'str'>,\n      Optional  (str) non_revertive: <class 'str'>,\n      },\n    'mlacp': {\n      'mlacp': <class 'str'>,\n      Optional  (str) iccp_group: <class 'str'>,\n      Optional  (str) role: <class 'str'>,\n      Optional  (str) foreign_links_active: <class 'int'>,\n      Optional  (str) foreign_links_configured: <class 'int'>,\n      Optional  (str) switchover_type: <class 'str'>,\n      Optional  (str) recovery_delay: <class 'str'>,\n      Optional  (str) maximize_threshold: <class 'str'>,\n      },\n    'ipv4_bfd': {\n      'ipv4_bfd': <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) fast_detect: <class 'str'>,\n      Optional  (str) start_timer: <class 'str'>,\n      Optional  (str) neighbor_unconfigured_timer: <class 'str'>,\n      Optional  (str) preferred_min_interval_ms: <class 'int'>,\n      Optional  (str) preferred_multiple: <class 'int'>,\n      Optional  (str) destination_address: <class 'str'>,\n      },\n    Optional  (str) ipv6_bfd: {\n      Optional  (str) ipv6_bfd: <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) fast_detect: <class 'str'>,\n      Optional  (str) start_timer: <class 'str'>,\n      Optional  (str) neighbor_unconfigured_timer: <class 'str'>,\n      Optional  (str) preferred_min_interval_ms: <class 'int'>,\n      Optional  (str) preferred_multiple: <class 'int'>,\n      Optional  (str) destination_address: <class 'str'>,\n      },\n    Optional  (str) port: {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'device': <class 'str'>,\n        'state': <class 'str'>,\n        'port_id': <class 'str'>,\n        'bw_kbps': <class 'int'>,\n        Optional  (str) link_state: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_bundle_interface_reasons", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lag.py#L576"}}, "show cdp neighbors": {"ios": {"class": "ShowCdpNeighbors", "doc": "Parser for 'show cdp neighbors' ", "module_name": "show_cdp", "package": "genie.libs.parser", "schema": "{\n'cdp': {\n  Optional  (str) index: {\n    Any  (str) *: {\n      'device_id': <class 'str'>,\n      'local_interface': <class 'str'>,\n      'hold_time': <class 'int'>,\n      Optional  (str) capability: <class 'str'>,\n      Optional  (str) platform: <class 'str'>,\n      'port_id': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_cdp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_cdp.py#L12"}, "iosxe": {"class": "ShowCdpNeighbors", "doc": null, "module_name": "show_cdp", "package": "genie.libs.parser", "schema": "{\n'cdp': {\n  Optional  (str) index: {\n    Any  (str) *: {\n      'device_id': <class 'str'>,\n      'local_interface': <class 'str'>,\n      'hold_time': <class 'int'>,\n      Optional  (str) capability: <class 'str'>,\n      Optional  (str) platform: <class 'str'>,\n      'port_id': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_cdp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_cdp.py#L41"}, "iosxr": {"class": "ShowCdpNeighbors", "doc": null, "module_name": "show_cdp", "package": "genie.libs.parser", "schema": "{\n'cdp': {\n  Optional  (str) index: {\n    Any  (str) *: {\n      'device_id': <class 'str'>,\n      'local_interface': <class 'str'>,\n      'hold_time': <class 'int'>,\n      Optional  (str) capability: <class 'str'>,\n      Optional  (str) platform: <class 'str'>,\n      'port_id': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_cdp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_cdp.py#L40"}, "nxos": {"class": "ShowCdpNeighbors", "doc": null, "module_name": "show_cdp", "package": "genie.libs.parser", "schema": "{\n'cdp': {\n  Optional  (str) index: {\n    Any  (str) *: {\n      'device_id': <class 'str'>,\n      'local_interface': <class 'str'>,\n      'hold_time': <class 'int'>,\n      Optional  (str) capability: <class 'str'>,\n      'platform': <class 'str'>,\n      'port_id': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_cdp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_cdp.py#L41"}}, "show cdp neighbors detail": {"ios": {"class": "ShowCdpNeighborsDetail", "doc": "Parser for 'show cdp neighbors detail' ", "module_name": "show_cdp", "package": "genie.libs.parser", "schema": "{\n'total_entries_displayed': <class 'int'>,\nOptional  (str) index: {\n  Any  (str) *: {\n    'device_id': <class 'str'>,\n    'platform': <class 'str'>,\n    Optional  (str) capabilities: <class 'str'>,\n    'local_interface': <class 'str'>,\n    'port_id': <class 'str'>,\n    'hold_time': <class 'int'>,\n    'software_version': <class 'str'>,\n    'entry_addresses': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        },\n      },\n    'management_addresses': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        },\n      },\n    Optional  (str) duplex_mode: <class 'str'>,\n    Optional  (str) advertisement_ver: <class 'int'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) vtp_management_domain: <class 'str'>,\n    },\n  },\n}", "uid": "show_cdp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_cdp.py#L18"}, "iosxe": {"class": "ShowCdpNeighborsDetail", "doc": null, "module_name": "show_cdp", "package": "genie.libs.parser", "schema": "{\n'total_entries_displayed': <class 'int'>,\nOptional  (str) index: {\n  Any  (str) *: {\n    'device_id': <class 'str'>,\n    'platform': <class 'str'>,\n    Optional  (str) capabilities: <class 'str'>,\n    'local_interface': <class 'str'>,\n    'port_id': <class 'str'>,\n    'hold_time': <class 'int'>,\n    'software_version': <class 'str'>,\n    'entry_addresses': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        },\n      },\n    'management_addresses': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        },\n      },\n    Optional  (str) duplex_mode: <class 'str'>,\n    Optional  (str) advertisement_ver: <class 'int'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) vtp_management_domain: <class 'str'>,\n    },\n  },\n}", "uid": "show_cdp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_cdp.py#L193"}, "iosxr": {"class": "ShowCdpNeighborsDetail", "doc": null, "module_name": "show_cdp", "package": "genie.libs.parser", "schema": "{\n'total_entries_displayed': <class 'int'>,\nOptional  (str) index: {\n  Any  (str) *: {\n    'device_id': <class 'str'>,\n    Optional  (str) system_name: <class 'str'>,\n    'platform': <class 'str'>,\n    'capabilities': <class 'str'>,\n    'local_interface': <class 'str'>,\n    'port_id': <class 'str'>,\n    'hold_time': <class 'int'>,\n    'software_version': <class 'str'>,\n    'entry_addresses': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        },\n      },\n    Optional  (str) duplex_mode: <class 'str'>,\n    Optional  (str) advertisement_ver: <class 'int'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    },\n  },\n}", "uid": "show_cdp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_cdp.py#L196"}, "nxos": {"class": "ShowCdpNeighborsDetail", "doc": null, "module_name": "show_cdp", "package": "genie.libs.parser", "schema": "{\n'total_entries_displayed': <class 'int'>,\nOptional  (str) index: {\n  Any  (str) *: {\n    'device_id': <class 'str'>,\n    Optional  (str) system_name: <class 'str'>,\n    'platform': <class 'str'>,\n    'capabilities': <class 'str'>,\n    'local_interface': <class 'str'>,\n    'port_id': <class 'str'>,\n    'hold_time': <class 'int'>,\n    'software_version': <class 'str'>,\n    Optional  (str) physical_location: <class 'str'>,\n    'interface_addresses': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        },\n      },\n    'management_addresses': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        },\n      },\n    Optional  (str) duplex_mode: <class 'str'>,\n    Optional  (str) advertisement_ver: <class 'int'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) vtp_management_domain: <class 'str'>,\n    },\n  },\n}", "uid": "show_cdp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_cdp.py#L220"}}, "show chassis environment routing-engine": {"junos": {"class": "ShowChassisEnvironmentRoutingEngine", "doc": " Parser for:\n    * show chassis environment routing-engine\n    ", "module_name": "show_chassis", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'environment-component-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'environment-component-item': {\n    'name': <class 'str'>,\n    'state': <class 'str'>,\n    },\n  },\n}", "uid": "show_chassis_environment_routing-engine", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_chassis.py#L197"}}, "show chassis firmware": {"junos": {"class": "ShowChassisFirmware", "doc": " Parser for:\n    * show chassis firmware\n    ", "module_name": "show_chassis", "package": "genie.libs.parser", "schema": "{\n'firmware-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'chassis': {\n    Optional  (str) @junos:style: <class 'str'>,\n    'chassis-module': {\n      'firmware': Use  (function) <function ShowChassisFirmwareSchema.validate_chassis_firmware_list at 0x1090f52f0>,\n      'name': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_chassis_firmware", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_chassis.py#L289"}}, "show chassis firmware no-forwarding": {"junos": {"class": "ShowChassisFirmwareNoForwarding", "doc": " Parser for:\n            - show chassis firmware no-forwarding\n    ", "module_name": "show_chassis", "package": "genie.libs.parser", "schema": "{\n'firmware-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'chassis': {\n    Optional  (str) @junos:style: <class 'str'>,\n    'chassis-module': {\n      'firmware': Use  (function) <function ShowChassisFirmwareSchema.validate_chassis_firmware_list at 0x1090f52f0>,\n      'name': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_chassis_firmware_no-forwarding", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_chassis.py#L354"}}, "show chassis fpc detail": {"junos": {"class": "ShowChassisFpcDetail", "doc": " Parser for:\n    * show chassis fpc detail\n    ", "module_name": "show_chassis", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'fpc-information': {\n  Optional  (str) @junos:style: <class 'str'>,\n  Optional  (str) @xmlns: <class 'str'>,\n  'fpc': {\n    'fips-capable': <class 'str'>,\n    'fips-mode': <class 'str'>,\n    'memory-ddr-dram-size': <class 'str'>,\n    'memory-dram-size': <class 'str'>,\n    'memory-rldram-size': <class 'str'>,\n    'slot': <class 'str'>,\n    'start-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'state': <class 'str'>,\n    'temperature': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:celsius: <class 'str'>,\n      },\n    'up-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_chassis_fpc_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_chassis.py#L54"}}, "show chassis hardware": {"junos": {"class": "ShowChassisHardware", "doc": " Parser for:\n    * show chassis hardware\n    ", "module_name": "show_chassis", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'chassis-inventory': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'chassis': {\n    Optional  (str) @junos:style: <class 'str'>,\n    'chassis-module': Use  (function) <function ShowChassisHardwareSchema.validate_chassis_hardware_list at 0x1090f5510>,\n    'description': <class 'str'>,\n    'name': <class 'str'>,\n    'serial-number': <class 'str'>,\n    },\n  },\n}", "uid": "show_chassis_hardware", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_chassis.py#L462"}}, "show chassis hardware detail": {"junos": {"class": "ShowChassisHardwareDetail", "doc": " Parser for:\n    * show chassis hardware detail\n    ", "module_name": "show_chassis", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'chassis-inventory': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'chassis': {\n    Optional  (str) @junos:style: <class 'str'>,\n    'chassis-module': Use  (function) <function ShowChassisHardwareDetailSchema.validate_chassis_hardware_detail_list at 0x1090f56a8>,\n    'description': <class 'str'>,\n    'name': <class 'str'>,\n    'serial-number': <class 'str'>,\n    },\n  },\n}", "uid": "show_chassis_hardware_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_chassis.py#L714"}}, "show chassis hardware detail no-forwarding": {"junos": {"class": "ShowChassisHardwareDetailNoForwarding", "doc": " Parser for:\n            - show chassis hardware detail no-forwarding\n    ", "module_name": "show_chassis", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'chassis-inventory': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'chassis': {\n    Optional  (str) @junos:style: <class 'str'>,\n    'chassis-module': Use  (function) <function ShowChassisHardwareDetailSchema.validate_chassis_hardware_detail_list at 0x1090f56a8>,\n    'description': <class 'str'>,\n    'name': <class 'str'>,\n    'serial-number': <class 'str'>,\n    },\n  },\n}", "uid": "show_chassis_hardware_detail_no-forwarding", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_chassis.py#L881"}}, "show chassis hardware extensive": {"junos": {"class": "ShowChassisHardwareExtensive", "doc": " Parser for:\n    * show chassis hardware extensive\n    ", "module_name": "show_chassis", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'chassis-inventory': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'chassis': {\n    Optional  (str) @junos:style: <class 'str'>,\n    'chassis-module': Use  (function) <function ShowChassisHardwareExtensiveSchema.validate_chassis_hardware_extensive_list at 0x1090f58c8>,\n    'description': <class 'str'>,\n    Optional  (str) i2c-information: {\n      'assembly-flags': <class 'str'>,\n      'assembly-identifier': <class 'str'>,\n      'assembly-version': <class 'str'>,\n      'board-information-record': <class 'str'>,\n      'eeprom-version': <class 'str'>,\n      Optional  (str) i2c-data: <class 'list'>,\n      Optional  (str) i2c-identifier: Or (<class 'str'>, None),\n      'i2c-version': Or (<class 'str'>, None),\n      'jedec-code': <class 'str'>,\n      'manufacture-date': <class 'str'>,\n      'part-number': Or (<class 'str'>, None),\n      Optional  (str) serial-number: Or (<class 'str'>, None),\n      },\n    'name': <class 'str'>,\n    'serial-number': <class 'str'>,\n    },\n  },\n}", "uid": "show_chassis_hardware_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_chassis.py#L1059"}}, "show chassis hardware extensive no-forwarding": {"junos": {"class": "ShowChassisHardwareExtensiveNoForwarding", "doc": " Parser for:\n            - show chassis hardware extensive no-forwarding\n    ", "module_name": "show_chassis", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'chassis-inventory': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'chassis': {\n    Optional  (str) @junos:style: <class 'str'>,\n    'chassis-module': Use  (function) <function ShowChassisHardwareExtensiveSchema.validate_chassis_hardware_extensive_list at 0x1090f58c8>,\n    'description': <class 'str'>,\n    Optional  (str) i2c-information: {\n      'assembly-flags': <class 'str'>,\n      'assembly-identifier': <class 'str'>,\n      'assembly-version': <class 'str'>,\n      'board-information-record': <class 'str'>,\n      'eeprom-version': <class 'str'>,\n      Optional  (str) i2c-data: <class 'list'>,\n      Optional  (str) i2c-identifier: Or (<class 'str'>, None),\n      'i2c-version': Or (<class 'str'>, None),\n      'jedec-code': <class 'str'>,\n      'manufacture-date': <class 'str'>,\n      'part-number': Or (<class 'str'>, None),\n      Optional  (str) serial-number: Or (<class 'str'>, None),\n      },\n    'name': <class 'str'>,\n    'serial-number': <class 'str'>,\n    },\n  },\n}", "uid": "show_chassis_hardware_extensive_no-forwarding", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_chassis.py#L1447"}}, "show checkpoint summary": {"nxos": {"class": "ShowCheckpointSummary", "doc": "Parser for show checkpoint summary", "module_name": "show_checkpoint", "package": "genie.libs.parser", "schema": "{\n'checkpoint': {\n  Any  (str) *: {\n    'created_by': <class 'str'>,\n    'created_time': <class 'str'>,\n    'size': <class 'int'>,\n    'description': <class 'str'>,\n    },\n  },\n}", "uid": "show_checkpoint_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_checkpoint.py#L30"}}, "show clns interface": {"iosxe": {"class": "ShowClnsInterface", "doc": "Parser for show clns interface\n                  show clns interface {interface}", "module_name": "show_clns", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'status': <class 'str'>,\n    'line_protocol': <class 'str'>,\n    Optional  (str) clns_protocol_processing: <class 'bool'>,\n    Optional  (str) checksum_enabled: <class 'bool'>,\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) erpdus_enabled: <class 'bool'>,\n    Optional  (str) min_interval_msec: <class 'int'>,\n    Optional  (str) clns_fast_switching: <class 'bool'>,\n    Optional  (str) clns_sse_switching: <class 'bool'>,\n    Optional  (str) dec_compatibility_mode: <class 'str'>,\n    Optional  (str) next_esh_ish_in: <class 'int'>,\n    Optional  (str) routing_protocol: {\n      Any  (str) *: {\n        'process_id': {\n          Any  (str) *: {\n            'level_type': <class 'str'>,\n            'interface_number': <class 'str'>,\n            'local_circuit_id': <class 'str'>,\n            Optional  (str) neighbor_extended_local_circuit_id: <class 'str'>,\n            Optional  (str) if_state: <class 'str'>,\n            'hello_interval': {\n              Any  (str) *: {\n                Optional  (str) next_is_is_lan_hello_in: <class 'int'>,\n                Optional  (str) next_is_is_lan_hello_in_ms: <class 'int'>,\n                },\n              Optional  (str) next_is_is_hello_in: <class 'int'>,\n              Optional  (str) next_is_is_hello_in_ms: <class 'int'>,\n              },\n            Any  (str) *: {\n              'metric': <class 'int'>,\n              Optional  (str) dr_id: <class 'str'>,\n              'circuit_id': <class 'str'>,\n              'ipv6_metric': <class 'int'>,\n              },\n            'priority': {\n              Any  (str) *: {\n                'priority': <class 'int'>,\n                },\n              },\n            Optional  (str) adjacencies: {\n              Any  (str) *: {\n                'number_of_active_adjancies': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_clns_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_clns.py#L81"}}, "show clns interface {interface}": {"iosxe": {"class": "ShowClnsInterface", "doc": "Parser for show clns interface\n                  show clns interface {interface}", "module_name": "show_clns", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'status': <class 'str'>,\n    'line_protocol': <class 'str'>,\n    Optional  (str) clns_protocol_processing: <class 'bool'>,\n    Optional  (str) checksum_enabled: <class 'bool'>,\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) erpdus_enabled: <class 'bool'>,\n    Optional  (str) min_interval_msec: <class 'int'>,\n    Optional  (str) clns_fast_switching: <class 'bool'>,\n    Optional  (str) clns_sse_switching: <class 'bool'>,\n    Optional  (str) dec_compatibility_mode: <class 'str'>,\n    Optional  (str) next_esh_ish_in: <class 'int'>,\n    Optional  (str) routing_protocol: {\n      Any  (str) *: {\n        'process_id': {\n          Any  (str) *: {\n            'level_type': <class 'str'>,\n            'interface_number': <class 'str'>,\n            'local_circuit_id': <class 'str'>,\n            Optional  (str) neighbor_extended_local_circuit_id: <class 'str'>,\n            Optional  (str) if_state: <class 'str'>,\n            'hello_interval': {\n              Any  (str) *: {\n                Optional  (str) next_is_is_lan_hello_in: <class 'int'>,\n                Optional  (str) next_is_is_lan_hello_in_ms: <class 'int'>,\n                },\n              Optional  (str) next_is_is_hello_in: <class 'int'>,\n              Optional  (str) next_is_is_hello_in_ms: <class 'int'>,\n              },\n            Any  (str) *: {\n              'metric': <class 'int'>,\n              Optional  (str) dr_id: <class 'str'>,\n              'circuit_id': <class 'str'>,\n              'ipv6_metric': <class 'int'>,\n              },\n            'priority': {\n              Any  (str) *: {\n                'priority': <class 'int'>,\n                },\n              },\n            Optional  (str) adjacencies: {\n              Any  (str) *: {\n                'number_of_active_adjancies': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_clns_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_clns.py#L81"}}, "show clns is-neighbors detail": {"iosxe": {"class": "ShowClnsIsNeighborsDetail", "doc": "Parser for show clns is-neighbors detail", "module_name": "show_clns", "package": "genie.libs.parser", "schema": "{\n'tag': {\n  Any  (str) *: {\n    Optional  (str) system_id: {\n      Any  (str) *: {\n        'type': {\n          Any  (str) *: {\n            'interface': <class 'str'>,\n            'state': <class 'str'>,\n            'format': <class 'str'>,\n            'priority': <class 'int'>,\n            'circuit_id': <class 'str'>,\n            'area_address': <class 'list'>,\n            Optional  (str) ip_address: <class 'list'>,\n            Optional  (str) ipv6_address: <class 'list'>,\n            'uptime': <class 'str'>,\n            Optional  (str) nsf: <class 'str'>,\n            Optional  (str) topology: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_clns_is-neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_clns.py#L746"}}, "show clns neighbors detail": {"iosxe": {"class": "ShowClnsNeighborsDetail", "doc": "Parser for show clns neighbors detail", "module_name": "show_clns", "package": "genie.libs.parser", "schema": "{\n'tag': {\n  Any  (str) *: {\n    Optional  (str) system_id: {\n      Any  (str) *: {\n        'type': {\n          Any  (str) *: {\n            'interface': <class 'str'>,\n            'state': <class 'str'>,\n            'snpa': <class 'str'>,\n            'holdtime': <class 'int'>,\n            'protocol': <class 'str'>,\n            'area_address': <class 'list'>,\n            Optional  (str) ip_address: <class 'list'>,\n            Optional  (str) ipv6_address: <class 'list'>,\n            'uptime': <class 'str'>,\n            Optional  (str) nsf: <class 'str'>,\n            Optional  (str) topology: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_clns_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_clns.py#L586"}}, "show clns protocol": {"iosxe": {"class": "ShowClnsProtocol", "doc": "Parser for show clns protocol", "module_name": "show_clns", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'system_id': <class 'str'>,\n    'nsel': <class 'str'>,\n    Optional  (str) process_handle: <class 'str'>,\n    'is_type': <class 'str'>,\n    Optional  (str) manual_area_address: <class 'list'>,\n    Optional  (str) routing_for_area_address: <class 'list'>,\n    Optional  (str) interfaces: {\n      Any  (str) *: {\n        'topology': <class 'list'>,\n        },\n      },\n    'redistribute': <class 'str'>,\n    'distance_for_l2_clns_routes': <class 'int'>,\n    'rrr_level': <class 'str'>,\n    'metrics': {\n      'generate_narrow': <class 'str'>,\n      'accept_narrow': <class 'str'>,\n      'generate_wide': <class 'str'>,\n      'accept_wide': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_clns_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_clns.py#L367"}}, "show clns traffic": {"iosxe": {"class": "ShowClnsTraffic", "doc": "Parser for show clns traffic", "module_name": "show_clns", "package": "genie.libs.parser", "schema": "{\n'clns': {\n  'last_clear': <class 'str'>,\n  'output': <class 'int'>,\n  'input': <class 'int'>,\n  'local': <class 'int'>,\n  'forward': <class 'int'>,\n  'dropped_protocol': <class 'int'>,\n  'discards': {\n    'hdr_syntax': <class 'int'>,\n    'checksum': <class 'int'>,\n    'lifetime': <class 'int'>,\n    'output_cngstn': <class 'int'>,\n    'no_route': <class 'int'>,\n    'discard_route': <class 'int'>,\n    'dst_unreachable': <class 'int'>,\n    'encaps_failed': <class 'int'>,\n    'nlp_unknown': <class 'int'>,\n    'not_an_is': <class 'int'>,\n    },\n  'options': {\n    'packets': <class 'int'>,\n    'total': <class 'int'>,\n    'bad': <class 'int'>,\n    'gqos': <class 'int'>,\n    'cngstn_exprncd': <class 'int'>,\n    },\n  'segments': {\n    'segmented': <class 'int'>,\n    'failed': <class 'int'>,\n    },\n  'broadcasts': {\n    'sent': <class 'int'>,\n    'rcvd': <class 'int'>,\n    },\n  },\n'echos': {\n  Any  (str) *: {\n    'requests': <class 'int'>,\n    'replied': <class 'int'>,\n    },\n  },\n'packet_counters': {\n  'level': {\n    'level-all': {\n      Any  (str) *: {\n        'rcvd': <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      },\n    },\n  },\n'tunneling': {\n  Any  (str) *: {\n    'rcvd': <class 'int'>,\n    'sent': <class 'int'>,\n    'rcvd_dropped': <class 'int'>,\n    },\n  },\n'iso-igrp': {\n  Any  (str) *: {\n    'rcvd': <class 'int'>,\n    'sent': <class 'int'>,\n    },\n  'syntax_errors': <class 'int'>,\n  },\n'tag': {\n  Any  (str) *: {\n    'IS-IS': {\n      'last_clear': <class 'str'>,\n      'hello': {\n        Any  (str) *: {\n          'rcvd': <class 'int'>,\n          'sent': <class 'int'>,\n          },\n        },\n      'lsp_sourced': {\n        Any  (str) *: {\n          'new': <class 'int'>,\n          'refresh': <class 'int'>,\n          },\n        },\n      'lsp_flooded': {\n        Any  (str) *: {\n          'sent': <class 'int'>,\n          'rcvd': <class 'int'>,\n          },\n        },\n      'lsp_retransmissions': <class 'int'>,\n      'csnp': {\n        Any  (str) *: {\n          'rcvd': <class 'int'>,\n          'sent': <class 'int'>,\n          },\n        },\n      'psnp': {\n        Any  (str) *: {\n          'rcvd': <class 'int'>,\n          'sent': <class 'int'>,\n          },\n        },\n      'dr_election': {\n        'level-1': <class 'int'>,\n        Optional  (str) level-2: <class 'int'>,\n        },\n      'spf_calculation': {\n        'level-1': <class 'int'>,\n        Optional  (str) level-2: <class 'int'>,\n        },\n      'partial_route_calculation': {\n        'level-1': <class 'int'>,\n        Optional  (str) level-2: <class 'int'>,\n        },\n      'lsp_checksum_errors_received': <class 'int'>,\n      'update_process_queue_depth': <class 'str'>,\n      'update_process_packets_dropped': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_clns_traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_clns.py#L995"}}, "show clock": {"ios": {"class": "ShowClock", "doc": "Parser for show clock", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'timezone': <class 'str'>,\n'day': <class 'str'>,\n'day_of_week': <class 'str'>,\n'month': <class 'str'>,\n'year': <class 'str'>,\n'time': <class 'str'>,\n}", "uid": "show_clock", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_system.py#L12"}, "iosxe": {"class": "ShowClock", "doc": "Parser for show clock", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'timezone': <class 'str'>,\n'day': <class 'str'>,\n'day_of_week': <class 'str'>,\n'month': <class 'str'>,\n'year': <class 'str'>,\n'time': <class 'str'>,\n}", "uid": "show_clock", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_system.py#L28"}}, "show configuration lock": {"ios": {"class": "ShowConfigurationLock", "doc": " Parser for show configuration lock ", "module_name": "show_config", "package": "genie.libs.parser", "schema": "{\nOptional  (str) config_session_lock: {\n  Optional  (str) owner_pid: {\n    Any  (str) *: {\n      'tty_number': <class 'int'>,\n      'tty_username': <class 'str'>,\n      'user_debug_info': <class 'str'>,\n      'lock_active_time_in_sec': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) parser_configure_lock: {\n  Optional  (str) owner_pid: {\n    Any  (str) *: {\n      Optional  (str) user: <class 'str'>,\n      Optional  (str) tty: <class 'int'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) class: <class 'str'>,\n      Optional  (str) count: <class 'int'>,\n      Optional  (str) pending_requests: <class 'int'>,\n      Optional  (str) user_debug_info: <class 'str'>,\n      Optional  (str) session_idle_state: <class 'str'>,\n      Optional  (str) num_of_exec_cmds_executed: <class 'int'>,\n      Optional  (str) num_of_exec_cmds_blocked: <class 'int'>,\n      Optional  (str) config_wait_for_show_completion: <class 'str'>,\n      Optional  (str) remote_ip_address: <class 'str'>,\n      Optional  (str) lock_active_time_in_sec: <class 'int'>,\n      Optional  (str) lock_expiration_timer_in_sec: <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_configuration_lock", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_config.py#L12"}, "iosxe": {"class": "ShowConfigurationLock", "doc": " Parser for show configuration lock", "module_name": "show_config", "package": "genie.libs.parser", "schema": "{\nOptional  (str) config_session_lock: {\n  Optional  (str) owner_pid: {\n    Any  (str) *: {\n      'tty_number': <class 'int'>,\n      'tty_username': <class 'str'>,\n      'user_debug_info': <class 'str'>,\n      'lock_active_time_in_sec': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) parser_configure_lock: {\n  Optional  (str) owner_pid: {\n    Any  (str) *: {\n      Optional  (str) user: <class 'str'>,\n      Optional  (str) tty: <class 'int'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) state: <class 'str'>,\n      Optional  (str) class: <class 'str'>,\n      Optional  (str) count: <class 'int'>,\n      Optional  (str) pending_requests: <class 'int'>,\n      Optional  (str) user_debug_info: <class 'str'>,\n      Optional  (str) session_idle_state: <class 'str'>,\n      Optional  (str) num_of_exec_cmds_executed: <class 'int'>,\n      Optional  (str) num_of_exec_cmds_blocked: <class 'int'>,\n      Optional  (str) config_wait_for_show_completion: <class 'str'>,\n      Optional  (str) remote_ip_address: <class 'str'>,\n      Optional  (str) lock_active_time_in_sec: <class 'int'>,\n      Optional  (str) lock_expiration_timer_in_sec: <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_configuration_lock", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_config.py#L58"}}, "show configuration system ntp | display set": {"junos": {"class": "ShowConfigurationSystemNtpSet", "doc": "Parser for: show configuration system ntp | display set ", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address': {\n      Any  (str) *: {\n        'type': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'type': <class 'str'>,\n            'vrf': <class 'str'>,\n            },\n          },\n        'isconfigured': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'isconfigured': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_configuration_system_ntp___display_set", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ntp.py#L327"}}, "show context": {"asa": {"class": "ShowContext", "doc": "Parser for\n        * show context\n    ", "module_name": "show_context", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'candidate_default': <class 'bool'>,\n  'class': <class 'str'>,\n  'mode': <class 'str'>,\n  'url': <class 'str'>,\n  'interfaces': <class 'list'>,\n  },\n}", "uid": "show_context", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_context.py#L34"}}, "show context detail": {"asa": {"class": "ShowContextDetail", "doc": "Parser for\n        * show context detail\n    ", "module_name": "show_context", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'id': <class 'int'>,\n  'flags': <class 'str'>,\n  'class': <class 'str'>,\n  'context_created': <class 'bool'>,\n  Optional  (str) url: <class 'str'>,\n  Optional  (str) interfaces: {\n    Optional  (str) real_interfaces: <class 'list'>,\n    Optional  (str) mapped_interfaces: <class 'list'>,\n    },\n  },\n}", "uid": "show_context_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_context.py#L137"}}, "show controller fia diagshell {diagshell_unit} 'l2 show' location {location}": {"iosxr": {"class": "ShowControllersFiaDiagshellL2showLocation", "doc": "Parser for:\n        * show controller fia diagshell {diagshell_unit} 'l2 show' location {location}\n    ", "module_name": "show_controllers", "package": "genie.libs.parser", "schema": "{\n'nodes': {\n  Any  (str) *: {\n    'vlan': {\n      Any  (str) *: {\n        'mac': {\n          Any  (str) *: {\n            'encap_id': <class 'str'>,\n            'gport': <class 'str'>,\n            Optional  (str) trunk: <class 'int'>,\n            Optional  (str) static: <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_controller_fia_diagshell_diagshell_unit_'l2_show'_location_location", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_controllers.py#L51"}}, "show controllers coherentDSP {port}": {"iosxr": {"class": "ShowControllersCoherentDSP", "doc": "Parser for:\n        * show controllers coherentDSP {port}\n    ", "module_name": "show_controllers", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'port': <class 'str'>,\n  'controller_state': <class 'str'>,\n  'inherited_secondary_state': <class 'str'>,\n  'configured_secondary_state': <class 'str'>,\n  'derived_state': <class 'str'>,\n  'loopback_mode': <class 'str'>,\n  'ber_thresholds_sf': <class 'str'>,\n  'ber_thresholds_sd': <class 'str'>,\n  'performance_monitoring': <class 'str'>,\n  'alarm_info': {\n    'los': <class 'int'>,\n    'lof': <class 'int'>,\n    'lom': <class 'int'>,\n    'oof': <class 'int'>,\n    'oom': <class 'int'>,\n    'ais': <class 'int'>,\n    'iae': <class 'int'>,\n    'biae': <class 'int'>,\n    'sf_ber': <class 'int'>,\n    'sd_ber': <class 'int'>,\n    'bdi': <class 'int'>,\n    'tim': <class 'int'>,\n    'fecmis_match': <class 'int'>,\n    'fec_unc': <class 'int'>,\n    },\n  'detected_alarms': <class 'str'>,\n  'bit_error_rate_info': {\n    'prefec_ber': <class 'str'>,\n    'postfec_ber': <class 'str'>,\n    },\n  'otu_tti': <class 'str'>,\n  'fec_mode': <class 'str'>,\n  },\n}", "uid": "show_controllers_coherentDSP_port", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_controllers.py#L165"}}, "show controllers fia diagshell {diagshell} \"diag egr_calendars\" location {location}": {"iosxr": {"class": "ShowControllersFiaDiagshellDiagEgrCalendarsLocation", "doc": null, "module_name": "show_controllers", "package": "genie.libs.parser", "schema": "{\n'node_id': {\n  Any  (str) *: {\n    'port': {\n      Any  (str) *: {\n        'priority': <class 'str'>,\n        'high_calendar': <class 'int'>,\n        'low_calendar': <class 'int'>,\n        'egq_if': <class 'int'>,\n        'e2e_if': <class 'int'>,\n        'egq_port_rate': <class 'int'>,\n        'egq_if_rate': <class 'int'>,\n        'e2e_port_rate': <class 'int'>,\n        'e2e_if_rate': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_controllers_fia_diagshell_diagshell_\"diag_egr_calendars\"_location_location", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_controllers.py#L1006"}}, "show controllers fia diagshell {unit} \"diag cosq qpair egq map\" location {location}": {"iosxr": {"class": "ShowControllersFiaDiagshellDiagCosqQpairEgpMap", "doc": null, "module_name": "show_controllers", "package": "genie.libs.parser", "schema": "{\n'node_id': {\n  Any  (str) *: {\n    'mapping': {\n      Any  (str) *: {\n        'port_number': {\n          Any  (str) *: {\n            'priorities': <class 'int'>,\n            'base_q_pair': <class 'int'>,\n            'ps_number': <class 'int'>,\n            'core': <class 'int'>,\n            'tm_port': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_controllers_fia_diagshell_unit_\"diag_cosq_qpair_egq_map\"_location_location", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_controllers.py#L1182"}}, "show controllers npu {npu} interface {interface} instance {instance} location {location}": {"iosxr": {"class": "ShowControllersNpuInterfaceInstanceLocation", "doc": null, "module_name": "show_controllers", "package": "genie.libs.parser", "schema": "{\n'node_id': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'interface_handle_hex': <class 'int'>,\n        'npu_number': <class 'int'>,\n        'npu_core': <class 'int'>,\n        'pp_port': <class 'int'>,\n        'sys_port': <class 'int'>,\n        'voq_base': <class 'int'>,\n        'flow_base': <class 'int'>,\n        'voq_port_type': <class 'str'>,\n        'port_speed': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_controllers_npu_npu_interface_interface_instance_instance_location_location", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_controllers.py#L1090"}}, "show controllers optics {port}": {"iosxr": {"class": "ShowControllersOptics", "doc": "Parser for:\n        * show controllers optics {port}\n    ", "module_name": "show_controllers", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'controller_state': <class 'str'>,\n  'transport_admin_state': <class 'str'>,\n  'laser_state': <class 'str'>,\n  Optional  (str) led_state: <class 'str'>,\n  'optics_status': {\n    'optics_type': <class 'str'>,\n    'wavelength': <class 'str'>,\n    Optional  (str) dwdm_carrier_info: <class 'str'>,\n    Optional  (str) msa_itu_channel: <class 'str'>,\n    Optional  (str) frequency: <class 'str'>,\n    Optional  (str) alarm_status: {\n      Optional  (str) detected_alarms: <class 'list'>,\n      },\n    Optional  (str) alarm_statistics: {\n      Optional  (str) high_rx_pwr: <class 'int'>,\n      Optional  (str) low_rx_pwr: <class 'int'>,\n      Optional  (str) high_tx_pwr: <class 'int'>,\n      Optional  (str) low_tx_pwr: <class 'int'>,\n      Optional  (str) high_lbc: <class 'int'>,\n      Optional  (str) high_dgd: <class 'int'>,\n      Optional  (str) oor_cd: <class 'int'>,\n      Optional  (str) osnr: <class 'int'>,\n      Optional  (str) wvl_ool: <class 'int'>,\n      Optional  (str) mea: <class 'int'>,\n      Optional  (str) improper_rem: <class 'int'>,\n      Optional  (str) tc_power_prov_mismatch: <class 'int'>,\n      },\n    Optional  (str) los_lol_fault_status: {\n      Optional  (str) detected_los_lol_fault: <class 'list'>,\n      },\n    Optional  (str) laser_bias_current: <class 'str'>,\n    'actual_tx_power': <class 'str'>,\n    'rx_power': <class 'str'>,\n    Optional  (str) performance_monitoring: <class 'str'>,\n    Optional  (str) threshold_values: {\n      Any  (str) *: {\n        'parameter': <class 'str'>,\n        'high_alarm': <class 'str'>,\n        'low_alarm': <class 'str'>,\n        'high_warning': <class 'str'>,\n        'low_warning': <class 'str'>,\n        },\n      },\n    Optional  (str) lbc_high_threshold: <class 'str'>,\n    Optional  (str) configured_tx_power: <class 'str'>,\n    Optional  (str) configured_osnr_lower_threshold: <class 'str'>,\n    Optional  (str) configured_dgd_higher_threshold: <class 'str'>,\n    Optional  (str) chromatic_dispersion: <class 'str'>,\n    Optional  (str) configured_cd_min: <class 'str'>,\n    Optional  (str) configured_cd_max: <class 'str'>,\n    Optional  (str) optical_snr: <class 'str'>,\n    Optional  (str) polarization_dependent_loss: <class 'str'>,\n    Optional  (str) polarization_parameters: <class 'str'>,\n    Optional  (str) differential_group_delay: <class 'str'>,\n    Optional  (str) temperature: <class 'str'>,\n    Optional  (str) voltage: <class 'str'>,\n    },\n  Optional  (str) transceiver_vendor_details: {\n    Optional  (str) form_factor: <class 'str'>,\n    Optional  (str) optics_type: <class 'str'>,\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) oui_number: <class 'str'>,\n    Optional  (str) part_number: <class 'str'>,\n    Optional  (str) rev_number: <class 'str'>,\n    Optional  (str) serial_number: <class 'str'>,\n    Optional  (str) pid: <class 'str'>,\n    Optional  (str) vid: <class 'str'>,\n    Optional  (str) date_code: <class 'str'>,\n    },\n  },\n}", "uid": "show_controllers_optics_port", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_controllers.py#L470"}}, "show crypto pki certificates": {"ios": {"class": "ShowCryptoPkiCertificates", "doc": "Parser for show crypto pki certificates <WORD>", "module_name": "show_crypto", "package": "genie.libs.parser", "schema": "{\n'trustpoints': {\n  Any  (str) *: {\n    'associated_trustpoints': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        'serial_number_in_hex': <class 'str'>,\n        'usage': <class 'str'>,\n        Optional  (str) storage: <class 'str'>,\n        'issuer': {\n          Optional  (str) cn: <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          },\n        'subject': {\n          Optional  (str) name: <class 'str'>,\n          Optional  (str) serial_number: <class 'str'>,\n          Optional  (str) pid: <class 'str'>,\n          Optional  (str) cn: <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          },\n        Optional  (str) crl_distribution_points: <class 'str'>,\n        'validity_date': {\n          'start_date': <class 'str'>,\n          'end_date': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_crypto_pki_certificates", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_crypto.py#L12"}, "iosxe": {"class": "ShowCryptoPkiCertificates", "doc": "Parser for show crypto pki certificates <WORD>", "module_name": "show_crypto", "package": "genie.libs.parser", "schema": "{\n'trustpoints': {\n  Any  (str) *: {\n    'associated_trustpoints': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        'serial_number_in_hex': <class 'str'>,\n        'usage': <class 'str'>,\n        Optional  (str) storage: <class 'str'>,\n        'issuer': {\n          Optional  (str) cn: <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          },\n        'subject': {\n          Optional  (str) name: <class 'str'>,\n          Optional  (str) serial_number: <class 'str'>,\n          Optional  (str) pid: <class 'str'>,\n          Optional  (str) cn: <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          },\n        Optional  (str) crl_distribution_points: <class 'str'>,\n        'validity_date': {\n          'start_date': <class 'str'>,\n          'end_date': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_crypto_pki_certificates", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_crypto.py#L58"}}, "show crypto pki certificates {trustpoint_name}": {"ios": {"class": "ShowCryptoPkiCertificates", "doc": "Parser for show crypto pki certificates <WORD>", "module_name": "show_crypto", "package": "genie.libs.parser", "schema": "{\n'trustpoints': {\n  Any  (str) *: {\n    'associated_trustpoints': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        'serial_number_in_hex': <class 'str'>,\n        'usage': <class 'str'>,\n        Optional  (str) storage: <class 'str'>,\n        'issuer': {\n          Optional  (str) cn: <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          },\n        'subject': {\n          Optional  (str) name: <class 'str'>,\n          Optional  (str) serial_number: <class 'str'>,\n          Optional  (str) pid: <class 'str'>,\n          Optional  (str) cn: <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          },\n        Optional  (str) crl_distribution_points: <class 'str'>,\n        'validity_date': {\n          'start_date': <class 'str'>,\n          'end_date': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_crypto_pki_certificates_trustpoint_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_crypto.py#L12"}, "iosxe": {"class": "ShowCryptoPkiCertificates", "doc": "Parser for show crypto pki certificates <WORD>", "module_name": "show_crypto", "package": "genie.libs.parser", "schema": "{\n'trustpoints': {\n  Any  (str) *: {\n    'associated_trustpoints': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        'serial_number_in_hex': <class 'str'>,\n        'usage': <class 'str'>,\n        Optional  (str) storage: <class 'str'>,\n        'issuer': {\n          Optional  (str) cn: <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          },\n        'subject': {\n          Optional  (str) name: <class 'str'>,\n          Optional  (str) serial_number: <class 'str'>,\n          Optional  (str) pid: <class 'str'>,\n          Optional  (str) cn: <class 'str'>,\n          Optional  (str) o: <class 'str'>,\n          },\n        Optional  (str) crl_distribution_points: <class 'str'>,\n        'validity_date': {\n          'start_date': <class 'str'>,\n          'end_date': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_crypto_pki_certificates_trustpoint_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_crypto.py#L58"}}, "show dmvpn": {"iosxe": {"class": "ShowDmvpn", "doc": "\n    Parser for\n        * 'show dmvpn'\n        * 'show dmvpn interface {interface}'\n    ", "module_name": "show_dmvpn", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'nhrp_peers': <class 'int'>,\n    'type': <class 'str'>,\n    'ent': {\n      Any  (str) *: {\n        'peers': {\n          Any  (str) *: {\n            'tunnel_addr': {\n              Any  (str) *: {\n                'attrb': {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'time': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_dmvpn", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dmvpn.py#L62"}}, "show dmvpn interface {interface}": {"iosxe": {"class": "ShowDmvpn", "doc": "\n    Parser for\n        * 'show dmvpn'\n        * 'show dmvpn interface {interface}'\n    ", "module_name": "show_dmvpn", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'nhrp_peers': <class 'int'>,\n    'type': <class 'str'>,\n    'ent': {\n      Any  (str) *: {\n        'peers': {\n          Any  (str) *: {\n            'tunnel_addr': {\n              Any  (str) *: {\n                'attrb': {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'time': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_dmvpn_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dmvpn.py#L62"}}, "show dot1x": {"ios": {"class": "ShowDot1x", "doc": "Parser for show dot1x", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\nOptional  (str) system_auth_control: <class 'bool'>,\nOptional  (str) version: <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'pae': <class 'str'>,\n    'interface': <class 'str'>,\n    Optional  (str) credentials: <class 'str'>,\n    Optional  (str) port_control: <class 'str'>,\n    Optional  (str) control_direction: <class 'str'>,\n    Optional  (str) host_mode: <class 'str'>,\n    Optional  (str) re_authentication: <class 'bool'>,\n    Optional  (str) max_reauth_req: <class 'int'>,\n    Optional  (str) max_req: <class 'int'>,\n    Optional  (str) max_start: <class 'int'>,\n    Optional  (str) timeout: {\n      Optional  (str) server_timeout: <class 'int'>,\n      Optional  (str) supp_timeout: <class 'int'>,\n      Optional  (str) quiet_period: <class 'int'>,\n      Optional  (str) tx_period: <class 'int'>,\n      Optional  (str) auth_period: <class 'int'>,\n      Optional  (str) held_period: <class 'int'>,\n      Optional  (str) ratelimit_period: <class 'int'>,\n      Optional  (str) start_period: <class 'int'>,\n      Optional  (str) re_auth_period: <class 'int'>,\n      },\n    Optional  (str) authenticator: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) supplicant: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) clients: {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'eap_method': <class 'str'>,\n        Optional  (str) session: {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            'auth_sm_state': <class 'str'>,\n            'auth_bend_sm_state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_dot1x", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py#L20"}, "iosxe": {"class": "ShowDot1x", "doc": "Parser for show dot1x", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\nOptional  (str) system_auth_control: <class 'bool'>,\nOptional  (str) version: <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'pae': <class 'str'>,\n    'interface': <class 'str'>,\n    Optional  (str) credentials: <class 'str'>,\n    Optional  (str) port_control: <class 'str'>,\n    Optional  (str) control_direction: <class 'str'>,\n    Optional  (str) host_mode: <class 'str'>,\n    Optional  (str) re_authentication: <class 'bool'>,\n    Optional  (str) max_reauth_req: <class 'int'>,\n    Optional  (str) max_req: <class 'int'>,\n    Optional  (str) max_start: <class 'int'>,\n    Optional  (str) timeout: {\n      Optional  (str) server_timeout: <class 'int'>,\n      Optional  (str) supp_timeout: <class 'int'>,\n      Optional  (str) quiet_period: <class 'int'>,\n      Optional  (str) tx_period: <class 'int'>,\n      Optional  (str) auth_period: <class 'int'>,\n      Optional  (str) held_period: <class 'int'>,\n      Optional  (str) ratelimit_period: <class 'int'>,\n      Optional  (str) start_period: <class 'int'>,\n      Optional  (str) re_auth_period: <class 'int'>,\n      },\n    Optional  (str) authenticator: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) supplicant: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) clients: {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'eap_method': <class 'str'>,\n        Optional  (str) session: {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            'auth_sm_state': <class 'str'>,\n            'auth_bend_sm_state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_dot1x", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py#L266"}}, "show dot1x all count": {"ios": {"class": "ShowDot1xAllCount", "doc": "Parser for show dot1x all count", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\n'sessions': {\n  'authorized_clients': <class 'int'>,\n  'unauthorized_clients': <class 'int'>,\n  'total': <class 'int'>,\n  },\n}", "uid": "show_dot1x_all_count", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py#L30"}, "iosxe": {"class": "ShowDot1xAllCount", "doc": "Parser for show dot1x all count", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\n'sessions': {\n  'authorized_clients': <class 'int'>,\n  'unauthorized_clients': <class 'int'>,\n  'total': <class 'int'>,\n  },\n}", "uid": "show_dot1x_all_count", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py#L453"}}, "show dot1x all details": {"ios": {"class": "ShowDot1xAllDetail", "doc": "Parser for show dot1x all details", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\nOptional  (str) system_auth_control: <class 'bool'>,\nOptional  (str) version: <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'pae': <class 'str'>,\n    'interface': <class 'str'>,\n    Optional  (str) credentials: <class 'str'>,\n    Optional  (str) port_control: <class 'str'>,\n    Optional  (str) control_direction: <class 'str'>,\n    Optional  (str) host_mode: <class 'str'>,\n    Optional  (str) re_authentication: <class 'bool'>,\n    Optional  (str) max_reauth_req: <class 'int'>,\n    Optional  (str) max_req: <class 'int'>,\n    Optional  (str) max_start: <class 'int'>,\n    Optional  (str) timeout: {\n      Optional  (str) server_timeout: <class 'int'>,\n      Optional  (str) supp_timeout: <class 'int'>,\n      Optional  (str) quiet_period: <class 'int'>,\n      Optional  (str) tx_period: <class 'int'>,\n      Optional  (str) auth_period: <class 'int'>,\n      Optional  (str) held_period: <class 'int'>,\n      Optional  (str) ratelimit_period: <class 'int'>,\n      Optional  (str) start_period: <class 'int'>,\n      Optional  (str) re_auth_period: <class 'int'>,\n      },\n    Optional  (str) authenticator: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) supplicant: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) clients: {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'eap_method': <class 'str'>,\n        Optional  (str) session: {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            'auth_sm_state': <class 'str'>,\n            'auth_bend_sm_state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_dot1x_all_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py#L15"}, "iosxe": {"class": "ShowDot1xAllDetail", "doc": "Parser for show dot1x all details", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\nOptional  (str) system_auth_control: <class 'bool'>,\nOptional  (str) version: <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'pae': <class 'str'>,\n    'interface': <class 'str'>,\n    Optional  (str) credentials: <class 'str'>,\n    Optional  (str) port_control: <class 'str'>,\n    Optional  (str) control_direction: <class 'str'>,\n    Optional  (str) host_mode: <class 'str'>,\n    Optional  (str) re_authentication: <class 'bool'>,\n    Optional  (str) max_reauth_req: <class 'int'>,\n    Optional  (str) max_req: <class 'int'>,\n    Optional  (str) max_start: <class 'int'>,\n    Optional  (str) timeout: {\n      Optional  (str) server_timeout: <class 'int'>,\n      Optional  (str) supp_timeout: <class 'int'>,\n      Optional  (str) quiet_period: <class 'int'>,\n      Optional  (str) tx_period: <class 'int'>,\n      Optional  (str) auth_period: <class 'int'>,\n      Optional  (str) held_period: <class 'int'>,\n      Optional  (str) ratelimit_period: <class 'int'>,\n      Optional  (str) start_period: <class 'int'>,\n      Optional  (str) re_auth_period: <class 'int'>,\n      },\n    Optional  (str) authenticator: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) supplicant: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) clients: {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'eap_method': <class 'str'>,\n        Optional  (str) session: {\n          Any  (str) *: {\n            'session_id': <class 'str'>,\n            'auth_sm_state': <class 'str'>,\n            'auth_bend_sm_state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_dot1x_all_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py#L83"}, "nxos": {"class": "ShowDot1xAllDetails", "doc": "Parser for:\n            show dot1x all details\n    ", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\nOptional  (str) system_auth_control: <class 'bool'>,\nOptional  (str) version: <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'pae': <class 'str'>,\n    'interface': <class 'str'>,\n    Optional  (str) credentials: <class 'str'>,\n    Optional  (str) max_reauth_req: <class 'int'>,\n    Optional  (str) max_req: <class 'int'>,\n    Optional  (str) max_start: <class 'int'>,\n    Optional  (str) port_control: <class 'str'>,\n    Optional  (str) control_direction: <class 'str'>,\n    Optional  (str) host_mode: <class 'str'>,\n    Optional  (str) re_authentication: <class 'bool'>,\n    Optional  (str) re_auth_max: <class 'int'>,\n    Optional  (str) mac-auth-bypass: <class 'bool'>,\n    Optional  (str) port_status: <class 'str'>,\n    Optional  (str) timeout: {\n      Optional  (str) auth_period: <class 'int'>,\n      Optional  (str) held_period: <class 'int'>,\n      Optional  (str) quiet_period: <class 'int'>,\n      Optional  (str) ratelimit_period: <class 'int'>,\n      Optional  (str) server_timeout: <class 'int'>,\n      Optional  (str) start_period: <class 'int'>,\n      Optional  (str) supp_timeout: <class 'int'>,\n      Optional  (str) tx_period: <class 'int'>,\n      Optional  (str) re_auth_period: <class 'int'>,\n      Optional  (str) time_to_next_reauth: <class 'int'>,\n      },\n    Optional  (str) authenticator: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) supplicant: {\n      'eap': {\n        'profile': <class 'str'>,\n        },\n      },\n    Optional  (str) clients: {\n      Any  (str) *: {\n        Optional  (str) client: <class 'str'>,\n        Optional  (str) eap_method: <class 'str'>,\n        Optional  (str) auth_method: <class 'str'>,\n        Optional  (str) session: {\n          Optional  (str) reauth_action: <class 'str'>,\n          Optional  (str) auth_by: <class 'str'>,\n          Optional  (str) session_id: <class 'str'>,\n          Optional  (str) auth_sm_state: <class 'str'>,\n          Optional  (str) auth_bend_sm_state: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_dot1x_all_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_dot1x.py#L237"}}, "show dot1x all statistics": {"ios": {"class": "ShowDot1xAllStatistics", "doc": "Parser for show dot1x all statistics", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'statistics': {\n      'rxinvalid': <class 'int'>,\n      'rxlenerr': <class 'int'>,\n      'rxtotal': <class 'int'>,\n      'txtotal': <class 'int'>,\n      'rxversion': <class 'int'>,\n      'lastrxsrcmac': <class 'str'>,\n      Optional  (str) rxreq: <class 'int'>,\n      Optional  (str) txreq: <class 'int'>,\n      Optional  (str) txstart: <class 'int'>,\n      Optional  (str) rxstart: <class 'int'>,\n      Optional  (str) txlogoff: <class 'int'>,\n      Optional  (str) rxlogoff: <class 'int'>,\n      Optional  (str) txresp: <class 'int'>,\n      Optional  (str) rxresp: <class 'int'>,\n      Optional  (str) rxrespid: <class 'int'>,\n      Optional  (str) txreqid: <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_dot1x_all_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py#L35"}, "iosxe": {"class": "ShowDot1xAllStatistics", "doc": "Parser for show dot1x all statistics", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'statistics': {\n      'rxinvalid': <class 'int'>,\n      'rxlenerr': <class 'int'>,\n      'rxtotal': <class 'int'>,\n      'txtotal': <class 'int'>,\n      'rxversion': <class 'int'>,\n      'lastrxsrcmac': <class 'str'>,\n      Optional  (str) rxreq: <class 'int'>,\n      Optional  (str) txreq: <class 'int'>,\n      Optional  (str) txstart: <class 'int'>,\n      Optional  (str) rxstart: <class 'int'>,\n      Optional  (str) txlogoff: <class 'int'>,\n      Optional  (str) rxlogoff: <class 'int'>,\n      Optional  (str) txresp: <class 'int'>,\n      Optional  (str) rxresp: <class 'int'>,\n      Optional  (str) rxrespid: <class 'int'>,\n      Optional  (str) txreqid: <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_dot1x_all_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py#L304"}, "nxos": {"class": "ShowDot1xAllStatistics", "doc": "Parser for:\n            show dot1x all statistics\n    ", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'statistics': {\n      'txreq': <class 'int'>,\n      'rxlogoff': <class 'int'>,\n      'rxtotal': <class 'int'>,\n      'txtotal': <class 'int'>,\n      'rxversion': <class 'int'>,\n      'lastrxsrcmac': <class 'str'>,\n      Optional  (str) rxlenerr: <class 'int'>,\n      Optional  (str) txreq: <class 'int'>,\n      Optional  (str) txreqid: <class 'int'>,\n      Optional  (str) rxstart: <class 'int'>,\n      Optional  (str) rxlogoff: <class 'int'>,\n      Optional  (str) rxresp: <class 'int'>,\n      Optional  (str) rxrespid: <class 'int'>,\n      Optional  (str) txreqid: <class 'int'>,\n      Optional  (str) rxinvalid: <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_dot1x_all_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_dot1x.py#L42"}}, "show dot1x all summary": {"ios": {"class": "ShowDot1xAllSummary", "doc": "Parser for show dot1x all summary", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'clients': {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'status': <class 'str'>,\n        'pae': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_dot1x_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_dot1x.py#L25"}, "iosxe": {"class": "ShowDot1xAllSummary", "doc": "Parser for show dot1x all summary", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'clients': {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'status': <class 'str'>,\n        'pae': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_dot1x_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_dot1x.py#L379"}, "nxos": {"class": "ShowDot1xAllSummary", "doc": "Parser for:\n            show dot1x all summary\n    ", "module_name": "show_dot1x", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'clients': {\n      Any  (str) *: {\n        'client': <class 'str'>,\n        'pae': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_dot1x_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_dot1x.py#L129"}}, "show eigrp ipv4 neighbors": {"iosxr": {"class": "ShowEigrpIpv4Neighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_eigrp_ipv4_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_eigrp.py#L242"}}, "show eigrp ipv4 neighbors detail": {"iosxr": {"class": "ShowEigrpIpv4NeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'bfd': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_eigrp_ipv4_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_eigrp.py#L544"}}, "show eigrp ipv4 vrf {vrf} neighbors": {"iosxr": {"class": "ShowEigrpIpv4Neighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_eigrp_ipv4_vrf_vrf_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_eigrp.py#L242"}}, "show eigrp ipv4 vrf {vrf} neighbors detail": {"iosxr": {"class": "ShowEigrpIpv4NeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'bfd': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_eigrp_ipv4_vrf_vrf_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_eigrp.py#L544"}}, "show eigrp ipv6 neighbors": {"iosxr": {"class": "ShowEigrpIpv6Neighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_eigrp_ipv6_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_eigrp.py#L263"}}, "show eigrp ipv6 neighbors detail": {"iosxr": {"class": "ShowEigrpIpv6NeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'bfd': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_eigrp_ipv6_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_eigrp.py#L566"}}, "show eigrp ipv6 vrf {vrf} neighbors": {"iosxr": {"class": "ShowEigrpIpv6Neighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_eigrp_ipv6_vrf_vrf_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_eigrp.py#L263"}}, "show eigrp ipv6 vrf {vrf} neighbors detail": {"iosxr": {"class": "ShowEigrpIpv6NeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'bfd': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_eigrp_ipv6_vrf_vrf_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_eigrp.py#L566"}}, "show environment": {"ios": {"class": "ShowEnvironment", "doc": "Parser for show environment", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) critical_larams: <class 'int'>,\nOptional  (str) major_alarms: <class 'int'>,\nOptional  (str) minor_alarms: <class 'int'>,\n'slot': {\n  Any  (str) *: {\n    'sensor': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'reading': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_environment", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L579"}, "iosxe": {"class": "ShowEnvironment", "doc": "Parser for show environment\n                  show environment | include {include} ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) critical_larams: <class 'int'>,\nOptional  (str) major_alarms: <class 'int'>,\nOptional  (str) minor_alarms: <class 'int'>,\n'slot': {\n  Any  (str) *: {\n    'sensor': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'reading': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_environment", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3325"}}, "show environment all": {"iosxe": {"asr1k": {"class": "ShowEnvironmentAll", "doc": "Parser for show environment all\n                  show environment all | include <WORD>", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'sensor_list': {\n  Any  (str) *: {\n    'sensor': {\n      Any  (str) *: {\n        'location': <class 'str'>,\n        'state': <class 'str'>,\n        'reading': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_environment_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/asr1k/show_platform.py#L35"}, "c3850": {"class": "ShowEnvironmentAll", "doc": "Parser for show environment all", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'switch': {\n  Any  (str) *: {\n    'fan': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) direction: <class 'str'>,\n        },\n      },\n    'power_supply': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) serial_number: <class 'str'>,\n        'status': <class 'str'>,\n        Optional  (str) system_power: <class 'str'>,\n        Optional  (str) poe_power: <class 'str'>,\n        Optional  (str) watts: <class 'str'>,\n        },\n      },\n    'system_temperature_state': <class 'str'>,\n    Optional  (str) inlet_temperature: {\n      'value': <class 'str'>,\n      'state': <class 'str'>,\n      'yellow_threshold': <class 'str'>,\n      'red_threshold': <class 'str'>,\n      },\n    Optional  (str) hotspot_temperature: {\n      'value': <class 'str'>,\n      'state': <class 'str'>,\n      'yellow_threshold': <class 'str'>,\n      'red_threshold': <class 'str'>,\n      },\n    Optional  (str) asic_temperature: {\n      'value': <class 'str'>,\n      'state': <class 'str'>,\n      'yellow_threshold': <class 'str'>,\n      'red_threshold': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_environment_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c3850/show_platform.py#L62"}, "class": "ShowEnvironmentAll", "doc": "Parser for show environment all", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'switch': {\n  Any  (str) *: {\n    'fan': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) direction: <class 'str'>,\n        },\n      },\n    'power_supply': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) serial_number: <class 'str'>,\n        'status': <class 'str'>,\n        Optional  (str) system_power: <class 'str'>,\n        Optional  (str) poe_power: <class 'str'>,\n        Optional  (str) watts: <class 'str'>,\n        },\n      },\n    'system_temperature_state': <class 'str'>,\n    Optional  (str) inlet_temperature: {\n      'value': <class 'str'>,\n      'state': <class 'str'>,\n      'yellow_threshold': <class 'str'>,\n      'red_threshold': <class 'str'>,\n      },\n    Optional  (str) hotspot_temperature: {\n      'value': <class 'str'>,\n      'state': <class 'str'>,\n      'yellow_threshold': <class 'str'>,\n      'red_threshold': <class 'str'>,\n      },\n    Optional  (str) asic_temperature: {\n      'value': <class 'str'>,\n      'state': <class 'str'>,\n      'yellow_threshold': <class 'str'>,\n      'red_threshold': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_environment_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2740"}}, "show environment all | include Sensor": {"iosxe": {"asr1k": {"class": "ShowEnvironmentAllIncludeLocation", "doc": "Parser for show environment all | include Sensor |<WORD>", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'sensor_list': {\n  Any  (str) *: {\n    'sensor': {\n      Any  (str) *: {\n        'location': <class 'str'>,\n        'state': <class 'str'>,\n        'reading': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_environment_all___include_Sensor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/asr1k/show_platform.py#L103"}}}, "show environment | include {include}": {"ios": {"class": "ShowEnvironment", "doc": "Parser for show environment", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) critical_larams: <class 'int'>,\nOptional  (str) major_alarms: <class 'int'>,\nOptional  (str) minor_alarms: <class 'int'>,\n'slot': {\n  Any  (str) *: {\n    'sensor': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'reading': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_environment___include_include", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L579"}, "iosxe": {"class": "ShowEnvironment", "doc": "Parser for show environment\n                  show environment | include {include} ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) critical_larams: <class 'int'>,\nOptional  (str) major_alarms: <class 'int'>,\nOptional  (str) minor_alarms: <class 'int'>,\n'slot': {\n  Any  (str) *: {\n    'sensor': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'reading': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_environment___include_include", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3325"}}, "show errdisable recovery": {"ios": {"class": "ShowErrdisableRecovery", "doc": "Parser for show errdisable recovery", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'timer_status': {\n  Any  (str) *: <class 'bool'>,\n  },\n'bpduguard_timeout_recovery': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'errdisable_reason': <class 'str'>,\n    'time_left': <class 'int'>,\n    },\n  },\n}", "uid": "show_errdisable_recovery", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L42"}, "iosxe": {"class": "ShowErrdisableRecovery", "doc": "Parser for show errdisable recovery", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'timer_status': {\n  Any  (str) *: <class 'bool'>,\n  },\n'bpduguard_timeout_recovery': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'errdisable_reason': <class 'str'>,\n    'time_left': <class 'int'>,\n    },\n  },\n}", "uid": "show_errdisable_recovery", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L780"}, "nxos": {"class": "ShowErrdisableRecovery", "doc": "Parser for show errdisable recovery", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'errdisable_reason': {\n  Any  (str) *: <class 'bool'>,\n  },\n'timer_interval': <class 'int'>,\n}", "uid": "show_errdisable_recovery", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_spanning_tree.py#L864"}}, "show etherchannel load-balancing": {"ios": {"class": "ShowEtherChannelLoadBalancing", "doc": "Parser for :\n      show etherchannel load-balancing", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'global_lb_method': <class 'str'>,\nOptional  (str) lb_algo_type: <class 'str'>,\nOptional  (str) port_channel: {\n  Any  (str) *: {\n    'lb_method': <class 'str'>,\n    },\n  },\n}", "uid": "show_etherchannel_load-balancing", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L119"}, "iosxe": {"class": "ShowEtherChannelLoadBalancing", "doc": "Parser for :\n      show etherchannel load-balancing", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'global_lb_method': <class 'str'>,\nOptional  (str) lb_algo_type: <class 'str'>,\nOptional  (str) port_channel: {\n  Any  (str) *: {\n    'lb_method': <class 'str'>,\n    },\n  },\n}", "uid": "show_etherchannel_load-balancing", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L907"}}, "show etherchannel summary": {"ios": {"class": "ShowEtherchannelSummary", "doc": "Parser for :\n      show etherchannel summary", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\nOptional  (str) number_of_lag_in_use: <class 'int'>,\nOptional  (str) number_of_aggregators: <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) bundle_id: <class 'int'>,\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) flags: <class 'str'>,\n    Optional  (str) oper_status: <class 'str'>,\n    Optional  (str) activity: <class 'str'>,\n    Optional  (str) members: {\n      Any  (str) *: {\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) flags: <class 'str'>,\n        Optional  (str) bundled: <class 'bool'>,\n        'port_channel': {\n          'port_channel_member': <class 'bool'>,\n          Optional  (str) port_channel_int: <class 'str'>,\n          },\n        },\n      },\n    Optional  (str) port_channel: {\n      'port_channel_member': <class 'bool'>,\n      Optional  (str) port_channel_member_intfs: <class 'list'>,\n      },\n    },\n  },\n}", "uid": "show_etherchannel_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L110"}, "iosxe": {"class": "ShowEtherchannelSummary", "doc": "Parser for :\n      show etherchannel summary", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\nOptional  (str) number_of_lag_in_use: <class 'int'>,\nOptional  (str) number_of_aggregators: <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) bundle_id: <class 'int'>,\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) flags: <class 'str'>,\n    Optional  (str) oper_status: <class 'str'>,\n    Optional  (str) activity: <class 'str'>,\n    Optional  (str) members: {\n      Any  (str) *: {\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) flags: <class 'str'>,\n        Optional  (str) bundled: <class 'bool'>,\n        'port_channel': {\n          'port_channel_member': <class 'bool'>,\n          Optional  (str) port_channel_int: <class 'str'>,\n          },\n        },\n      },\n    Optional  (str) port_channel: {\n      'port_channel_member': <class 'bool'>,\n      Optional  (str) port_channel_member_intfs: <class 'list'>,\n      },\n    },\n  },\n}", "uid": "show_etherchannel_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L730"}}, "show ethernet cfm peer meps": {"iosxr": {"class": "ShowEthernetCfmMeps", "doc": "Parser for show ethernet cfm peer meps", "module_name": "show_ethernet", "package": "genie.libs.parser", "schema": "{\n'domain': {\n  Any  (str) *: {\n    'level': <class 'int'>,\n    'service': <class 'str'>,\n    Optional  (str) mep_type: {\n      Any  (str) *: {\n        'interface': {\n          Any  (str) *: {\n            'mep_id': <class 'int'>,\n            'id': {\n              Any  (str) *: {\n                'mac_address': {\n                  Any  (str) *: {\n                    'st': <class 'str'>,\n                    'port': <class 'str'>,\n                    'up_down_time': <class 'str'>,\n                    'ccm_rcvd': <class 'int'>,\n                    'seq_err': <class 'int'>,\n                    'rdi': <class 'int'>,\n                    'error': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_cfm_peer_meps", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ethernet.py#L60"}}, "show ethernet service instance": {"iosxe": {"class": "ShowEthernetServiceInstance", "doc": "Parser for show ethernet service instance\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) associated_evc: <class 'str'>,\n        Optional  (str) l2protocol_drop: <class 'bool'>,\n        Optional  (str) ce_vlans: <class 'str'>,\n        Optional  (str) encapsulation: <class 'str'>,\n        Optional  (str) rewrite: <class 'str'>,\n        Optional  (str) control_policy: <class 'str'>,\n        Optional  (str) intiators: <class 'str'>,\n        Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) efp_statistics: {\n          'pkts_in': <class 'int'>,\n          'pkts_out': <class 'int'>,\n          'bytes_in': <class 'int'>,\n          'bytes_out': <class 'int'>,\n          },\n        Optional  (str) micro_block_type: {\n          Any  (str) *: {\n            Any  (str) *: Any  (str) *,\n            },\n          },\n        Optional  (str) l2_acl: {\n          Optional  (str) inbound: <class 'str'>,\n          Optional  (str) permit_count: <class 'int'>,\n          Optional  (str) deny_count: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L569"}}, "show ethernet service instance detail": {"ios": {"class": "ShowEthernetServiceInstanceDetail", "doc": "Parser for show ethernet service instance detail\n                  show ethernet service instance interface <interface> detail\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) associated_evc: <class 'str'>,\n        Optional  (str) l2protocol_drop: <class 'bool'>,\n        Optional  (str) ce_vlans: <class 'str'>,\n        Optional  (str) encapsulation: <class 'str'>,\n        Optional  (str) rewrite: <class 'str'>,\n        Optional  (str) control_policy: <class 'str'>,\n        Optional  (str) intiators: <class 'str'>,\n        Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) efp_statistics: {\n          'pkts_in': <class 'int'>,\n          'pkts_out': <class 'int'>,\n          'bytes_in': <class 'int'>,\n          'bytes_out': <class 'int'>,\n          },\n        Optional  (str) micro_block_type: {\n          Any  (str) *: {\n            Any  (str) *: Any  (str) *,\n            },\n          },\n        Optional  (str) l2_acl: {\n          Optional  (str) inbound: <class 'str'>,\n          Optional  (str) permit_count: <class 'int'>,\n          Optional  (str) deny_count: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L70"}, "iosxe": {"class": "ShowEthernetServiceInstanceDetail", "doc": "Parser for show ethernet service instance detail\n                  show ethernet service instance interface <interface> detail\n                  show ethernet service instance id {service_instance_id} interface {interface} detail\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) associated_evc: <class 'str'>,\n        Optional  (str) l2protocol_drop: <class 'bool'>,\n        Optional  (str) ce_vlans: <class 'str'>,\n        Optional  (str) encapsulation: <class 'str'>,\n        Optional  (str) rewrite: <class 'str'>,\n        Optional  (str) control_policy: <class 'str'>,\n        Optional  (str) intiators: <class 'str'>,\n        Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) efp_statistics: {\n          'pkts_in': <class 'int'>,\n          'pkts_out': <class 'int'>,\n          'bytes_in': <class 'int'>,\n          'bytes_out': <class 'int'>,\n          },\n        Optional  (str) micro_block_type: {\n          Any  (str) *: {\n            Any  (str) *: Any  (str) *,\n            },\n          },\n        Optional  (str) l2_acl: {\n          Optional  (str) inbound: <class 'str'>,\n          Optional  (str) permit_count: <class 'int'>,\n          Optional  (str) deny_count: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L279"}}, "show ethernet service instance id {service_instance_id} interface {interface} detail": {"ios": {"class": "ShowEthernetServiceInstanceDetail", "doc": "Parser for show ethernet service instance detail\n                  show ethernet service instance interface <interface> detail\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) associated_evc: <class 'str'>,\n        Optional  (str) l2protocol_drop: <class 'bool'>,\n        Optional  (str) ce_vlans: <class 'str'>,\n        Optional  (str) encapsulation: <class 'str'>,\n        Optional  (str) rewrite: <class 'str'>,\n        Optional  (str) control_policy: <class 'str'>,\n        Optional  (str) intiators: <class 'str'>,\n        Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) efp_statistics: {\n          'pkts_in': <class 'int'>,\n          'pkts_out': <class 'int'>,\n          'bytes_in': <class 'int'>,\n          'bytes_out': <class 'int'>,\n          },\n        Optional  (str) micro_block_type: {\n          Any  (str) *: {\n            Any  (str) *: Any  (str) *,\n            },\n          },\n        Optional  (str) l2_acl: {\n          Optional  (str) inbound: <class 'str'>,\n          Optional  (str) permit_count: <class 'int'>,\n          Optional  (str) deny_count: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_id_service_instance_id_interface_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L70"}, "iosxe": {"class": "ShowEthernetServiceInstanceDetail", "doc": "Parser for show ethernet service instance detail\n                  show ethernet service instance interface <interface> detail\n                  show ethernet service instance id {service_instance_id} interface {interface} detail\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) associated_evc: <class 'str'>,\n        Optional  (str) l2protocol_drop: <class 'bool'>,\n        Optional  (str) ce_vlans: <class 'str'>,\n        Optional  (str) encapsulation: <class 'str'>,\n        Optional  (str) rewrite: <class 'str'>,\n        Optional  (str) control_policy: <class 'str'>,\n        Optional  (str) intiators: <class 'str'>,\n        Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) efp_statistics: {\n          'pkts_in': <class 'int'>,\n          'pkts_out': <class 'int'>,\n          'bytes_in': <class 'int'>,\n          'bytes_out': <class 'int'>,\n          },\n        Optional  (str) micro_block_type: {\n          Any  (str) *: {\n            Any  (str) *: Any  (str) *,\n            },\n          },\n        Optional  (str) l2_acl: {\n          Optional  (str) inbound: <class 'str'>,\n          Optional  (str) permit_count: <class 'int'>,\n          Optional  (str) deny_count: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_id_service_instance_id_interface_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L279"}}, "show ethernet service instance id {service_instance_id} interface {interface} stats": {"ios": {"class": "ShowEthernetServiceInstanceStats", "doc": "Parser for show ethernet service instance stats\n                  show ethernet service instance interface <interface> stats\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) max_num_of_service_instances: <class 'int'>,\nOptional  (str) service_instance: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'pkts_in': <class 'int'>,\n    'pkts_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    Optional  (str) storm_control_discard_pkts: {\n      'broadcast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'multicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'unknown_unicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_id_service_instance_id_interface_interface_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L51"}, "iosxe": {"class": "ShowEthernetServiceInstanceStats", "doc": "Parser for show ethernet service instance stats\n                  show ethernet service instance interface <interface> stats\n                  show ethernet service instance id {service_instance_id} interface {interface} stats\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) max_num_of_service_instances: <class 'int'>,\nOptional  (str) service_instance: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'pkts_in': <class 'int'>,\n    'pkts_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    Optional  (str) storm_control_discard_pkts: {\n      'broadcast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'multicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'unknown_unicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_id_service_instance_id_interface_interface_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L613"}}, "show ethernet service instance interface {interface} detail": {"ios": {"class": "ShowEthernetServiceInstanceDetail", "doc": "Parser for show ethernet service instance detail\n                  show ethernet service instance interface <interface> detail\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) associated_evc: <class 'str'>,\n        Optional  (str) l2protocol_drop: <class 'bool'>,\n        Optional  (str) ce_vlans: <class 'str'>,\n        Optional  (str) encapsulation: <class 'str'>,\n        Optional  (str) rewrite: <class 'str'>,\n        Optional  (str) control_policy: <class 'str'>,\n        Optional  (str) intiators: <class 'str'>,\n        Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) efp_statistics: {\n          'pkts_in': <class 'int'>,\n          'pkts_out': <class 'int'>,\n          'bytes_in': <class 'int'>,\n          'bytes_out': <class 'int'>,\n          },\n        Optional  (str) micro_block_type: {\n          Any  (str) *: {\n            Any  (str) *: Any  (str) *,\n            },\n          },\n        Optional  (str) l2_acl: {\n          Optional  (str) inbound: <class 'str'>,\n          Optional  (str) permit_count: <class 'int'>,\n          Optional  (str) deny_count: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_interface_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L70"}, "iosxe": {"class": "ShowEthernetServiceInstanceDetail", "doc": "Parser for show ethernet service instance detail\n                  show ethernet service instance interface <interface> detail\n                  show ethernet service instance id {service_instance_id} interface {interface} detail\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'service_instance': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) associated_evc: <class 'str'>,\n        Optional  (str) l2protocol_drop: <class 'bool'>,\n        Optional  (str) ce_vlans: <class 'str'>,\n        Optional  (str) encapsulation: <class 'str'>,\n        Optional  (str) rewrite: <class 'str'>,\n        Optional  (str) control_policy: <class 'str'>,\n        Optional  (str) intiators: <class 'str'>,\n        Optional  (str) dot1q_tunnel_ethertype: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) efp_statistics: {\n          'pkts_in': <class 'int'>,\n          'pkts_out': <class 'int'>,\n          'bytes_in': <class 'int'>,\n          'bytes_out': <class 'int'>,\n          },\n        Optional  (str) micro_block_type: {\n          Any  (str) *: {\n            Any  (str) *: Any  (str) *,\n            },\n          },\n        Optional  (str) l2_acl: {\n          Optional  (str) inbound: <class 'str'>,\n          Optional  (str) permit_count: <class 'int'>,\n          Optional  (str) deny_count: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_interface_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L279"}}, "show ethernet service instance interface {interface} stats": {"ios": {"class": "ShowEthernetServiceInstanceStats", "doc": "Parser for show ethernet service instance stats\n                  show ethernet service instance interface <interface> stats\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) max_num_of_service_instances: <class 'int'>,\nOptional  (str) service_instance: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'pkts_in': <class 'int'>,\n    'pkts_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    Optional  (str) storm_control_discard_pkts: {\n      'broadcast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'multicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'unknown_unicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_interface_interface_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L51"}, "iosxe": {"class": "ShowEthernetServiceInstanceStats", "doc": "Parser for show ethernet service instance stats\n                  show ethernet service instance interface <interface> stats\n                  show ethernet service instance id {service_instance_id} interface {interface} stats\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) max_num_of_service_instances: <class 'int'>,\nOptional  (str) service_instance: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'pkts_in': <class 'int'>,\n    'pkts_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    Optional  (str) storm_control_discard_pkts: {\n      'broadcast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'multicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'unknown_unicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_interface_interface_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L613"}}, "show ethernet service instance stats": {"ios": {"class": "ShowEthernetServiceInstanceStats", "doc": "Parser for show ethernet service instance stats\n                  show ethernet service instance interface <interface> stats\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) max_num_of_service_instances: <class 'int'>,\nOptional  (str) service_instance: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'pkts_in': <class 'int'>,\n    'pkts_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    Optional  (str) storm_control_discard_pkts: {\n      'broadcast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'multicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'unknown_unicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L51"}, "iosxe": {"class": "ShowEthernetServiceInstanceStats", "doc": "Parser for show ethernet service instance stats\n                  show ethernet service instance interface <interface> stats\n                  show ethernet service instance id {service_instance_id} interface {interface} stats\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) max_num_of_service_instances: <class 'int'>,\nOptional  (str) service_instance: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'pkts_in': <class 'int'>,\n    'pkts_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    Optional  (str) storm_control_discard_pkts: {\n      'broadcast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'multicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      'unknown_unicast': {\n        Any  (str) *: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_service_instance_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L613"}}, "show ethernet service instance summary": {"ios": {"class": "ShowEthernetServiceInstanceSummary", "doc": "Parser for show ethernet service instance summary\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    'total': <class 'int'>,\n    'up': <class 'int'>,\n    'admin_do': <class 'int'>,\n    'down': <class 'int'>,\n    'error_di': <class 'int'>,\n    'unknown': <class 'int'>,\n    'deleted': <class 'int'>,\n    'bd_adm_do': <class 'int'>,\n    },\n  },\n}", "uid": "show_ethernet_service_instance_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L61"}, "iosxe": {"class": "ShowEthernetServiceInstanceSummary", "doc": "Parser for show ethernet service instance summary\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    'total': <class 'int'>,\n    'up': <class 'int'>,\n    'admin_do': <class 'int'>,\n    'down': <class 'int'>,\n    'error_di': <class 'int'>,\n    'unknown': <class 'int'>,\n    'deleted': <class 'int'>,\n    'bd_adm_do': <class 'int'>,\n    },\n  },\n}", "uid": "show_ethernet_service_instance_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L723"}}, "show ethernet tags": {"iosxr": {"class": "ShowEthernetTags", "doc": "Parser for show ethernet tags\n    parser class - implements detail parsing mechanisms for cli and yang output.\n    ", "module_name": "show_ethernet", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'sub_interface': {\n      Any  (str) *: {\n        Optional  (str) vlan_id: {\n          Any  (str) *: {\n            Optional  (str) status: <class 'str'>,\n            'mtu': <class 'str'>,\n            Optional  (str) layer: <class 'str'>,\n            'outer_encapsulation_type': <class 'str'>,\n            Optional  (str) inner_encapsulation_vlan_id: <class 'str'>,\n            Optional  (str) inner_encapsulation_type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ethernet_tags", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ethernet.py#L257"}}, "show ethernet tags {interface}": {"iosxr": {"class": "ShowEthernetTags", "doc": "Parser for show ethernet tags\n    show ethernet tags <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) status: <class 'str'>,\n  Optional  (str) outer_vlan: <class 'str'>,\n  Optional  (str) vlan_id: <class 'str'>,\n  Optional  (str) inner_vlan: <class 'str'>,\n  Optional  (str) xtra: <class 'str'>,\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) rewrite_num_of_tags_pop: <class 'int'>,\n  Optional  (str) rewrite_num_of_tags_push: <class 'int'>,\n  },\n}", "uid": "show_ethernet_tags_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L2109"}}, "show ethernet trunk detail": {"iosxr": {"class": "ShowEthernetTrunkDetail", "doc": "Parser for show ethernet trunk detail\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "module_name": "show_ethernet", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) dot1q_tunneling_ethertype: <class 'str'>,\n    },\n  },\n}", "uid": "show_ethernet_trunk_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ethernet.py#L186"}}, "show evpn ethernet-segment": {"iosxr": {"class": "ShowEvpnEthernetSegment", "doc": "Parser class for 'show evpn ethernet-segment' CLI.", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\n'segment_id': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'next_hops': <class 'list'>,\n        Optional  (str) es_to_bgp_gates: <class 'str'>,\n        Optional  (str) es_to_l2fib_gates: <class 'str'>,\n        Optional  (str) main_port: {\n          'interface': <class 'str'>,\n          Optional  (str) interface_mac: <class 'str'>,\n          'if_handle': <class 'str'>,\n          'state': <class 'str'>,\n          'redundancy': <class 'str'>,\n          },\n        Optional  (str) esi: {\n          'type': <class 'str'>,\n          Optional  (str) value: <class 'str'>,\n          Optional  (str) system_id: <class 'str'>,\n          Optional  (str) port_key: <class 'str'>,\n          },\n        Optional  (str) value: <class 'str'>,\n        Optional  (str) es_import_rt: <class 'str'>,\n        Optional  (str) source_mac: <class 'str'>,\n        Optional  (str) topology: {\n          'operational': <class 'str'>,\n          'configured': <class 'str'>,\n          },\n        Optional  (str) primary_services: <class 'str'>,\n        Optional  (str) secondary_services: <class 'str'>,\n        Optional  (str) service_carving: <class 'str'>,\n        Optional  (str) peering_details: <class 'list'>,\n        Optional  (str) service_carving_results: {\n          Optional  (str) forwarders: <class 'int'>,\n          Optional  (str) permanent: <class 'int'>,\n          Optional  (str) bridge_ports: {\n            'num_of_total': <class 'int'>,\n            },\n          'elected': {\n            'num_of_total': <class 'int'>,\n            Optional  (str) i_sid_e: <class 'list'>,\n            },\n          'not_elected': {\n            'num_of_total': <class 'int'>,\n            Optional  (str) i_sid_ne: <class 'list'>,\n            },\n          },\n        Optional  (str) mac_flushing_mode: <class 'str'>,\n        Optional  (str) peering_timer: <class 'str'>,\n        Optional  (str) recovery_timer: <class 'str'>,\n        Optional  (str) carving_timer: <class 'str'>,\n        Optional  (str) local_shg_label: <class 'str'>,\n        Optional  (str) remote_shg_labels: {\n          Any  (str) *: {\n            Optional  (str) label: {\n              Any  (str) *: {\n                'nexthop': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) flush_again_timer: <class 'str'>,\n        Optional  (str) object: {\n          Any  (str) *: {\n            Optional  (str) base_info: {\n              'version': <class 'str'>,\n              'flags': <class 'str'>,\n              'type': <class 'int'>,\n              'reserved': <class 'int'>,\n              },\n            Optional  (str) num_events: <class 'int'>,\n            Optional  (str) event_history: {\n              Any  (str) *: {\n                'time': <class 'str'>,\n                'event': <class 'str'>,\n                'flag_1': <class 'str'>,\n                'flag_2': <class 'str'>,\n                'code_1': <class 'str'>,\n                'code_2': <class 'str'>,\n                },\n              },\n            Optional  (str) statistics: {\n              Any  (str) *: {\n                'adv_cnt': <class 'int'>,\n                Optional  (str) adv_last_time: <class 'str'>,\n                'adv_last_arg': <class 'str'>,\n                Optional  (str) wdw_cnt: <class 'int'>,\n                Optional  (str) wdw_last_time: <class 'str'>,\n                Optional  (str) wdw_last_arg: <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) es_ead_update: {\n          'num_rds': <class 'int'>,\n          Optional  (str) rd: {\n            Any  (str) *: {\n              Optional  (str) num_rts: <class 'int'>,\n              Optional  (str) rt_list: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) chkpt_objid: <class 'str'>,\n        Optional  (str) checkpoint_info: {\n          Optional  (str) msti_mask: <class 'str'>,\n          Optional  (str) if_type: <class 'int'>,\n          Optional  (str) nexthop: <class 'list'>,\n          },\n        Optional  (Any) Any  (str) *: Any  (str) *,\n        },\n      },\n    },\n  },\n}", "uid": "show_evpn_ethernet-segment", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L1022"}}, "show evpn ethernet-segment detail": {"iosxr": {"class": "ShowEvpnEthernetSegmentDetail", "doc": "Parser class for 'show evpn ethernet-segment detail' CLI.", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\n'segment_id': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'next_hops': <class 'list'>,\n        Optional  (str) es_to_bgp_gates: <class 'str'>,\n        Optional  (str) es_to_l2fib_gates: <class 'str'>,\n        Optional  (str) main_port: {\n          'interface': <class 'str'>,\n          Optional  (str) interface_mac: <class 'str'>,\n          'if_handle': <class 'str'>,\n          'state': <class 'str'>,\n          'redundancy': <class 'str'>,\n          },\n        Optional  (str) esi: {\n          'type': <class 'str'>,\n          Optional  (str) value: <class 'str'>,\n          Optional  (str) system_id: <class 'str'>,\n          Optional  (str) port_key: <class 'str'>,\n          },\n        Optional  (str) value: <class 'str'>,\n        Optional  (str) es_import_rt: <class 'str'>,\n        Optional  (str) source_mac: <class 'str'>,\n        Optional  (str) topology: {\n          'operational': <class 'str'>,\n          'configured': <class 'str'>,\n          },\n        Optional  (str) primary_services: <class 'str'>,\n        Optional  (str) secondary_services: <class 'str'>,\n        Optional  (str) service_carving: <class 'str'>,\n        Optional  (str) peering_details: <class 'list'>,\n        Optional  (str) service_carving_results: {\n          Optional  (str) forwarders: <class 'int'>,\n          Optional  (str) permanent: <class 'int'>,\n          Optional  (str) bridge_ports: {\n            'num_of_total': <class 'int'>,\n            },\n          'elected': {\n            'num_of_total': <class 'int'>,\n            Optional  (str) i_sid_e: <class 'list'>,\n            },\n          'not_elected': {\n            'num_of_total': <class 'int'>,\n            Optional  (str) i_sid_ne: <class 'list'>,\n            },\n          },\n        Optional  (str) mac_flushing_mode: <class 'str'>,\n        Optional  (str) peering_timer: <class 'str'>,\n        Optional  (str) recovery_timer: <class 'str'>,\n        Optional  (str) carving_timer: <class 'str'>,\n        Optional  (str) local_shg_label: <class 'str'>,\n        Optional  (str) remote_shg_labels: {\n          Any  (str) *: {\n            Optional  (str) label: {\n              Any  (str) *: {\n                'nexthop': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) flush_again_timer: <class 'str'>,\n        Optional  (str) object: {\n          Any  (str) *: {\n            Optional  (str) base_info: {\n              'version': <class 'str'>,\n              'flags': <class 'str'>,\n              'type': <class 'int'>,\n              'reserved': <class 'int'>,\n              },\n            Optional  (str) num_events: <class 'int'>,\n            Optional  (str) event_history: {\n              Any  (str) *: {\n                'time': <class 'str'>,\n                'event': <class 'str'>,\n                'flag_1': <class 'str'>,\n                'flag_2': <class 'str'>,\n                'code_1': <class 'str'>,\n                'code_2': <class 'str'>,\n                },\n              },\n            Optional  (str) statistics: {\n              Any  (str) *: {\n                'adv_cnt': <class 'int'>,\n                Optional  (str) adv_last_time: <class 'str'>,\n                'adv_last_arg': <class 'str'>,\n                Optional  (str) wdw_cnt: <class 'int'>,\n                Optional  (str) wdw_last_time: <class 'str'>,\n                Optional  (str) wdw_last_arg: <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) es_ead_update: {\n          'num_rds': <class 'int'>,\n          Optional  (str) rd: {\n            Any  (str) *: {\n              Optional  (str) num_rts: <class 'int'>,\n              Optional  (str) rt_list: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) chkpt_objid: <class 'str'>,\n        Optional  (str) checkpoint_info: {\n          Optional  (str) msti_mask: <class 'str'>,\n          Optional  (str) if_type: <class 'int'>,\n          Optional  (str) nexthop: <class 'list'>,\n          },\n        Optional  (Any) Any  (str) *: Any  (str) *,\n        },\n      },\n    },\n  },\n}", "uid": "show_evpn_ethernet-segment_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L1750"}}, "show evpn ethernet-segment esi {esi} detail": {"iosxr": {"class": "ShowEvpnEthernetSegmentEsiDetail", "doc": "Parser class for 'show evpn ethernet-segment esi {esi} detail' CLI.", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\n'segment_id': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'next_hops': <class 'list'>,\n        Optional  (str) es_to_bgp_gates: <class 'str'>,\n        Optional  (str) es_to_l2fib_gates: <class 'str'>,\n        Optional  (str) main_port: {\n          'interface': <class 'str'>,\n          Optional  (str) interface_mac: <class 'str'>,\n          'if_handle': <class 'str'>,\n          'state': <class 'str'>,\n          'redundancy': <class 'str'>,\n          },\n        Optional  (str) esi: {\n          'type': <class 'str'>,\n          Optional  (str) value: <class 'str'>,\n          Optional  (str) system_id: <class 'str'>,\n          Optional  (str) port_key: <class 'str'>,\n          },\n        Optional  (str) value: <class 'str'>,\n        Optional  (str) es_import_rt: <class 'str'>,\n        Optional  (str) source_mac: <class 'str'>,\n        Optional  (str) topology: {\n          'operational': <class 'str'>,\n          'configured': <class 'str'>,\n          },\n        Optional  (str) primary_services: <class 'str'>,\n        Optional  (str) secondary_services: <class 'str'>,\n        Optional  (str) service_carving: <class 'str'>,\n        Optional  (str) peering_details: <class 'list'>,\n        Optional  (str) service_carving_results: {\n          Optional  (str) forwarders: <class 'int'>,\n          Optional  (str) permanent: <class 'int'>,\n          Optional  (str) bridge_ports: {\n            'num_of_total': <class 'int'>,\n            },\n          'elected': {\n            'num_of_total': <class 'int'>,\n            Optional  (str) i_sid_e: <class 'list'>,\n            },\n          'not_elected': {\n            'num_of_total': <class 'int'>,\n            Optional  (str) i_sid_ne: <class 'list'>,\n            },\n          },\n        Optional  (str) mac_flushing_mode: <class 'str'>,\n        Optional  (str) peering_timer: <class 'str'>,\n        Optional  (str) recovery_timer: <class 'str'>,\n        Optional  (str) carving_timer: <class 'str'>,\n        Optional  (str) local_shg_label: <class 'str'>,\n        Optional  (str) remote_shg_labels: {\n          Any  (str) *: {\n            Optional  (str) label: {\n              Any  (str) *: {\n                'nexthop': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) flush_again_timer: <class 'str'>,\n        Optional  (str) object: {\n          Any  (str) *: {\n            Optional  (str) base_info: {\n              'version': <class 'str'>,\n              'flags': <class 'str'>,\n              'type': <class 'int'>,\n              'reserved': <class 'int'>,\n              },\n            Optional  (str) num_events: <class 'int'>,\n            Optional  (str) event_history: {\n              Any  (str) *: {\n                'time': <class 'str'>,\n                'event': <class 'str'>,\n                'flag_1': <class 'str'>,\n                'flag_2': <class 'str'>,\n                'code_1': <class 'str'>,\n                'code_2': <class 'str'>,\n                },\n              },\n            Optional  (str) statistics: {\n              Any  (str) *: {\n                'adv_cnt': <class 'int'>,\n                Optional  (str) adv_last_time: <class 'str'>,\n                'adv_last_arg': <class 'str'>,\n                Optional  (str) wdw_cnt: <class 'int'>,\n                Optional  (str) wdw_last_time: <class 'str'>,\n                Optional  (str) wdw_last_arg: <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) es_ead_update: {\n          'num_rds': <class 'int'>,\n          Optional  (str) rd: {\n            Any  (str) *: {\n              Optional  (str) num_rts: <class 'int'>,\n              Optional  (str) rt_list: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) chkpt_objid: <class 'str'>,\n        Optional  (str) checkpoint_info: {\n          Optional  (str) msti_mask: <class 'str'>,\n          Optional  (str) if_type: <class 'int'>,\n          Optional  (str) nexthop: <class 'list'>,\n          },\n        Optional  (Any) Any  (str) *: Any  (str) *,\n        },\n      },\n    },\n  },\n}", "uid": "show_evpn_ethernet-segment_esi_esi_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L1778"}}, "show evpn ethernet-segment private": {"iosxr": {"class": "ShowEvpnEthernetSegmentPrivate", "doc": "Parser class for 'show evpn ethernet-segment private' CLI.", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\n'segment_id': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'next_hops': <class 'list'>,\n        Optional  (str) es_to_bgp_gates: <class 'str'>,\n        Optional  (str) es_to_l2fib_gates: <class 'str'>,\n        Optional  (str) main_port: {\n          'interface': <class 'str'>,\n          Optional  (str) interface_mac: <class 'str'>,\n          'if_handle': <class 'str'>,\n          'state': <class 'str'>,\n          'redundancy': <class 'str'>,\n          },\n        Optional  (str) esi: {\n          'type': <class 'str'>,\n          Optional  (str) value: <class 'str'>,\n          Optional  (str) system_id: <class 'str'>,\n          Optional  (str) port_key: <class 'str'>,\n          },\n        Optional  (str) value: <class 'str'>,\n        Optional  (str) es_import_rt: <class 'str'>,\n        Optional  (str) source_mac: <class 'str'>,\n        Optional  (str) topology: {\n          'operational': <class 'str'>,\n          'configured': <class 'str'>,\n          },\n        Optional  (str) primary_services: <class 'str'>,\n        Optional  (str) secondary_services: <class 'str'>,\n        Optional  (str) service_carving: <class 'str'>,\n        Optional  (str) peering_details: <class 'list'>,\n        Optional  (str) service_carving_results: {\n          Optional  (str) forwarders: <class 'int'>,\n          Optional  (str) permanent: <class 'int'>,\n          Optional  (str) bridge_ports: {\n            'num_of_total': <class 'int'>,\n            },\n          'elected': {\n            'num_of_total': <class 'int'>,\n            Optional  (str) i_sid_e: <class 'list'>,\n            },\n          'not_elected': {\n            'num_of_total': <class 'int'>,\n            Optional  (str) i_sid_ne: <class 'list'>,\n            },\n          },\n        Optional  (str) mac_flushing_mode: <class 'str'>,\n        Optional  (str) peering_timer: <class 'str'>,\n        Optional  (str) recovery_timer: <class 'str'>,\n        Optional  (str) carving_timer: <class 'str'>,\n        Optional  (str) local_shg_label: <class 'str'>,\n        Optional  (str) remote_shg_labels: {\n          Any  (str) *: {\n            Optional  (str) label: {\n              Any  (str) *: {\n                'nexthop': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) flush_again_timer: <class 'str'>,\n        Optional  (str) object: {\n          Any  (str) *: {\n            Optional  (str) base_info: {\n              'version': <class 'str'>,\n              'flags': <class 'str'>,\n              'type': <class 'int'>,\n              'reserved': <class 'int'>,\n              },\n            Optional  (str) num_events: <class 'int'>,\n            Optional  (str) event_history: {\n              Any  (str) *: {\n                'time': <class 'str'>,\n                'event': <class 'str'>,\n                'flag_1': <class 'str'>,\n                'flag_2': <class 'str'>,\n                'code_1': <class 'str'>,\n                'code_2': <class 'str'>,\n                },\n              },\n            Optional  (str) statistics: {\n              Any  (str) *: {\n                'adv_cnt': <class 'int'>,\n                Optional  (str) adv_last_time: <class 'str'>,\n                'adv_last_arg': <class 'str'>,\n                Optional  (str) wdw_cnt: <class 'int'>,\n                Optional  (str) wdw_last_time: <class 'str'>,\n                Optional  (str) wdw_last_arg: <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) es_ead_update: {\n          'num_rds': <class 'int'>,\n          Optional  (str) rd: {\n            Any  (str) *: {\n              Optional  (str) num_rts: <class 'int'>,\n              Optional  (str) rt_list: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) chkpt_objid: <class 'str'>,\n        Optional  (str) checkpoint_info: {\n          Optional  (str) msti_mask: <class 'str'>,\n          Optional  (str) if_type: <class 'int'>,\n          Optional  (str) nexthop: <class 'list'>,\n          },\n        Optional  (Any) Any  (str) *: Any  (str) *,\n        },\n      },\n    },\n  },\n}", "uid": "show_evpn_ethernet-segment_private", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L1764"}}, "show evpn evi": {"iosxr": {"class": "ShowEvpnEvi", "doc": "Parser class for 'show evpn evi'", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\n'evi': {\n  Any  (str) *: {\n    'bridge_domain': <class 'str'>,\n    'type': <class 'str'>,\n    Optional  (str) route_target_in_use: {\n      Any  (str) *: {\n        Any  (str) *: <class 'bool'>,\n        },\n      },\n    Optional  (Any) Any  (str) *: <class 'str'>,\n    },\n  },\n}", "uid": "show_evpn_evi", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L30"}}, "show evpn evi detail": {"iosxr": {"class": "ShowEvpnEviDetail", "doc": "Parser class for 'show evpn evi detail' CLI.", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\n'evi': {\n  Any  (str) *: {\n    'bridge_domain': <class 'str'>,\n    'type': <class 'str'>,\n    Optional  (str) route_target_in_use: {\n      Any  (str) *: {\n        Any  (str) *: <class 'bool'>,\n        },\n      },\n    Optional  (Any) Any  (str) *: <class 'str'>,\n    },\n  },\n}", "uid": "show_evpn_evi_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L107"}}, "show evpn evi mac": {"iosxr": {"class": "ShowEvpnEviMac", "doc": " Parser for:\n        * 'show evpn evi mac'\n        * 'show evpn evi vpn-id {vpn_id} mac'\n    ", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\n'vpn_id': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        Optional  (str) encap: <class 'str'>,\n        'ip_address': <class 'str'>,\n        'next_hop': <class 'str'>,\n        'label': <class 'int'>,\n        Optional  (str) ethernet_tag: <class 'int'>,\n        Optional  (str) multipaths_resolved: <class 'str'>,\n        Optional  (str) multipaths_internal_label: <class 'int'>,\n        Optional  (str) multipaths_local_label: <class 'int'>,\n        Optional  (str) local_static: <class 'str'>,\n        Optional  (str) remote_static: <class 'str'>,\n        Optional  (str) local_ethernet_segment: <class 'str'>,\n        Optional  (str) ethernet_segment: <class 'str'>,\n        Optional  (str) remote_ethernet_segment: <class 'str'>,\n        Optional  (str) local_sequence_number: <class 'int'>,\n        Optional  (str) remote_sequence_number: <class 'int'>,\n        Optional  (str) local_encapsulation: <class 'str'>,\n        Optional  (str) remote_encapsulation: <class 'str'>,\n        Optional  (str) esi_port_key: <class 'str'>,\n        Optional  (str) source: <class 'str'>,\n        Optional  (str) flush_requested: <class 'int'>,\n        Optional  (str) flush_received: <class 'int'>,\n        Optional  (str) flush_count: <class 'int'>,\n        Optional  (str) flush_seq_id: <class 'int'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) soo_nexthop: <class 'str'>,\n        Optional  (str) bp_xcid: <class 'str'>,\n        Optional  (str) bp_ifh: <class 'str'>,\n        Optional  (str) mac_state: <class 'str'>,\n        Optional  (str) mac_producers: <class 'str'>,\n        Optional  (str) local_router_mac: <class 'str'>,\n        Optional  (str) l3_label: <class 'int'>,\n        Optional  (str) object: {\n          Any  (str) *: {\n            Optional  (str) base_info: {\n              'version': <class 'str'>,\n              'flags': <class 'str'>,\n              'type': <class 'int'>,\n              'reserved': <class 'int'>,\n              },\n            Optional  (str) num_events: <class 'int'>,\n            Optional  (str) event_history: {\n              Any  (str) *: {\n                'time': <class 'str'>,\n                'event': <class 'str'>,\n                'flag_1': <class 'str'>,\n                'flag_2': <class 'str'>,\n                'code_1': <class 'str'>,\n                'code_2': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_evpn_evi_mac", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L471"}}, "show evpn evi mac private": {"iosxr": {"class": "ShowEvpnEviMacPrivate", "doc": "Parser class for 'show evpn evi mac private' CLI.", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\n'vpn_id': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        Optional  (str) encap: <class 'str'>,\n        'ip_address': <class 'str'>,\n        'next_hop': <class 'str'>,\n        'label': <class 'int'>,\n        Optional  (str) ethernet_tag: <class 'int'>,\n        Optional  (str) multipaths_resolved: <class 'str'>,\n        Optional  (str) multipaths_internal_label: <class 'int'>,\n        Optional  (str) multipaths_local_label: <class 'int'>,\n        Optional  (str) local_static: <class 'str'>,\n        Optional  (str) remote_static: <class 'str'>,\n        Optional  (str) local_ethernet_segment: <class 'str'>,\n        Optional  (str) ethernet_segment: <class 'str'>,\n        Optional  (str) remote_ethernet_segment: <class 'str'>,\n        Optional  (str) local_sequence_number: <class 'int'>,\n        Optional  (str) remote_sequence_number: <class 'int'>,\n        Optional  (str) local_encapsulation: <class 'str'>,\n        Optional  (str) remote_encapsulation: <class 'str'>,\n        Optional  (str) esi_port_key: <class 'str'>,\n        Optional  (str) source: <class 'str'>,\n        Optional  (str) flush_requested: <class 'int'>,\n        Optional  (str) flush_received: <class 'int'>,\n        Optional  (str) flush_count: <class 'int'>,\n        Optional  (str) flush_seq_id: <class 'int'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) soo_nexthop: <class 'str'>,\n        Optional  (str) bp_xcid: <class 'str'>,\n        Optional  (str) bp_ifh: <class 'str'>,\n        Optional  (str) mac_state: <class 'str'>,\n        Optional  (str) mac_producers: <class 'str'>,\n        Optional  (str) local_router_mac: <class 'str'>,\n        Optional  (str) l3_label: <class 'int'>,\n        Optional  (str) object: {\n          Any  (str) *: {\n            Optional  (str) base_info: {\n              'version': <class 'str'>,\n              'flags': <class 'str'>,\n              'type': <class 'int'>,\n              'reserved': <class 'int'>,\n              },\n            Optional  (str) num_events: <class 'int'>,\n            Optional  (str) event_history: {\n              Any  (str) *: {\n                'time': <class 'str'>,\n                'event': <class 'str'>,\n                'flag_1': <class 'str'>,\n                'flag_2': <class 'str'>,\n                'code_1': <class 'str'>,\n                'code_2': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_evpn_evi_mac_private", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L892"}}, "show evpn evi vpn-id {vpn_id} mac": {"iosxr": {"class": "ShowEvpnEviMac", "doc": " Parser for:\n        * 'show evpn evi mac'\n        * 'show evpn evi vpn-id {vpn_id} mac'\n    ", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\n'vpn_id': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        Optional  (str) encap: <class 'str'>,\n        'ip_address': <class 'str'>,\n        'next_hop': <class 'str'>,\n        'label': <class 'int'>,\n        Optional  (str) ethernet_tag: <class 'int'>,\n        Optional  (str) multipaths_resolved: <class 'str'>,\n        Optional  (str) multipaths_internal_label: <class 'int'>,\n        Optional  (str) multipaths_local_label: <class 'int'>,\n        Optional  (str) local_static: <class 'str'>,\n        Optional  (str) remote_static: <class 'str'>,\n        Optional  (str) local_ethernet_segment: <class 'str'>,\n        Optional  (str) ethernet_segment: <class 'str'>,\n        Optional  (str) remote_ethernet_segment: <class 'str'>,\n        Optional  (str) local_sequence_number: <class 'int'>,\n        Optional  (str) remote_sequence_number: <class 'int'>,\n        Optional  (str) local_encapsulation: <class 'str'>,\n        Optional  (str) remote_encapsulation: <class 'str'>,\n        Optional  (str) esi_port_key: <class 'str'>,\n        Optional  (str) source: <class 'str'>,\n        Optional  (str) flush_requested: <class 'int'>,\n        Optional  (str) flush_received: <class 'int'>,\n        Optional  (str) flush_count: <class 'int'>,\n        Optional  (str) flush_seq_id: <class 'int'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) soo_nexthop: <class 'str'>,\n        Optional  (str) bp_xcid: <class 'str'>,\n        Optional  (str) bp_ifh: <class 'str'>,\n        Optional  (str) mac_state: <class 'str'>,\n        Optional  (str) mac_producers: <class 'str'>,\n        Optional  (str) local_router_mac: <class 'str'>,\n        Optional  (str) l3_label: <class 'int'>,\n        Optional  (str) object: {\n          Any  (str) *: {\n            Optional  (str) base_info: {\n              'version': <class 'str'>,\n              'flags': <class 'str'>,\n              'type': <class 'int'>,\n              'reserved': <class 'int'>,\n              },\n            Optional  (str) num_events: <class 'int'>,\n            Optional  (str) event_history: {\n              Any  (str) *: {\n                'time': <class 'str'>,\n                'event': <class 'str'>,\n                'flag_1': <class 'str'>,\n                'flag_2': <class 'str'>,\n                'code_1': <class 'str'>,\n                'code_2': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_evpn_evi_vpn-id_vpn_id_mac", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L471"}}, "show evpn internal-label": {"iosxr": {"class": "ShowEvpnInternalLabel", "doc": null, "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\n'evi': {\n  Any  (str) *: {\n    'ethernet_segment_id': {\n      Any  (str) *: {\n        'index': {\n          Any  (str) *: {\n            'ether_tag': <class 'str'>,\n            'label': <class 'str'>,\n            Optional  (str) encap: <class 'str'>,\n            Optional  (str) summary_pathlist: {\n              'index': {\n                Any  (str) *: {\n                  'tep_id': <class 'str'>,\n                  'df_role': <class 'str'>,\n                  'nexthop': <class 'str'>,\n                  'label': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_evpn_internal-label", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L1832"}}, "show evpn internal-label detail": {"iosxr": {"class": "ShowEvpnInternalLabelDetail", "doc": "Parser for:\n        * show evpn internal-label detail\n        * show evpn internal-label detail location {location}\n    ", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) evi: {\n  Any  (str) *: {\n    'evi': <class 'int'>,\n    'esi': <class 'str'>,\n    'eth_tag': <class 'int'>,\n    'label': <class 'int'>,\n    Optional  (str) mp_resolved: <class 'bool'>,\n    Optional  (str) mp_info: <class 'str'>,\n    Optional  (str) pathlists: {\n      Optional  (str) mac: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) ead_es: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) ead_evi: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) summary: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) vpn_id: {\n  Any  (str) *: {\n    'vpn_id': <class 'int'>,\n    'encap': <class 'str'>,\n    'esi': <class 'str'>,\n    'eth_tag': <class 'int'>,\n    Optional  (str) label: <class 'int'>,\n    Optional  (str) mp_resolved: <class 'bool'>,\n    Optional  (str) mp_info: <class 'str'>,\n    Optional  (str) mp_internal_label: <class 'int'>,\n    Optional  (str) pathlists: {\n      Optional  (str) mac: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) ead_es: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) ead_evi: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) summary: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            Optional  (str) value: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_evpn_internal-label_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L232"}}, "show evpn internal-label detail location {location}": {"iosxr": {"class": "ShowEvpnInternalLabelDetail", "doc": "Parser for:\n        * show evpn internal-label detail\n        * show evpn internal-label detail location {location}\n    ", "module_name": "show_evpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) evi: {\n  Any  (str) *: {\n    'evi': <class 'int'>,\n    'esi': <class 'str'>,\n    'eth_tag': <class 'int'>,\n    'label': <class 'int'>,\n    Optional  (str) mp_resolved: <class 'bool'>,\n    Optional  (str) mp_info: <class 'str'>,\n    Optional  (str) pathlists: {\n      Optional  (str) mac: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) ead_es: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) ead_evi: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) summary: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) vpn_id: {\n  Any  (str) *: {\n    'vpn_id': <class 'int'>,\n    'encap': <class 'str'>,\n    'esi': <class 'str'>,\n    'eth_tag': <class 'int'>,\n    Optional  (str) label: <class 'int'>,\n    Optional  (str) mp_resolved: <class 'bool'>,\n    Optional  (str) mp_info: <class 'str'>,\n    Optional  (str) mp_internal_label: <class 'int'>,\n    Optional  (str) pathlists: {\n      Optional  (str) mac: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) ead_es: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) ead_evi: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            },\n          },\n        },\n      Optional  (str) summary: {\n        'nexthop': {\n          Any  (str) *: {\n            'label': <class 'int'>,\n            Optional  (str) df_role: <class 'str'>,\n            Optional  (str) value: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_evpn_internal-label_detail_location_location", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_evpn.py#L232"}}, "show fabric multicast globals": {"nxos": {"class": "ShowFabricMulticastGlobals", "doc": "parser for:\n        show fabric multicast globals", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'multicast': {\n  'globals': {\n    'pruning': <class 'str'>,\n    'switch_role': <class 'str'>,\n    'fabric_control_seg': <class 'str'>,\n    'peer_fabric_ctrl_addr': <class 'str'>,\n    'advertise_vpc_rpf_routes': <class 'str'>,\n    'created_vni_list': <class 'str'>,\n    'fwd_encap': <class 'str'>,\n    'overlay_distributed_dr': <class 'bool'>,\n    'overlay_spt_only': <class 'bool'>,\n    },\n  },\n}", "uid": "show_fabric_multicast_globals", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2076"}}, "show fabric multicast ipv4 l2-mroute vni all": {"nxos": {"class": "ShowFabricMulticastIpL2Mroute", "doc": "parser for:\n        show fabric multicast ipv4 l2-mroute\n        show fabric multicast ipv4 l2-mroute vni <vni>\n        show fabric multicast ipv4 l2-mroute vni all", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'multicast': {\n  'l2_mroute': {\n    'vni': {\n      Any  (str) *: {\n        'vnid': <class 'str'>,\n        Optional  (str) fabric_l2_mroutes: {\n          'gaddr': {\n            Any  (str) *: {\n              'saddr': {\n                Any  (str) *: {\n                  'interested_fabric_nodes': {\n                    Any  (str) *: {\n                      'node': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_fabric_multicast_ipv4_l2-mroute_vni_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2351"}}, "show fabric multicast ipv4 l2-mroute vni {vni}": {"nxos": {"class": "ShowFabricMulticastIpL2Mroute", "doc": "parser for:\n        show fabric multicast ipv4 l2-mroute\n        show fabric multicast ipv4 l2-mroute vni <vni>\n        show fabric multicast ipv4 l2-mroute vni all", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'multicast': {\n  'l2_mroute': {\n    'vni': {\n      Any  (str) *: {\n        'vnid': <class 'str'>,\n        Optional  (str) fabric_l2_mroutes: {\n          'gaddr': {\n            Any  (str) *: {\n              'saddr': {\n                Any  (str) *: {\n                  'interested_fabric_nodes': {\n                    Any  (str) *: {\n                      'node': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_fabric_multicast_ipv4_l2-mroute_vni_vni", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2351"}}, "show fabric multicast ipv4 sa-ad-route": {"nxos": {"class": "ShowFabricMulticastIpSaAdRoute", "doc": "parser for:\n        show fabric multicast ipv4 sa-ad-route\n        show fabric multicast ipv4 sa-ad-route vrf <vrf>\n        show fabric multicast ipv4 sa-ad-route vrf all", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'multicast': {\n  'vrf': {\n    Any  (str) *: {\n      'vnid': <class 'str'>,\n      Optional  (str) address_family: {\n        Any  (str) *: {\n          'sa_ad_routes': {\n            'gaddr': {\n              Any  (str) *: {\n                'grp_len': <class 'int'>,\n                'saddr': {\n                  Any  (str) *: {\n                    'src_len': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    Optional  (str) interested_fabric_nodes: {\n                      Any  (str) *: {\n                        'uptime': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_fabric_multicast_ipv4_sa-ad-route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2231"}}, "show fabric multicast ipv4 sa-ad-route vrf {vrf}": {"nxos": {"class": "ShowFabricMulticastIpSaAdRoute", "doc": "parser for:\n        show fabric multicast ipv4 sa-ad-route\n        show fabric multicast ipv4 sa-ad-route vrf <vrf>\n        show fabric multicast ipv4 sa-ad-route vrf all", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'multicast': {\n  'vrf': {\n    Any  (str) *: {\n      'vnid': <class 'str'>,\n      Optional  (str) address_family: {\n        Any  (str) *: {\n          'sa_ad_routes': {\n            'gaddr': {\n              Any  (str) *: {\n                'grp_len': <class 'int'>,\n                'saddr': {\n                  Any  (str) *: {\n                    'src_len': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    Optional  (str) interested_fabric_nodes: {\n                      Any  (str) *: {\n                        'uptime': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_fabric_multicast_ipv4_sa-ad-route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2231"}}, "show fabricpath isis adjacency": {"nxos": {"class": "ShowFabricpathIsisAdjacency", "doc": " Parser for \"show fabricpath isis adjacency\"", "module_name": "show_fabricpath", "package": "genie.libs.parser", "schema": "{\n'domain': {\n  Any  (str) *: {\n    Optional  (str) interfaces: {\n      Any  (str) *: {\n        'system_id': <class 'str'>,\n        'snpa': <class 'str'>,\n        'level': <class 'int'>,\n        'state': <class 'str'>,\n        'hold_time': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_fabricpath_isis_adjacency", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fabricpath.py#L46"}}, "show feature": {"nxos": {"class": "ShowFeature", "doc": "Parser for show feature", "module_name": "show_feature", "package": "genie.libs.parser", "schema": "{\n'feature': {\n  Any  (str) *: {\n    'instance': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) running: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_feature", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_feature.py#L35"}}, "show feature-set": {"nxos": {"class": "ShowFeatureSet", "doc": "Parser for show feature-set", "module_name": "show_feature", "package": "genie.libs.parser", "schema": "{\n'feature': {\n  Any  (str) *: {\n    'instance': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) running: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_feature-set", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_feature.py#L77"}}, "show flow exporter statistics": {"iosxe": {"class": "ShowFlowExporterStatistics", "doc": " Parser for:\n            * show flow exporter statistics\n            * show flow exporter {exporter} statistics\n    ", "module_name": "show_flow", "package": "genie.libs.parser", "schema": "{\n'flow_exporter': {\n  Any  (str) *: {\n    'pkt_send_stats': {\n      'last_cleared': <class 'str'>,\n      Optional  (Any) Any  (str) *: <class 'int'>,\n      },\n    'client_send_stats': {\n      Any  (str) *: {\n        'records_added': {\n          'total': <class 'int'>,\n          Optional  (str) sent: <class 'int'>,\n          Optional  (str) failed: <class 'int'>,\n          },\n        'bytes_added': {\n          'total': <class 'int'>,\n          Optional  (str) sent: <class 'int'>,\n          Optional  (str) failed: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_flow_exporter_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_flow.py#L442"}}, "show flow exporter {exporter} statistics": {"iosxe": {"class": "ShowFlowExporterStatistics", "doc": " Parser for:\n            * show flow exporter statistics\n            * show flow exporter {exporter} statistics\n    ", "module_name": "show_flow", "package": "genie.libs.parser", "schema": "{\n'flow_exporter': {\n  Any  (str) *: {\n    'pkt_send_stats': {\n      'last_cleared': <class 'str'>,\n      Optional  (Any) Any  (str) *: <class 'int'>,\n      },\n    'client_send_stats': {\n      Any  (str) *: {\n        'records_added': {\n          'total': <class 'int'>,\n          Optional  (str) sent: <class 'int'>,\n          Optional  (str) failed: <class 'int'>,\n          },\n        'bytes_added': {\n          'total': <class 'int'>,\n          Optional  (str) sent: <class 'int'>,\n          Optional  (str) failed: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_flow_exporter_exporter_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_flow.py#L442"}}, "show flow monitor {name} cache": {"iosxe": {"class": "ShowFlowMonitorCache", "doc": " Parser for\n        \"show flow monitor {name} cache\"\n    ", "module_name": "show_flow", "package": "genie.libs.parser", "schema": "{\n'cache_type': <class 'str'>,\n'cache_size': <class 'int'>,\n'current_entries': <class 'int'>,\nOptional  (str) high_water_mark: <class 'int'>,\n'flows_added': <class 'int'>,\n'flows_aged': {\n  'total': <class 'int'>,\n  Optional  (str) active_timeout_secs: <class 'int'>,\n  Optional  (str) active_timeout: <class 'int'>,\n  Optional  (str) inactive_timeout_secs: <class 'int'>,\n  Optional  (str) inactive_timeout: <class 'int'>,\n  Optional  (str) event_aged: <class 'int'>,\n  Optional  (str) watermark_aged: <class 'int'>,\n  Optional  (str) emergency_aged: <class 'int'>,\n  },\nOptional  (str) entries: {\n  Any  (str) *: {\n    'ip_vrf_id_input': <class 'str'>,\n    'ipv4_src_addr': <class 'str'>,\n    'ipv4_dst_addr': <class 'str'>,\n    'intf_input': <class 'str'>,\n    'intf_output': <class 'str'>,\n    'pkts': <class 'int'>,\n    },\n  },\n}", "uid": "show_flow_monitor_name_cache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_flow.py#L210"}}, "show flow monitor {name} cache format record": {"iosxe": {"class": "ShowFlowMonitorCacheRecord", "doc": " Parser for\n        \"show flow monitor {name} cache format record\"\n    ", "module_name": "show_flow", "package": "genie.libs.parser", "schema": "{\n'cache_type': <class 'str'>,\n'cache_size': <class 'int'>,\n'current_entries': <class 'int'>,\nOptional  (str) high_water_mark: <class 'int'>,\n'flows_added': <class 'int'>,\n'flows_aged': {\n  'total': <class 'int'>,\n  Optional  (str) active_timeout_secs: <class 'int'>,\n  Optional  (str) active_timeout: <class 'int'>,\n  Optional  (str) inactive_timeout_secs: <class 'int'>,\n  Optional  (str) inactive_timeout: <class 'int'>,\n  Optional  (str) event_aged: <class 'int'>,\n  Optional  (str) watermark_aged: <class 'int'>,\n  Optional  (str) emergency_aged: <class 'int'>,\n  },\nOptional  (str) entries: {\n  Any  (str) *: {\n    'ip_vrf_id_input': <class 'str'>,\n    'ipv4_src_addr': <class 'str'>,\n    'ipv4_dst_addr': <class 'str'>,\n    'intf_input': <class 'str'>,\n    'intf_output': <class 'str'>,\n    'pkts': <class 'int'>,\n    },\n  },\n}", "uid": "show_flow_monitor_name_cache_format_record", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_flow.py#L395"}}, "show flow monitor {name} cache format table": {"iosxe": {"class": "ShowFlowMonitor", "doc": " Parser for\n      \"show flow monitor {name} cache format table\"\n    ", "module_name": "show_flow", "package": "genie.libs.parser", "schema": "{\n'cache_type': <class 'str'>,\n'cache_size': <class 'int'>,\n'current_entries': <class 'int'>,\nOptional  (str) high_water_mark: <class 'int'>,\n'flows_added': <class 'int'>,\n'flows_aged': <class 'int'>,\nOptional  (str) ipv4_src_addr: {\n  Any  (str) *: {\n    'ipv4_dst_addr': {\n      Any  (str) *: {\n        'index': {\n          Any  (str) *: {\n            'trns_src_port': <class 'int'>,\n            'trns_dst_port': <class 'int'>,\n            'ip_tos': <class 'str'>,\n            'ip_port': <class 'int'>,\n            'bytes_long': <class 'int'>,\n            'pkts_long': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_flow_monitor_name_cache_format_table", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_flow.py#L55"}}, "show forwarding distribution multicast route": {"nxos": {"class": "ShowForwardingDistributionMulticastRoute", "doc": "parser for:\n        show forwarding distribution multicast route\n        show forwarding distribution multicast route vrf <vrf>\n        show forwarding distribution multicast route vrf all", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'distribution': {\n  'multicast': {\n    'route': {\n      'vrf': {\n        Any  (str) *: {\n          'address_family': {\n            Any  (str) *: {\n              'num_groups': <class 'int'>,\n              'gaddr': {\n                Any  (str) *: {\n                  'grp_len': <class 'int'>,\n                  'saddr': {\n                    Any  (str) *: {\n                      'rpf_ifname': <class 'str'>,\n                      Optional  (str) src_len: <class 'int'>,\n                      Optional  (str) flags: <class 'str'>,\n                      'rcv_packets': <class 'int'>,\n                      'rcv_bytes': <class 'int'>,\n                      'num_of_oifs': <class 'int'>,\n                      Optional  (str) oifs: {\n                        'oif_index': <class 'int'>,\n                        Any  (str) *: {\n                          Optional  (str) oif: <class 'str'>,\n                          Optional  (str) encap: <class 'str'>,\n                          Optional  (str) mem_l2_ports: <class 'str'>,\n                          Optional  (str) l2_oiflist_index: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_forwarding_distribution_multicast_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L812"}}, "show forwarding distribution multicast route vrf {vrf}": {"nxos": {"class": "ShowForwardingDistributionMulticastRoute", "doc": "parser for:\n        show forwarding distribution multicast route\n        show forwarding distribution multicast route vrf <vrf>\n        show forwarding distribution multicast route vrf all", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'distribution': {\n  'multicast': {\n    'route': {\n      'vrf': {\n        Any  (str) *: {\n          'address_family': {\n            Any  (str) *: {\n              'num_groups': <class 'int'>,\n              'gaddr': {\n                Any  (str) *: {\n                  'grp_len': <class 'int'>,\n                  'saddr': {\n                    Any  (str) *: {\n                      'rpf_ifname': <class 'str'>,\n                      Optional  (str) src_len: <class 'int'>,\n                      Optional  (str) flags: <class 'str'>,\n                      'rcv_packets': <class 'int'>,\n                      'rcv_bytes': <class 'int'>,\n                      'num_of_oifs': <class 'int'>,\n                      Optional  (str) oifs: {\n                        'oif_index': <class 'int'>,\n                        Any  (str) *: {\n                          Optional  (str) oif: <class 'str'>,\n                          Optional  (str) encap: <class 'str'>,\n                          Optional  (str) mem_l2_ports: <class 'str'>,\n                          Optional  (str) l2_oiflist_index: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_forwarding_distribution_multicast_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L812"}}, "show guestshell": {"nxos": {"class": "ShowGuestshell", "doc": "Parser for \"show guestshell\".", "module_name": "show_virtual_service", "package": "genie.libs.parser", "schema": "{\n'state': <class 'str'>,\n'package_information': {\n  'name': <class 'str'>,\n  'path': <class 'str'>,\n  'application': {\n    'name': <class 'str'>,\n    'version': <class 'str'>,\n    'description': <class 'str'>,\n    },\n  'signing': {\n    'key_type': <class 'str'>,\n    'method': <class 'str'>,\n    },\n  'licensing': {\n    'name': <class 'str'>,\n    'version': <class 'str'>,\n    },\n  },\n'resource_reservation': {\n  'disk_mb': <class 'int'>,\n  'memory_mb': <class 'int'>,\n  'cpu_percent': <class 'int'>,\n  },\nOptional  (str) attached_devices: {\n  Any  (str) *: {\n    'type': <class 'str'>,\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) alias: <class 'str'>,\n    },\n  },\n}", "uid": "show_guestshell", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_virtual_service.py#L631"}}, "show hsrp all": {"nxos": {"class": "ShowHsrpAll", "doc": " Parser for \"'show hsrp all\" ", "module_name": "show_hsrp", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'interface': <class 'str'>,\n  'use_bia': <class 'bool'>,\n  'address_family': {\n    Any  (str) *: {\n      'version': {\n        Any  (str) *: {\n          'groups': {\n            Any  (str) *: {\n              'group_number': <class 'int'>,\n              Optional  (str) tracked_objects: {\n                Any  (str) *: {\n                  Optional  (str) object_name: <class 'int'>,\n                  Optional  (str) status: <class 'str'>,\n                  Optional  (str) priority_decrement: <class 'int'>,\n                  },\n                },\n              Optional  (str) hsrp_router_state: <class 'str'>,\n              Optional  (str) hsrp_router_state_reason: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) configured_priority: <class 'int'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) preempt_reload_delay: <class 'int'>,\n              Optional  (str) preempt_min_delay: <class 'int'>,\n              Optional  (str) preempt_sync_delay: <class 'int'>,\n              'upper_fwd_threshold': <class 'int'>,\n              'lower_fwd_threshold': <class 'int'>,\n              Optional  (str) timers: {\n                Optional  (str) hello_msec_flag: <class 'bool'>,\n                Optional  (str) hello_msec: <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                Optional  (str) hold_msec_flag: <class 'bool'>,\n                Optional  (str) hold_msec: <class 'int'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) cfged_hello_unit: <class 'str'>,\n                Optional  (str) cfged_hello_interval: <class 'int'>,\n                Optional  (str) cfged_hold_unit: <class 'str'>,\n                Optional  (str) cfged_hold_interval: <class 'int'>,\n                },\n              Optional  (str) primary_ipv4_address: {\n                Optional  (str) virtual_ip_learn: <class 'bool'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              Optional  (str) secondary_ipv4_addresses: {\n                Any  (str) *: {\n                  Optional  (str) address: <class 'str'>,\n                  },\n                },\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'bool'>,\n                },\n              Optional  (str) global_ipv6_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              'active_router': <class 'str'>,\n              'standby_router': <class 'str'>,\n              'virtual_mac_address': <class 'str'>,\n              'virtual_mac_address_status': <class 'str'>,\n              Optional  (str) authentication: <class 'str'>,\n              'num_state_changes': <class 'int'>,\n              'last_state_change': <class 'str'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) active_priority: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) active_expire: <class 'float'>,\n              Optional  (str) standby_expire: <class 'float'>,\n              Optional  (str) secondary_vips: <class 'list'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) standby_mac_address: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_hsrp_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_hsrp.py#L278"}}, "show hsrp delay": {"nxos": {"class": "ShowHsrpDelay", "doc": " Parser for show hsrp delay ", "module_name": "show_hsrp", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'delay': {\n    'minimum_delay': <class 'int'>,\n    'reload_delay': <class 'int'>,\n    },\n  },\n}", "uid": "show_hsrp_delay", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_hsrp.py#L675"}}, "show hsrp detail": {"iosxr": {"class": "ShowHsrpDetail", "doc": "Parser for show hsrp detail", "module_name": "show_hsrp", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'interface': <class 'str'>,\n  Optional  (str) bfd: {\n    'enabled': <class 'bool'>,\n    'detection_multiplier': <class 'int'>,\n    'interval': <class 'int'>,\n    },\n  Optional  (str) use_bia: <class 'bool'>,\n  Optional  (str) delay: {\n    'minimum_delay': <class 'int'>,\n    'reload_delay': <class 'int'>,\n    },\n  'redirects_disable': <class 'bool'>,\n  'address_family': {\n    Any  (str) *: {\n      'version': {\n        Any  (str) *: {\n          'groups': {\n            Any  (str) *: {\n              Optional  (str) bfd: {\n                'address': <class 'str'>,\n                'interface_name': <class 'str'>,\n                Optional  (str) state: <class 'str'>,\n                },\n              Optional  (str) tracked_interfaces: {\n                Any  (str) *: {\n                  'interface_name': <class 'str'>,\n                  'priority_decrement': <class 'int'>,\n                  },\n                },\n              Optional  (str) tracked_objects: {\n                'num_tracked_objects': <class 'int'>,\n                'num_tracked_objects_up': <class 'int'>,\n                Any  (str) *: {\n                  'object_name': <class 'str'>,\n                  'priority_decrement': <class 'int'>,\n                  },\n                },\n              'timers': {\n                'hello_msec_flag': <class 'bool'>,\n                'hello_msec': <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                'hold_msec_flag': <class 'bool'>,\n                'hold_msec': <class 'int'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                },\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'str'>,\n                },\n              Optional  (str) statistics: {\n                Optional  (str) last_resign_received: <class 'str'>,\n                Optional  (str) last_resign_sent: <class 'str'>,\n                Optional  (str) last_coup_received: <class 'str'>,\n                Optional  (str) last_coup_sent: <class 'str'>,\n                Optional  (str) num_state_changes: <class 'int'>,\n                Optional  (str) last_state_change: <class 'str'>,\n                },\n              'priority': <class 'int'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) preempt_delay: <class 'int'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) num_of_slaves: <class 'int'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              'group_number': <class 'int'>,\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) standby_mac_address: <class 'str'>,\n              Optional  (str) active_priority: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) active_state: <class 'str'>,\n              Optional  (str) standby_state: <class 'str'>,\n              Optional  (str) active_expire: <class 'str'>,\n              Optional  (str) standby_expire: <class 'str'>,\n              'hsrp_router_state': <class 'str'>,\n              },\n            },\n          Optional  (str) slave_groups: {\n            Any  (str) *: {\n              'follow': <class 'str'>,\n              Optional  (str) bfd: {\n                'address': <class 'str'>,\n                'interface_name': <class 'str'>,\n                },\n              Optional  (str) tracked_interfaces: {\n                Any  (str) *: {\n                  'interface_name': <class 'str'>,\n                  'priority_decrement': <class 'int'>,\n                  },\n                },\n              Optional  (str) tracked_objects: {\n                'num_tracked_objects': <class 'int'>,\n                'num_tracked_objects_up': <class 'int'>,\n                Any  (str) *: {\n                  'object_name': <class 'str'>,\n                  'priority_decrement': <class 'int'>,\n                  },\n                },\n              Optional  (str) timers: {\n                'hello_msec_flag': <class 'bool'>,\n                'hello_msec': <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                'hold_msec_flag': <class 'bool'>,\n                'hold_msec': <class 'int'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                },\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'str'>,\n                },\n              Optional  (str) statistics: {\n                Optional  (str) last_resign_received: <class 'str'>,\n                Optional  (str) last_resign_sent: <class 'str'>,\n                Optional  (str) last_coup_received: <class 'str'>,\n                Optional  (str) last_coup_sent: <class 'str'>,\n                Optional  (str) num_state_changes: <class 'int'>,\n                Optional  (str) last_state_change: <class 'str'>,\n                },\n              'priority': <class 'int'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) preempt_delay: <class 'int'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              'group_number': <class 'int'>,\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) active_priority: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) active_state: <class 'str'>,\n              Optional  (str) standby_state: <class 'str'>,\n              Optional  (str) active_expire: <class 'str'>,\n              Optional  (str) standby_expire: <class 'str'>,\n              'hsrp_router_state': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_hsrp_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_hsrp.py#L386"}}, "show hsrp summary": {"iosxr": {"class": "ShowHsrpSummary", "doc": "Parser for show hsrp summary", "module_name": "show_hsrp", "package": "genie.libs.parser", "schema": "{\n'address_family': {\n  Any  (str) *: {\n    'state': {\n      Any  (str) *: {\n        'sessions': <class 'int'>,\n        'slaves': <class 'int'>,\n        'total': <class 'int'>,\n        },\n      },\n    'intf_total': <class 'int'>,\n    'intf_up': <class 'int'>,\n    'intf_down': <class 'int'>,\n    'vritual_addresses_total': <class 'int'>,\n    'virtual_addresses_active': <class 'int'>,\n    'virtual_addresses_inactive': <class 'int'>,\n    },\n  },\n'num_tracked_objects': <class 'int'>,\n'tracked_objects_up': <class 'int'>,\n'tracked_objects_down': <class 'int'>,\n'num_bfd_sessions': <class 'int'>,\n'bfd_sessions_up': <class 'int'>,\n'bfd_sessions_down': <class 'int'>,\n'bfd_sessions_inactive': <class 'int'>,\n}", "uid": "show_hsrp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_hsrp.py#L62"}, "nxos": {"class": "ShowHsrpSummary", "doc": "Parser for show hsrp summary ", "module_name": "show_hsrp", "package": "genie.libs.parser", "schema": "{\n'nsf': <class 'str'>,\nOptional  (str) nsf_time: <class 'int'>,\n'global_hsrp_bfd': <class 'str'>,\n'stats': {\n  'total_groups': <class 'int'>,\n  'v1_ipv4': <class 'int'>,\n  'v2_ipv4': <class 'int'>,\n  'v2_ipv6': <class 'int'>,\n  'active': <class 'int'>,\n  'standby': <class 'int'>,\n  'listen': <class 'int'>,\n  'v6_active': <class 'int'>,\n  'v6_standby': <class 'int'>,\n  'v6_listen': <class 'int'>,\n  },\n'intf_total': <class 'int'>,\n'total_packets': {\n  'tx_pass': <class 'int'>,\n  'tx_fail': <class 'int'>,\n  'rx_good': <class 'int'>,\n  },\n'pkt_unknown_groups': <class 'int'>,\n'total_mts_rx': <class 'int'>,\n}", "uid": "show_hsrp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_hsrp.py#L51"}}, "show igmp groups detail": {"iosxr": {"class": "ShowIgmpGroupsDetail", "doc": "Parser for show igmp groups detail", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'router_mode': <class 'str'>,\n            'router_mode_expires': <class 'str'>,\n            'host_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) suppress: <class 'int'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'up_time': <class 'str'>,\n                'expire': <class 'str'>,\n                Optional  (str) forward: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_igmp_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_igmp.py#L474"}}, "show igmp interface": {"iosxr": {"class": "ShowIgmpInterface", "doc": "Parser for show ip interface ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'oper_status': <class 'str'>,\n        Optional  (str) line_protocol: <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) ip_address: <class 'str'>,\n        'igmp_state': <class 'str'>,\n        Optional  (str) igmp_version: <class 'int'>,\n        Optional  (str) igmp_query_interval: <class 'int'>,\n        Optional  (str) igmp_querier_timeout: <class 'int'>,\n        Optional  (str) igmp_max_query_response_time: <class 'int'>,\n        Optional  (str) last_member_query_response_interval: <class 'int'>,\n        Optional  (str) igmp_activity: {\n          Optional  (str) joins: <class 'int'>,\n          Optional  (str) leaves: <class 'int'>,\n          },\n        Optional  (str) igmp_querying_router: <class 'str'>,\n        Optional  (str) igmp_querying_router_info: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_query_sent: <class 'str'>,\n        Optional  (str) time_elapsed_since_router_enabled: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_report_received: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_igmp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_igmp.py#L68"}}, "show igmp interface {interface}": {"iosxr": {"class": "ShowIgmpInterface", "doc": "Parser for show ip interface ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'oper_status': <class 'str'>,\n        Optional  (str) line_protocol: <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) ip_address: <class 'str'>,\n        'igmp_state': <class 'str'>,\n        Optional  (str) igmp_version: <class 'int'>,\n        Optional  (str) igmp_query_interval: <class 'int'>,\n        Optional  (str) igmp_querier_timeout: <class 'int'>,\n        Optional  (str) igmp_max_query_response_time: <class 'int'>,\n        Optional  (str) last_member_query_response_interval: <class 'int'>,\n        Optional  (str) igmp_activity: {\n          Optional  (str) joins: <class 'int'>,\n          Optional  (str) leaves: <class 'int'>,\n          },\n        Optional  (str) igmp_querying_router: <class 'str'>,\n        Optional  (str) igmp_querying_router_info: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_query_sent: <class 'str'>,\n        Optional  (str) time_elapsed_since_router_enabled: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_report_received: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_igmp_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_igmp.py#L68"}}, "show igmp summary": {"iosxr": {"class": "ShowIgmpSummary", "doc": "Parser for show igmp summary", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'robustness_value': <class 'int'>,\n    'no_of_group_x_interface': <class 'int'>,\n    'maximum_number_of_groups_for_vrf': <class 'int'>,\n    'supported_interfaces': <class 'int'>,\n    'unsupported_interfaces': <class 'int'>,\n    'enabled_interfaces': <class 'int'>,\n    'disabled_interfaces': <class 'int'>,\n    'mte_tuple_count': <class 'int'>,\n    'interfaces': {\n      Any  (str) *: {\n        'number_groups': <class 'int'>,\n        'max_groups': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_igmp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_igmp.py#L285"}}, "show igmp vrf {vrf} groups detail": {"iosxr": {"class": "ShowIgmpGroupsDetail", "doc": "Parser for show igmp groups detail", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'router_mode': <class 'str'>,\n            'router_mode_expires': <class 'str'>,\n            'host_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) suppress: <class 'int'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'up_time': <class 'str'>,\n                'expire': <class 'str'>,\n                Optional  (str) forward: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_igmp_vrf_vrf_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_igmp.py#L474"}}, "show igmp vrf {vrf} interface": {"iosxr": {"class": "ShowIgmpInterface", "doc": "Parser for show ip interface ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'oper_status': <class 'str'>,\n        Optional  (str) line_protocol: <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) ip_address: <class 'str'>,\n        'igmp_state': <class 'str'>,\n        Optional  (str) igmp_version: <class 'int'>,\n        Optional  (str) igmp_query_interval: <class 'int'>,\n        Optional  (str) igmp_querier_timeout: <class 'int'>,\n        Optional  (str) igmp_max_query_response_time: <class 'int'>,\n        Optional  (str) last_member_query_response_interval: <class 'int'>,\n        Optional  (str) igmp_activity: {\n          Optional  (str) joins: <class 'int'>,\n          Optional  (str) leaves: <class 'int'>,\n          },\n        Optional  (str) igmp_querying_router: <class 'str'>,\n        Optional  (str) igmp_querying_router_info: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_query_sent: <class 'str'>,\n        Optional  (str) time_elapsed_since_router_enabled: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_report_received: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_igmp_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_igmp.py#L68"}}, "show igmp vrf {vrf} interface {interface}": {"iosxr": {"class": "ShowIgmpInterface", "doc": "Parser for show ip interface ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'oper_status': <class 'str'>,\n        Optional  (str) line_protocol: <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) ip_address: <class 'str'>,\n        'igmp_state': <class 'str'>,\n        Optional  (str) igmp_version: <class 'int'>,\n        Optional  (str) igmp_query_interval: <class 'int'>,\n        Optional  (str) igmp_querier_timeout: <class 'int'>,\n        Optional  (str) igmp_max_query_response_time: <class 'int'>,\n        Optional  (str) last_member_query_response_interval: <class 'int'>,\n        Optional  (str) igmp_activity: {\n          Optional  (str) joins: <class 'int'>,\n          Optional  (str) leaves: <class 'int'>,\n          },\n        Optional  (str) igmp_querying_router: <class 'str'>,\n        Optional  (str) igmp_querying_router_info: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_query_sent: <class 'str'>,\n        Optional  (str) time_elapsed_since_router_enabled: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_report_received: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_igmp_vrf_vrf_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_igmp.py#L68"}}, "show igmp vrf {vrf} summary": {"iosxr": {"class": "ShowIgmpSummary", "doc": "Parser for show igmp summary", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'robustness_value': <class 'int'>,\n    'no_of_group_x_interface': <class 'int'>,\n    'maximum_number_of_groups_for_vrf': <class 'int'>,\n    'supported_interfaces': <class 'int'>,\n    'unsupported_interfaces': <class 'int'>,\n    'enabled_interfaces': <class 'int'>,\n    'disabled_interfaces': <class 'int'>,\n    'mte_tuple_count': <class 'int'>,\n    'interfaces': {\n      Any  (str) *: {\n        'number_groups': <class 'int'>,\n        'max_groups': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_igmp_vrf_vrf_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_igmp.py#L285"}}, "show install active": {"nxos": {"class": "ShowInstallActive", "doc": "Parser for show install active", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'boot_images': {\n  Optional  (str) kickstart_image: <class 'str'>,\n  Optional  (str) system_image: <class 'str'>,\n  },\nOptional  (str) active_packages: {\n  Any  (str) *: {\n    Optional  (str) active_package_name: <class 'str'>,\n    },\n  },\n}", "uid": "show_install_active", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L455"}}, "show install active summary": {"iosxr": {"class": "ShowInstallActiveSummary", "doc": "Parser for show install active summary", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'active_packages': Any  (str) *,\nOptional  (str) num_active_packages: <class 'int'>,\nOptional  (str) sdr: <class 'str'>,\n}", "uid": "show_install_active_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L516"}}, "show install commit summary": {"iosxr": {"class": "ShowInstallCommitSummary", "doc": "Parser for show install commit summary", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) committed_packages: Any  (str) *,\nOptional  (str) active_packages: Any  (str) *,\nOptional  (str) num_committed_packages: <class 'int'>,\nOptional  (str) sdr: <class 'list'>,\n}", "uid": "show_install_commit_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L645"}}, "show install inactive summary": {"iosxr": {"class": "ShowInstallInactiveSummary", "doc": "Parser for show install inactive summary", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'inactive_packages': Any  (str) *,\nOptional  (str) num_inactive_packages: <class 'int'>,\nOptional  (str) sdr: <class 'list'>,\n}", "uid": "show_install_inactive_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L580"}}, "show install summary": {"iosxe": {"class": "ShowInstallSummary", "doc": "Parser for show install summary", "module_name": "show_install", "package": "genie.libs.parser", "schema": "{\n'location': {\n  Any  (str) *: {\n    'pkg_state': {\n      Any  (str) *: {\n        'type': <class 'str'>,\n        'state': <class 'str'>,\n        'filename_version': <class 'str'>,\n        },\n      },\n    'auto_abort_timer': <class 'str'>,\n    Optional  (str) time_before_rollback: <class 'str'>,\n    },\n  },\n}", "uid": "show_install_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_install.py#L38"}}, "show interface": {"nxos": {"class": "ShowInterface", "doc": "Parser for show interface, show interface <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) types: <class 'str'>,\n  Optional  (str) parent_interface: <class 'str'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) admin_state: <class 'str'>,\n  Optional  (str) dedicated_interface: <class 'bool'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  Optional  (str) autostate: <class 'bool'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) mtu: <class 'int'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) port_mode: <class 'str'>,\n  Optional  (str) auto_mdix: <class 'str'>,\n  Optional  (str) switchport_monitor: <class 'str'>,\n  Optional  (str) efficient_ethernet: <class 'str'>,\n  Optional  (str) last_link_flapped: <class 'str'>,\n  Optional  (str) interface_reset: <class 'int'>,\n  Optional  (str) ethertype: <class 'str'>,\n  Optional  (str) beacon: <class 'str'>,\n  Optional  (str) medium: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) media_type: <class 'str'>,\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_member: <class 'bool'>,\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    },\n  Optional  (str) bandwidth: <class 'int'>,\n  Optional  (str) counters: {\n    Optional  (str) rate: {\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      },\n    Optional  (str) in_unicast_pkts: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_discards: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) in_oversize_frames: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_jumbo_packets: <class 'int'>,\n    Optional  (str) in_storm_suppression_packets: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_oversize_frame: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_underrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) in_bad_etype_drop: <class 'int'>,\n    Optional  (str) in_unknown_protos: <class 'int'>,\n    Optional  (str) in_if_down_drop: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) in_discard: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_short_frame: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_unicast_pkts: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_discard: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_jumbo_packets: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) tx: <class 'bool'>,\n    Optional  (str) rx: <class 'bool'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    },\n  Optional  (str) encapsulations: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) native_vlan: <class 'int'>,\n    },\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) route_tag: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L154"}}, "show interface brief": {"iosxr": {"class": "ShowInterfaceBrief", "doc": "Parser for show interface brief", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Optional  (str) ethernet: {\n    Any  (str) *: {\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) mode: <class 'str'>,\n      'status': <class 'str'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) reason: <class 'str'>,\n      Optional  (str) encap_type: <class 'str'>,\n      Optional  (str) mtu: <class 'str'>,\n      Optional  (str) bw: <class 'int'>,\n      Optional  (str) port_ch: <class 'str'>,\n      },\n    },\n  Optional  (str) port: {\n    Any  (str) *: {\n      Optional  (str) vrf: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) ip_address: <class 'str'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) encap_type: <class 'str'>,\n      Optional  (str) mtu: <class 'str'>,\n      Optional  (str) bw: <class 'int'>,\n      },\n    },\n  Optional  (str) port_channel: {\n    Any  (str) *: {\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) mode: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) reason: <class 'str'>,\n      Optional  (str) encap_type: <class 'str'>,\n      Optional  (str) mtu: <class 'str'>,\n      Optional  (str) bw: <class 'int'>,\n      Optional  (str) protocol: <class 'str'>,\n      },\n    },\n  Optional  (str) loopback: {\n    Any  (str) *: {\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) encap_type: <class 'str'>,\n      Optional  (str) mtu: <class 'str'>,\n      Optional  (str) bw: <class 'int'>,\n      Optional  (str) description: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L194"}, "nxos": {"class": "ShowInterfaceBrief", "doc": "Parser for:\n        * show interface brief\n        * show interface {interface} brief\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  'ethernet': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'type': <class 'str'>,\n      'mode': <class 'str'>,\n      'status': <class 'str'>,\n      'speed': <class 'str'>,\n      'reason': <class 'str'>,\n      'port_ch': <class 'str'>,\n      },\n    },\n  Optional  (str) port: {\n    Any  (str) *: {\n      Optional  (str) vrf: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) ip_address: <class 'str'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) mtu: <class 'int'>,\n      },\n    },\n  Optional  (str) port_channel: {\n    Any  (str) *: {\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) mode: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) reason: <class 'str'>,\n      Optional  (str) protocol: <class 'str'>,\n      },\n    },\n  Optional  (str) loopback: {\n    Any  (str) *: {\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) description: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2719"}}, "show interface description": {"nxos": {"class": "ShowInterfaceDescription", "doc": "parser for show interface description\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) speed: <class 'str'>,\n    'description': <class 'str'>,\n    },\n  },\n}", "uid": "show_interface_description", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L3250"}}, "show interface detail": {"asa": {"class": "ShowInterfaceDetail", "doc": "Parser for\n        * show interface detail\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'link_status': <class 'bool'>,\n    'line_protocol': <class 'bool'>,\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) mac_address: <class 'str'>,\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) ipv4: {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) prefix_length: <class 'str'>,\n        },\n      },\n    Optional  (str) subnet: <class 'str'>,\n    Optional  (str) interface_state: <class 'bool'>,\n    Optional  (str) config_status: <class 'bool'>,\n    Optional  (str) config_issue: <class 'str'>,\n    Optional  (str) traffic_statistics: {\n      'packets_input': <class 'int'>,\n      'bytes_input': <class 'int'>,\n      'packets_output': <class 'int'>,\n      'bytes_output': <class 'int'>,\n      'packets_dropped': <class 'int'>,\n      },\n    Optional  (str) control_point_states: {\n      'interface': {\n        'interface_number': <class 'int'>,\n        'interface_config_status': <class 'str'>,\n        'interface_state': <class 'str'>,\n        },\n      Any  (str) *: {\n        'interface_vlan_config_status': <class 'str'>,\n        'interface_vlan_state': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_interface.py#L299"}, "iosxr": {"class": "ShowInterfacesDetail", "doc": "Parser for show interface detail\n                    show interface <interface> detail\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) types: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  Optional  (str) oper_status: <class 'str'>,\n  Optional  (str) enabled: <class 'bool'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) location: <class 'str'>,\n  Optional  (str) medium: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) last_link_flapped: <class 'str'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) loopback_status: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) interface_state: <class 'int'>,\n  Optional  (str) carrier_delay: <class 'str'>,\n  Optional  (str) flow_control: {\n    Optional  (str) flow_control_receive: <class 'bool'>,\n    Optional  (str) flow_control_send: <class 'bool'>,\n    },\n  Optional  (str) bandwidth: <class 'int'>,\n  Optional  (str) counters: {\n    Optional  (str) rate: {\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      },\n    Optional  (str) in_discards: <class 'int'>,\n    Optional  (str) in_unknown_protos: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_parity: <class 'int'>,\n    Optional  (str) in_frame_errors: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_discards: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) out_applique: <class 'int'>,\n    Optional  (str) out_resets: <class 'int'>,\n    Optional  (str) out_buffer_failures: <class 'int'>,\n    Optional  (str) out_buffer_swapped_out: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) carrier_transitions: <class 'int'>,\n    },\n  Optional  (str) encapsulations: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    },\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L471"}}, "show interface ip brief": {"asa": {"class": "ShowInterfaceIpBrief", "doc": "Parser for\n        * show interface ip brief\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    Optional  (str) ipv4: {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) prefix_length: <class 'str'>,\n        },\n      Optional  (str) unnumbered: {\n        Optional  (str) unnumbered_intf_ref: <class 'str'>,\n        },\n      },\n    'check': <class 'str'>,\n    'method': <class 'str'>,\n    'link_status': <class 'str'>,\n    Optional  (str) line_protocol: <class 'str'>,\n    },\n  },\n}", "uid": "show_interface_ip_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_interface.py#L182"}}, "show interface status": {"nxos": {"class": "ShowInterfaceStatus", "doc": "parser for \n        * show interface status\n        * show interfaces {interfaces} status\n\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    Optional  (str) name: <class 'str'>,\n    'status': <class 'str'>,\n    'vlan': <class 'str'>,\n    'duplex_code': <class 'str'>,\n    'port_speed': <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    },\n  },\n}", "uid": "show_interface_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L3321"}}, "show interface summary": {"asa": {"class": "ShowInterfaceSummary", "doc": "Parser for\n        * show interface summary\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'link_status': <class 'bool'>,\n    'line_protocol': <class 'bool'>,\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) mac_address: <class 'str'>,\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) ipv4: {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) prefix_length: <class 'str'>,\n        },\n      },\n    Optional  (str) subnet: <class 'str'>,\n    Optional  (str) interface_state: <class 'bool'>,\n    Optional  (str) config_status: <class 'bool'>,\n    Optional  (str) config_issue: <class 'str'>,\n    },\n  },\n}", "uid": "show_interface_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_interface.py#L49"}}, "show interface switchport": {"nxos": {"class": "ShowInterfaceSwitchport", "doc": "Parser for show interface switchport\n                show interface <interface> switchport", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'switchport_status': <class 'str'>,\n  Optional  (str) switchport_monitor: <class 'str'>,\n  Optional  (str) switchport_mode: <class 'str'>,\n  Optional  (str) access_vlan: <class 'int'>,\n  'switchport_enable': <class 'bool'>,\n  Optional  (str) access_vlan_mode: <class 'str'>,\n  Optional  (str) native_vlan: <class 'int'>,\n  Optional  (str) native_vlan_mode: <class 'str'>,\n  Optional  (str) trunk_vlans: <class 'str'>,\n  Optional  (str) admin_priv_vlan_primary_host_assoc: <class 'str'>,\n  Optional  (str) admin_priv_vlan_secondary_host_assoc: <class 'str'>,\n  Optional  (str) admin_priv_vlan_primary_mapping: <class 'str'>,\n  Optional  (str) admin_priv_vlan_secondary_mapping: <class 'str'>,\n  Optional  (str) admin_priv_vlan_trunk_native_vlan: <class 'str'>,\n  Optional  (str) admin_priv_vlan_trunk_encapsulation: <class 'str'>,\n  Optional  (str) admin_priv_vlan_trunk_normal_vlans: <class 'str'>,\n  Optional  (str) admin_priv_vlan_trunk_private_vlans: <class 'str'>,\n  Optional  (str) operational_private_vlan: <class 'str'>,\n  },\n}", "uid": "show_interface_switchport", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1899"}}, "show interface {interface}": {"nxos": {"class": "ShowInterface", "doc": "Parser for show interface, show interface <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) types: <class 'str'>,\n  Optional  (str) parent_interface: <class 'str'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) admin_state: <class 'str'>,\n  Optional  (str) dedicated_interface: <class 'bool'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  Optional  (str) autostate: <class 'bool'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) mtu: <class 'int'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) port_mode: <class 'str'>,\n  Optional  (str) auto_mdix: <class 'str'>,\n  Optional  (str) switchport_monitor: <class 'str'>,\n  Optional  (str) efficient_ethernet: <class 'str'>,\n  Optional  (str) last_link_flapped: <class 'str'>,\n  Optional  (str) interface_reset: <class 'int'>,\n  Optional  (str) ethertype: <class 'str'>,\n  Optional  (str) beacon: <class 'str'>,\n  Optional  (str) medium: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) media_type: <class 'str'>,\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_member: <class 'bool'>,\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    },\n  Optional  (str) bandwidth: <class 'int'>,\n  Optional  (str) counters: {\n    Optional  (str) rate: {\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      },\n    Optional  (str) in_unicast_pkts: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_discards: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) in_oversize_frames: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) in_jumbo_packets: <class 'int'>,\n    Optional  (str) in_storm_suppression_packets: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_oversize_frame: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_underrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) in_bad_etype_drop: <class 'int'>,\n    Optional  (str) in_unknown_protos: <class 'int'>,\n    Optional  (str) in_if_down_drop: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) in_discard: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_short_frame: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_unicast_pkts: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_discard: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_jumbo_packets: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) tx: <class 'bool'>,\n    Optional  (str) rx: <class 'bool'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    },\n  Optional  (str) encapsulations: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) native_vlan: <class 'int'>,\n    },\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) route_tag: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L154"}}, "show interface {interface} brief": {"nxos": {"class": "ShowInterfaceBrief", "doc": "Parser for:\n        * show interface brief\n        * show interface {interface} brief\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  'ethernet': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'type': <class 'str'>,\n      'mode': <class 'str'>,\n      'status': <class 'str'>,\n      'speed': <class 'str'>,\n      'reason': <class 'str'>,\n      'port_ch': <class 'str'>,\n      },\n    },\n  Optional  (str) port: {\n    Any  (str) *: {\n      Optional  (str) vrf: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) ip_address: <class 'str'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) mtu: <class 'int'>,\n      },\n    },\n  Optional  (str) port_channel: {\n    Any  (str) *: {\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) mode: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) speed: <class 'str'>,\n      Optional  (str) reason: <class 'str'>,\n      Optional  (str) protocol: <class 'str'>,\n      },\n    },\n  Optional  (str) loopback: {\n    Any  (str) *: {\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) description: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interface_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2719"}}, "show interface {interface} description": {"nxos": {"class": "ShowInterfaceDescription", "doc": "parser for show interface description\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) speed: <class 'str'>,\n    'description': <class 'str'>,\n    },\n  },\n}", "uid": "show_interface_interface_description", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L3250"}}, "show interface {interface} detail": {"iosxr": {"class": "ShowInterfacesDetail", "doc": "Parser for show interface detail\n                    show interface <interface> detail\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) types: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  Optional  (str) oper_status: <class 'str'>,\n  Optional  (str) enabled: <class 'bool'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) location: <class 'str'>,\n  Optional  (str) medium: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) last_link_flapped: <class 'str'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) loopback_status: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) interface_state: <class 'int'>,\n  Optional  (str) carrier_delay: <class 'str'>,\n  Optional  (str) flow_control: {\n    Optional  (str) flow_control_receive: <class 'bool'>,\n    Optional  (str) flow_control_send: <class 'bool'>,\n    },\n  Optional  (str) bandwidth: <class 'int'>,\n  Optional  (str) counters: {\n    Optional  (str) rate: {\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      },\n    Optional  (str) in_discards: <class 'int'>,\n    Optional  (str) in_unknown_protos: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_parity: <class 'int'>,\n    Optional  (str) in_frame_errors: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_discards: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) out_applique: <class 'int'>,\n    Optional  (str) out_resets: <class 'int'>,\n    Optional  (str) out_buffer_failures: <class 'int'>,\n    Optional  (str) out_buffer_swapped_out: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) carrier_transitions: <class 'int'>,\n    },\n  Optional  (str) encapsulations: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    },\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interface_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L471"}}, "show interface {interface} status": {"nxos": {"class": "ShowInterfaceStatus", "doc": "parser for \n        * show interface status\n        * show interfaces {interfaces} status\n\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    Optional  (str) name: <class 'str'>,\n    'status': <class 'str'>,\n    'vlan': <class 'str'>,\n    'duplex_code': <class 'str'>,\n    'port_speed': <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    },\n  },\n}", "uid": "show_interface_interface_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L3321"}}, "show interface {interface} switchport": {"nxos": {"class": "ShowInterfaceSwitchport", "doc": "Parser for show interface switchport\n                show interface <interface> switchport", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'switchport_status': <class 'str'>,\n  Optional  (str) switchport_monitor: <class 'str'>,\n  Optional  (str) switchport_mode: <class 'str'>,\n  Optional  (str) access_vlan: <class 'int'>,\n  'switchport_enable': <class 'bool'>,\n  Optional  (str) access_vlan_mode: <class 'str'>,\n  Optional  (str) native_vlan: <class 'int'>,\n  Optional  (str) native_vlan_mode: <class 'str'>,\n  Optional  (str) trunk_vlans: <class 'str'>,\n  Optional  (str) admin_priv_vlan_primary_host_assoc: <class 'str'>,\n  Optional  (str) admin_priv_vlan_secondary_host_assoc: <class 'str'>,\n  Optional  (str) admin_priv_vlan_primary_mapping: <class 'str'>,\n  Optional  (str) admin_priv_vlan_secondary_mapping: <class 'str'>,\n  Optional  (str) admin_priv_vlan_trunk_native_vlan: <class 'str'>,\n  Optional  (str) admin_priv_vlan_trunk_encapsulation: <class 'str'>,\n  Optional  (str) admin_priv_vlan_trunk_normal_vlans: <class 'str'>,\n  Optional  (str) admin_priv_vlan_trunk_private_vlans: <class 'str'>,\n  Optional  (str) operational_private_vlan: <class 'str'>,\n  },\n}", "uid": "show_interface_interface_switchport", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1899"}}, "show interface | i nve": {"nxos": {"class": "ShowNveInterface", "doc": "Parser for show interface | i nve", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'nves': {\n  Any  (str) *: {\n    'nve_name': <class 'str'>,\n    'nve_state': <class 'str'>,\n    },\n  },\n}", "uid": "show_interface___i_nve", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L335"}}, "show interfaces": {"ios": {"class": "ShowInterfaces", "doc": "parser for show interfaces", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) connected: <class 'bool'>,\n  Optional  (str) description: <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) link_type: <class 'str'>,\n  Optional  (str) media_type: <class 'str'>,\n  'mtu': <class 'int'>,\n  Optional  (str) maximum_active_vcs: <class 'str'>,\n  Optional  (str) vcs_per_vp: <class 'str'>,\n  Optional  (str) vc_idle_disconnect_time: <class 'str'>,\n  Optional  (str) vc_auto_creation: <class 'str'>,\n  Optional  (str) current_vccs: <class 'str'>,\n  Optional  (str) aal5_crc_errors: <class 'int'>,\n  Optional  (str) aal5_oversized_sdus: <class 'int'>,\n  Optional  (str) aal5_sar_timeouts: <class 'int'>,\n  Optional  (str) vaccess_status: <class 'str'>,\n  Optional  (str) vaccess_loopback: <class 'str'>,\n  Optional  (str) base_pppoatm: <class 'str'>,\n  Optional  (str) dtr_pulsed: <class 'str'>,\n  Optional  (str) sub_mtu: <class 'int'>,\n  Optional  (str) medium: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) carrier_delay: <class 'int'>,\n  Optional  (str) carrier_delay_up: <class 'int'>,\n  Optional  (str) carrier_delay_down: <class 'int'>,\n  Optional  (str) keepalive: <class 'int'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) output_hang: <class 'str'>,\n  Optional  (str) autostate: <class 'bool'>,\n  Optional  (str) queues: {\n    Optional  (str) input_queue_size: <class 'int'>,\n    Optional  (str) input_queue_max: <class 'int'>,\n    Optional  (str) input_queue_drops: <class 'int'>,\n    Optional  (str) input_queue_flushes: <class 'int'>,\n    Optional  (str) total_output_drop: <class 'int'>,\n    Optional  (str) queue_strategy: <class 'str'>,\n    Optional  (str) output_queue_size: <class 'int'>,\n    Optional  (str) output_queue_max: <class 'int'>,\n    Optional  (str) threshold: <class 'int'>,\n    Optional  (str) drops: <class 'int'>,\n    },\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_member: <class 'bool'>,\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) active_members: <class 'int'>,\n    Optional  (str) num_of_pf_jumbo_supported_members: <class 'int'>,\n    },\n  'bandwidth': <class 'int'>,\n  Optional  (str) counters: {\n    Optional  (str) rate: {\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      },\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) out_interface_resets: <class 'int'>,\n    Optional  (str) out_unknown_protocl_drops: <class 'int'>,\n    Optional  (str) out_babbles: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    Optional  (str) out_buffer_failure: <class 'int'>,\n    Optional  (str) out_buffers_swapped: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    },\n  Optional  (str) encapsulations: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) native_vlan: <class 'int'>,\n    },\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L45"}, "iosxe": {"class": "ShowInterfaces", "doc": "parser for show interfaces\n                  show interfaces <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) connected: <class 'bool'>,\n  Optional  (str) description: <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) link_type: <class 'str'>,\n  Optional  (str) media_type: <class 'str'>,\n  'mtu': <class 'int'>,\n  Optional  (str) maximum_active_vcs: <class 'str'>,\n  Optional  (str) vcs_per_vp: <class 'str'>,\n  Optional  (str) vc_idle_disconnect_time: <class 'str'>,\n  Optional  (str) vc_auto_creation: <class 'str'>,\n  Optional  (str) current_vccs: <class 'str'>,\n  Optional  (str) aal5_crc_errors: <class 'int'>,\n  Optional  (str) aal5_oversized_sdus: <class 'int'>,\n  Optional  (str) aal5_sar_timeouts: <class 'int'>,\n  Optional  (str) vaccess_status: <class 'str'>,\n  Optional  (str) vaccess_loopback: <class 'str'>,\n  Optional  (str) base_pppoatm: <class 'str'>,\n  Optional  (str) dtr_pulsed: <class 'str'>,\n  Optional  (str) sub_mtu: <class 'int'>,\n  Optional  (str) medium: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) carrier_delay: <class 'int'>,\n  Optional  (str) carrier_delay_up: <class 'int'>,\n  Optional  (str) carrier_delay_down: <class 'int'>,\n  Optional  (str) keepalive: <class 'int'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) output_hang: <class 'str'>,\n  Optional  (str) autostate: <class 'bool'>,\n  Optional  (str) queues: {\n    Optional  (str) input_queue_size: <class 'int'>,\n    Optional  (str) input_queue_max: <class 'int'>,\n    Optional  (str) input_queue_drops: <class 'int'>,\n    Optional  (str) input_queue_flushes: <class 'int'>,\n    Optional  (str) total_output_drop: <class 'int'>,\n    Optional  (str) queue_strategy: <class 'str'>,\n    Optional  (str) output_queue_size: <class 'int'>,\n    Optional  (str) output_queue_max: <class 'int'>,\n    Optional  (str) threshold: <class 'int'>,\n    Optional  (str) drops: <class 'int'>,\n    },\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_member: <class 'bool'>,\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) active_members: <class 'int'>,\n    Optional  (str) num_of_pf_jumbo_supported_members: <class 'int'>,\n    },\n  'bandwidth': <class 'int'>,\n  Optional  (str) counters: {\n    Optional  (str) rate: {\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      },\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) out_interface_resets: <class 'int'>,\n    Optional  (str) out_unknown_protocl_drops: <class 'int'>,\n    Optional  (str) out_babbles: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    Optional  (str) out_buffer_failure: <class 'int'>,\n    Optional  (str) out_buffers_swapped: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    },\n  Optional  (str) encapsulations: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) native_vlan: <class 'int'>,\n    },\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L195"}, "iosxr": {"class": "ShowInterfaces", "doc": "parser for show interfaces\n                  show interfaces <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) interface_state_transitions: <class 'int'>,\n  'type': <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) layer2: <class 'bool'>,\n  Optional  (str) description: <class 'str'>,\n  'mtu': <class 'int'>,\n  'bandwidth': <class 'int'>,\n  Optional  (str) bandwidth_max: <class 'int'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) link_type: <class 'str'>,\n  Optional  (str) media_type: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) carrier_delay_up: <class 'int'>,\n  Optional  (str) carrier_delay_down: <class 'int'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) loopback: <class 'str'>,\n  Optional  (str) last_link_flapped: <class 'str'>,\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      },\n    },\n  Optional  (str) encapsulations: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) outer_match: <class 'str'>,\n    Optional  (str) ethertype: <class 'str'>,\n    Optional  (str) mac_match: <class 'str'>,\n    Optional  (str) dest: <class 'str'>,\n    },\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) port_channel: {\n    Optional  (str) member_count: <class 'int'>,\n    Optional  (str) members: {\n      Any  (str) *: {\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) duplex_mode: <class 'str'>,\n        Optional  (str) speed: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) counters: {\n    Optional  (str) rate: {\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      },\n    Optional  (str) in_total_drops: <class 'int'>,\n    Optional  (str) in_unknown_protos: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_parity: <class 'int'>,\n    Optional  (str) in_frame_errors: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) in_drops: <class 'int'>,\n    Optional  (str) in_queue_drops: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_total_drops: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) out_applique: <class 'int'>,\n    Optional  (str) out_resets: <class 'int'>,\n    Optional  (str) out_buffer_failure: <class 'int'>,\n    Optional  (str) out_buffers_swapped: <class 'int'>,\n    Optional  (str) out_drops: <class 'int'>,\n    Optional  (str) out_queue_drops: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) carrier_transitions: <class 'int'>,\n    },\n  },\n}", "uid": "show_interfaces", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L2371"}}, "show interfaces accounting": {"ios": {"class": "ShowInterfacesAccounting", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  'accounting': {\n    Any  (str) *: {\n      'pkts_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'chars_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_accounting", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L90"}, "iosxe": {"class": "ShowInterfacesAccounting", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  'accounting': {\n    Any  (str) *: {\n      'pkts_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'chars_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_accounting", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L3116"}, "iosxr": {"class": "ShowInterfacesAccounting", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'accounting': {\n    Any  (str) *: {\n      'pkts_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'chars_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_accounting", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L2207"}}, "show interfaces description": {"ios": {"class": "ShowInterfacesDescription", "doc": "Parser for:\n        show interfaces <interface> description\n        show interfaces description", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'status': <class 'str'>,\n    'protocol': <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    },\n  },\n}", "uid": "show_interfaces_description", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L121"}, "iosxe": {"class": "ShowInterfacesDescription", "doc": "parser for show interfaces description\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'status': <class 'str'>,\n    'protocol': <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    },\n  },\n}", "uid": "show_interfaces_description", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L3280"}, "iosxr": {"class": "ShowInterfacesDescription", "doc": "parser for show interface description\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'status': <class 'str'>,\n    'protocol': <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    },\n  },\n}", "uid": "show_interfaces_description", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L2968"}}, "show interfaces stats": {"ios": {"class": "ShowInterfacesStats", "doc": "Parser for:\n        show interfaces <interface> stats\n        show interfaces stats", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'switching_path': {\n    Any  (str) *: {\n      'pkts_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'chars_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L114"}, "iosxe": {"class": "ShowInterfacesStats", "doc": "Parser for :\n        show interfaces <interface> stats\n        show interfaces stats", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'switching_path': {\n    Any  (str) *: {\n      'pkts_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'chars_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L3213"}}, "show interfaces status": {"ios": {"class": "ShowInterfacesStatus", "doc": "Parser for:\n        show interfaces status", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    Optional  (str) name: <class 'str'>,\n    'status': <class 'str'>,\n    'vlan': <class 'str'>,\n    'duplex_code': <class 'str'>,\n    'port_speed': <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    },\n  },\n}", "uid": "show_interfaces_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L128"}, "iosxe": {"class": "ShowInterfacesStatus", "doc": "parser for \n            * show interfaces status\n        ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    Optional  (str) name: <class 'str'>,\n    'status': <class 'str'>,\n    'vlan': <class 'str'>,\n    'duplex_code': <class 'str'>,\n    'port_speed': <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    },\n  },\n}", "uid": "show_interfaces_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L3350"}}, "show interfaces switchport": {"ios": {"class": "ShowInterfacesSwitchport", "doc": "Parser for show interfaces switchport", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'switchport_enable': <class 'bool'>,\n  'switchport_mode': <class 'str'>,\n  Optional  (str) operational_mode: <class 'str'>,\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) port_channel_member: <class 'bool'>,\n    },\n  Optional  (str) encapsulation: {\n    Optional  (str) administrative_encapsulation: <class 'str'>,\n    Optional  (str) operational_encapsulation: <class 'str'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) native_vlan_name: <class 'str'>,\n    },\n  Optional  (str) negotiation_of_trunk: <class 'bool'>,\n  Optional  (str) access_vlan: <class 'str'>,\n  Optional  (str) access_vlan_name: <class 'str'>,\n  Optional  (str) voice_vlan: <class 'str'>,\n  Optional  (str) voice_vlan_name: <class 'str'>,\n  Optional  (str) native_vlan_tagging: <class 'bool'>,\n  Optional  (str) private_vlan: {\n    Optional  (str) host_association: <class 'str'>,\n    Optional  (str) mapping: <class 'str'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) native_vlan_tagging: <class 'bool'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) normal_vlans: <class 'str'>,\n    Optional  (str) associations: <class 'str'>,\n    Optional  (str) trunk_mappings: <class 'str'>,\n    Optional  (str) operational: <class 'str'>,\n    },\n  Optional  (str) trunk_vlans: <class 'str'>,\n  Optional  (str) pruning_vlans: <class 'str'>,\n  Optional  (str) capture_mode: <class 'bool'>,\n  Optional  (str) capture_vlans: <class 'str'>,\n  Optional  (str) protected: <class 'bool'>,\n  Optional  (str) unknown_unicast_blocked: <class 'bool'>,\n  Optional  (str) unknown_multicast_blocked: <class 'bool'>,\n  Optional  (str) appliance_trust: <class 'str'>,\n  },\n}", "uid": "show_interfaces_switchport", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L104"}, "iosxe": {"class": "ShowInterfacesSwitchport", "doc": "parser for show interfaces switchport", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'switchport_enable': <class 'bool'>,\n  'switchport_mode': <class 'str'>,\n  Optional  (str) operational_mode: <class 'str'>,\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) port_channel_member: <class 'bool'>,\n    },\n  Optional  (str) encapsulation: {\n    Optional  (str) administrative_encapsulation: <class 'str'>,\n    Optional  (str) operational_encapsulation: <class 'str'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) native_vlan_name: <class 'str'>,\n    },\n  Optional  (str) negotiation_of_trunk: <class 'bool'>,\n  Optional  (str) access_vlan: <class 'str'>,\n  Optional  (str) access_vlan_name: <class 'str'>,\n  Optional  (str) voice_vlan: <class 'str'>,\n  Optional  (str) voice_vlan_name: <class 'str'>,\n  Optional  (str) native_vlan_tagging: <class 'bool'>,\n  Optional  (str) private_vlan: {\n    Optional  (str) host_association: <class 'str'>,\n    Optional  (str) mapping: <class 'str'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) native_vlan_tagging: <class 'bool'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) normal_vlans: <class 'str'>,\n    Optional  (str) associations: <class 'str'>,\n    Optional  (str) trunk_mappings: <class 'str'>,\n    Optional  (str) operational: <class 'str'>,\n    },\n  Optional  (str) trunk_vlans: <class 'str'>,\n  Optional  (str) pruning_vlans: <class 'str'>,\n  Optional  (str) capture_mode: <class 'bool'>,\n  Optional  (str) capture_vlans: <class 'str'>,\n  Optional  (str) protected: <class 'bool'>,\n  Optional  (str) unknown_unicast_blocked: <class 'bool'>,\n  Optional  (str) unknown_multicast_blocked: <class 'bool'>,\n  Optional  (str) appliance_trust: <class 'str'>,\n  },\n}", "uid": "show_interfaces_switchport", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1490"}}, "show interfaces terse": {"junos": {"class": "ShowInterfacesTerse", "doc": " Parser for:\n            - show interfaces terse\n            - show interfaces {interface} terse\n            - show interfaces terse {interface}\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) admin_state: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) protocol: {\n    Any  (str) *: {\n      Optional  (Any) Any  (str) *: {\n        'local': <class 'str'>,\n        Optional  (str) remote: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_interfaces_terse", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_interface.py#L48"}}, "show interfaces terse {interface}": {"junos": {"class": "ShowInterfacesTerseInterface", "doc": " Parser for:\n            - 'show interfaces terse {interface}'\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) admin_state: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) protocol: {\n    Any  (str) *: {\n      Optional  (Any) Any  (str) *: {\n        'local': <class 'str'>,\n        Optional  (str) remote: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_interfaces_terse_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_interface.py#L172"}}, "show interfaces terse | match {interface}": {"junos": {"class": "ShowInterfacesTerseMatch", "doc": " Parser for:\n            - show interfaces terse | match {interface}\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) admin_state: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) protocol: {\n    Any  (str) *: {\n      Optional  (Any) Any  (str) *: {\n        'local': <class 'str'>,\n        Optional  (str) remote: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_interfaces_terse___match_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_interface.py#L157"}}, "show interfaces trunk": {"ios": {"class": "ShowInterfacesTrunk", "doc": "Parser for show interfaces trunk", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'mode': <class 'str'>,\n    'encapsulation': <class 'str'>,\n    'status': <class 'str'>,\n    'native_vlan': <class 'str'>,\n    'vlans_allowed_on_trunk': <class 'str'>,\n    'vlans_allowed_active_in_mgmt_domain': <class 'str'>,\n    'vlans_in_stp_forwarding_not_pruned': <class 'str'>,\n    },\n  },\n}", "uid": "show_interfaces_trunk", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L109"}, "iosxe": {"class": "ShowInterfacesTrunk", "doc": "parser for show interfaces trunk", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'mode': <class 'str'>,\n    'encapsulation': <class 'str'>,\n    'status': <class 'str'>,\n    'native_vlan': <class 'str'>,\n    'vlans_allowed_on_trunk': <class 'str'>,\n    'vlans_allowed_active_in_mgmt_domain': <class 'str'>,\n    'vlans_in_stp_forwarding_not_pruned': <class 'str'>,\n    },\n  },\n}", "uid": "show_interfaces_trunk", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2974"}}, "show interfaces {interface}": {"ios": {"class": "ShowInterfaces", "doc": "parser for show interfaces", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) connected: <class 'bool'>,\n  Optional  (str) description: <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) link_type: <class 'str'>,\n  Optional  (str) media_type: <class 'str'>,\n  'mtu': <class 'int'>,\n  Optional  (str) maximum_active_vcs: <class 'str'>,\n  Optional  (str) vcs_per_vp: <class 'str'>,\n  Optional  (str) vc_idle_disconnect_time: <class 'str'>,\n  Optional  (str) vc_auto_creation: <class 'str'>,\n  Optional  (str) current_vccs: <class 'str'>,\n  Optional  (str) aal5_crc_errors: <class 'int'>,\n  Optional  (str) aal5_oversized_sdus: <class 'int'>,\n  Optional  (str) aal5_sar_timeouts: <class 'int'>,\n  Optional  (str) vaccess_status: <class 'str'>,\n  Optional  (str) vaccess_loopback: <class 'str'>,\n  Optional  (str) base_pppoatm: <class 'str'>,\n  Optional  (str) dtr_pulsed: <class 'str'>,\n  Optional  (str) sub_mtu: <class 'int'>,\n  Optional  (str) medium: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) carrier_delay: <class 'int'>,\n  Optional  (str) carrier_delay_up: <class 'int'>,\n  Optional  (str) carrier_delay_down: <class 'int'>,\n  Optional  (str) keepalive: <class 'int'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) output_hang: <class 'str'>,\n  Optional  (str) autostate: <class 'bool'>,\n  Optional  (str) queues: {\n    Optional  (str) input_queue_size: <class 'int'>,\n    Optional  (str) input_queue_max: <class 'int'>,\n    Optional  (str) input_queue_drops: <class 'int'>,\n    Optional  (str) input_queue_flushes: <class 'int'>,\n    Optional  (str) total_output_drop: <class 'int'>,\n    Optional  (str) queue_strategy: <class 'str'>,\n    Optional  (str) output_queue_size: <class 'int'>,\n    Optional  (str) output_queue_max: <class 'int'>,\n    Optional  (str) threshold: <class 'int'>,\n    Optional  (str) drops: <class 'int'>,\n    },\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_member: <class 'bool'>,\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) active_members: <class 'int'>,\n    Optional  (str) num_of_pf_jumbo_supported_members: <class 'int'>,\n    },\n  'bandwidth': <class 'int'>,\n  Optional  (str) counters: {\n    Optional  (str) rate: {\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      },\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) out_interface_resets: <class 'int'>,\n    Optional  (str) out_unknown_protocl_drops: <class 'int'>,\n    Optional  (str) out_babbles: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    Optional  (str) out_buffer_failure: <class 'int'>,\n    Optional  (str) out_buffers_swapped: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    },\n  Optional  (str) encapsulations: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) native_vlan: <class 'int'>,\n    },\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L45"}, "iosxe": {"class": "ShowInterfaces", "doc": "parser for show interfaces\n                  show interfaces <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) connected: <class 'bool'>,\n  Optional  (str) description: <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) link_type: <class 'str'>,\n  Optional  (str) media_type: <class 'str'>,\n  'mtu': <class 'int'>,\n  Optional  (str) maximum_active_vcs: <class 'str'>,\n  Optional  (str) vcs_per_vp: <class 'str'>,\n  Optional  (str) vc_idle_disconnect_time: <class 'str'>,\n  Optional  (str) vc_auto_creation: <class 'str'>,\n  Optional  (str) current_vccs: <class 'str'>,\n  Optional  (str) aal5_crc_errors: <class 'int'>,\n  Optional  (str) aal5_oversized_sdus: <class 'int'>,\n  Optional  (str) aal5_sar_timeouts: <class 'int'>,\n  Optional  (str) vaccess_status: <class 'str'>,\n  Optional  (str) vaccess_loopback: <class 'str'>,\n  Optional  (str) base_pppoatm: <class 'str'>,\n  Optional  (str) dtr_pulsed: <class 'str'>,\n  Optional  (str) sub_mtu: <class 'int'>,\n  Optional  (str) medium: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) delay: <class 'int'>,\n  Optional  (str) carrier_delay: <class 'int'>,\n  Optional  (str) carrier_delay_up: <class 'int'>,\n  Optional  (str) carrier_delay_down: <class 'int'>,\n  Optional  (str) keepalive: <class 'int'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) output_hang: <class 'str'>,\n  Optional  (str) autostate: <class 'bool'>,\n  Optional  (str) queues: {\n    Optional  (str) input_queue_size: <class 'int'>,\n    Optional  (str) input_queue_max: <class 'int'>,\n    Optional  (str) input_queue_drops: <class 'int'>,\n    Optional  (str) input_queue_flushes: <class 'int'>,\n    Optional  (str) total_output_drop: <class 'int'>,\n    Optional  (str) queue_strategy: <class 'str'>,\n    Optional  (str) output_queue_size: <class 'int'>,\n    Optional  (str) output_queue_max: <class 'int'>,\n    Optional  (str) threshold: <class 'int'>,\n    Optional  (str) drops: <class 'int'>,\n    },\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_member: <class 'bool'>,\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) active_members: <class 'int'>,\n    Optional  (str) num_of_pf_jumbo_supported_members: <class 'int'>,\n    },\n  'bandwidth': <class 'int'>,\n  Optional  (str) counters: {\n    Optional  (str) rate: {\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      Optional  (str) in_rate_bps: <class 'int'>,\n      Optional  (str) in_rate_pps: <class 'int'>,\n      Optional  (str) out_rate_bps: <class 'int'>,\n      Optional  (str) out_rate_pps: <class 'int'>,\n      },\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_watchdog: <class 'int'>,\n    Optional  (str) in_with_dribble: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) in_no_buffer: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_mac_pause_frames: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_collision: <class 'int'>,\n    Optional  (str) out_interface_resets: <class 'int'>,\n    Optional  (str) out_unknown_protocl_drops: <class 'int'>,\n    Optional  (str) out_babbles: <class 'int'>,\n    Optional  (str) out_deferred: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) out_late_collision: <class 'int'>,\n    Optional  (str) out_lost_carrier: <class 'int'>,\n    Optional  (str) out_no_carrier: <class 'int'>,\n    Optional  (str) out_babble: <class 'int'>,\n    Optional  (str) out_mac_pause_frames: <class 'int'>,\n    Optional  (str) out_buffer_failure: <class 'int'>,\n    Optional  (str) out_buffers_swapped: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    },\n  Optional  (str) encapsulations: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) native_vlan: <class 'int'>,\n    },\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L195"}, "iosxr": {"class": "ShowInterfaces", "doc": "parser for show interfaces\n                  show interfaces <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) line_protocol: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) interface_state_transitions: <class 'int'>,\n  'type': <class 'str'>,\n  Optional  (str) mac_address: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  Optional  (str) layer2: <class 'bool'>,\n  Optional  (str) description: <class 'str'>,\n  'mtu': <class 'int'>,\n  'bandwidth': <class 'int'>,\n  Optional  (str) bandwidth_max: <class 'int'>,\n  Optional  (str) port_speed: <class 'str'>,\n  Optional  (str) duplex_mode: <class 'str'>,\n  Optional  (str) link_type: <class 'str'>,\n  Optional  (str) media_type: <class 'str'>,\n  Optional  (str) reliability: <class 'str'>,\n  Optional  (str) txload: <class 'str'>,\n  Optional  (str) rxload: <class 'str'>,\n  Optional  (str) carrier_delay_up: <class 'int'>,\n  Optional  (str) carrier_delay_down: <class 'int'>,\n  Optional  (str) auto_negotiate: <class 'bool'>,\n  Optional  (str) arp_type: <class 'str'>,\n  Optional  (str) arp_timeout: <class 'str'>,\n  Optional  (str) loopback: <class 'str'>,\n  Optional  (str) last_link_flapped: <class 'str'>,\n  Optional  (str) last_input: <class 'str'>,\n  Optional  (str) last_output: <class 'str'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      },\n    },\n  Optional  (str) encapsulations: {\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) first_dot1q: <class 'str'>,\n    Optional  (str) second_dot1q: <class 'str'>,\n    Optional  (str) outer_match: <class 'str'>,\n    Optional  (str) ethertype: <class 'str'>,\n    Optional  (str) mac_match: <class 'str'>,\n    Optional  (str) dest: <class 'str'>,\n    },\n  Optional  (str) flow_control: {\n    Optional  (str) receive: <class 'bool'>,\n    Optional  (str) send: <class 'bool'>,\n    },\n  Optional  (str) port_channel: {\n    Optional  (str) member_count: <class 'int'>,\n    Optional  (str) members: {\n      Any  (str) *: {\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) duplex_mode: <class 'str'>,\n        Optional  (str) speed: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) counters: {\n    Optional  (str) rate: {\n      Optional  (str) load_interval: <class 'int'>,\n      Optional  (str) in_rate: <class 'int'>,\n      Optional  (str) in_rate_pkts: <class 'int'>,\n      Optional  (str) out_rate: <class 'int'>,\n      Optional  (str) out_rate_pkts: <class 'int'>,\n      },\n    Optional  (str) in_total_drops: <class 'int'>,\n    Optional  (str) in_unknown_protos: <class 'int'>,\n    Optional  (str) in_octets: <class 'int'>,\n    Optional  (str) in_pkts: <class 'int'>,\n    Optional  (str) in_multicast_pkts: <class 'int'>,\n    Optional  (str) in_broadcast_pkts: <class 'int'>,\n    Optional  (str) in_runts: <class 'int'>,\n    Optional  (str) in_giants: <class 'int'>,\n    Optional  (str) in_throttles: <class 'int'>,\n    Optional  (str) in_parity: <class 'int'>,\n    Optional  (str) in_frame_errors: <class 'int'>,\n    Optional  (str) in_crc_errors: <class 'int'>,\n    Optional  (str) in_frame: <class 'int'>,\n    Optional  (str) in_overrun: <class 'int'>,\n    Optional  (str) in_ignored: <class 'int'>,\n    Optional  (str) in_errors: <class 'int'>,\n    Optional  (str) in_abort: <class 'int'>,\n    Optional  (str) in_drops: <class 'int'>,\n    Optional  (str) in_queue_drops: <class 'int'>,\n    Optional  (str) out_pkts: <class 'int'>,\n    Optional  (str) out_octets: <class 'int'>,\n    Optional  (str) out_total_drops: <class 'int'>,\n    Optional  (str) out_broadcast_pkts: <class 'int'>,\n    Optional  (str) out_multicast_pkts: <class 'int'>,\n    Optional  (str) out_errors: <class 'int'>,\n    Optional  (str) out_underruns: <class 'int'>,\n    Optional  (str) out_applique: <class 'int'>,\n    Optional  (str) out_resets: <class 'int'>,\n    Optional  (str) out_buffer_failure: <class 'int'>,\n    Optional  (str) out_buffers_swapped: <class 'int'>,\n    Optional  (str) out_drops: <class 'int'>,\n    Optional  (str) out_queue_drops: <class 'int'>,\n    Optional  (str) last_clear: <class 'str'>,\n    Optional  (str) carrier_transitions: <class 'int'>,\n    },\n  },\n}", "uid": "show_interfaces_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L2371"}}, "show interfaces {interface} accounting": {"ios": {"class": "ShowInterfacesAccounting", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  'accounting': {\n    Any  (str) *: {\n      'pkts_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'chars_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_interface_accounting", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L90"}, "iosxe": {"class": "ShowInterfacesAccounting", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  'accounting': {\n    Any  (str) *: {\n      'pkts_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'chars_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_interface_accounting", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L3116"}, "iosxr": {"class": "ShowInterfacesAccounting", "doc": "Parser for:\n        show interfaces accounting\n        show interfaces <interface> accounting\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'accounting': {\n    Any  (str) *: {\n      'pkts_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'chars_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_interface_accounting", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L2207"}}, "show interfaces {interface} counters": {"ios": {"class": "ShowInterfacesCounters", "doc": "Parser for show interfaces <interface> counters", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Any  (str) *: {\n      'octets': <class 'int'>,\n      'ucast_pkts': <class 'int'>,\n      'mcast_pkts': <class 'int'>,\n      'bcast_pkts': <class 'int'>,\n      'name': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_interface_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L99"}, "iosxe": {"class": "ShowInterfacesCounters", "doc": "parser for show interfaces <WORD> counters", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Any  (str) *: {\n      'octets': <class 'int'>,\n      'ucast_pkts': <class 'int'>,\n      'mcast_pkts': <class 'int'>,\n      'bcast_pkts': <class 'int'>,\n      'name': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_interface_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L3055"}}, "show interfaces {interface} description": {"ios": {"class": "ShowInterfacesDescription", "doc": "Parser for:\n        show interfaces <interface> description\n        show interfaces description", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'status': <class 'str'>,\n    'protocol': <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    },\n  },\n}", "uid": "show_interfaces_interface_description", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L121"}, "iosxe": {"class": "ShowInterfacesDescription", "doc": "parser for show interfaces description\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'status': <class 'str'>,\n    'protocol': <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    },\n  },\n}", "uid": "show_interfaces_interface_description", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L3280"}, "iosxr": {"class": "ShowInterfacesDescription", "doc": "parser for show interface description\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'status': <class 'str'>,\n    'protocol': <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    },\n  },\n}", "uid": "show_interfaces_interface_description", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L2968"}}, "show interfaces {interface} stats": {"ios": {"class": "ShowInterfacesStats", "doc": "Parser for:\n        show interfaces <interface> stats\n        show interfaces stats", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'switching_path': {\n    Any  (str) *: {\n      'pkts_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'chars_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_interface_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L114"}, "iosxe": {"class": "ShowInterfacesStats", "doc": "Parser for :\n        show interfaces <interface> stats\n        show interfaces stats", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'switching_path': {\n    Any  (str) *: {\n      'pkts_in': <class 'int'>,\n      'pkts_out': <class 'int'>,\n      'chars_in': <class 'int'>,\n      'chars_out': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_interfaces_interface_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L3213"}}, "show interfaces {interface} switchport": {"ios": {"class": "ShowInterfacesSwitchport", "doc": "Parser for show interfaces switchport", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'switchport_enable': <class 'bool'>,\n  'switchport_mode': <class 'str'>,\n  Optional  (str) operational_mode: <class 'str'>,\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) port_channel_member: <class 'bool'>,\n    },\n  Optional  (str) encapsulation: {\n    Optional  (str) administrative_encapsulation: <class 'str'>,\n    Optional  (str) operational_encapsulation: <class 'str'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) native_vlan_name: <class 'str'>,\n    },\n  Optional  (str) negotiation_of_trunk: <class 'bool'>,\n  Optional  (str) access_vlan: <class 'str'>,\n  Optional  (str) access_vlan_name: <class 'str'>,\n  Optional  (str) voice_vlan: <class 'str'>,\n  Optional  (str) voice_vlan_name: <class 'str'>,\n  Optional  (str) native_vlan_tagging: <class 'bool'>,\n  Optional  (str) private_vlan: {\n    Optional  (str) host_association: <class 'str'>,\n    Optional  (str) mapping: <class 'str'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) native_vlan_tagging: <class 'bool'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) normal_vlans: <class 'str'>,\n    Optional  (str) associations: <class 'str'>,\n    Optional  (str) trunk_mappings: <class 'str'>,\n    Optional  (str) operational: <class 'str'>,\n    },\n  Optional  (str) trunk_vlans: <class 'str'>,\n  Optional  (str) pruning_vlans: <class 'str'>,\n  Optional  (str) capture_mode: <class 'bool'>,\n  Optional  (str) capture_vlans: <class 'str'>,\n  Optional  (str) protected: <class 'bool'>,\n  Optional  (str) unknown_unicast_blocked: <class 'bool'>,\n  Optional  (str) unknown_multicast_blocked: <class 'bool'>,\n  Optional  (str) appliance_trust: <class 'str'>,\n  },\n}", "uid": "show_interfaces_interface_switchport", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L104"}, "iosxe": {"class": "ShowInterfacesSwitchport", "doc": "parser for show interfaces switchport", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'switchport_enable': <class 'bool'>,\n  'switchport_mode': <class 'str'>,\n  Optional  (str) operational_mode: <class 'str'>,\n  Optional  (str) port_channel: {\n    Optional  (str) port_channel_int: <class 'str'>,\n    Optional  (str) port_channel_member_intfs: <class 'list'>,\n    Optional  (str) port_channel_member: <class 'bool'>,\n    },\n  Optional  (str) encapsulation: {\n    Optional  (str) administrative_encapsulation: <class 'str'>,\n    Optional  (str) operational_encapsulation: <class 'str'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) native_vlan_name: <class 'str'>,\n    },\n  Optional  (str) negotiation_of_trunk: <class 'bool'>,\n  Optional  (str) access_vlan: <class 'str'>,\n  Optional  (str) access_vlan_name: <class 'str'>,\n  Optional  (str) voice_vlan: <class 'str'>,\n  Optional  (str) voice_vlan_name: <class 'str'>,\n  Optional  (str) native_vlan_tagging: <class 'bool'>,\n  Optional  (str) private_vlan: {\n    Optional  (str) host_association: <class 'str'>,\n    Optional  (str) mapping: <class 'str'>,\n    Optional  (str) native_vlan: <class 'str'>,\n    Optional  (str) native_vlan_tagging: <class 'bool'>,\n    Optional  (str) encapsulation: <class 'str'>,\n    Optional  (str) normal_vlans: <class 'str'>,\n    Optional  (str) associations: <class 'str'>,\n    Optional  (str) trunk_mappings: <class 'str'>,\n    Optional  (str) operational: <class 'str'>,\n    },\n  Optional  (str) trunk_vlans: <class 'str'>,\n  Optional  (str) pruning_vlans: <class 'str'>,\n  Optional  (str) capture_mode: <class 'bool'>,\n  Optional  (str) capture_vlans: <class 'str'>,\n  Optional  (str) protected: <class 'bool'>,\n  Optional  (str) unknown_unicast_blocked: <class 'bool'>,\n  Optional  (str) unknown_multicast_blocked: <class 'bool'>,\n  Optional  (str) appliance_trust: <class 'str'>,\n  },\n}", "uid": "show_interfaces_interface_switchport", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1490"}}, "show interfaces {interface} terse": {"junos": {"class": "ShowInterfacesTerse", "doc": " Parser for:\n            - show interfaces terse\n            - show interfaces {interface} terse\n            - show interfaces terse {interface}\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  Optional  (str) link_state: <class 'str'>,\n  Optional  (str) admin_state: <class 'str'>,\n  Optional  (str) phys_address: <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) protocol: {\n    Any  (str) *: {\n      Optional  (Any) Any  (str) *: {\n        'local': <class 'str'>,\n        Optional  (str) remote: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_interfaces_interface_terse", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_interface.py#L48"}}, "show inventory": {"asa": {"class": "ShowInventory", "doc": "Parser for\n        * show interface summary\n    ", "module_name": "show_inventory", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'description': <class 'str'>,\n  'pid': <class 'str'>,\n  'vid': <class 'str'>,\n  'sn': <class 'str'>,\n  },\n}", "uid": "show_inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_inventory.py#L34"}, "ios": {"c7600": {"class": "ShowInventory", "doc": "\n    Parser for command:\n        * show inventory\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'index': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'descr': <class 'str'>,\n    Optional  (str) pid: <class 'str'>,\n    Optional  (str) vid: <class 'str'>,\n    Optional  (str) sn: <class 'str'>,\n    },\n  },\n}", "uid": "show_inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py#L36"}, "cat6k": {"class": "ShowInventory", "doc": "\n    Parser for:\n        * show inventory\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'index': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'descr': <class 'str'>,\n    Optional  (str) pid: <class 'str'>,\n    Optional  (str) vid: <class 'str'>,\n    Optional  (str) sn: <class 'str'>,\n    },\n  },\n}", "uid": "show_inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py#L826"}, "class": "ShowInventory", "doc": "\n    Parser for:\n        * show inventory\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) main: {\n  Optional  (str) swstack: <class 'bool'>,\n  Optional  (str) chassis: {\n    Any  (str) *: {\n      Optional  (str) name: <class 'str'>,\n      Optional  (str) descr: <class 'str'>,\n      Optional  (str) pid: <class 'str'>,\n      Optional  (str) vid: <class 'str'>,\n      Optional  (str) sn: <class 'str'>,\n      },\n    },\n  },\nOptional  (str) slot: {\n  Any  (str) *: {\n    Optional  (str) rp: {\n      Any  (str) *: {\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) swstack_power: <class 'str'>,\n        Optional  (str) swstack_power_sn: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) descr: <class 'str'>,\n              Optional  (str) pid: <class 'str'>,\n              Optional  (str) vid: <class 'str'>,\n              Optional  (str) sn: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) lc: {\n      Any  (str) *: {\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) swstack_power: <class 'str'>,\n        Optional  (str) swstack_power_sn: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) descr: <class 'str'>,\n              Optional  (str) pid: <class 'str'>,\n              Optional  (str) vid: <class 'str'>,\n              Optional  (str) sn: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) other: {\n      Any  (str) *: {\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) swstack_power: <class 'str'>,\n        Optional  (str) swstack_power_sn: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) descr: <class 'str'>,\n              Optional  (str) pid: <class 'str'>,\n              Optional  (str) vid: <class 'str'>,\n              Optional  (str) sn: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L106"}, "iosxe": {"c9300": {"class": "ShowInventory", "doc": "\n    Parser for :\n        * show inventory\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'index': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'descr': <class 'str'>,\n    Optional  (str) pid: <class 'str'>,\n    Optional  (str) vid: <class 'str'>,\n    Optional  (str) sn: <class 'str'>,\n    },\n  },\n}", "uid": "show_inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9300/show_platform.py#L38"}, "c9500": {"class": "ShowInventory", "doc": " Parser for:\n        * 'show inventory'\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'index': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'descr': <class 'str'>,\n    Optional  (str) pid: <class 'str'>,\n    Optional  (str) vid: <class 'str'>,\n    Optional  (str) sn: <class 'str'>,\n    },\n  },\n}", "uid": "show_inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_platform.py#L728"}, "class": "ShowInventory", "doc": " Parser for:\n        * 'show inventory'\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) main: {\n  Optional  (str) swstack: <class 'bool'>,\n  Optional  (str) chassis: {\n    Any  (str) *: {\n      Optional  (str) name: <class 'str'>,\n      Optional  (str) descr: <class 'str'>,\n      Optional  (str) pid: <class 'str'>,\n      Optional  (str) vid: <class 'str'>,\n      Optional  (str) sn: <class 'str'>,\n      },\n    },\n  },\nOptional  (str) slot: {\n  Any  (str) *: {\n    Optional  (str) rp: {\n      Any  (str) *: {\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) swstack_power: <class 'str'>,\n        Optional  (str) swstack_power_sn: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) descr: <class 'str'>,\n              Optional  (str) pid: <class 'str'>,\n              Optional  (str) vid: <class 'str'>,\n              Optional  (str) sn: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) lc: {\n      Any  (str) *: {\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) swstack_power: <class 'str'>,\n        Optional  (str) swstack_power_sn: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) descr: <class 'str'>,\n              Optional  (str) pid: <class 'str'>,\n              Optional  (str) vid: <class 'str'>,\n              Optional  (str) sn: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) other: {\n      Any  (str) *: {\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) descr: <class 'str'>,\n        Optional  (str) pid: <class 'str'>,\n        Optional  (str) vid: <class 'str'>,\n        Optional  (str) sn: <class 'str'>,\n        Optional  (str) swstack_power: <class 'str'>,\n        Optional  (str) swstack_power_sn: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) descr: <class 'str'>,\n              Optional  (str) pid: <class 'str'>,\n              Optional  (str) vid: <class 'str'>,\n              Optional  (str) sn: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1728"}, "iosxr": {"class": "ShowInventory", "doc": "Parser for show inventory", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'module_name': {\n  Any  (str) *: {\n    'descr': <class 'str'>,\n    'pid': <class 'str'>,\n    'vid': <class 'str'>,\n    Optional  (str) sn: <class 'str'>,\n    },\n  },\n}", "uid": "show_inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L736"}, "nxos": {"class": "ShowInventory", "doc": "Parser for show inventory", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'name': {\n  Any  (str) *: {\n    'description': <class 'str'>,\n    'slot': <class 'str'>,\n    Optional  (str) pid: <class 'str'>,\n    Optional  (str) vid: <class 'str'>,\n    Optional  (str) serial_number: <class 'str'>,\n    },\n  },\n}", "uid": "show_inventory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L382"}}, "show ip access-lists": {"iosxe": {"class": "ShowIpAccessLists", "doc": "Parser for show ip access-lists\n                  show ip access-lists <acl>", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) lsap: <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            Optional  (str) dscp: <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) precedence_code: <class 'int'>,\n            Optional  (str) destination_network: {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'int'>,\n                },\n              },\n            Optional  (str) msg_type: <class 'str'>,\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_access-lists", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L681"}}, "show ip access-lists {acl}": {"iosxe": {"class": "ShowIpAccessLists", "doc": "Parser for show ip access-lists\n                  show ip access-lists <acl>", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) lsap: <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            Optional  (str) dscp: <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) precedence_code: <class 'int'>,\n            Optional  (str) destination_network: {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'int'>,\n                },\n              },\n            Optional  (str) msg_type: <class 'str'>,\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_access-lists_acl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L681"}}, "show ip aliases": {"iosxe": {"class": "ShowIPAlias", "doc": " \n    Parser for:\n    show ip aliases \n    show ip aliases vrf {vrf}\n    ", "module_name": "show_ip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'address_type': <class 'str'>,\n        'ip_address': <class 'str'>,\n        Optional  (str) port: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_aliases", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip.py#L46"}}, "show ip aliases default-vrf": {"iosxe": {"class": "ShowIPAliasDefaultVrf", "doc": " \n    Parser for:\n\tshow ip aliases default-vrf\n\t", "module_name": "show_ip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'address_type': <class 'str'>,\n        'ip_address': <class 'str'>,\n        Optional  (str) port: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_aliases_default-vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip.py#L101"}}, "show ip aliases vrf {vrf}": {"iosxe": {"class": "ShowIPAlias", "doc": " \n    Parser for:\n    show ip aliases \n    show ip aliases vrf {vrf}\n    ", "module_name": "show_ip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'address_type': <class 'str'>,\n        'ip_address': <class 'str'>,\n        Optional  (str) port: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_aliases_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip.py#L46"}}, "show ip arp": {"ios": {"class": "ShowIpArp", "doc": " Parser for show arp\n                  show ip arp <WROD>\n                  show ip arp vrf <vrf>\n                  show ip arp vrf <vrf> <WROD> ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_arp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L31"}, "iosxe": {"class": "ShowIpArp", "doc": "Parser for 'show ip arp,  show ip arp vrf <vrf>", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_arp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L136"}, "nxos": {"class": "ShowIpArp", "doc": "Parser for:\n\t\tshow ip arp\n\t\tshow ip arp vrf {vrf}\n\t\tshow ip arp vrf all\n\t", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) statistics: {\n  Optional  (str) entries_total: <class 'int'>,\n  },\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'physical_interface': <class 'str'>,\n          Optional  (str) encap_type: <class 'str'>,\n          Optional  (str) flags: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_arp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L54"}}, "show ip arp detail": {"nxos": {"class": "ShowIpArpDetailVrfAll", "doc": "Parser for:\n\t\tshow ip arp detail vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'physical_interface': <class 'str'>,\n          Optional  (str) flag: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_arp_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L181"}}, "show ip arp detail vrf {vrf}": {"nxos": {"class": "ShowIpArpDetailVrfAll", "doc": "Parser for:\n\t\tshow ip arp detail vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'physical_interface': <class 'str'>,\n          Optional  (str) flag: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_arp_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L181"}}, "show ip arp statistics": {"nxos": {"class": "ShowIpArpstatisticsVrfAll", "doc": "Parser for:\n\t\tshow ip arp statistics vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'statistics': {\n  'sent': {\n    'total': <class 'int'>,\n    'requests': <class 'int'>,\n    'replies': <class 'int'>,\n    'l2_requests': <class 'int'>,\n    'l2_replies': <class 'int'>,\n    'gratuitous': <class 'int'>,\n    'tunneled': <class 'int'>,\n    'dropped': <class 'int'>,\n    'drops_details': {\n      'mbuf_operation_failed': <class 'int'>,\n      Optional  (str) context_not_created: <class 'int'>,\n      Optional  (str) invalid_context: <class 'int'>,\n      Optional  (str) invalid_ifindex: <class 'int'>,\n      Optional  (str) invalid_src_ip: <class 'int'>,\n      Optional  (str) invalid_dest_ip: <class 'int'>,\n      Optional  (str) destnination_is_our_own_ip: <class 'int'>,\n      Optional  (str) unattached_ip: <class 'int'>,\n      Optional  (str) adjacency_couldnt_be_added: <class 'int'>,\n      Optional  (str) null_source_ip: <class 'int'>,\n      Optional  (str) null_source_mac: <class 'int'>,\n      Optional  (str) client_enqueue_failed: <class 'int'>,\n      Optional  (str) dest_not_reachable_for_proxy_arp: <class 'int'>,\n      Optional  (str) dest_unreachable_for_enhanced_proxy: <class 'int'>,\n      Optional  (str) destnination_on_l2_port_tracked: <class 'int'>,\n      Optional  (str) invalid_local_proxy_arp: <class 'int'>,\n      Optional  (str) invalid_proxy_arp: <class 'int'>,\n      Optional  (str) vip_is_not_active: <class 'int'>,\n      Optional  (str) arp_refresh_skipped_over_core_and_flooded: <class 'int'>,\n      },\n    },\n  'received': {\n    'total': <class 'int'>,\n    'requests': <class 'int'>,\n    'replies': <class 'int'>,\n    'l2_requests': <class 'int'>,\n    'l2_replies': <class 'int'>,\n    'proxy_arp': <class 'int'>,\n    'local_proxy_arp': <class 'int'>,\n    Optional  (str) enhanced_proxy_arp: <class 'int'>,\n    Optional  (str) anycast_proxy_arp: <class 'int'>,\n    Optional  (str) l2_port_track_proxy_arp: <class 'int'>,\n    'tunneled': <class 'int'>,\n    Optional  (str) fastpath: <class 'int'>,\n    Optional  (str) snooped: <class 'int'>,\n    'dropped': <class 'int'>,\n    Optional  (str) dropped_server_port: <class 'int'>,\n    'drops_details': {\n      'context_not_created': <class 'int'>,\n      'invalid_context': <class 'int'>,\n      Optional  (str) invalid_hardwaretype: <class 'int'>,\n      'invalid_layer2_address_length': <class 'int'>,\n      'invalid_source_ip_address': <class 'int'>,\n      'no_mem_to_create_per_intf_structure': <class 'int'>,\n      'invalid_layer3_address_length': <class 'int'>,\n      'source_address_mismatch_with_subnet': <class 'int'>,\n      'directed_broadcast_source': <class 'int'>,\n      'invalid_destination_ip_address': <class 'int'>,\n      'non_local_destination_ip_address': <class 'int'>,\n      'invalid_source_mac_address': <class 'int'>,\n      'source_mac_address_is_our_own': <class 'int'>,\n      'received_before_arp_initialization': <class 'int'>,\n      'l2_packet_on_untrusted_l2_port': <class 'int'>,\n      'packet_with_vip_on_standby_fhrp': <class 'int'>,\n      'requests_came_for_exising_entries': <class 'int'>,\n      'requests_came_on_a_l2_interface': <class 'int'>,\n      'l2fm_query_failed_for_a_l2address': <class 'int'>,\n      'dropping_due_to_tunneling_failures': <class 'int'>,\n      Optional  (str) glean_requests_recv_count: <class 'int'>,\n      Optional  (str) arp_refresh_requests_received_from_clients: <class 'int'>,\n      Optional  (str) number_of_signals_received_from_l2rib: <class 'int'>,\n      'non_active_fhrp_dest_ip': <class 'int'>,\n      'grat_arp_received_on_proxy': <class 'int'>,\n      'invalid_protocol_packet': <class 'int'>,\n      'appeared_on_a_wrong_interface': <class 'int'>,\n      'incorrect_length': <class 'int'>,\n      Optional  (str) source_ip_address_is_our_own: <class 'int'>,\n      },\n    },\n  'adjacency': {\n    'adjacency_adds': <class 'int'>,\n    'adjacency_deletes': <class 'int'>,\n    'adjacency_timeouts': <class 'int'>,\n    Optional  (str) failed_due_to_limits: <class 'int'>,\n    },\n  },\n}", "uid": "show_ip_arp_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L427"}}, "show ip arp statistics vrf {vrf}": {"nxos": {"class": "ShowIpArpstatisticsVrfAll", "doc": "Parser for:\n\t\tshow ip arp statistics vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'statistics': {\n  'sent': {\n    'total': <class 'int'>,\n    'requests': <class 'int'>,\n    'replies': <class 'int'>,\n    'l2_requests': <class 'int'>,\n    'l2_replies': <class 'int'>,\n    'gratuitous': <class 'int'>,\n    'tunneled': <class 'int'>,\n    'dropped': <class 'int'>,\n    'drops_details': {\n      'mbuf_operation_failed': <class 'int'>,\n      Optional  (str) context_not_created: <class 'int'>,\n      Optional  (str) invalid_context: <class 'int'>,\n      Optional  (str) invalid_ifindex: <class 'int'>,\n      Optional  (str) invalid_src_ip: <class 'int'>,\n      Optional  (str) invalid_dest_ip: <class 'int'>,\n      Optional  (str) destnination_is_our_own_ip: <class 'int'>,\n      Optional  (str) unattached_ip: <class 'int'>,\n      Optional  (str) adjacency_couldnt_be_added: <class 'int'>,\n      Optional  (str) null_source_ip: <class 'int'>,\n      Optional  (str) null_source_mac: <class 'int'>,\n      Optional  (str) client_enqueue_failed: <class 'int'>,\n      Optional  (str) dest_not_reachable_for_proxy_arp: <class 'int'>,\n      Optional  (str) dest_unreachable_for_enhanced_proxy: <class 'int'>,\n      Optional  (str) destnination_on_l2_port_tracked: <class 'int'>,\n      Optional  (str) invalid_local_proxy_arp: <class 'int'>,\n      Optional  (str) invalid_proxy_arp: <class 'int'>,\n      Optional  (str) vip_is_not_active: <class 'int'>,\n      Optional  (str) arp_refresh_skipped_over_core_and_flooded: <class 'int'>,\n      },\n    },\n  'received': {\n    'total': <class 'int'>,\n    'requests': <class 'int'>,\n    'replies': <class 'int'>,\n    'l2_requests': <class 'int'>,\n    'l2_replies': <class 'int'>,\n    'proxy_arp': <class 'int'>,\n    'local_proxy_arp': <class 'int'>,\n    Optional  (str) enhanced_proxy_arp: <class 'int'>,\n    Optional  (str) anycast_proxy_arp: <class 'int'>,\n    Optional  (str) l2_port_track_proxy_arp: <class 'int'>,\n    'tunneled': <class 'int'>,\n    Optional  (str) fastpath: <class 'int'>,\n    Optional  (str) snooped: <class 'int'>,\n    'dropped': <class 'int'>,\n    Optional  (str) dropped_server_port: <class 'int'>,\n    'drops_details': {\n      'context_not_created': <class 'int'>,\n      'invalid_context': <class 'int'>,\n      Optional  (str) invalid_hardwaretype: <class 'int'>,\n      'invalid_layer2_address_length': <class 'int'>,\n      'invalid_source_ip_address': <class 'int'>,\n      'no_mem_to_create_per_intf_structure': <class 'int'>,\n      'invalid_layer3_address_length': <class 'int'>,\n      'source_address_mismatch_with_subnet': <class 'int'>,\n      'directed_broadcast_source': <class 'int'>,\n      'invalid_destination_ip_address': <class 'int'>,\n      'non_local_destination_ip_address': <class 'int'>,\n      'invalid_source_mac_address': <class 'int'>,\n      'source_mac_address_is_our_own': <class 'int'>,\n      'received_before_arp_initialization': <class 'int'>,\n      'l2_packet_on_untrusted_l2_port': <class 'int'>,\n      'packet_with_vip_on_standby_fhrp': <class 'int'>,\n      'requests_came_for_exising_entries': <class 'int'>,\n      'requests_came_on_a_l2_interface': <class 'int'>,\n      'l2fm_query_failed_for_a_l2address': <class 'int'>,\n      'dropping_due_to_tunneling_failures': <class 'int'>,\n      Optional  (str) glean_requests_recv_count: <class 'int'>,\n      Optional  (str) arp_refresh_requests_received_from_clients: <class 'int'>,\n      Optional  (str) number_of_signals_received_from_l2rib: <class 'int'>,\n      'non_active_fhrp_dest_ip': <class 'int'>,\n      'grat_arp_received_on_proxy': <class 'int'>,\n      'invalid_protocol_packet': <class 'int'>,\n      'appeared_on_a_wrong_interface': <class 'int'>,\n      'incorrect_length': <class 'int'>,\n      Optional  (str) source_ip_address_is_our_own: <class 'int'>,\n      },\n    },\n  'adjacency': {\n    'adjacency_adds': <class 'int'>,\n    'adjacency_deletes': <class 'int'>,\n    'adjacency_timeouts': <class 'int'>,\n    Optional  (str) failed_due_to_limits: <class 'int'>,\n    },\n  },\n}", "uid": "show_ip_arp_statistics_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L427"}}, "show ip arp summary": {"ios": {"class": "ShowIpArpSummary", "doc": "Parser for show ip arp summary", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\n'incomp_entries': <class 'int'>,\n}", "uid": "show_ip_arp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L54"}, "iosxe": {"class": "ShowIpArpSummary", "doc": "Parser for:\n        show ip arp summary\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\n'incomp_entries': <class 'int'>,\n}", "uid": "show_ip_arp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L164"}, "nxos": {"class": "ShowIpArpSummaryVrfAll", "doc": "Parser for:\n\t\tshow ip arp summary vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'resolved': <class 'int'>,\n'incomplete': <class 'int'>,\n'throttled': <class 'int'>,\n'unknown': <class 'int'>,\n'total': <class 'int'>,\n}", "uid": "show_ip_arp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L267"}}, "show ip arp summary vrf {vrf}": {"nxos": {"class": "ShowIpArpSummaryVrfAll", "doc": "Parser for:\n\t\tshow ip arp summary vrf all\n\t\tparser class - implements detail parsing mechanisms for cli,xml and yang output.\n\t", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'resolved': <class 'int'>,\n'incomplete': <class 'int'>,\n'throttled': <class 'int'>,\n'unknown': <class 'int'>,\n'total': <class 'int'>,\n}", "uid": "show_ip_arp_summary_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L267"}}, "show ip arp vrf {vrf}": {"ios": {"class": "ShowIpArp", "doc": " Parser for show arp\n                  show ip arp <WROD>\n                  show ip arp vrf <vrf>\n                  show ip arp vrf <vrf> <WROD> ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_arp_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L31"}, "iosxe": {"class": "ShowIpArp", "doc": "Parser for 'show ip arp,  show ip arp vrf <vrf>", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_arp_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L136"}, "nxos": {"class": "ShowIpArp", "doc": "Parser for:\n\t\tshow ip arp\n\t\tshow ip arp vrf {vrf}\n\t\tshow ip arp vrf all\n\t", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) statistics: {\n  Optional  (str) entries_total: <class 'int'>,\n  },\n'interfaces': {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'age': <class 'str'>,\n          'origin': <class 'str'>,\n          'physical_interface': <class 'str'>,\n          Optional  (str) encap_type: <class 'str'>,\n          Optional  (str) flags: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_arp_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_arp.py#L54"}}, "show ip arp vrf {vrf} {intf_or_ip}": {"ios": {"class": "ShowIpArp", "doc": " Parser for show arp\n                  show ip arp <WROD>\n                  show ip arp vrf <vrf>\n                  show ip arp vrf <vrf> <WROD> ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_arp_vrf_vrf_intf_or_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L31"}}, "show ip arp {intf_or_ip}": {"ios": {"class": "ShowIpArp", "doc": " Parser for show arp\n                  show ip arp <WROD>\n                  show ip arp vrf <vrf>\n                  show ip arp vrf <vrf> <WROD> ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_static_table: {\n  Any  (str) *: {\n    'ip_address': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'encap_type': <class 'str'>,\n    'age': <class 'str'>,\n    'protocol': <class 'str'>,\n    },\n  },\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'ipv4': {\n      'neighbors': {\n        Any  (str) *: {\n          'ip': <class 'str'>,\n          'link_layer_address': <class 'str'>,\n          'origin': <class 'str'>,\n          'age': <class 'str'>,\n          'type': <class 'str'>,\n          'protocol': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_arp_intf_or_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L31"}}, "show ip bgp": {"ios": {"class": "ShowIpBgp", "doc": "Parser for show ip bgp", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L48"}, "iosxe": {"class": "ShowIpBgp", "doc": " Parser for:\n        * 'show ip bgp'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp {address_family} rd {rd}'\n        * 'show ip bgp {address_family} vrf {vrf}'\n        * 'show ip bgp regexp ^$'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L717"}}, "show ip bgp all": {"iosxe": {"class": "ShowIpBgpAll", "doc": " Parser for:\n        * 'show ip bgp all'\n        * 'show ip bgp {address_family} all'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L615"}}, "show ip bgp all dampening parameters": {"ios": {"class": "ShowIpBgpAllDampeningParameters", "doc": "Parser for show ip bgp all dampening parameters", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) dampening: <class 'bool'>,\n        Optional  (str) dampening_decay_time: <class 'int'>,\n        Optional  (str) dampening_half_life_time: <class 'int'>,\n        Optional  (str) dampening_reuse_time: <class 'int'>,\n        Optional  (str) dampening_max_suppress_penalty: <class 'int'>,\n        Optional  (str) dampening_suppress_time: <class 'int'>,\n        Optional  (str) dampening_max_suppress_time: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_all_dampening_parameters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L117"}, "iosxe": {"class": "ShowIpBgpAllDampeningParameters", "doc": " Parser for \"show ip bgp all dampening parameters\" ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) dampening: <class 'bool'>,\n        Optional  (str) dampening_decay_time: <class 'int'>,\n        Optional  (str) dampening_half_life_time: <class 'int'>,\n        Optional  (str) dampening_reuse_time: <class 'int'>,\n        Optional  (str) dampening_max_suppress_penalty: <class 'int'>,\n        Optional  (str) dampening_suppress_time: <class 'int'>,\n        Optional  (str) dampening_max_suppress_time: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_all_dampening_parameters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L7093"}}, "show ip bgp all detail": {"iosxe": {"class": "ShowIpBgpAllDetail", "doc": " Parser for:\n        * 'show ip bgp all detail'\n        * 'show ip bgp {address_family} vrf {vrf} {route}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1593"}}, "show ip bgp all neighbors": {"iosxe": {"class": "ShowIpBgpAllNeighbors", "doc": " Parser for:\n        * 'show ip bgp all neighbors',\n        * 'show ip bgp all neighbors {neighbor}'\n        * 'show ip bgp {address_family} all neighbors'\n        * 'show ip bgp {address_family} all neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_all_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4128"}}, "show ip bgp all neighbors {neighbor}": {"iosxe": {"class": "ShowIpBgpAllNeighbors", "doc": " Parser for:\n        * 'show ip bgp all neighbors',\n        * 'show ip bgp all neighbors {neighbor}'\n        * 'show ip bgp {address_family} all neighbors'\n        * 'show ip bgp {address_family} all neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_all_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4128"}}, "show ip bgp all neighbors {neighbor} advertised-routes": {"iosxe": {"class": "ShowIpBgpAllNeighborsAdvertisedRoutes", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} advertised-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_all_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4857"}}, "show ip bgp all neighbors {neighbor} received-routes": {"iosxe": {"class": "ShowIpBgpAllNeighborsReceivedRoutes", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} received-routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} received-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_all_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5468"}}, "show ip bgp all neighbors {neighbor} routes": {"iosxe": {"class": "ShowIpBgpAllNeighborsRoutes", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_all_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6112"}}, "show ip bgp all summary": {"iosxe": {"class": "ShowIpBgpAllSummary", "doc": " Parser for:\n        * 'show ip bgp all summary'\n        * 'show ip bgp {address_family} all summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2419"}}, "show ip bgp neighbors": {"iosxe": {"class": "ShowIpBgpNeighbors", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4189"}}, "show ip bgp neighbors {neighbor}": {"iosxe": {"class": "ShowIpBgpNeighbors", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4189"}}, "show ip bgp neighbors {neighbor} advertised-routes": {"iosxe": {"class": "ShowIpBgpNeighborsAdvertisedRoutes", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} rd {rd} neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} advertised-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4892"}}, "show ip bgp neighbors {neighbor} received-routes": {"iosxe": {"class": "ShowIpBgpNeighborsReceivedRoutes", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} received-routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} received-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5503"}}, "show ip bgp neighbors {neighbor} routes": {"iosxe": {"class": "ShowIpBgpNeighborsRoutes", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6148"}}, "show ip bgp regexp {regexp}": {"ios": {"class": "ShowIpBgpRegexp", "doc": "Parser for show ip bgp regexp <regexp>", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_regexp_regexp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L130"}, "iosxe": {"class": "ShowIpBgpRegexp", "doc": " Parser for:\n        * 'show ip bgp regexp {regexp}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_regexp_regexp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L760"}}, "show ip bgp summary": {"iosxe": {"class": "ShowIpBgpSummary", "doc": " Parser for:\n        * 'show ip bgp summary'\n        * 'show ip bgp {address_family} summary'\n        * 'show ip bgp {address_family} vrf {vrf} summary'\n        * 'show ip bgp {address_family} rd {rd} summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2372"}}, "show ip bgp template peer-policy": {"ios": {"class": "ShowIpBgpTemplatePeerPolicy", "doc": "Parser for show ip bgp template peer-policy <WORD>", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_policy': {\n  Any  (str) *: {\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) local_disable_policies: <class 'str'>,\n    Optional  (str) inherited_disable_polices: <class 'str'>,\n    Optional  (str) allowas_in: <class 'bool'>,\n    Optional  (str) allowas_in_as_number: <class 'int'>,\n    Optional  (str) as_override: <class 'bool'>,\n    Optional  (str) default_originate: <class 'bool'>,\n    Optional  (str) default_originate_route_map: <class 'str'>,\n    Optional  (str) route_map_name_in: <class 'str'>,\n    Optional  (str) route_map_name_out: <class 'str'>,\n    Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n    Optional  (str) maximum_prefix_threshold: <class 'int'>,\n    Optional  (str) maximum_prefix_restart: <class 'int'>,\n    Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n    Optional  (str) next_hop_self: <class 'bool'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) send_community: <class 'str'>,\n    Optional  (str) soft_reconfiguration: <class 'bool'>,\n    Optional  (str) soo: <class 'str'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) inherited_policies: {\n      Optional  (str) allowas_in: <class 'bool'>,\n      Optional  (str) allowas_in_as_number: <class 'int'>,\n      Optional  (str) as_override: <class 'bool'>,\n      Optional  (str) default_originate: <class 'bool'>,\n      Optional  (str) default_originate_route_map: <class 'str'>,\n      Optional  (str) route_map_name_in: <class 'str'>,\n      Optional  (str) route_map_name_out: <class 'str'>,\n      Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n      Optional  (str) maximum_prefix_threshold: <class 'int'>,\n      Optional  (str) maximum_prefix_restart: <class 'int'>,\n      Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n      Optional  (str) next_hop_self: <class 'bool'>,\n      Optional  (str) route_reflector_client: <class 'bool'>,\n      Optional  (str) send_community: <class 'str'>,\n      Optional  (str) soft_reconfiguration: <class 'bool'>,\n      Optional  (str) soo: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_template_peer-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L112"}, "iosxe": {"class": "ShowIpBgpTemplatePeerPolicy", "doc": " Parser for \"show ip bgp template peer-policy {template_name}\" ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_policy': {\n  Any  (str) *: {\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) local_disable_policies: <class 'str'>,\n    Optional  (str) inherited_disable_polices: <class 'str'>,\n    Optional  (str) allowas_in: <class 'bool'>,\n    Optional  (str) allowas_in_as_number: <class 'int'>,\n    Optional  (str) as_override: <class 'bool'>,\n    Optional  (str) default_originate: <class 'bool'>,\n    Optional  (str) default_originate_route_map: <class 'str'>,\n    Optional  (str) route_map_name_in: <class 'str'>,\n    Optional  (str) route_map_name_out: <class 'str'>,\n    Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n    Optional  (str) maximum_prefix_threshold: <class 'int'>,\n    Optional  (str) maximum_prefix_restart: <class 'int'>,\n    Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n    Optional  (str) next_hop_self: <class 'bool'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) send_community: <class 'str'>,\n    Optional  (str) soft_reconfiguration: <class 'bool'>,\n    Optional  (str) soo: <class 'str'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) inherited_policies: {\n      Optional  (str) allowas_in: <class 'bool'>,\n      Optional  (str) allowas_in_as_number: <class 'int'>,\n      Optional  (str) as_override: <class 'bool'>,\n      Optional  (str) default_originate: <class 'bool'>,\n      Optional  (str) default_originate_route_map: <class 'str'>,\n      Optional  (str) route_map_name_in: <class 'str'>,\n      Optional  (str) route_map_name_out: <class 'str'>,\n      Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n      Optional  (str) maximum_prefix_threshold: <class 'int'>,\n      Optional  (str) maximum_prefix_restart: <class 'int'>,\n      Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n      Optional  (str) next_hop_self: <class 'bool'>,\n      Optional  (str) route_reflector_client: <class 'bool'>,\n      Optional  (str) send_community: <class 'str'>,\n      Optional  (str) soft_reconfiguration: <class 'bool'>,\n      Optional  (str) soo: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_template_peer-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6800"}}, "show ip bgp template peer-policy {template_name}": {"ios": {"class": "ShowIpBgpTemplatePeerPolicy", "doc": "Parser for show ip bgp template peer-policy <WORD>", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_policy': {\n  Any  (str) *: {\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) local_disable_policies: <class 'str'>,\n    Optional  (str) inherited_disable_polices: <class 'str'>,\n    Optional  (str) allowas_in: <class 'bool'>,\n    Optional  (str) allowas_in_as_number: <class 'int'>,\n    Optional  (str) as_override: <class 'bool'>,\n    Optional  (str) default_originate: <class 'bool'>,\n    Optional  (str) default_originate_route_map: <class 'str'>,\n    Optional  (str) route_map_name_in: <class 'str'>,\n    Optional  (str) route_map_name_out: <class 'str'>,\n    Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n    Optional  (str) maximum_prefix_threshold: <class 'int'>,\n    Optional  (str) maximum_prefix_restart: <class 'int'>,\n    Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n    Optional  (str) next_hop_self: <class 'bool'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) send_community: <class 'str'>,\n    Optional  (str) soft_reconfiguration: <class 'bool'>,\n    Optional  (str) soo: <class 'str'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) inherited_policies: {\n      Optional  (str) allowas_in: <class 'bool'>,\n      Optional  (str) allowas_in_as_number: <class 'int'>,\n      Optional  (str) as_override: <class 'bool'>,\n      Optional  (str) default_originate: <class 'bool'>,\n      Optional  (str) default_originate_route_map: <class 'str'>,\n      Optional  (str) route_map_name_in: <class 'str'>,\n      Optional  (str) route_map_name_out: <class 'str'>,\n      Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n      Optional  (str) maximum_prefix_threshold: <class 'int'>,\n      Optional  (str) maximum_prefix_restart: <class 'int'>,\n      Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n      Optional  (str) next_hop_self: <class 'bool'>,\n      Optional  (str) route_reflector_client: <class 'bool'>,\n      Optional  (str) send_community: <class 'str'>,\n      Optional  (str) soft_reconfiguration: <class 'bool'>,\n      Optional  (str) soo: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_template_peer-policy_template_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L112"}, "iosxe": {"class": "ShowIpBgpTemplatePeerPolicy", "doc": " Parser for \"show ip bgp template peer-policy {template_name}\" ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_policy': {\n  Any  (str) *: {\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) local_disable_policies: <class 'str'>,\n    Optional  (str) inherited_disable_polices: <class 'str'>,\n    Optional  (str) allowas_in: <class 'bool'>,\n    Optional  (str) allowas_in_as_number: <class 'int'>,\n    Optional  (str) as_override: <class 'bool'>,\n    Optional  (str) default_originate: <class 'bool'>,\n    Optional  (str) default_originate_route_map: <class 'str'>,\n    Optional  (str) route_map_name_in: <class 'str'>,\n    Optional  (str) route_map_name_out: <class 'str'>,\n    Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n    Optional  (str) maximum_prefix_threshold: <class 'int'>,\n    Optional  (str) maximum_prefix_restart: <class 'int'>,\n    Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n    Optional  (str) next_hop_self: <class 'bool'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) send_community: <class 'str'>,\n    Optional  (str) soft_reconfiguration: <class 'bool'>,\n    Optional  (str) soo: <class 'str'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) inherited_policies: {\n      Optional  (str) allowas_in: <class 'bool'>,\n      Optional  (str) allowas_in_as_number: <class 'int'>,\n      Optional  (str) as_override: <class 'bool'>,\n      Optional  (str) default_originate: <class 'bool'>,\n      Optional  (str) default_originate_route_map: <class 'str'>,\n      Optional  (str) route_map_name_in: <class 'str'>,\n      Optional  (str) route_map_name_out: <class 'str'>,\n      Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n      Optional  (str) maximum_prefix_threshold: <class 'int'>,\n      Optional  (str) maximum_prefix_restart: <class 'int'>,\n      Optional  (str) maximum_prefix_warning_only: <class 'bool'>,\n      Optional  (str) next_hop_self: <class 'bool'>,\n      Optional  (str) route_reflector_client: <class 'bool'>,\n      Optional  (str) send_community: <class 'str'>,\n      Optional  (str) soft_reconfiguration: <class 'bool'>,\n      Optional  (str) soo: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_template_peer-policy_template_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6800"}}, "show ip bgp template peer-session": {"ios": {"class": "ShowIpBgpTemplatePeerSession", "doc": "Parser for show ip bgp template peer-session <WORD>", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_session': {\n  Any  (str) *: {\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) fall_over_bfd: <class 'bool'>,\n    Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n    Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) local_as_as_no: <class 'int'>,\n    Optional  (str) password_text: <class 'str'>,\n    Optional  (str) remote_as: <class 'int'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) transport_connection_mode: <class 'str'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) inherited_session_commands: {\n      Optional  (str) fall_over_bfd: <class 'bool'>,\n      Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n      Optional  (str) description: <class 'str'>,\n      Optional  (str) disable_connected_check: <class 'bool'>,\n      Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n      Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n      Optional  (str) local_as_as_no: <class 'int'>,\n      Optional  (str) password_text: <class 'str'>,\n      Optional  (str) remote_as: <class 'int'>,\n      Optional  (str) shutdown: <class 'bool'>,\n      Optional  (str) keepalive_interval: <class 'int'>,\n      Optional  (str) holdtime: <class 'int'>,\n      Optional  (str) transport_connection_mode: <class 'str'>,\n      Optional  (str) update_source: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_template_peer-session", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L100"}, "iosxe": {"class": "ShowIpBgpTemplatePeerSession", "doc": " Parser for \"show ip bgp template peer-session {template_name}\" ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_session': {\n  Any  (str) *: {\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) fall_over_bfd: <class 'bool'>,\n    Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n    Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) local_as_as_no: <class 'int'>,\n    Optional  (str) password_text: <class 'str'>,\n    Optional  (str) remote_as: <class 'int'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) transport_connection_mode: <class 'str'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) inherited_session_commands: {\n      Optional  (str) fall_over_bfd: <class 'bool'>,\n      Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n      Optional  (str) description: <class 'str'>,\n      Optional  (str) disable_connected_check: <class 'bool'>,\n      Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n      Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n      Optional  (str) local_as_as_no: <class 'int'>,\n      Optional  (str) password_text: <class 'str'>,\n      Optional  (str) remote_as: <class 'int'>,\n      Optional  (str) shutdown: <class 'bool'>,\n      Optional  (str) keepalive_interval: <class 'int'>,\n      Optional  (str) holdtime: <class 'int'>,\n      Optional  (str) transport_connection_mode: <class 'str'>,\n      Optional  (str) update_source: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_template_peer-session", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6510"}}, "show ip bgp template peer-session {template_name}": {"ios": {"class": "ShowIpBgpTemplatePeerSession", "doc": "Parser for show ip bgp template peer-session <WORD>", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_session': {\n  Any  (str) *: {\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) fall_over_bfd: <class 'bool'>,\n    Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n    Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) local_as_as_no: <class 'int'>,\n    Optional  (str) password_text: <class 'str'>,\n    Optional  (str) remote_as: <class 'int'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) transport_connection_mode: <class 'str'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) inherited_session_commands: {\n      Optional  (str) fall_over_bfd: <class 'bool'>,\n      Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n      Optional  (str) description: <class 'str'>,\n      Optional  (str) disable_connected_check: <class 'bool'>,\n      Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n      Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n      Optional  (str) local_as_as_no: <class 'int'>,\n      Optional  (str) password_text: <class 'str'>,\n      Optional  (str) remote_as: <class 'int'>,\n      Optional  (str) shutdown: <class 'bool'>,\n      Optional  (str) keepalive_interval: <class 'int'>,\n      Optional  (str) holdtime: <class 'int'>,\n      Optional  (str) transport_connection_mode: <class 'str'>,\n      Optional  (str) update_source: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_template_peer-session_template_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L100"}, "iosxe": {"class": "ShowIpBgpTemplatePeerSession", "doc": " Parser for \"show ip bgp template peer-session {template_name}\" ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_session': {\n  Any  (str) *: {\n    Optional  (str) local_policies: <class 'str'>,\n    Optional  (str) inherited_polices: <class 'str'>,\n    Optional  (str) fall_over_bfd: <class 'bool'>,\n    Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n    Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n    Optional  (str) local_as_as_no: <class 'int'>,\n    Optional  (str) password_text: <class 'str'>,\n    Optional  (str) remote_as: <class 'int'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) transport_connection_mode: <class 'str'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) index: <class 'int'>,\n    Optional  (str) inherited_session_commands: {\n      Optional  (str) fall_over_bfd: <class 'bool'>,\n      Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n      Optional  (str) description: <class 'str'>,\n      Optional  (str) disable_connected_check: <class 'bool'>,\n      Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n      Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n      Optional  (str) local_as_as_no: <class 'int'>,\n      Optional  (str) password_text: <class 'str'>,\n      Optional  (str) remote_as: <class 'int'>,\n      Optional  (str) shutdown: <class 'bool'>,\n      Optional  (str) keepalive_interval: <class 'int'>,\n      Optional  (str) holdtime: <class 'int'>,\n      Optional  (str) transport_connection_mode: <class 'str'>,\n      Optional  (str) update_source: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_template_peer-session_template_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6510"}}, "show ip bgp {address_family}": {"iosxe": {"class": "ShowIpBgpRouteDistributer", "doc": " Parser for:\n        * 'show ip bgp {route}'\n        * 'show ip bgp {address_family}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": null, "uid": "show_ip_bgp_address_family", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L683"}}, "show ip bgp {address_family} all": {"iosxe": {"class": "ShowIpBgpAll", "doc": " Parser for:\n        * 'show ip bgp all'\n        * 'show ip bgp {address_family} all'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L615"}}, "show ip bgp {address_family} all detail": {"iosxe": {"class": "ShowIpBgpDetail", "doc": " Parser for:\n        * 'show ip bgp {address_family} vrf {vrf} detail'\n        * 'show ip bgp {address_family} rd {rd} detail'\n        * 'show ip bgp {address_family} rd {rd} {route}'\n        * 'show ip bgp {address_family} all detail'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1665"}}, "show ip bgp {address_family} all neighbors": {"iosxe": {"class": "ShowIpBgpAllNeighbors", "doc": " Parser for:\n        * 'show ip bgp all neighbors',\n        * 'show ip bgp all neighbors {neighbor}'\n        * 'show ip bgp {address_family} all neighbors'\n        * 'show ip bgp {address_family} all neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_all_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4128"}}, "show ip bgp {address_family} all neighbors {neighbor}": {"iosxe": {"class": "ShowIpBgpAllNeighbors", "doc": " Parser for:\n        * 'show ip bgp all neighbors',\n        * 'show ip bgp all neighbors {neighbor}'\n        * 'show ip bgp {address_family} all neighbors'\n        * 'show ip bgp {address_family} all neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_all_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4128"}}, "show ip bgp {address_family} all neighbors {neighbor} advertised-routes": {"iosxe": {"class": "ShowIpBgpAllNeighborsAdvertisedRoutes", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} advertised-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_all_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4857"}}, "show ip bgp {address_family} all neighbors {neighbor} received-routes": {"iosxe": {"class": "ShowIpBgpAllNeighborsReceivedRoutes", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} received-routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} received-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_all_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5468"}}, "show ip bgp {address_family} all neighbors {neighbor} routes": {"iosxe": {"class": "ShowIpBgpAllNeighborsRoutes", "doc": " Parser for:\n        * 'show ip bgp all neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} all neighbors {neighbor} routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_all_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6112"}}, "show ip bgp {address_family} all summary": {"iosxe": {"class": "ShowIpBgpAllSummary", "doc": " Parser for:\n        * 'show ip bgp all summary'\n        * 'show ip bgp {address_family} all summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_all_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2419"}}, "show ip bgp {address_family} neighbors": {"iosxe": {"class": "ShowIpBgpNeighbors", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4189"}}, "show ip bgp {address_family} neighbors {neighbor}": {"iosxe": {"class": "ShowIpBgpNeighbors", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4189"}}, "show ip bgp {address_family} neighbors {neighbor} advertised-routes": {"iosxe": {"class": "ShowIpBgpNeighborsAdvertisedRoutes", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} rd {rd} neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} advertised-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4892"}}, "show ip bgp {address_family} neighbors {neighbor} received-routes": {"iosxe": {"class": "ShowIpBgpNeighborsReceivedRoutes", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} received-routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} received-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) received_routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_neighbors_neighbor_received-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L5503"}}, "show ip bgp {address_family} neighbors {neighbor} routes": {"iosxe": {"class": "ShowIpBgpNeighborsRoutes", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6148"}}, "show ip bgp {address_family} rd {rd}": {"ios": {"class": "ShowIpBgp", "doc": "Parser for show ip bgp", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_rd_rd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L48"}, "iosxe": {"class": "ShowIpBgp", "doc": " Parser for:\n        * 'show ip bgp'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp {address_family} rd {rd}'\n        * 'show ip bgp {address_family} vrf {vrf}'\n        * 'show ip bgp regexp ^$'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_rd_rd", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L717"}}, "show ip bgp {address_family} rd {rd} detail": {"iosxe": {"class": "ShowIpBgpDetail", "doc": " Parser for:\n        * 'show ip bgp {address_family} vrf {vrf} detail'\n        * 'show ip bgp {address_family} rd {rd} detail'\n        * 'show ip bgp {address_family} rd {rd} {route}'\n        * 'show ip bgp {address_family} all detail'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_rd_rd_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1665"}}, "show ip bgp {address_family} rd {rd} neighbors {neighbor} advertised-routes": {"iosxe": {"class": "ShowIpBgpNeighborsAdvertisedRoutes", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} rd {rd} neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} advertised-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_rd_rd_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4892"}}, "show ip bgp {address_family} rd {rd} summary": {"iosxe": {"class": "ShowIpBgpSummary", "doc": " Parser for:\n        * 'show ip bgp summary'\n        * 'show ip bgp {address_family} summary'\n        * 'show ip bgp {address_family} vrf {vrf} summary'\n        * 'show ip bgp {address_family} rd {rd} summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_rd_rd_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2372"}}, "show ip bgp {address_family} rd {rd} {route}": {"iosxe": {"class": "ShowIpBgpDetail", "doc": " Parser for:\n        * 'show ip bgp {address_family} vrf {vrf} detail'\n        * 'show ip bgp {address_family} rd {rd} detail'\n        * 'show ip bgp {address_family} rd {rd} {route}'\n        * 'show ip bgp {address_family} all detail'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_rd_rd_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1665"}}, "show ip bgp {address_family} summary": {"iosxe": {"class": "ShowIpBgpSummary", "doc": " Parser for:\n        * 'show ip bgp summary'\n        * 'show ip bgp {address_family} summary'\n        * 'show ip bgp {address_family} vrf {vrf} summary'\n        * 'show ip bgp {address_family} rd {rd} summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2372"}}, "show ip bgp {address_family} vrf {vrf}": {"ios": {"class": "ShowIpBgp", "doc": "Parser for show ip bgp", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_bgp.py#L48"}, "iosxe": {"class": "ShowIpBgp", "doc": " Parser for:\n        * 'show ip bgp'\n        * 'show ip bgp {address_family}'\n        * 'show ip bgp {address_family} rd {rd}'\n        * 'show ip bgp {address_family} vrf {vrf}'\n        * 'show ip bgp regexp ^$'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) bgp_table_version: <class 'int'>,\n        Optional  (str) route_identifier: <class 'str'>,\n        Optional  (str) vrf_route_identifier: <class 'str'>,\n        Optional  (str) route_distinguisher: <class 'str'>,\n        Optional  (str) default_vrf: <class 'str'>,\n        Optional  (str) af_private_import_to_address_family: <class 'str'>,\n        Optional  (str) pfx_count: <class 'int'>,\n        Optional  (str) pfx_limit: <class 'int'>,\n        Optional  (str) routes: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (str) index: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) status_codes: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) localpref: <class 'int'>,\n                Optional  (str) weight: <class 'int'>,\n                Optional  (str) path: <class 'str'>,\n                Optional  (str) origin_codes: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L717"}}, "show ip bgp {address_family} vrf {vrf} detail": {"iosxe": {"class": "ShowIpBgpDetail", "doc": " Parser for:\n        * 'show ip bgp {address_family} vrf {vrf} detail'\n        * 'show ip bgp {address_family} rd {rd} detail'\n        * 'show ip bgp {address_family} rd {rd} {route}'\n        * 'show ip bgp {address_family} all detail'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1665"}}, "show ip bgp {address_family} vrf {vrf} neighbors": {"iosxe": {"class": "ShowIpBgpNeighbors", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_vrf_vrf_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4189"}}, "show ip bgp {address_family} vrf {vrf} neighbors {neighbor}": {"iosxe": {"class": "ShowIpBgpNeighbors", "doc": " Parser for:\n        * 'show ip bgp neighbors'\n        * 'show ip bgp neighbors {neighbor}'\n        * 'show ip bgp {address_family} neighbors'\n        * 'show ip bgp {address_family} neighbors {neighbor}'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) list_of_neighbors: <class 'list'>,\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'remote_as': <class 'int'>,\n        'link': <class 'str'>,\n        Optional  (str) local_as: <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'shutdown': <class 'bool'>,\n        Optional  (str) bgp_version: <class 'int'>,\n        Optional  (str) router_id: <class 'str'>,\n        Optional  (str) session_state: <class 'str'>,\n        Optional  (str) no_prepend: <class 'bool'>,\n        Optional  (str) replace_as: <class 'bool'>,\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            Optional  (str) session_state: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) down_time: <class 'str'>,\n            Optional  (str) last_read: <class 'str'>,\n            Optional  (str) last_write: <class 'str'>,\n            Optional  (str) current_time: <class 'str'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) neighbor_version: <class 'str'>,\n            Optional  (str) output_queue_size: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) advertise_bit: <class 'int'>,\n            Optional  (str) route_reflector_client: <class 'bool'>,\n            Optional  (str) update_group_member: <class 'int'>,\n            Optional  (str) community_attribute_sent: <class 'bool'>,\n            Optional  (str) extended_community_attribute_sent: <class 'bool'>,\n            Optional  (str) suppress_ldp_signaling: <class 'bool'>,\n            Optional  (str) slow_peer_detection: <class 'bool'>,\n            Optional  (str) slow_peer_split_update_group_dynamic: <class 'bool'>,\n            Optional  (str) refresh_epoch: <class 'int'>,\n            Optional  (str) max_nlri: <class 'int'>,\n            Optional  (str) min_nlri: <class 'int'>,\n            Optional  (str) last_detected_dynamic_slow_peer: <class 'str'>,\n            Optional  (str) dynamic_slow_peer_recovered: <class 'str'>,\n            Optional  (str) last_sent_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_start_of_rib: <class 'str'>,\n            Optional  (str) last_sent_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) last_received_refresh_end_of_rib: <class 'str'>,\n            Optional  (str) refresh_out: <class 'int'>,\n            Optional  (str) refresh_in: <class 'int'>,\n            Optional  (str) prefix_activity_counters: {\n              'sent': {\n                Any  (str) *: Any  (str) *,\n                },\n              'received': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) local_policy_denied_prefixes_counters: {\n              'outbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              'inbound': {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            Optional  (str) refresh_activity_counters: {\n              'sent': {\n                Any  (str) *: <class 'int'>,\n                },\n              'received': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) bgp_negotiated_keepalive_timers: {\n          'keepalive_interval': <class 'int'>,\n          'hold_time': <class 'int'>,\n          Optional  (str) min_holdtime: <class 'int'>,\n          },\n        Optional  (str) bgp_negotiated_capabilities: {\n          Optional  (str) remote_restart_timer: <class 'int'>,\n          Optional  (str) graceful_restart_af_advertised_by_peer: <class 'list'>,\n          Any  (str) *: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_session: {\n          Optional  (str) sessions: <class 'int'>,\n          Optional  (str) stateful_switchover: <class 'str'>,\n          },\n        Optional  (str) bgp_neighbor_counters: {\n          Optional  (str) messages: {\n            'sent': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'received': {\n              'opens': <class 'int'>,\n              'updates': <class 'int'>,\n              'notifications': <class 'int'>,\n              'keepalives': <class 'int'>,\n              'route_refresh': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'in_queue_depth': <class 'int'>,\n            'out_queue_depth': <class 'int'>,\n            },\n          Optional  (str) multisession_messages: {\n            Any  (str) *: {\n              'sent': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'received': {\n                'opens': <class 'int'>,\n                'updates': <class 'int'>,\n                'notifications': <class 'int'>,\n                'keepalives': <class 'int'>,\n                'route_refresh': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'in_queue_depth': <class 'int'>,\n              'out_queue_depth': <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) bgp_session_transport: {\n          'min_time_between_advertisement_runs': <class 'int'>,\n          Optional  (str) address_tracking_status: <class 'str'>,\n          Optional  (str) rib_route_ip: <class 'str'>,\n          Optional  (str) tcp_path_mtu_discovery: <class 'str'>,\n          'connection': {\n            'established': <class 'int'>,\n            'dropped': <class 'int'>,\n            'last_reset': <class 'str'>,\n            Optional  (str) reset_reason: <class 'str'>,\n            },\n          Optional  (str) transport: {\n            'local_port': <class 'str'>,\n            'local_host': <class 'str'>,\n            'foreign_port': <class 'str'>,\n            'foreign_host': <class 'str'>,\n            Optional  (str) mss: <class 'int'>,\n            },\n          Optional  (str) graceful_restart: <class 'str'>,\n          Optional  (str) gr_restart_time: <class 'int'>,\n          Optional  (str) gr_stalepath_time: <class 'int'>,\n          Optional  (str) connection_state: <class 'str'>,\n          Optional  (str) io_status: <class 'int'>,\n          Optional  (str) unread_input_bytes: <class 'int'>,\n          Optional  (str) ecn_connection: <class 'str'>,\n          Optional  (str) minimum_incoming_ttl: <class 'int'>,\n          Optional  (str) outgoing_ttl: <class 'int'>,\n          Optional  (str) connection_tableid: <class 'int'>,\n          Optional  (str) maximum_output_segment_queue_size: <class 'int'>,\n          Optional  (str) enqueued_packets: {\n            'retransmit_packet': <class 'int'>,\n            'input_packet': <class 'int'>,\n            'mis_ordered_packet': <class 'int'>,\n            },\n          Optional  (str) iss: <class 'int'>,\n          Optional  (str) snduna: <class 'int'>,\n          Optional  (str) sndnxt: <class 'int'>,\n          Optional  (str) irs: <class 'int'>,\n          Optional  (str) rcvnxt: <class 'int'>,\n          Optional  (str) sndwnd: <class 'int'>,\n          Optional  (str) snd_scale: <class 'int'>,\n          Optional  (str) maxrcvwnd: <class 'int'>,\n          Optional  (str) rcvwnd: <class 'int'>,\n          Optional  (str) rcv_scale: <class 'int'>,\n          Optional  (str) delrcvwnd: <class 'int'>,\n          Optional  (str) srtt: <class 'int'>,\n          Optional  (str) rtto: <class 'int'>,\n          Optional  (str) rtv: <class 'int'>,\n          Optional  (str) krtt: <class 'int'>,\n          Optional  (str) min_rtt: <class 'int'>,\n          Optional  (str) max_rtt: <class 'int'>,\n          Optional  (str) ack_hold: <class 'int'>,\n          Optional  (str) uptime: <class 'int'>,\n          Optional  (str) sent_idletime: <class 'int'>,\n          Optional  (str) receive_idletime: <class 'int'>,\n          Optional  (str) status_flags: <class 'str'>,\n          Optional  (str) option_flags: <class 'str'>,\n          Optional  (str) ip_precedence_value: <class 'int'>,\n          Optional  (str) datagram: {\n            Optional  (str) datagram_sent: {\n              'value': <class 'int'>,\n              'retransmit': <class 'int'>,\n              'fastretransmit': <class 'int'>,\n              'partialack': <class 'int'>,\n              'second_congestion': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            'datagram_received': {\n              'value': <class 'int'>,\n              'out_of_order': <class 'int'>,\n              'with_data': <class 'int'>,\n              'total_data': <class 'int'>,\n              },\n            },\n          Optional  (str) packet_fast_path: <class 'int'>,\n          Optional  (str) packet_fast_processed: <class 'int'>,\n          Optional  (str) packet_slow_path: <class 'int'>,\n          Optional  (str) fast_lock_acquisition_failures: <class 'int'>,\n          Optional  (str) lock_slow_path: <class 'int'>,\n          Optional  (str) tcp_semaphore: <class 'str'>,\n          Optional  (str) tcp_semaphore_status: <class 'str'>,\n          Optional  (str) sso: <class 'bool'>,\n          Optional  (str) tcp_connection: <class 'bool'>,\n          },\n        Optional  (str) bgp_event_timer: {\n          'starts': {\n            Any  (str) *: <class 'int'>,\n            },\n          'wakeups': {\n            Any  (str) *: <class 'int'>,\n            },\n          'next': {\n            Any  (str) *: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_vrf_vrf_neighbors_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4189"}}, "show ip bgp {address_family} vrf {vrf} neighbors {neighbor} advertised-routes": {"iosxe": {"class": "ShowIpBgpNeighborsAdvertisedRoutes", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} rd {rd} neighbors {neighbor} advertised-routes'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} advertised-routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) advertised: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_vrf_vrf_neighbors_neighbor_advertised-routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L4892"}}, "show ip bgp {address_family} vrf {vrf} neighbors {neighbor} routes": {"iosxe": {"class": "ShowIpBgpNeighborsRoutes", "doc": " Parser for:\n        * 'show ip bgp neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} neighbors {neighbor} routes'\n        * 'show ip bgp {address_family} vrf {vrf} neighbors {neighbor} routes'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'neighbor': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) local_router_id: <class 'str'>,\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) routes: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) index: {\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) path_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) localprf: <class 'int'>,\n                    Optional  (str) weight: <class 'int'>,\n                    Optional  (str) path: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_vrf_vrf_neighbors_neighbor_routes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L6148"}}, "show ip bgp {address_family} vrf {vrf} summary": {"iosxe": {"class": "ShowIpBgpSummary", "doc": " Parser for:\n        * 'show ip bgp summary'\n        * 'show ip bgp {address_family} summary'\n        * 'show ip bgp {address_family} vrf {vrf} summary'\n        * 'show ip bgp {address_family} rd {rd} summary'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp_id': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) neighbor: {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'version': <class 'int'>,\n            'as': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'msg_sent': <class 'int'>,\n            'tbl_ver': <class 'int'>,\n            'input_queue': <class 'int'>,\n            'output_queue': <class 'int'>,\n            'up_down': <class 'str'>,\n            'state_pfxrcd': <class 'str'>,\n            Optional  (str) route_identifier: <class 'str'>,\n            Optional  (str) local_as: <class 'int'>,\n            Optional  (str) bgp_table_version: <class 'int'>,\n            Optional  (str) routing_table_version: <class 'int'>,\n            Optional  (str) prefixes: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) path: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) cache_entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) entries: {\n              Any  (str) *: {\n                'total_entries': <class 'int'>,\n                'memory_usage': <class 'int'>,\n                },\n              },\n            Optional  (str) community_entries: {\n              'total_entries': <class 'int'>,\n              'memory_usage': <class 'int'>,\n              },\n            Optional  (str) attribute_entries: <class 'str'>,\n            Optional  (str) total_memory: <class 'int'>,\n            Optional  (str) activity_prefixes: <class 'str'>,\n            Optional  (str) activity_paths: <class 'str'>,\n            Optional  (str) scan_interval: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_vrf_vrf_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L2372"}}, "show ip bgp {address_family} vrf {vrf} {route}": {"iosxe": {"class": "ShowIpBgpAllDetail", "doc": " Parser for:\n        * 'show ip bgp all detail'\n        * 'show ip bgp {address_family} vrf {vrf} {route}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  'default': {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) route_distinguisher: <class 'str'>,\n            Optional  (str) default_vrf: <class 'str'>,\n            Optional  (str) prefixes: {\n              Any  (str) *: {\n                Optional  (str) paths: <class 'str'>,\n                Optional  (str) available_path: <class 'str'>,\n                Optional  (str) best_path: <class 'str'>,\n                Optional  (str) table_version: <class 'str'>,\n                Optional  (str) index: {\n                  Any  (str) *: {\n                    Optional  (str) mpls_labels: {\n                      'in': <class 'str'>,\n                      'out': <class 'str'>,\n                      },\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) next_hop_igp_metric: <class 'str'>,\n                    Optional  (str) gateway: <class 'str'>,\n                    Optional  (str) route_info: <class 'str'>,\n                    Optional  (str) route_status: <class 'str'>,\n                    Optional  (str) imported_path_from: <class 'str'>,\n                    Optional  (str) imported_safety_path: <class 'bool'>,\n                    Optional  (str) next_hop_via: <class 'str'>,\n                    Optional  (str) update_group: Any  (str) *,\n                    Optional  (str) status_codes: <class 'str'>,\n                    Optional  (str) origin_codes: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) inaccessible: <class 'bool'>,\n                    Optional  (str) localpref: <class 'int'>,\n                    Optional  (str) atomic_aggregate: <class 'bool'>,\n                    Optional  (str) weight: <class 'str'>,\n                    Optional  (str) originator: <class 'str'>,\n                    Optional  (str) refresh_epoch: <class 'int'>,\n                    Optional  (str) recipient_pathid: <class 'str'>,\n                    Optional  (str) transfer_pathid: <class 'str'>,\n                    Optional  (str) aggregated_by_as: <class 'str'>,\n                    Optional  (str) aggregated_by_address: <class 'str'>,\n                    Optional  (str) community: <class 'str'>,\n                    Optional  (str) ext_community: <class 'str'>,\n                    Optional  (str) recursive_via_connected: <class 'bool'>,\n                    Optional  (str) agi_version: <class 'int'>,\n                    Optional  (str) ve_block_size: <class 'int'>,\n                    Optional  (str) label_base: <class 'int'>,\n                    Optional  (str) cluster_list: <class 'str'>,\n                    Optional  (str) evpn: {\n                      Optional  (str) ext_community: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) evpn_esi: <class 'str'>,\n                      Optional  (str) local_vtep: <class 'str'>,\n                      Optional  (str) gateway_address: <class 'str'>,\n                      Optional  (str) label: <class 'int'>,\n                      Optional  (str) router_mac: <class 'str'>,\n                      Optional  (str) recursive_via_connected: <class 'bool'>,\n                      },\n                    Optional  (str) local_vxlan_vtep: {\n                      Optional  (str) encap: <class 'str'>,\n                      Optional  (str) local_router_mac: <class 'str'>,\n                      Optional  (str) vtep_ip: <class 'str'>,\n                      Optional  (str) vrf: <class 'str'>,\n                      Optional  (str) vni: <class 'str'>,\n                      Optional  (str) bdi: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_bgp_address_family_vrf_vrf_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L1593"}}, "show ip bgp {route}": {"iosxe": {"class": "ShowIpBgpRouteDistributer", "doc": " Parser for:\n        * 'show ip bgp {route}'\n        * 'show ip bgp {address_family}'\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": null, "uid": "show_ip_bgp_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_bgp.py#L683"}}, "show ip cef": {"iosxe": {"class": "ShowIpCef", "doc": "parser for show ip cef\n                  show ip cef vrf <vrf>\n                  show ip cef <prefix>\n                  show ip cef <prefix> detail\n                  show ip cef vrf <vrf> <prefix>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            'nexthop': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) local_label: <class 'int'>,\n                    Optional  (str) sid: <class 'str'>,\n                    Optional  (str) local_sid: <class 'str'>,\n                    Optional  (str) outgoing_label: <class 'list'>,\n                    Optional  (str) outgoing_label_backup: <class 'str'>,\n                    Optional  (str) outgoing_label_info: <class 'str'>,\n                    Optional  (str) repair: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) per_destination_sharing: <class 'bool'>,\n            Optional  (str) sr_local_label_info: <class 'str'>,\n            Optional  (str) flags: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_cef", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1484"}}, "show ip cef internal": {"iosxe": {"class": "ShowIpCefInternal", "doc": " Parser for:\n        * 'show ip cef internal'\n        * 'show ip cef <prefix> internal'\n        * 'show ip cef vrf <vrf> <prefix> internal'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) sharing: <class 'str'>,\n            Optional  (str) rib: <class 'str'>,\n            Optional  (str) refcnt: <class 'int'>,\n            Optional  (str) feature_space: {\n              Optional  (str) iprm: <class 'str'>,\n              Optional  (str) broker: {\n                'distribution_priority': <class 'int'>,\n                },\n              Optional  (str) lfd: {\n                Any  (str) *: {\n                  'local_labels': <class 'int'>,\n                  },\n                },\n              Optional  (str) local_label_info: {\n                Optional  (str) dflt: <class 'str'>,\n                Optional  (str) sr: <class 'str'>,\n                },\n              Optional  (str) path_extension_list: {\n                'dflt': {\n                  'disposition_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  'label_switch_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                'sr': {\n                  'disposition_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  'label_switch_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) subblocks: {\n              Any  (str) *: {\n                'rr_source': <class 'list'>,\n                'non_eos_chain_loadinfo': <class 'str'>,\n                'per-session': <class 'bool'>,\n                'flags': <class 'str'>,\n                'locks': <class 'int'>,\n                },\n              },\n            Optional  (str) ifnums: {\n              Any  (str) *: {\n                'ifnum': <class 'int'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              },\n            Optional  (str) flags: <class 'list'>,\n            Optional  (str) sources: <class 'list'>,\n            Optional  (str) path_list: {\n              Any  (str) *: {\n                'sharing': <class 'str'>,\n                'flags': <class 'str'>,\n                'locks': <class 'int'>,\n                'path': {\n                  Any  (str) *: {\n                    Optional  (str) share: <class 'str'>,\n                    Optional  (str) type: <class 'str'>,\n                    Optional  (str) for: <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) nexthop: {\n                      Any  (str) *: {\n                        Optional  (str) outgoing_interface: {\n                          Any  (str) *: {\n                            Optional  (str) local_label: <class 'int'>,\n                            Optional  (str) outgoing_label: <class 'list'>,\n                            Optional  (str) outgoing_label_backup: <class 'str'>,\n                            Optional  (str) outgoing_label_info: <class 'str'>,\n                            Optional  (str) repair: <class 'str'>,\n                            Optional  (str) ip_adj: {\n                              Any  (str) *: {\n                                Optional  (str) addr: <class 'str'>,\n                                Optional  (str) addr_info: <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            'output_chain': {\n              Optional  (str) label: <class 'list'>,\n              Optional  (str) tag_midchain: {\n                Any  (str) *: {\n                  'tag_midchain_info': <class 'str'>,\n                  'label': <class 'list'>,\n                  Optional  (str) frr: {\n                    'primary': {\n                      'info': <class 'str'>,\n                      'primary': {\n                        Optional  (str) tag_adj: {\n                          Any  (str) *: {\n                            'addr': <class 'str'>,\n                            'addr_info': <class 'str'>,\n                            },\n                          },\n                        },\n                      'repair': {\n                        Optional  (str) tag_midchain: {\n                          'interface': <class 'str'>,\n                          },\n                        Optional  (str) label: <class 'list'>,\n                        Optional  (str) tag_adj: {\n                          Any  (str) *: {\n                            'addr': <class 'str'>,\n                            'addr_info': <class 'str'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) frr: {\n                'primary': {\n                  Optional  (str) info: <class 'str'>,\n                  'primary': {\n                    Optional  (str) tag_adj: {\n                      Any  (str) *: {\n                        'addr': <class 'str'>,\n                        'addr_info': <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) repair: {\n                    Optional  (str) tag_midchain: {\n                      Any  (str) *: {\n                        Optional  (str) tag_midchain_info: <class 'str'>,\n                        Optional  (str) label: <class 'list'>,\n                        Optional  (str) tag_adj: {\n                          Any  (str) *: {\n                            'addr': <class 'str'>,\n                            'addr_info': <class 'str'>,\n                            },\n                          },\n                        },\n                      },\n                    Optional  (str) tag_adj: {\n                      Any  (str) *: {\n                        'addr': <class 'str'>,\n                        'addr_info': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) tag_adj: {\n                Any  (str) *: {\n                  'addr': <class 'str'>,\n                  'addr_info': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_cef_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L2187"}}, "show ip cef vrf {vrf}": {"iosxe": {"class": "ShowIpCef", "doc": "parser for show ip cef\n                  show ip cef vrf <vrf>\n                  show ip cef <prefix>\n                  show ip cef <prefix> detail\n                  show ip cef vrf <vrf> <prefix>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            'nexthop': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) local_label: <class 'int'>,\n                    Optional  (str) sid: <class 'str'>,\n                    Optional  (str) local_sid: <class 'str'>,\n                    Optional  (str) outgoing_label: <class 'list'>,\n                    Optional  (str) outgoing_label_backup: <class 'str'>,\n                    Optional  (str) outgoing_label_info: <class 'str'>,\n                    Optional  (str) repair: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) per_destination_sharing: <class 'bool'>,\n            Optional  (str) sr_local_label_info: <class 'str'>,\n            Optional  (str) flags: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_cef_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1484"}}, "show ip cef vrf {vrf} {ip} internal": {"iosxe": {"class": "ShowIpCefInternal", "doc": " Parser for:\n        * 'show ip cef internal'\n        * 'show ip cef <prefix> internal'\n        * 'show ip cef vrf <vrf> <prefix> internal'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) sharing: <class 'str'>,\n            Optional  (str) rib: <class 'str'>,\n            Optional  (str) refcnt: <class 'int'>,\n            Optional  (str) feature_space: {\n              Optional  (str) iprm: <class 'str'>,\n              Optional  (str) broker: {\n                'distribution_priority': <class 'int'>,\n                },\n              Optional  (str) lfd: {\n                Any  (str) *: {\n                  'local_labels': <class 'int'>,\n                  },\n                },\n              Optional  (str) local_label_info: {\n                Optional  (str) dflt: <class 'str'>,\n                Optional  (str) sr: <class 'str'>,\n                },\n              Optional  (str) path_extension_list: {\n                'dflt': {\n                  'disposition_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  'label_switch_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                'sr': {\n                  'disposition_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  'label_switch_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) subblocks: {\n              Any  (str) *: {\n                'rr_source': <class 'list'>,\n                'non_eos_chain_loadinfo': <class 'str'>,\n                'per-session': <class 'bool'>,\n                'flags': <class 'str'>,\n                'locks': <class 'int'>,\n                },\n              },\n            Optional  (str) ifnums: {\n              Any  (str) *: {\n                'ifnum': <class 'int'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              },\n            Optional  (str) flags: <class 'list'>,\n            Optional  (str) sources: <class 'list'>,\n            Optional  (str) path_list: {\n              Any  (str) *: {\n                'sharing': <class 'str'>,\n                'flags': <class 'str'>,\n                'locks': <class 'int'>,\n                'path': {\n                  Any  (str) *: {\n                    Optional  (str) share: <class 'str'>,\n                    Optional  (str) type: <class 'str'>,\n                    Optional  (str) for: <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) nexthop: {\n                      Any  (str) *: {\n                        Optional  (str) outgoing_interface: {\n                          Any  (str) *: {\n                            Optional  (str) local_label: <class 'int'>,\n                            Optional  (str) outgoing_label: <class 'list'>,\n                            Optional  (str) outgoing_label_backup: <class 'str'>,\n                            Optional  (str) outgoing_label_info: <class 'str'>,\n                            Optional  (str) repair: <class 'str'>,\n                            Optional  (str) ip_adj: {\n                              Any  (str) *: {\n                                Optional  (str) addr: <class 'str'>,\n                                Optional  (str) addr_info: <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            'output_chain': {\n              Optional  (str) label: <class 'list'>,\n              Optional  (str) tag_midchain: {\n                Any  (str) *: {\n                  'tag_midchain_info': <class 'str'>,\n                  'label': <class 'list'>,\n                  Optional  (str) frr: {\n                    'primary': {\n                      'info': <class 'str'>,\n                      'primary': {\n                        Optional  (str) tag_adj: {\n                          Any  (str) *: {\n                            'addr': <class 'str'>,\n                            'addr_info': <class 'str'>,\n                            },\n                          },\n                        },\n                      'repair': {\n                        Optional  (str) tag_midchain: {\n                          'interface': <class 'str'>,\n                          },\n                        Optional  (str) label: <class 'list'>,\n                        Optional  (str) tag_adj: {\n                          Any  (str) *: {\n                            'addr': <class 'str'>,\n                            'addr_info': <class 'str'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) frr: {\n                'primary': {\n                  Optional  (str) info: <class 'str'>,\n                  'primary': {\n                    Optional  (str) tag_adj: {\n                      Any  (str) *: {\n                        'addr': <class 'str'>,\n                        'addr_info': <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) repair: {\n                    Optional  (str) tag_midchain: {\n                      Any  (str) *: {\n                        Optional  (str) tag_midchain_info: <class 'str'>,\n                        Optional  (str) label: <class 'list'>,\n                        Optional  (str) tag_adj: {\n                          Any  (str) *: {\n                            'addr': <class 'str'>,\n                            'addr_info': <class 'str'>,\n                            },\n                          },\n                        },\n                      },\n                    Optional  (str) tag_adj: {\n                      Any  (str) *: {\n                        'addr': <class 'str'>,\n                        'addr_info': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) tag_adj: {\n                Any  (str) *: {\n                  'addr': <class 'str'>,\n                  'addr_info': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_cef_vrf_vrf_ip_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L2187"}}, "show ip cef vrf {vrf} {prefix}": {"iosxe": {"class": "ShowIpCef", "doc": "parser for show ip cef\n                  show ip cef vrf <vrf>\n                  show ip cef <prefix>\n                  show ip cef <prefix> detail\n                  show ip cef vrf <vrf> <prefix>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            'nexthop': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) local_label: <class 'int'>,\n                    Optional  (str) sid: <class 'str'>,\n                    Optional  (str) local_sid: <class 'str'>,\n                    Optional  (str) outgoing_label: <class 'list'>,\n                    Optional  (str) outgoing_label_backup: <class 'str'>,\n                    Optional  (str) outgoing_label_info: <class 'str'>,\n                    Optional  (str) repair: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) per_destination_sharing: <class 'bool'>,\n            Optional  (str) sr_local_label_info: <class 'str'>,\n            Optional  (str) flags: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_cef_vrf_vrf_prefix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1484"}}, "show ip cef {ip} internal": {"iosxe": {"class": "ShowIpCefInternal", "doc": " Parser for:\n        * 'show ip cef internal'\n        * 'show ip cef <prefix> internal'\n        * 'show ip cef vrf <vrf> <prefix> internal'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) sharing: <class 'str'>,\n            Optional  (str) rib: <class 'str'>,\n            Optional  (str) refcnt: <class 'int'>,\n            Optional  (str) feature_space: {\n              Optional  (str) iprm: <class 'str'>,\n              Optional  (str) broker: {\n                'distribution_priority': <class 'int'>,\n                },\n              Optional  (str) lfd: {\n                Any  (str) *: {\n                  'local_labels': <class 'int'>,\n                  },\n                },\n              Optional  (str) local_label_info: {\n                Optional  (str) dflt: <class 'str'>,\n                Optional  (str) sr: <class 'str'>,\n                },\n              Optional  (str) path_extension_list: {\n                'dflt': {\n                  'disposition_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  'label_switch_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                'sr': {\n                  'disposition_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  'label_switch_chain': {\n                    Any  (str) *: {\n                      'label': <class 'int'>,\n                      'frr': {\n                        'primary': {\n                          'primary': {\n                            'tag_adj': {\n                              Any  (str) *: {\n                                'addr': <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) subblocks: {\n              Any  (str) *: {\n                'rr_source': <class 'list'>,\n                'non_eos_chain_loadinfo': <class 'str'>,\n                'per-session': <class 'bool'>,\n                'flags': <class 'str'>,\n                'locks': <class 'int'>,\n                },\n              },\n            Optional  (str) ifnums: {\n              Any  (str) *: {\n                'ifnum': <class 'int'>,\n                Optional  (str) address: <class 'str'>,\n                },\n              },\n            Optional  (str) flags: <class 'list'>,\n            Optional  (str) sources: <class 'list'>,\n            Optional  (str) path_list: {\n              Any  (str) *: {\n                'sharing': <class 'str'>,\n                'flags': <class 'str'>,\n                'locks': <class 'int'>,\n                'path': {\n                  Any  (str) *: {\n                    Optional  (str) share: <class 'str'>,\n                    Optional  (str) type: <class 'str'>,\n                    Optional  (str) for: <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) nexthop: {\n                      Any  (str) *: {\n                        Optional  (str) outgoing_interface: {\n                          Any  (str) *: {\n                            Optional  (str) local_label: <class 'int'>,\n                            Optional  (str) outgoing_label: <class 'list'>,\n                            Optional  (str) outgoing_label_backup: <class 'str'>,\n                            Optional  (str) outgoing_label_info: <class 'str'>,\n                            Optional  (str) repair: <class 'str'>,\n                            Optional  (str) ip_adj: {\n                              Any  (str) *: {\n                                Optional  (str) addr: <class 'str'>,\n                                Optional  (str) addr_info: <class 'str'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            'output_chain': {\n              Optional  (str) label: <class 'list'>,\n              Optional  (str) tag_midchain: {\n                Any  (str) *: {\n                  'tag_midchain_info': <class 'str'>,\n                  'label': <class 'list'>,\n                  Optional  (str) frr: {\n                    'primary': {\n                      'info': <class 'str'>,\n                      'primary': {\n                        Optional  (str) tag_adj: {\n                          Any  (str) *: {\n                            'addr': <class 'str'>,\n                            'addr_info': <class 'str'>,\n                            },\n                          },\n                        },\n                      'repair': {\n                        Optional  (str) tag_midchain: {\n                          'interface': <class 'str'>,\n                          },\n                        Optional  (str) label: <class 'list'>,\n                        Optional  (str) tag_adj: {\n                          Any  (str) *: {\n                            'addr': <class 'str'>,\n                            'addr_info': <class 'str'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) frr: {\n                'primary': {\n                  Optional  (str) info: <class 'str'>,\n                  'primary': {\n                    Optional  (str) tag_adj: {\n                      Any  (str) *: {\n                        'addr': <class 'str'>,\n                        'addr_info': <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) repair: {\n                    Optional  (str) tag_midchain: {\n                      Any  (str) *: {\n                        Optional  (str) tag_midchain_info: <class 'str'>,\n                        Optional  (str) label: <class 'list'>,\n                        Optional  (str) tag_adj: {\n                          Any  (str) *: {\n                            'addr': <class 'str'>,\n                            'addr_info': <class 'str'>,\n                            },\n                          },\n                        },\n                      },\n                    Optional  (str) tag_adj: {\n                      Any  (str) *: {\n                        'addr': <class 'str'>,\n                        'addr_info': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) tag_adj: {\n                Any  (str) *: {\n                  'addr': <class 'str'>,\n                  'addr_info': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_cef_ip_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L2187"}}, "show ip cef {prefix}": {"iosxe": {"class": "ShowIpCef", "doc": "parser for show ip cef\n                  show ip cef vrf <vrf>\n                  show ip cef <prefix>\n                  show ip cef <prefix> detail\n                  show ip cef vrf <vrf> <prefix>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            'nexthop': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) local_label: <class 'int'>,\n                    Optional  (str) sid: <class 'str'>,\n                    Optional  (str) local_sid: <class 'str'>,\n                    Optional  (str) outgoing_label: <class 'list'>,\n                    Optional  (str) outgoing_label_backup: <class 'str'>,\n                    Optional  (str) outgoing_label_info: <class 'str'>,\n                    Optional  (str) repair: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) per_destination_sharing: <class 'bool'>,\n            Optional  (str) sr_local_label_info: <class 'str'>,\n            Optional  (str) flags: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_cef_prefix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1484"}}, "show ip cef {prefix} detail": {"iosxe": {"class": "ShowIpCefDetail", "doc": " Parser for:\n        * 'show ip cef <prefix> detail'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            'nexthop': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) local_label: <class 'int'>,\n                    Optional  (str) sid: <class 'str'>,\n                    Optional  (str) local_sid: <class 'str'>,\n                    Optional  (str) outgoing_label: <class 'list'>,\n                    Optional  (str) outgoing_label_backup: <class 'str'>,\n                    Optional  (str) outgoing_label_info: <class 'str'>,\n                    Optional  (str) repair: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) per_destination_sharing: <class 'bool'>,\n            Optional  (str) sr_local_label_info: <class 'str'>,\n            Optional  (str) flags: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_cef_prefix_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1758"}}, "show ip eigrp neighbors": {"ios": {"class": "ShowIpEigrpNeighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_eigrp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_eigrp.py#L20"}, "iosxe": {"class": "ShowIpEigrpNeighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_eigrp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_eigrp.py#L277"}}, "show ip eigrp neighbors detail": {"ios": {"class": "ShowIpEigrpNeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            Optional  (str) eigrp_interface: {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    'topology_ids_from_peer': <class 'int'>,\n                    'topology_advert_to_peer': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_eigrp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_eigrp.py#L40"}, "iosxe": {"class": "ShowIpEigrpNeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            Optional  (str) eigrp_interface: {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    'topology_ids_from_peer': <class 'int'>,\n                    'topology_advert_to_peer': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_eigrp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_eigrp.py#L647"}}, "show ip eigrp neighbors detail vrf {vrf}": {"nxos": {"class": "ShowIpv4EigrpNeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    'bfd_state': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_eigrp_neighbors_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_eigrp.py#L359"}}, "show ip eigrp neighbors vrf {vrf}": {"nxos": {"class": "ShowIpv4EigrpNeighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_eigrp_neighbors_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_eigrp.py#L149"}}, "show ip eigrp vrf {vrf} neighbors": {"ios": {"class": "ShowIpEigrpNeighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_eigrp_vrf_vrf_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_eigrp.py#L20"}, "iosxe": {"class": "ShowIpEigrpNeighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_eigrp_vrf_vrf_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_eigrp.py#L277"}}, "show ip eigrp vrf {vrf} neighbors detail": {"ios": {"class": "ShowIpEigrpNeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            Optional  (str) eigrp_interface: {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    'topology_ids_from_peer': <class 'int'>,\n                    'topology_advert_to_peer': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_eigrp_vrf_vrf_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_eigrp.py#L40"}, "iosxe": {"class": "ShowIpEigrpNeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            Optional  (str) eigrp_interface: {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    'topology_ids_from_peer': <class 'int'>,\n                    'topology_advert_to_peer': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_eigrp_vrf_vrf_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_eigrp.py#L647"}}, "show ip igmp groups": {"nxos": {"class": "ShowIpIgmpGroups", "doc": "Parser for:\n        show ip igmp groups\n        show ip igmp groups vrf all\n        show ip igmp groups vrf <vrf>", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'total_entries': <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            Optional  (str) source: {\n              Any  (str) *: {\n                'expire': <class 'str'>,\n                'up_time': <class 'str'>,\n                'last_reporter': <class 'str'>,\n                'type': <class 'str'>,\n                },\n              },\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) last_reporter: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_groups", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L890"}}, "show ip igmp groups detail": {"ios": {"class": "ShowIpIgmpGroupsDetail", "doc": "\n    Parser for 'show ip igmp groups detail'\n    Parser for 'show ip igmp vrf <WORD> groups detail'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            Optional  (str) source_flags: <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            Optional  (str) source_flags: <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'group_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'v3_exp': <class 'str'>,\n                'csr_exp': <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py#L25"}, "iosxe": {"class": "ShowIpIgmpGroupsDetail", "doc": "\n    Parser for 'show ip igmp groups detail'\n    Parser for 'show ip igmp vrf <WORD> groups detail'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            Optional  (str) source_flags: <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            Optional  (str) source_flags: <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'group_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'v3_exp': <class 'str'>,\n                'csr_exp': <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L412"}}, "show ip igmp groups vrf {vrf}": {"nxos": {"class": "ShowIpIgmpGroups", "doc": "Parser for:\n        show ip igmp groups\n        show ip igmp groups vrf all\n        show ip igmp groups vrf <vrf>", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'total_entries': <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            Optional  (str) source: {\n              Any  (str) *: {\n                'expire': <class 'str'>,\n                'up_time': <class 'str'>,\n                'last_reporter': <class 'str'>,\n                'type': <class 'str'>,\n                },\n              },\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) last_reporter: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_groups_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L890"}}, "show ip igmp interface": {"ios": {"class": "ShowIpIgmpInterface", "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) global_max_groups: <class 'int'>,\n    Optional  (str) global_active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) oper_status: <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) internet_protocol_processing: <class 'bool'>,\n        Optional  (str) interface_address: <class 'str'>,\n        Optional  (str) enable: <class 'bool'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) router_version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        Optional  (str) last_member_query_count: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'joins': <class 'int'>,\n          'leaves': <class 'int'>,\n          },\n        Optional  (str) multicast: {\n          Optional  (str) routing_enable: <class 'bool'>,\n          Optional  (str) ttl_threshold: <class 'int'>,\n          Optional  (str) designated_router: <class 'str'>,\n          Optional  (str) routing_table: <class 'str'>,\n          Optional  (str) dr_this_system: <class 'bool'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) joined_group: {\n          Any  (str) *: {\n            'number_of_users': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py#L18"}, "iosxe": {"class": "ShowIpIgmpInterface", "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) global_max_groups: <class 'int'>,\n    Optional  (str) global_active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) oper_status: <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) internet_protocol_processing: <class 'bool'>,\n        Optional  (str) interface_address: <class 'str'>,\n        Optional  (str) enable: <class 'bool'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) router_version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        Optional  (str) last_member_query_count: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'joins': <class 'int'>,\n          'leaves': <class 'int'>,\n          },\n        Optional  (str) multicast: {\n          Optional  (str) routing_enable: <class 'bool'>,\n          Optional  (str) ttl_threshold: <class 'int'>,\n          Optional  (str) designated_router: <class 'str'>,\n          Optional  (str) routing_table: <class 'str'>,\n          Optional  (str) dr_this_system: <class 'bool'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) joined_group: {\n          Any  (str) *: {\n            'number_of_users': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L80"}, "nxos": {"class": "ShowIpIgmpInterface", "doc": "Parser for:\n            show ip igmp interface\n            show ip igmp interface vrf all\n            show ip igmp interface vrf <vrf>", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'groups_count': <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'enable': <class 'bool'>,\n        'link_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) address: <class 'str'>,\n        Optional  (str) subnet: <class 'str'>,\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) querier_version: <class 'int'>,\n        Optional  (str) expires: <class 'str'>,\n        Optional  (str) next_query_sent_in: <class 'str'>,\n        Optional  (str) membership_count: <class 'int'>,\n        Optional  (str) old_membership_count: <class 'int'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) configured_query_max_response_time: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) startup_query: {\n          Optional  (str) configured_interval: <class 'int'>,\n          Optional  (str) interval: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          },\n        Optional  (str) last_member: {\n          Optional  (str) mrt: <class 'int'>,\n          Optional  (str) query_count: <class 'int'>,\n          },\n        Optional  (str) configured_group_timeout: <class 'int'>,\n        Optional  (str) group_timeout: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) unsolicited_report_interval: <class 'int'>,\n        Optional  (str) configured_robustness_variable: <class 'int'>,\n        Optional  (str) robustness_variable: <class 'int'>,\n        Optional  (str) link_local_groups_reporting: <class 'bool'>,\n        Optional  (str) enable_refcount: <class 'int'>,\n        Optional  (str) immediate_leave: <class 'bool'>,\n        Optional  (str) vrf_name: <class 'str'>,\n        Optional  (str) vrf_id: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) available_groups: <class 'int'>,\n        Optional  (str) statistics: {\n          Optional  (str) general: {\n            'sent': {\n              Optional  (str) v2_queries: <class 'int'>,\n              Optional  (str) v2_reports: <class 'int'>,\n              Optional  (str) v2_leaves: <class 'int'>,\n              Optional  (str) v3_queries: <class 'int'>,\n              Optional  (str) v3_reports: <class 'int'>,\n              },\n            'received': {\n              Optional  (str) v2_queries: <class 'int'>,\n              Optional  (str) v2_reports: <class 'int'>,\n              Optional  (str) v2_leaves: <class 'int'>,\n              Optional  (str) v3_queries: <class 'int'>,\n              Optional  (str) v3_reports: <class 'int'>,\n              },\n            },\n          Optional  (str) errors: {\n            'router_alert_check': <class 'int'>,\n            },\n          },\n        Optional  (str) pim_dr: <class 'bool'>,\n        Optional  (str) vpc_svi: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L462"}}, "show ip igmp interface vrf {vrf}": {"nxos": {"class": "ShowIpIgmpInterface", "doc": "Parser for:\n            show ip igmp interface\n            show ip igmp interface vrf all\n            show ip igmp interface vrf <vrf>", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'groups_count': <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'enable': <class 'bool'>,\n        'link_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) address: <class 'str'>,\n        Optional  (str) subnet: <class 'str'>,\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) querier_version: <class 'int'>,\n        Optional  (str) expires: <class 'str'>,\n        Optional  (str) next_query_sent_in: <class 'str'>,\n        Optional  (str) membership_count: <class 'int'>,\n        Optional  (str) old_membership_count: <class 'int'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) configured_query_max_response_time: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) startup_query: {\n          Optional  (str) configured_interval: <class 'int'>,\n          Optional  (str) interval: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          },\n        Optional  (str) last_member: {\n          Optional  (str) mrt: <class 'int'>,\n          Optional  (str) query_count: <class 'int'>,\n          },\n        Optional  (str) configured_group_timeout: <class 'int'>,\n        Optional  (str) group_timeout: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) unsolicited_report_interval: <class 'int'>,\n        Optional  (str) configured_robustness_variable: <class 'int'>,\n        Optional  (str) robustness_variable: <class 'int'>,\n        Optional  (str) link_local_groups_reporting: <class 'bool'>,\n        Optional  (str) enable_refcount: <class 'int'>,\n        Optional  (str) immediate_leave: <class 'bool'>,\n        Optional  (str) vrf_name: <class 'str'>,\n        Optional  (str) vrf_id: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) available_groups: <class 'int'>,\n        Optional  (str) statistics: {\n          Optional  (str) general: {\n            'sent': {\n              Optional  (str) v2_queries: <class 'int'>,\n              Optional  (str) v2_reports: <class 'int'>,\n              Optional  (str) v2_leaves: <class 'int'>,\n              Optional  (str) v3_queries: <class 'int'>,\n              Optional  (str) v3_reports: <class 'int'>,\n              },\n            'received': {\n              Optional  (str) v2_queries: <class 'int'>,\n              Optional  (str) v2_reports: <class 'int'>,\n              Optional  (str) v2_leaves: <class 'int'>,\n              Optional  (str) v3_queries: <class 'int'>,\n              Optional  (str) v3_reports: <class 'int'>,\n              },\n            },\n          Optional  (str) errors: {\n            'router_alert_check': <class 'int'>,\n            },\n          },\n        Optional  (str) pim_dr: <class 'bool'>,\n        Optional  (str) vpc_svi: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L462"}}, "show ip igmp local-groups": {"nxos": {"class": "ShowIpIgmpLocalGroups", "doc": "Parser for:\n        show ip igmp local-groups\n        show ip igmp local-groups vrf all\n        show ip igmp local-groups vrf <vrf>", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            Optional  (str) source: {\n              Any  (str) *: {\n                'last_reporter': <class 'str'>,\n                'type': <class 'str'>,\n                },\n              },\n            Optional  (str) last_reporter: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_local-groups", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L1044"}}, "show ip igmp local-groups vrf {vrf}": {"nxos": {"class": "ShowIpIgmpLocalGroups", "doc": "Parser for:\n        show ip igmp local-groups\n        show ip igmp local-groups vrf all\n        show ip igmp local-groups vrf <vrf>", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            Optional  (str) source: {\n              Any  (str) *: {\n                'last_reporter': <class 'str'>,\n                'type': <class 'str'>,\n                },\n              },\n            Optional  (str) last_reporter: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_local-groups_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L1044"}}, "show ip igmp snooping": {"nxos": {"class": "ShowIpIgmpSnooping", "doc": "Parser for show ip igmp snooping", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_configuration: {\n  Optional  (str) enabled: <class 'str'>,\n  Optional  (str) v1v2_report_suppression: <class 'str'>,\n  Optional  (str) v3_report_suppression: <class 'str'>,\n  Optional  (str) link_local_groups_suppression: <class 'str'>,\n  Optional  (str) vpc_multicast_optimization: <class 'str'>,\n  },\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) ip_igmp_snooping: <class 'str'>,\n    Optional  (str) lookup_mode: <class 'str'>,\n    Optional  (str) v1v2_report_suppression: <class 'str'>,\n    Optional  (str) v3_report_suppression: <class 'str'>,\n    Optional  (str) link_local_groups_suppression: <class 'str'>,\n    Optional  (str) igmp_querier: {\n      Optional  (str) address: <class 'str'>,\n      Optional  (str) version: <class 'int'>,\n      Optional  (str) interval: <class 'int'>,\n      Optional  (str) last_member_query_interval: <class 'int'>,\n      Optional  (str) robustness: <class 'int'>,\n      },\n    Optional  (str) switch_querier: <class 'str'>,\n    Optional  (str) igmp_explicit_tracking: <class 'str'>,\n    Optional  (str) v2_fast_leave: <class 'str'>,\n    Optional  (str) router_ports_count: <class 'int'>,\n    Optional  (str) groups_count: <class 'int'>,\n    Optional  (str) vlan_vpc_function: <class 'str'>,\n    Optional  (str) active_ports: <class 'list'>,\n    Optional  (str) report_flooding: <class 'str'>,\n    Optional  (str) report_flooding_interfaces: <class 'str'>,\n    Optional  (str) group_address_for_proxy_leaves: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_igmp_snooping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L75"}}, "show ip igmp snooping vlan {vlan}": {"nxos": {"class": "ShowIpIgmpSnooping", "doc": "Parser for show ip igmp snooping", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\nOptional  (str) global_configuration: {\n  Optional  (str) enabled: <class 'str'>,\n  Optional  (str) v1v2_report_suppression: <class 'str'>,\n  Optional  (str) v3_report_suppression: <class 'str'>,\n  Optional  (str) link_local_groups_suppression: <class 'str'>,\n  Optional  (str) vpc_multicast_optimization: <class 'str'>,\n  },\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) ip_igmp_snooping: <class 'str'>,\n    Optional  (str) lookup_mode: <class 'str'>,\n    Optional  (str) v1v2_report_suppression: <class 'str'>,\n    Optional  (str) v3_report_suppression: <class 'str'>,\n    Optional  (str) link_local_groups_suppression: <class 'str'>,\n    Optional  (str) igmp_querier: {\n      Optional  (str) address: <class 'str'>,\n      Optional  (str) version: <class 'int'>,\n      Optional  (str) interval: <class 'int'>,\n      Optional  (str) last_member_query_interval: <class 'int'>,\n      Optional  (str) robustness: <class 'int'>,\n      },\n    Optional  (str) switch_querier: <class 'str'>,\n    Optional  (str) igmp_explicit_tracking: <class 'str'>,\n    Optional  (str) v2_fast_leave: <class 'str'>,\n    Optional  (str) router_ports_count: <class 'int'>,\n    Optional  (str) groups_count: <class 'int'>,\n    Optional  (str) vlan_vpc_function: <class 'str'>,\n    Optional  (str) active_ports: <class 'list'>,\n    Optional  (str) report_flooding: <class 'str'>,\n    Optional  (str) report_flooding_interfaces: <class 'str'>,\n    Optional  (str) group_address_for_proxy_leaves: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_igmp_snooping_vlan_vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_igmp.py#L75"}}, "show ip igmp ssm-mapping {group}": {"ios": {"class": "ShowIpIgmpSsmMapping", "doc": "\n    Parser for 'show ip igmp ssm-mapping <WROD>'\n    parser for 'show ip igmp vrf <WORD> ssm-mapping <WORD>'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'source_addr': <class 'str'>,\n        'group_address': <class 'str'>,\n        'database': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_ssm-mapping_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py#L32"}, "iosxe": {"class": "ShowIpIgmpSsmMapping", "doc": "\n    Parser for 'show ip igmp ssm-mapping <WROD>'\n    parser for 'show ip igmp vrf <WORD> ssm-mapping <WORD>'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'source_addr': <class 'str'>,\n        'group_address': <class 'str'>,\n        'database': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_ssm-mapping_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L651"}}, "show ip igmp vrf {vrf} groups detail": {"ios": {"class": "ShowIpIgmpGroupsDetail", "doc": "\n    Parser for 'show ip igmp groups detail'\n    Parser for 'show ip igmp vrf <WORD> groups detail'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            Optional  (str) source_flags: <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            Optional  (str) source_flags: <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'group_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'v3_exp': <class 'str'>,\n                'csr_exp': <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_vrf_vrf_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py#L25"}, "iosxe": {"class": "ShowIpIgmpGroupsDetail", "doc": "\n    Parser for 'show ip igmp groups detail'\n    Parser for 'show ip igmp vrf <WORD> groups detail'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            Optional  (str) source_flags: <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) v3_exp: <class 'str'>,\n            Optional  (str) csr_exp: <class 'str'>,\n            Optional  (str) forward: <class 'bool'>,\n            Optional  (str) source_flags: <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            Optional  (str) expire: <class 'str'>,\n            'up_time': <class 'str'>,\n            'group_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                'v3_exp': <class 'str'>,\n                'csr_exp': <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_vrf_vrf_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L412"}}, "show ip igmp vrf {vrf} interface": {"ios": {"class": "ShowIpIgmpInterface", "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) global_max_groups: <class 'int'>,\n    Optional  (str) global_active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) oper_status: <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) internet_protocol_processing: <class 'bool'>,\n        Optional  (str) interface_address: <class 'str'>,\n        Optional  (str) enable: <class 'bool'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) router_version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        Optional  (str) last_member_query_count: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'joins': <class 'int'>,\n          'leaves': <class 'int'>,\n          },\n        Optional  (str) multicast: {\n          Optional  (str) routing_enable: <class 'bool'>,\n          Optional  (str) ttl_threshold: <class 'int'>,\n          Optional  (str) designated_router: <class 'str'>,\n          Optional  (str) routing_table: <class 'str'>,\n          Optional  (str) dr_this_system: <class 'bool'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) joined_group: {\n          Any  (str) *: {\n            'number_of_users': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py#L18"}, "iosxe": {"class": "ShowIpIgmpInterface", "doc": "\n    Parser for 'show ip igmp interface'\n    Parser for 'show ip igmp vrf <WORD> interface'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) global_max_groups: <class 'int'>,\n    Optional  (str) global_active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) oper_status: <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) internet_protocol_processing: <class 'bool'>,\n        Optional  (str) interface_address: <class 'str'>,\n        Optional  (str) enable: <class 'bool'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) router_version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        Optional  (str) last_member_query_count: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'joins': <class 'int'>,\n          'leaves': <class 'int'>,\n          },\n        Optional  (str) multicast: {\n          Optional  (str) routing_enable: <class 'bool'>,\n          Optional  (str) ttl_threshold: <class 'int'>,\n          Optional  (str) designated_router: <class 'str'>,\n          Optional  (str) routing_table: <class 'str'>,\n          Optional  (str) dr_this_system: <class 'bool'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        Optional  (str) joined_group: {\n          Any  (str) *: {\n            'number_of_users': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L80"}}, "show ip igmp vrf {vrf} ssm-mapping {group}": {"ios": {"class": "ShowIpIgmpSsmMapping", "doc": "\n    Parser for 'show ip igmp ssm-mapping <WROD>'\n    parser for 'show ip igmp vrf <WORD> ssm-mapping <WORD>'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'source_addr': <class 'str'>,\n        'group_address': <class 'str'>,\n        'database': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_vrf_vrf_ssm-mapping_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_igmp.py#L32"}, "iosxe": {"class": "ShowIpIgmpSsmMapping", "doc": "\n    Parser for 'show ip igmp ssm-mapping <WROD>'\n    parser for 'show ip igmp vrf <WORD> ssm-mapping <WORD>'\n    ", "module_name": "show_igmp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'source_addr': <class 'str'>,\n        'group_address': <class 'str'>,\n        'database': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_igmp_vrf_vrf_ssm-mapping_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_igmp.py#L651"}}, "show ip interface": {"ios": {"class": "ShowIpInterface", "doc": "Parser for show ip interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'enabled': <class 'bool'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) broadcast_address: <class 'str'>,\n      },\n    },\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) address_determined_by: <class 'str'>,\n  Optional  (str) helper_address: <class 'str'>,\n  Optional  (str) directed_broadcast_forwarding: <class 'bool'>,\n  Optional  (str) out_common_access_list: <class 'str'>,\n  Optional  (str) out_access_list: <class 'str'>,\n  Optional  (str) inbound_common_access_list: <class 'str'>,\n  Optional  (str) inbound_access_list: <class 'str'>,\n  Optional  (str) proxy_arp: <class 'bool'>,\n  Optional  (str) local_proxy_arp: <class 'bool'>,\n  Optional  (str) security_level: <class 'str'>,\n  Optional  (str) split_horizon: <class 'bool'>,\n  Optional  (str) icmp: {\n    Optional  (str) redirects: <class 'str'>,\n    Optional  (str) unreachables: <class 'str'>,\n    Optional  (str) mask_replies: <class 'str'>,\n    },\n  Optional  (str) wccp: {\n    Optional  (str) redirect_outbound: <class 'bool'>,\n    Optional  (str) redirect_inbound: <class 'bool'>,\n    Optional  (str) redirect_exclude: <class 'bool'>,\n    },\n  Optional  (str) ip_fast_switching: <class 'bool'>,\n  Optional  (str) ip_flow_switching: <class 'bool'>,\n  Optional  (str) ip_cef_switching: <class 'bool'>,\n  Optional  (str) ip_cef_switching_turbo_vector: <class 'bool'>,\n  Optional  (str) ip_null_turbo_vector: <class 'bool'>,\n  Optional  (str) vrf: <class 'str'>,\n  Optional  (str) unicast_routing_topologies: {\n    'topology': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) ip_multicast_fast_switching: <class 'bool'>,\n  Optional  (str) ip_multicast_distributed_fast_switching: <class 'bool'>,\n  Optional  (str) ip_route_cache_flags: <class 'list'>,\n  Optional  (str) router_discovery: <class 'bool'>,\n  Optional  (str) ip_output_packet_accounting: <class 'bool'>,\n  Optional  (str) ip_access_violation_accounting: <class 'bool'>,\n  Optional  (str) tcp_ip_header_compression: <class 'bool'>,\n  Optional  (str) rtp_ip_header_compression: <class 'bool'>,\n  Optional  (str) probe_proxy_name_replies: <class 'bool'>,\n  Optional  (str) policy_routing: <class 'bool'>,\n  Optional  (str) network_address_translation: <class 'bool'>,\n  Optional  (str) bgp_policy_mapping: <class 'bool'>,\n  Optional  (str) input_features: <class 'list'>,\n  Optional  (str) multicast_groups: <class 'list'>,\n  },\n}", "uid": "show_ip_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L76"}, "iosxe": {"class": "ShowIpInterface", "doc": "Parser for show ip interface\n                  show ip interface <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'enabled': <class 'bool'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) broadcast_address: <class 'str'>,\n      },\n    },\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) address_determined_by: <class 'str'>,\n  Optional  (str) helper_address: <class 'str'>,\n  Optional  (str) directed_broadcast_forwarding: <class 'bool'>,\n  Optional  (str) out_common_access_list: <class 'str'>,\n  Optional  (str) out_access_list: <class 'str'>,\n  Optional  (str) inbound_common_access_list: <class 'str'>,\n  Optional  (str) inbound_access_list: <class 'str'>,\n  Optional  (str) proxy_arp: <class 'bool'>,\n  Optional  (str) local_proxy_arp: <class 'bool'>,\n  Optional  (str) security_level: <class 'str'>,\n  Optional  (str) split_horizon: <class 'bool'>,\n  Optional  (str) icmp: {\n    Optional  (str) redirects: <class 'str'>,\n    Optional  (str) unreachables: <class 'str'>,\n    Optional  (str) mask_replies: <class 'str'>,\n    },\n  Optional  (str) wccp: {\n    Optional  (str) redirect_outbound: <class 'bool'>,\n    Optional  (str) redirect_inbound: <class 'bool'>,\n    Optional  (str) redirect_exclude: <class 'bool'>,\n    },\n  Optional  (str) ip_fast_switching: <class 'bool'>,\n  Optional  (str) ip_flow_switching: <class 'bool'>,\n  Optional  (str) ip_cef_switching: <class 'bool'>,\n  Optional  (str) ip_cef_switching_turbo_vector: <class 'bool'>,\n  Optional  (str) ip_null_turbo_vector: <class 'bool'>,\n  Optional  (str) vrf: <class 'str'>,\n  Optional  (str) unicast_routing_topologies: {\n    'topology': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) ip_multicast_fast_switching: <class 'bool'>,\n  Optional  (str) ip_multicast_distributed_fast_switching: <class 'bool'>,\n  Optional  (str) ip_route_cache_flags: <class 'list'>,\n  Optional  (str) router_discovery: <class 'bool'>,\n  Optional  (str) ip_output_packet_accounting: <class 'bool'>,\n  Optional  (str) ip_access_violation_accounting: <class 'bool'>,\n  Optional  (str) tcp_ip_header_compression: <class 'bool'>,\n  Optional  (str) rtp_ip_header_compression: <class 'bool'>,\n  Optional  (str) probe_proxy_name_replies: <class 'bool'>,\n  Optional  (str) policy_routing: <class 'bool'>,\n  Optional  (str) network_address_translation: <class 'bool'>,\n  Optional  (str) bgp_policy_mapping: <class 'bool'>,\n  Optional  (str) input_features: <class 'list'>,\n  Optional  (str) multicast_groups: <class 'list'>,\n  },\n}", "uid": "show_ip_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1936"}}, "show ip interface brief": {"ios": {"class": "ShowIpInterfaceBrief", "doc": "Parser for: show ip interface brief", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        },\n      },\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L60"}, "iosxe": {"class": "ShowIpInterfaceBrief", "doc": "Parser for:\n     show ip interface brief\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        },\n      },\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1203"}, "iosxr": {"class": "ShowIpInterfaceBriefPipeVlan", "doc": "Parser for show ip interface brief | include Vlan", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) protocol_status: <class 'str'>,\n    Optional  (str) vrf_name: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L128"}, "nxos": {"class": "ShowIpInterfaceBrief", "doc": "Parser for show ip interface brief", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) ipaddress_extension: <class 'str'>,\n        },\n      },\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) ipaddress_extension: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2575"}}, "show ip interface brief vrf all": {"nxos": {"class": "ShowIpInterfaceBriefVrfAll", "doc": "Parser for show ip interface brief vrf all", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L3178"}}, "show ip interface brief vrf all | include {ip}": {"nxos": {"class": "ShowIpInterfaceBriefVrfAll", "doc": "Parser for show ip interface brief vrf all", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief_vrf_all___include_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L3178"}}, "show ip interface brief {interface}": {"ios": {"class": "ShowIpInterfaceBrief", "doc": "Parser for: show ip interface brief", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        },\n      },\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L60"}, "iosxe": {"class": "ShowIpInterfaceBrief", "doc": "Parser for:\n     show ip interface brief\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        },\n      },\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1203"}}, "show ip interface brief | include Vlan": {"ios": {"class": "ShowIpInterfaceBriefPipeVlan", "doc": "Parser for: show ip interface brief | include Vlan", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        },\n      },\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief___include_Vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L66"}, "iosxe": {"class": "ShowIpInterfaceBriefPipeVlan", "doc": "Parser for:\n     show ip interface brief | include Vlan\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        Optional  (str) interface_is_ok: <class 'str'>,\n        Optional  (str) method: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) protocol: <class 'str'>,\n        },\n      },\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_is_ok: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief___include_Vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1285"}, "nxos": {"class": "ShowIpInterfaceBriefPipeVlan", "doc": "Parser for show ip interface brief | include Vlan", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: {\n      Optional  (Any) Any  (str) *: {\n        'ip_address': <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) ipaddress_extension: <class 'str'>,\n        },\n      },\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) ipaddress_extension: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief___include_Vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2657"}}, "show ip interface brief | include {ip}": {"ios": {"class": "ShowIpInterfaceBriefPipeIp", "doc": "Parser for:  show ip interface brief | include <WORD>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_ok: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) protocol_status: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief___include_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L71"}, "iosxe": {"class": "ShowIpInterfaceBriefPipeIp", "doc": "Parser for:\n     show ip interface brief | include <WORD>\n     parser class implements detail parsing mechanisms for cli and yang output.\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_ok: <class 'str'>,\n    Optional  (str) method: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) protocol_status: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief___include_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1390"}, "iosxr": {"class": "ShowIpInterfaceBriefPipeVlan", "doc": "Parser for show ip interface brief | include Vlan", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) protocol_status: <class 'str'>,\n    Optional  (str) vrf_name: <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_interface_brief___include_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L128"}}, "show ip interface vrf all": {"nxos": {"class": "ShowIpInterfaceVrfAll", "doc": "Parser for show ip interface vrf all\n        show ip interface vrf <vrf>\n        show ip interface <interface> vrf all\n        show ip interface <interface> vrf <vrf>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'interface_status': <class 'str'>,\n  'iod': <class 'int'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) route_tag: <class 'str'>,\n      Optional  (str) ip_subnet: <class 'str'>,\n      Optional  (str) broadcast_address: <class 'str'>,\n      Optional  (str) route_preference: <class 'str'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    'counters': {\n      'unicast_packets_sent': <class 'int'>,\n      'unicast_packets_received': <class 'int'>,\n      'unicast_packets_forwarded': <class 'int'>,\n      'unicast_packets_originated': <class 'int'>,\n      'unicast_packets_consumed': <class 'int'>,\n      'unicast_bytes_sent': <class 'int'>,\n      'unicast_bytes_received': <class 'int'>,\n      'unicast_bytes_forwarded': <class 'int'>,\n      'unicast_bytes_originated': <class 'int'>,\n      'unicast_bytes_consumed': <class 'int'>,\n      'multicast_packets_sent': <class 'int'>,\n      'multicast_packets_received': <class 'int'>,\n      'multicast_packets_forwarded': <class 'int'>,\n      'multicast_packets_originated': <class 'int'>,\n      'multicast_packets_consumed': <class 'int'>,\n      'multicast_bytes_sent': <class 'int'>,\n      'multicast_bytes_received': <class 'int'>,\n      'multicast_bytes_forwarded': <class 'int'>,\n      'multicast_bytes_originated': <class 'int'>,\n      'multicast_bytes_consumed': <class 'int'>,\n      'broadcast_packets_sent': <class 'int'>,\n      'broadcast_packets_received': <class 'int'>,\n      'broadcast_packets_forwarded': <class 'int'>,\n      'broadcast_packets_originated': <class 'int'>,\n      'broadcast_packets_consumed': <class 'int'>,\n      'broadcast_bytes_sent': <class 'int'>,\n      'broadcast_bytes_received': <class 'int'>,\n      'broadcast_bytes_forwarded': <class 'int'>,\n      'broadcast_bytes_originated': <class 'int'>,\n      'broadcast_bytes_consumed': <class 'int'>,\n      'labeled_packets_sent': <class 'int'>,\n      'labeled_packets_received': <class 'int'>,\n      'labeled_packets_forwarded': <class 'int'>,\n      'labeled_packets_originated': <class 'int'>,\n      'labeled_packets_consumed': <class 'int'>,\n      'labeled_bytes_sent': <class 'int'>,\n      'labeled_bytes_received': <class 'int'>,\n      'labeled_bytes_forwarded': <class 'int'>,\n      'labeled_bytes_originated': <class 'int'>,\n      'labeled_bytes_consumed': <class 'int'>,\n      },\n    },\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) multicast_groups_address: <class 'str'>,\n  'ip_mtu': <class 'int'>,\n  'proxy_arp': <class 'str'>,\n  'local_proxy_arp': <class 'str'>,\n  'multicast_routing': <class 'str'>,\n  'icmp_redirects': <class 'str'>,\n  'directed_broadcast': <class 'str'>,\n  Optional  (str) ip_forwarding: <class 'str'>,\n  'icmp_unreachable': <class 'str'>,\n  'icmp_port_unreachable': <class 'str'>,\n  'unicast_reverse_path': <class 'str'>,\n  'load_sharing': <class 'str'>,\n  'int_stat_last_reset': <class 'str'>,\n  Optional  (str) wccp_redirect_outbound: <class 'str'>,\n  Optional  (str) wccp_redirect_inbound: <class 'str'>,\n  Optional  (str) wccp_redirect_exclude: <class 'str'>,\n  },\n}", "uid": "show_ip_interface_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1141"}}, "show ip interface vrf {vrf}": {"nxos": {"class": "ShowIpInterfaceVrfAll", "doc": "Parser for show ip interface vrf all\n        show ip interface vrf <vrf>\n        show ip interface <interface> vrf all\n        show ip interface <interface> vrf <vrf>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'interface_status': <class 'str'>,\n  'iod': <class 'int'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) route_tag: <class 'str'>,\n      Optional  (str) ip_subnet: <class 'str'>,\n      Optional  (str) broadcast_address: <class 'str'>,\n      Optional  (str) route_preference: <class 'str'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    'counters': {\n      'unicast_packets_sent': <class 'int'>,\n      'unicast_packets_received': <class 'int'>,\n      'unicast_packets_forwarded': <class 'int'>,\n      'unicast_packets_originated': <class 'int'>,\n      'unicast_packets_consumed': <class 'int'>,\n      'unicast_bytes_sent': <class 'int'>,\n      'unicast_bytes_received': <class 'int'>,\n      'unicast_bytes_forwarded': <class 'int'>,\n      'unicast_bytes_originated': <class 'int'>,\n      'unicast_bytes_consumed': <class 'int'>,\n      'multicast_packets_sent': <class 'int'>,\n      'multicast_packets_received': <class 'int'>,\n      'multicast_packets_forwarded': <class 'int'>,\n      'multicast_packets_originated': <class 'int'>,\n      'multicast_packets_consumed': <class 'int'>,\n      'multicast_bytes_sent': <class 'int'>,\n      'multicast_bytes_received': <class 'int'>,\n      'multicast_bytes_forwarded': <class 'int'>,\n      'multicast_bytes_originated': <class 'int'>,\n      'multicast_bytes_consumed': <class 'int'>,\n      'broadcast_packets_sent': <class 'int'>,\n      'broadcast_packets_received': <class 'int'>,\n      'broadcast_packets_forwarded': <class 'int'>,\n      'broadcast_packets_originated': <class 'int'>,\n      'broadcast_packets_consumed': <class 'int'>,\n      'broadcast_bytes_sent': <class 'int'>,\n      'broadcast_bytes_received': <class 'int'>,\n      'broadcast_bytes_forwarded': <class 'int'>,\n      'broadcast_bytes_originated': <class 'int'>,\n      'broadcast_bytes_consumed': <class 'int'>,\n      'labeled_packets_sent': <class 'int'>,\n      'labeled_packets_received': <class 'int'>,\n      'labeled_packets_forwarded': <class 'int'>,\n      'labeled_packets_originated': <class 'int'>,\n      'labeled_packets_consumed': <class 'int'>,\n      'labeled_bytes_sent': <class 'int'>,\n      'labeled_bytes_received': <class 'int'>,\n      'labeled_bytes_forwarded': <class 'int'>,\n      'labeled_bytes_originated': <class 'int'>,\n      'labeled_bytes_consumed': <class 'int'>,\n      },\n    },\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) multicast_groups_address: <class 'str'>,\n  'ip_mtu': <class 'int'>,\n  'proxy_arp': <class 'str'>,\n  'local_proxy_arp': <class 'str'>,\n  'multicast_routing': <class 'str'>,\n  'icmp_redirects': <class 'str'>,\n  'directed_broadcast': <class 'str'>,\n  Optional  (str) ip_forwarding: <class 'str'>,\n  'icmp_unreachable': <class 'str'>,\n  'icmp_port_unreachable': <class 'str'>,\n  'unicast_reverse_path': <class 'str'>,\n  'load_sharing': <class 'str'>,\n  'int_stat_last_reset': <class 'str'>,\n  Optional  (str) wccp_redirect_outbound: <class 'str'>,\n  Optional  (str) wccp_redirect_inbound: <class 'str'>,\n  Optional  (str) wccp_redirect_exclude: <class 'str'>,\n  },\n}", "uid": "show_ip_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1141"}}, "show ip interface {interface}": {"ios": {"class": "ShowIpInterface", "doc": "Parser for show ip interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'enabled': <class 'bool'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) broadcast_address: <class 'str'>,\n      },\n    },\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) address_determined_by: <class 'str'>,\n  Optional  (str) helper_address: <class 'str'>,\n  Optional  (str) directed_broadcast_forwarding: <class 'bool'>,\n  Optional  (str) out_common_access_list: <class 'str'>,\n  Optional  (str) out_access_list: <class 'str'>,\n  Optional  (str) inbound_common_access_list: <class 'str'>,\n  Optional  (str) inbound_access_list: <class 'str'>,\n  Optional  (str) proxy_arp: <class 'bool'>,\n  Optional  (str) local_proxy_arp: <class 'bool'>,\n  Optional  (str) security_level: <class 'str'>,\n  Optional  (str) split_horizon: <class 'bool'>,\n  Optional  (str) icmp: {\n    Optional  (str) redirects: <class 'str'>,\n    Optional  (str) unreachables: <class 'str'>,\n    Optional  (str) mask_replies: <class 'str'>,\n    },\n  Optional  (str) wccp: {\n    Optional  (str) redirect_outbound: <class 'bool'>,\n    Optional  (str) redirect_inbound: <class 'bool'>,\n    Optional  (str) redirect_exclude: <class 'bool'>,\n    },\n  Optional  (str) ip_fast_switching: <class 'bool'>,\n  Optional  (str) ip_flow_switching: <class 'bool'>,\n  Optional  (str) ip_cef_switching: <class 'bool'>,\n  Optional  (str) ip_cef_switching_turbo_vector: <class 'bool'>,\n  Optional  (str) ip_null_turbo_vector: <class 'bool'>,\n  Optional  (str) vrf: <class 'str'>,\n  Optional  (str) unicast_routing_topologies: {\n    'topology': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) ip_multicast_fast_switching: <class 'bool'>,\n  Optional  (str) ip_multicast_distributed_fast_switching: <class 'bool'>,\n  Optional  (str) ip_route_cache_flags: <class 'list'>,\n  Optional  (str) router_discovery: <class 'bool'>,\n  Optional  (str) ip_output_packet_accounting: <class 'bool'>,\n  Optional  (str) ip_access_violation_accounting: <class 'bool'>,\n  Optional  (str) tcp_ip_header_compression: <class 'bool'>,\n  Optional  (str) rtp_ip_header_compression: <class 'bool'>,\n  Optional  (str) probe_proxy_name_replies: <class 'bool'>,\n  Optional  (str) policy_routing: <class 'bool'>,\n  Optional  (str) network_address_translation: <class 'bool'>,\n  Optional  (str) bgp_policy_mapping: <class 'bool'>,\n  Optional  (str) input_features: <class 'list'>,\n  Optional  (str) multicast_groups: <class 'list'>,\n  },\n}", "uid": "show_ip_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L76"}, "iosxe": {"class": "ShowIpInterface", "doc": "Parser for show ip interface\n                  show ip interface <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'enabled': <class 'bool'>,\n  'oper_status': <class 'str'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) broadcast_address: <class 'str'>,\n      },\n    },\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) address_determined_by: <class 'str'>,\n  Optional  (str) helper_address: <class 'str'>,\n  Optional  (str) directed_broadcast_forwarding: <class 'bool'>,\n  Optional  (str) out_common_access_list: <class 'str'>,\n  Optional  (str) out_access_list: <class 'str'>,\n  Optional  (str) inbound_common_access_list: <class 'str'>,\n  Optional  (str) inbound_access_list: <class 'str'>,\n  Optional  (str) proxy_arp: <class 'bool'>,\n  Optional  (str) local_proxy_arp: <class 'bool'>,\n  Optional  (str) security_level: <class 'str'>,\n  Optional  (str) split_horizon: <class 'bool'>,\n  Optional  (str) icmp: {\n    Optional  (str) redirects: <class 'str'>,\n    Optional  (str) unreachables: <class 'str'>,\n    Optional  (str) mask_replies: <class 'str'>,\n    },\n  Optional  (str) wccp: {\n    Optional  (str) redirect_outbound: <class 'bool'>,\n    Optional  (str) redirect_inbound: <class 'bool'>,\n    Optional  (str) redirect_exclude: <class 'bool'>,\n    },\n  Optional  (str) ip_fast_switching: <class 'bool'>,\n  Optional  (str) ip_flow_switching: <class 'bool'>,\n  Optional  (str) ip_cef_switching: <class 'bool'>,\n  Optional  (str) ip_cef_switching_turbo_vector: <class 'bool'>,\n  Optional  (str) ip_null_turbo_vector: <class 'bool'>,\n  Optional  (str) vrf: <class 'str'>,\n  Optional  (str) unicast_routing_topologies: {\n    'topology': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) ip_multicast_fast_switching: <class 'bool'>,\n  Optional  (str) ip_multicast_distributed_fast_switching: <class 'bool'>,\n  Optional  (str) ip_route_cache_flags: <class 'list'>,\n  Optional  (str) router_discovery: <class 'bool'>,\n  Optional  (str) ip_output_packet_accounting: <class 'bool'>,\n  Optional  (str) ip_access_violation_accounting: <class 'bool'>,\n  Optional  (str) tcp_ip_header_compression: <class 'bool'>,\n  Optional  (str) rtp_ip_header_compression: <class 'bool'>,\n  Optional  (str) probe_proxy_name_replies: <class 'bool'>,\n  Optional  (str) policy_routing: <class 'bool'>,\n  Optional  (str) network_address_translation: <class 'bool'>,\n  Optional  (str) bgp_policy_mapping: <class 'bool'>,\n  Optional  (str) input_features: <class 'list'>,\n  Optional  (str) multicast_groups: <class 'list'>,\n  },\n}", "uid": "show_ip_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L1936"}}, "show ip interface {interface} vrf all": {"nxos": {"class": "ShowIpInterfaceVrfAll", "doc": "Parser for show ip interface vrf all\n        show ip interface vrf <vrf>\n        show ip interface <interface> vrf all\n        show ip interface <interface> vrf <vrf>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'interface_status': <class 'str'>,\n  'iod': <class 'int'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) route_tag: <class 'str'>,\n      Optional  (str) ip_subnet: <class 'str'>,\n      Optional  (str) broadcast_address: <class 'str'>,\n      Optional  (str) route_preference: <class 'str'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    'counters': {\n      'unicast_packets_sent': <class 'int'>,\n      'unicast_packets_received': <class 'int'>,\n      'unicast_packets_forwarded': <class 'int'>,\n      'unicast_packets_originated': <class 'int'>,\n      'unicast_packets_consumed': <class 'int'>,\n      'unicast_bytes_sent': <class 'int'>,\n      'unicast_bytes_received': <class 'int'>,\n      'unicast_bytes_forwarded': <class 'int'>,\n      'unicast_bytes_originated': <class 'int'>,\n      'unicast_bytes_consumed': <class 'int'>,\n      'multicast_packets_sent': <class 'int'>,\n      'multicast_packets_received': <class 'int'>,\n      'multicast_packets_forwarded': <class 'int'>,\n      'multicast_packets_originated': <class 'int'>,\n      'multicast_packets_consumed': <class 'int'>,\n      'multicast_bytes_sent': <class 'int'>,\n      'multicast_bytes_received': <class 'int'>,\n      'multicast_bytes_forwarded': <class 'int'>,\n      'multicast_bytes_originated': <class 'int'>,\n      'multicast_bytes_consumed': <class 'int'>,\n      'broadcast_packets_sent': <class 'int'>,\n      'broadcast_packets_received': <class 'int'>,\n      'broadcast_packets_forwarded': <class 'int'>,\n      'broadcast_packets_originated': <class 'int'>,\n      'broadcast_packets_consumed': <class 'int'>,\n      'broadcast_bytes_sent': <class 'int'>,\n      'broadcast_bytes_received': <class 'int'>,\n      'broadcast_bytes_forwarded': <class 'int'>,\n      'broadcast_bytes_originated': <class 'int'>,\n      'broadcast_bytes_consumed': <class 'int'>,\n      'labeled_packets_sent': <class 'int'>,\n      'labeled_packets_received': <class 'int'>,\n      'labeled_packets_forwarded': <class 'int'>,\n      'labeled_packets_originated': <class 'int'>,\n      'labeled_packets_consumed': <class 'int'>,\n      'labeled_bytes_sent': <class 'int'>,\n      'labeled_bytes_received': <class 'int'>,\n      'labeled_bytes_forwarded': <class 'int'>,\n      'labeled_bytes_originated': <class 'int'>,\n      'labeled_bytes_consumed': <class 'int'>,\n      },\n    },\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) multicast_groups_address: <class 'str'>,\n  'ip_mtu': <class 'int'>,\n  'proxy_arp': <class 'str'>,\n  'local_proxy_arp': <class 'str'>,\n  'multicast_routing': <class 'str'>,\n  'icmp_redirects': <class 'str'>,\n  'directed_broadcast': <class 'str'>,\n  Optional  (str) ip_forwarding: <class 'str'>,\n  'icmp_unreachable': <class 'str'>,\n  'icmp_port_unreachable': <class 'str'>,\n  'unicast_reverse_path': <class 'str'>,\n  'load_sharing': <class 'str'>,\n  'int_stat_last_reset': <class 'str'>,\n  Optional  (str) wccp_redirect_outbound: <class 'str'>,\n  Optional  (str) wccp_redirect_inbound: <class 'str'>,\n  Optional  (str) wccp_redirect_exclude: <class 'str'>,\n  },\n}", "uid": "show_ip_interface_interface_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1141"}}, "show ip interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpInterfaceVrfAll", "doc": "Parser for show ip interface vrf all\n        show ip interface vrf <vrf>\n        show ip interface <interface> vrf all\n        show ip interface <interface> vrf <vrf>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'interface_status': <class 'str'>,\n  'iod': <class 'int'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) route_tag: <class 'str'>,\n      Optional  (str) ip_subnet: <class 'str'>,\n      Optional  (str) broadcast_address: <class 'str'>,\n      Optional  (str) route_preference: <class 'str'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    'counters': {\n      'unicast_packets_sent': <class 'int'>,\n      'unicast_packets_received': <class 'int'>,\n      'unicast_packets_forwarded': <class 'int'>,\n      'unicast_packets_originated': <class 'int'>,\n      'unicast_packets_consumed': <class 'int'>,\n      'unicast_bytes_sent': <class 'int'>,\n      'unicast_bytes_received': <class 'int'>,\n      'unicast_bytes_forwarded': <class 'int'>,\n      'unicast_bytes_originated': <class 'int'>,\n      'unicast_bytes_consumed': <class 'int'>,\n      'multicast_packets_sent': <class 'int'>,\n      'multicast_packets_received': <class 'int'>,\n      'multicast_packets_forwarded': <class 'int'>,\n      'multicast_packets_originated': <class 'int'>,\n      'multicast_packets_consumed': <class 'int'>,\n      'multicast_bytes_sent': <class 'int'>,\n      'multicast_bytes_received': <class 'int'>,\n      'multicast_bytes_forwarded': <class 'int'>,\n      'multicast_bytes_originated': <class 'int'>,\n      'multicast_bytes_consumed': <class 'int'>,\n      'broadcast_packets_sent': <class 'int'>,\n      'broadcast_packets_received': <class 'int'>,\n      'broadcast_packets_forwarded': <class 'int'>,\n      'broadcast_packets_originated': <class 'int'>,\n      'broadcast_packets_consumed': <class 'int'>,\n      'broadcast_bytes_sent': <class 'int'>,\n      'broadcast_bytes_received': <class 'int'>,\n      'broadcast_bytes_forwarded': <class 'int'>,\n      'broadcast_bytes_originated': <class 'int'>,\n      'broadcast_bytes_consumed': <class 'int'>,\n      'labeled_packets_sent': <class 'int'>,\n      'labeled_packets_received': <class 'int'>,\n      'labeled_packets_forwarded': <class 'int'>,\n      'labeled_packets_originated': <class 'int'>,\n      'labeled_packets_consumed': <class 'int'>,\n      'labeled_bytes_sent': <class 'int'>,\n      'labeled_bytes_received': <class 'int'>,\n      'labeled_bytes_forwarded': <class 'int'>,\n      'labeled_bytes_originated': <class 'int'>,\n      'labeled_bytes_consumed': <class 'int'>,\n      },\n    },\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) multicast_groups_address: <class 'str'>,\n  'ip_mtu': <class 'int'>,\n  'proxy_arp': <class 'str'>,\n  'local_proxy_arp': <class 'str'>,\n  'multicast_routing': <class 'str'>,\n  'icmp_redirects': <class 'str'>,\n  'directed_broadcast': <class 'str'>,\n  Optional  (str) ip_forwarding: <class 'str'>,\n  'icmp_unreachable': <class 'str'>,\n  'icmp_port_unreachable': <class 'str'>,\n  'unicast_reverse_path': <class 'str'>,\n  'load_sharing': <class 'str'>,\n  'int_stat_last_reset': <class 'str'>,\n  Optional  (str) wccp_redirect_outbound: <class 'str'>,\n  Optional  (str) wccp_redirect_inbound: <class 'str'>,\n  Optional  (str) wccp_redirect_exclude: <class 'str'>,\n  },\n}", "uid": "show_ip_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1141"}}, "show ip local pool {pool}": {"asa": {"class": "ShowIpLocalPool", "doc": "Parser for\n        * show ip local pool {pool}\n    ", "module_name": "show_ip", "package": "genie.libs.parser", "schema": "{\n'pool': {\n  <class 'str'>: {\n    'available_addresses': <class 'list'>,\n    'in_use_addresses': <class 'list'>,\n    'begin': <class 'str'>,\n    'end': <class 'str'>,\n    'free': <class 'int'>,\n    'held': <class 'int'>,\n    'in_use': <class 'int'>,\n    'mask': <class 'str'>,\n    },\n  },\n}", "uid": "show_ip_local_pool_pool", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_ip.py#L42"}}, "show ip mroute": {"ios": {"class": "ShowIpMroute", "doc": "Parser for:\n        show ip mroute\n        show ip mroute vrf <vrf>", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'expire': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) vcd: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_mroute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L22"}, "iosxe": {"class": "ShowIpMroute", "doc": "Parser for:\n        show ip mroute\n        show ip mroute vrf <vrf>", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'expire': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) vcd: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_mroute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L81"}}, "show ip mroute static": {"ios": {"class": "ShowIpMrouteStatic", "doc": "Parser for:\n            show ip mroute static\n            show ip mroute vrf <vrf> static\n        ", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'mroute': {\n      Any  (str) *: {\n        'path': {\n          Any  (str) *: {\n            'neighbor_address': <class 'str'>,\n            Optional  (str) admin_distance: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_mroute_static", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L35"}, "iosxe": {"class": "ShowIpMrouteStatic", "doc": "Parser for:\n            show ip mroute static\n            show ip mroute vrf <vrf> static\n        ", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'mroute': {\n      Any  (str) *: {\n        'path': {\n          Any  (str) *: {\n            'neighbor_address': <class 'str'>,\n            Optional  (str) admin_distance: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_mroute_static", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L347"}}, "show ip mroute vrf all": {"nxos": {"class": "ShowIpMrouteVrfAll", "doc": "Parser for show ip mroute vrf all", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) oil_count: <class 'int'>,\n                Optional  (str) bidir: <class 'bool'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) rpf_nbr: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) oil_uptime: <class 'str'>,\n                    Optional  (str) oil_flags: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_mroute_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L60"}}, "show ip mroute vrf {vrf}": {"ios": {"class": "ShowIpMroute", "doc": "Parser for:\n        show ip mroute\n        show ip mroute vrf <vrf>", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'expire': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) vcd: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_mroute_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L22"}, "iosxe": {"class": "ShowIpMroute", "doc": "Parser for:\n        show ip mroute\n        show ip mroute vrf <vrf>", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'expire': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) vcd: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_mroute_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L81"}}, "show ip mroute vrf {vrf} static": {"ios": {"class": "ShowIpMrouteStatic", "doc": "Parser for:\n            show ip mroute static\n            show ip mroute vrf <vrf> static\n        ", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'mroute': {\n      Any  (str) *: {\n        'path': {\n          Any  (str) *: {\n            'neighbor_address': <class 'str'>,\n            Optional  (str) admin_distance: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_mroute_vrf_vrf_static", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L35"}, "iosxe": {"class": "ShowIpMrouteStatic", "doc": "Parser for:\n            show ip mroute static\n            show ip mroute vrf <vrf> static\n        ", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'mroute': {\n      Any  (str) *: {\n        'path': {\n          Any  (str) *: {\n            'neighbor_address': <class 'str'>,\n            Optional  (str) admin_distance: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_mroute_vrf_vrf_static", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L347"}}, "show ip msdp peer": {"ios": {"class": "ShowIpMsdpPeer", "doc": " Parser for:\n        * 'show ip msdp peer'\n        * 'show ip msdp vrf <vrf> peer'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'elapsed_time': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        'connect_source_address': <class 'str'>,\n        'connect_source': <class 'str'>,\n        'session_state': <class 'str'>,\n        'conn_count_cleared': <class 'str'>,\n        'resets': <class 'str'>,\n        'sa_learned_from': <class 'int'>,\n        'sa_filter': {\n          'in': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              'route_map': <class 'str'>,\n              },\n            },\n          'out': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              'route_map': <class 'str'>,\n              },\n            },\n          },\n        'ttl_threshold': <class 'int'>,\n        'sa_request': {\n          'input_filter': <class 'str'>,\n          },\n        'signature_protection': <class 'bool'>,\n        'statistics': {\n          'established_transitions': <class 'int'>,\n          'output_msg_discarded': <class 'int'>,\n          'queue': {\n            'size_in': <class 'int'>,\n            'size_out': <class 'int'>,\n            },\n          'received': {\n            'sa_message': <class 'int'>,\n            'sa_request': <class 'int'>,\n            'data_packets': <class 'int'>,\n            'data_message': <class 'int'>,\n            },\n          'sent': {\n            'sa_message': <class 'int'>,\n            'sa_response': <class 'int'>,\n            'data_packets': <class 'int'>,\n            'data_message': <class 'int'>,\n            },\n          'error': {\n            'rpf_failure': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_msdp.py#L16"}, "iosxe": {"class": "ShowIpMsdpPeer", "doc": " Parser for:\n        * 'show ip msdp peer'\n        * 'show ip msdp vrf <vrf> peer'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'elapsed_time': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        'connect_source_address': <class 'str'>,\n        'connect_source': <class 'str'>,\n        'session_state': <class 'str'>,\n        'conn_count_cleared': <class 'str'>,\n        'resets': <class 'str'>,\n        'sa_learned_from': <class 'int'>,\n        'sa_filter': {\n          'in': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              'route_map': <class 'str'>,\n              },\n            },\n          'out': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              'route_map': <class 'str'>,\n              },\n            },\n          },\n        'ttl_threshold': <class 'int'>,\n        'sa_request': {\n          'input_filter': <class 'str'>,\n          },\n        'signature_protection': <class 'bool'>,\n        'statistics': {\n          'established_transitions': <class 'int'>,\n          'output_msg_discarded': <class 'int'>,\n          'queue': {\n            'size_in': <class 'int'>,\n            'size_out': <class 'int'>,\n            },\n          'received': {\n            'sa_message': <class 'int'>,\n            'sa_request': <class 'int'>,\n            'data_packets': <class 'int'>,\n            'data_message': <class 'int'>,\n            },\n          'sent': {\n            'sa_message': <class 'int'>,\n            'sa_response': <class 'int'>,\n            'data_packets': <class 'int'>,\n            'data_message': <class 'int'>,\n            },\n          'error': {\n            'rpf_failure': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_msdp.py#L82"}, "nxos": {"class": "ShowIpMsdpPeerVrf", "doc": "Parser for :\n       show ip msdp peer vrf <vrf>", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'connect_source': <class 'str'>,\n        'peer_as': <class 'str'>,\n        'connect_source_address': <class 'str'>,\n        Optional  (str) authentication: {\n          'password': {\n            'set': <class 'bool'>,\n            Optional  (str) key: <class 'str'>,\n            },\n          },\n        'enable': <class 'bool'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) reset_reason: <class 'str'>,\n        Optional  (str) mesh_group: <class 'str'>,\n        'sa_limit': <class 'str'>,\n        'session_state': <class 'str'>,\n        'elapsed_time': <class 'str'>,\n        Optional  (str) sa_filter: {\n          Optional  (str) in: <class 'str'>,\n          Optional  (str) out: <class 'str'>,\n          },\n        'timer': {\n          'connect_retry_interval': <class 'int'>,\n          'keepalive_interval': <class 'int'>,\n          'holdtime_interval': <class 'int'>,\n          },\n        'statistics': {\n          'last_message_received': <class 'str'>,\n          Optional  (str) connection_attempts: <class 'int'>,\n          Optional  (str) cache_lifetime: <class 'str'>,\n          Optional  (str) established_transitions: <class 'int'>,\n          'discontinuity_time': <class 'str'>,\n          'port': {\n            'local': <class 'int'>,\n            'remote': <class 'int'>,\n            },\n          'error': {\n            'rpf_failure': <class 'str'>,\n            },\n          'received': {\n            Optional  (str) keepalive: <class 'int'>,\n            Optional  (str) notification: <class 'int'>,\n            Optional  (str) sa_message: <class 'int'>,\n            Optional  (str) sa_response: <class 'int'>,\n            Optional  (str) sa_request: <class 'int'>,\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) ctrl_message: <class 'int'>,\n            Optional  (str) data_message: <class 'int'>,\n            },\n          'sent': {\n            Optional  (str) keepalive: <class 'int'>,\n            Optional  (str) notification: <class 'int'>,\n            Optional  (str) sa_message: <class 'int'>,\n            Optional  (str) sa_response: <class 'int'>,\n            Optional  (str) sa_request: <class 'int'>,\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) ctrl_message: <class 'int'>,\n            Optional  (str) data_message: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L102"}}, "show ip msdp peer vrf {vrf}": {"nxos": {"class": "ShowIpMsdpPeerVrf", "doc": "Parser for :\n       show ip msdp peer vrf <vrf>", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'connect_source': <class 'str'>,\n        'peer_as': <class 'str'>,\n        'connect_source_address': <class 'str'>,\n        Optional  (str) authentication: {\n          'password': {\n            'set': <class 'bool'>,\n            Optional  (str) key: <class 'str'>,\n            },\n          },\n        'enable': <class 'bool'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) reset_reason: <class 'str'>,\n        Optional  (str) mesh_group: <class 'str'>,\n        'sa_limit': <class 'str'>,\n        'session_state': <class 'str'>,\n        'elapsed_time': <class 'str'>,\n        Optional  (str) sa_filter: {\n          Optional  (str) in: <class 'str'>,\n          Optional  (str) out: <class 'str'>,\n          },\n        'timer': {\n          'connect_retry_interval': <class 'int'>,\n          'keepalive_interval': <class 'int'>,\n          'holdtime_interval': <class 'int'>,\n          },\n        'statistics': {\n          'last_message_received': <class 'str'>,\n          Optional  (str) connection_attempts: <class 'int'>,\n          Optional  (str) cache_lifetime: <class 'str'>,\n          Optional  (str) established_transitions: <class 'int'>,\n          'discontinuity_time': <class 'str'>,\n          'port': {\n            'local': <class 'int'>,\n            'remote': <class 'int'>,\n            },\n          'error': {\n            'rpf_failure': <class 'str'>,\n            },\n          'received': {\n            Optional  (str) keepalive: <class 'int'>,\n            Optional  (str) notification: <class 'int'>,\n            Optional  (str) sa_message: <class 'int'>,\n            Optional  (str) sa_response: <class 'int'>,\n            Optional  (str) sa_request: <class 'int'>,\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) ctrl_message: <class 'int'>,\n            Optional  (str) data_message: <class 'int'>,\n            },\n          'sent': {\n            Optional  (str) keepalive: <class 'int'>,\n            Optional  (str) notification: <class 'int'>,\n            Optional  (str) sa_message: <class 'int'>,\n            Optional  (str) sa_response: <class 'int'>,\n            Optional  (str) sa_request: <class 'int'>,\n            Optional  (str) total: <class 'int'>,\n            Optional  (str) ctrl_message: <class 'int'>,\n            Optional  (str) data_message: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_peer_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L102"}}, "show ip msdp policy statistics sa-policy {peer} {method}": {"nxos": {"class": "ShowIpMsdpPolicyStatisticsSaPolicyOut", "doc": "Parser for :\n        show ip msdp policy statistics sa-policy <address> out", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        Optional  (str) in: {\n          'total_accept_count': <class 'int'>,\n          'total_reject_count': <class 'int'>,\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) num_of_comparison: <class 'int'>,\n              Optional  (str) num_of_matches: <class 'int'>,\n              'match': <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) out: {\n          'total_accept_count': <class 'int'>,\n          'total_reject_count': <class 'int'>,\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) num_of_comparison: <class 'int'>,\n              Optional  (str) num_of_matches: <class 'int'>,\n              'match': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_policy_statistics_sa-policy_peer_method", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L690"}}, "show ip msdp policy statistics sa-policy {peer} {method} vrf {vrf}": {"nxos": {"class": "ShowIpMsdpPolicyStatisticsSaPolicyOut", "doc": "Parser for :\n        show ip msdp policy statistics sa-policy <address> out", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        Optional  (str) in: {\n          'total_accept_count': <class 'int'>,\n          'total_reject_count': <class 'int'>,\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) num_of_comparison: <class 'int'>,\n              Optional  (str) num_of_matches: <class 'int'>,\n              'match': <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) out: {\n          'total_accept_count': <class 'int'>,\n          'total_reject_count': <class 'int'>,\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) num_of_comparison: <class 'int'>,\n              Optional  (str) num_of_matches: <class 'int'>,\n              'match': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_policy_statistics_sa-policy_peer_method_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L690"}}, "show ip msdp sa-cache": {"ios": {"class": "ShowIpMsdpSaCache", "doc": " Parser for:\n\t\t* 'show ip msdp vrf {vrf} sa-cache'\n        * 'show ip msdp sa-cache'\n\t", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'num_of_sa_cache': <class 'int'>,\n    'sa_cache': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'source_addr': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        Optional  (str) peer_learned_from: <class 'str'>,\n        Optional  (str) rpf_peer: <class 'str'>,\n        'peer': <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        Optional  (str) statistics: {\n          'received': {\n            'sa': <class 'int'>,\n            'encapsulated_data_received': <class 'int'>,\n            },\n          },\n        'up_time': <class 'str'>,\n        'expire': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_sa-cache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_msdp.py#L24"}, "iosxe": {"class": "ShowIpMsdpSaCache", "doc": null, "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'num_of_sa_cache': <class 'int'>,\n    'sa_cache': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'source_addr': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        Optional  (str) peer_learned_from: <class 'str'>,\n        Optional  (str) rpf_peer: <class 'str'>,\n        'peer': <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        Optional  (str) statistics: {\n          'received': {\n            'sa': <class 'int'>,\n            'encapsulated_data_received': <class 'int'>,\n            },\n          },\n        'up_time': <class 'str'>,\n        'expire': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_sa-cache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_msdp.py#L424"}}, "show ip msdp sa-cache detail": {"nxos": {"class": "ShowIpMsdpSaCacheDetailVrf", "doc": "Parser for :\n       show ip msdp sa-cache detail vrf <vrf>", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sa_cache': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'source_addr': <class 'str'>,\n        'up_time': <class 'str'>,\n        'expire': <class 'str'>,\n        'asn': <class 'int'>,\n        'peer_learned_from': <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_sa-cache_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L441"}}, "show ip msdp sa-cache detail vrf {vrf}": {"nxos": {"class": "ShowIpMsdpSaCacheDetailVrf", "doc": "Parser for :\n       show ip msdp sa-cache detail vrf <vrf>", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sa_cache': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'source_addr': <class 'str'>,\n        'up_time': <class 'str'>,\n        'expire': <class 'str'>,\n        'asn': <class 'int'>,\n        'peer_learned_from': <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_sa-cache_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L441"}}, "show ip msdp summary": {"nxos": {"class": "ShowIpMsdpSummary", "doc": "Parser for :\n        show ip msdp summary\n        show ip msdp summary vrf all\n        show ip msdp summary vrf <vrf>", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_as': <class 'int'>,\n    'originator_id': <class 'str'>,\n    'statistics': {\n      'num_of_configured_peers': <class 'int'>,\n      'num_of_established_peers': <class 'int'>,\n      'num_of_shutdown_peers': <class 'int'>,\n      },\n    Optional  (str) peer: {\n      Any  (str) *: {\n        'session_state': <class 'str'>,\n        'peer_as': <class 'int'>,\n        'elapsed_time': <class 'str'>,\n        'address': <class 'str'>,\n        'statistics': {\n          'last_message_received': <class 'str'>,\n          'num_of_sg_received': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L737"}}, "show ip msdp summary vrf {vrf}": {"nxos": {"class": "ShowIpMsdpSummary", "doc": "Parser for :\n        show ip msdp summary\n        show ip msdp summary vrf all\n        show ip msdp summary vrf <vrf>", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_as': <class 'int'>,\n    'originator_id': <class 'str'>,\n    'statistics': {\n      'num_of_configured_peers': <class 'int'>,\n      'num_of_established_peers': <class 'int'>,\n      'num_of_shutdown_peers': <class 'int'>,\n      },\n    Optional  (str) peer: {\n      Any  (str) *: {\n        'session_state': <class 'str'>,\n        'peer_as': <class 'int'>,\n        'elapsed_time': <class 'str'>,\n        'address': <class 'str'>,\n        'statistics': {\n          'last_message_received': <class 'str'>,\n          'num_of_sg_received': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_summary_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L737"}}, "show ip msdp vrf {vrf} peer": {"ios": {"class": "ShowIpMsdpPeer", "doc": " Parser for:\n        * 'show ip msdp peer'\n        * 'show ip msdp vrf <vrf> peer'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'elapsed_time': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        'connect_source_address': <class 'str'>,\n        'connect_source': <class 'str'>,\n        'session_state': <class 'str'>,\n        'conn_count_cleared': <class 'str'>,\n        'resets': <class 'str'>,\n        'sa_learned_from': <class 'int'>,\n        'sa_filter': {\n          'in': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              'route_map': <class 'str'>,\n              },\n            },\n          'out': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              'route_map': <class 'str'>,\n              },\n            },\n          },\n        'ttl_threshold': <class 'int'>,\n        'sa_request': {\n          'input_filter': <class 'str'>,\n          },\n        'signature_protection': <class 'bool'>,\n        'statistics': {\n          'established_transitions': <class 'int'>,\n          'output_msg_discarded': <class 'int'>,\n          'queue': {\n            'size_in': <class 'int'>,\n            'size_out': <class 'int'>,\n            },\n          'received': {\n            'sa_message': <class 'int'>,\n            'sa_request': <class 'int'>,\n            'data_packets': <class 'int'>,\n            'data_message': <class 'int'>,\n            },\n          'sent': {\n            'sa_message': <class 'int'>,\n            'sa_response': <class 'int'>,\n            'data_packets': <class 'int'>,\n            'data_message': <class 'int'>,\n            },\n          'error': {\n            'rpf_failure': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_vrf_vrf_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_msdp.py#L16"}, "iosxe": {"class": "ShowIpMsdpPeer", "doc": " Parser for:\n        * 'show ip msdp peer'\n        * 'show ip msdp vrf <vrf> peer'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'elapsed_time': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        'connect_source_address': <class 'str'>,\n        'connect_source': <class 'str'>,\n        'session_state': <class 'str'>,\n        'conn_count_cleared': <class 'str'>,\n        'resets': <class 'str'>,\n        'sa_learned_from': <class 'int'>,\n        'sa_filter': {\n          'in': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              'route_map': <class 'str'>,\n              },\n            },\n          'out': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              'route_map': <class 'str'>,\n              },\n            },\n          },\n        'ttl_threshold': <class 'int'>,\n        'sa_request': {\n          'input_filter': <class 'str'>,\n          },\n        'signature_protection': <class 'bool'>,\n        'statistics': {\n          'established_transitions': <class 'int'>,\n          'output_msg_discarded': <class 'int'>,\n          'queue': {\n            'size_in': <class 'int'>,\n            'size_out': <class 'int'>,\n            },\n          'received': {\n            'sa_message': <class 'int'>,\n            'sa_request': <class 'int'>,\n            'data_packets': <class 'int'>,\n            'data_message': <class 'int'>,\n            },\n          'sent': {\n            'sa_message': <class 'int'>,\n            'sa_response': <class 'int'>,\n            'data_packets': <class 'int'>,\n            'data_message': <class 'int'>,\n            },\n          'error': {\n            'rpf_failure': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_vrf_vrf_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_msdp.py#L82"}}, "show ip msdp vrf {vrf} sa-cache": {"ios": {"class": "ShowIpMsdpSaCache", "doc": " Parser for:\n\t\t* 'show ip msdp vrf {vrf} sa-cache'\n        * 'show ip msdp sa-cache'\n\t", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'num_of_sa_cache': <class 'int'>,\n    'sa_cache': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'source_addr': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        Optional  (str) peer_learned_from: <class 'str'>,\n        Optional  (str) rpf_peer: <class 'str'>,\n        'peer': <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        Optional  (str) statistics: {\n          'received': {\n            'sa': <class 'int'>,\n            'encapsulated_data_received': <class 'int'>,\n            },\n          },\n        'up_time': <class 'str'>,\n        'expire': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_vrf_vrf_sa-cache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_msdp.py#L24"}, "iosxe": {"class": "ShowIpMsdpSaCache", "doc": null, "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'num_of_sa_cache': <class 'int'>,\n    'sa_cache': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'source_addr': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        Optional  (str) peer_learned_from: <class 'str'>,\n        Optional  (str) rpf_peer: <class 'str'>,\n        'peer': <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        Optional  (str) statistics: {\n          'received': {\n            'sa': <class 'int'>,\n            'encapsulated_data_received': <class 'int'>,\n            },\n          },\n        'up_time': <class 'str'>,\n        'expire': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_msdp_vrf_vrf_sa-cache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_msdp.py#L424"}}, "show ip multicast": {"ios": {"class": "ShowIpMulticast", "doc": "Parser for:\n        show ip multicast\n        show ip multicast vrf <vrf>\n    ", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'enable': <class 'bool'>,\n    'multipath': <class 'bool'>,\n    'route_limit': <class 'str'>,\n    'fallback_group_mode': <class 'str'>,\n    'multicast_bound_with_filter_autorp': <class 'int'>,\n    Optional  (str) mo_frr: <class 'bool'>,\n    },\n  },\n}", "uid": "show_ip_multicast", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L42"}, "iosxe": {"class": "ShowIpMulticast", "doc": "Parser for:\n        show ip multicast\n        show ip multicast vrf <vrf>\n    ", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'enable': <class 'bool'>,\n    'multipath': <class 'bool'>,\n    'route_limit': <class 'str'>,\n    'fallback_group_mode': <class 'str'>,\n    'multicast_bound_with_filter_autorp': <class 'int'>,\n    Optional  (str) mo_frr: <class 'bool'>,\n    },\n  },\n}", "uid": "show_ip_multicast", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L437"}}, "show ip multicast vrf {vrf}": {"ios": {"class": "ShowIpMulticast", "doc": "Parser for:\n        show ip multicast\n        show ip multicast vrf <vrf>\n    ", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'enable': <class 'bool'>,\n    'multipath': <class 'bool'>,\n    'route_limit': <class 'str'>,\n    'fallback_group_mode': <class 'str'>,\n    'multicast_bound_with_filter_autorp': <class 'int'>,\n    Optional  (str) mo_frr: <class 'bool'>,\n    },\n  },\n}", "uid": "show_ip_multicast_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L42"}, "iosxe": {"class": "ShowIpMulticast", "doc": "Parser for:\n        show ip multicast\n        show ip multicast vrf <vrf>\n    ", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'enable': <class 'bool'>,\n    'multipath': <class 'bool'>,\n    'route_limit': <class 'str'>,\n    'fallback_group_mode': <class 'str'>,\n    'multicast_bound_with_filter_autorp': <class 'int'>,\n    Optional  (str) mo_frr: <class 'bool'>,\n    },\n  },\n}", "uid": "show_ip_multicast_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L437"}}, "show ip nat statistics": {"ios": {"class": "ShowIpNatStatistics", "doc": " Schema for command:\n            * show ip nat statistics\n    ", "module_name": "show_ip_nat", "package": "genie.libs.parser", "schema": "{\n'active_translations': {\n  'total': <class 'int'>,\n  'static': <class 'int'>,\n  'dynamic': <class 'int'>,\n  'extended': <class 'int'>,\n  },\n'interfaces': {\n  Optional  (str) outside: <class 'list'>,\n  Optional  (str) inside: <class 'list'>,\n  },\n'hits': <class 'int'>,\n'misses': <class 'int'>,\nOptional  (str) dynamic_mappings: {\n  Any  (str) *: {\n    'id': {\n      Any  (str) *: {\n        Optional  (str) match: <class 'str'>,\n        Optional  (str) access_list: <class 'str'>,\n        Optional  (str) route_map: <class 'str'>,\n        Optional  (str) refcount: <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) pool: {\n          Any  (str) *: {\n            'netmask': <class 'str'>,\n            'start': <class 'str'>,\n            'end': <class 'str'>,\n            'type': <class 'str'>,\n            'total_addresses': <class 'int'>,\n            'allocated': <class 'int'>,\n            'allocated_percentage': <class 'int'>,\n            'misses': <class 'int'>,\n            Optional  (str) addr_hash: <class 'int'>,\n            Optional  (str) average_len: <class 'int'>,\n            Optional  (str) chains: <class 'str'>,\n            Optional  (str) id: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) nat_limit_statistics: {\n  'max_entry': {\n    'max_allowed': <class 'int'>,\n    'used': <class 'int'>,\n    'missed': <class 'int'>,\n    },\n  },\nOptional  (str) cef_translated_pkts: <class 'int'>,\nOptional  (str) in_to_out_drops: <class 'int'>,\nOptional  (str) out_to_in_drops: <class 'int'>,\nOptional  (str) cef_punted_pkts: <class 'int'>,\nOptional  (str) expired_translations: <class 'int'>,\nOptional  (str) pool_stats_drop: <class 'int'>,\nOptional  (str) mapping_stats_drop: <class 'int'>,\nOptional  (str) port_block_alloc_fail: <class 'int'>,\nOptional  (str) ip_alias_add_fail: <class 'int'>,\nOptional  (str) limit_entry_add_fail: <class 'int'>,\nOptional  (str) queued_pkts: <class 'int'>,\nOptional  (str) peak_translations: <class 'int'>,\nOptional  (str) occurred: <class 'str'>,\nOptional  (str) total_doors: <class 'int'>,\nOptional  (str) appl_doors: <class 'int'>,\nOptional  (str) normal_doors: <class 'int'>,\n}", "uid": "show_ip_nat_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ip_nat.py#L40"}, "iosxe": {"class": "ShowIpNatStatistics", "doc": "\n        * show ip nat statistics\n    ", "module_name": "show_ip_nat", "package": "genie.libs.parser", "schema": "{\n'active_translations': {\n  'total': <class 'int'>,\n  'static': <class 'int'>,\n  'dynamic': <class 'int'>,\n  'extended': <class 'int'>,\n  },\n'interfaces': {\n  Optional  (str) outside: <class 'list'>,\n  Optional  (str) inside: <class 'list'>,\n  },\n'hits': <class 'int'>,\n'misses': <class 'int'>,\nOptional  (str) dynamic_mappings: {\n  Any  (str) *: {\n    'id': {\n      Any  (str) *: {\n        Optional  (str) match: <class 'str'>,\n        Optional  (str) access_list: <class 'str'>,\n        Optional  (str) route_map: <class 'str'>,\n        Optional  (str) refcount: <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) pool: {\n          Any  (str) *: {\n            'netmask': <class 'str'>,\n            'start': <class 'str'>,\n            'end': <class 'str'>,\n            'type': <class 'str'>,\n            'total_addresses': <class 'int'>,\n            'allocated': <class 'int'>,\n            'allocated_percentage': <class 'int'>,\n            'misses': <class 'int'>,\n            Optional  (str) addr_hash: <class 'int'>,\n            Optional  (str) average_len: <class 'int'>,\n            Optional  (str) chains: <class 'str'>,\n            Optional  (str) id: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) nat_limit_statistics: {\n  'max_entry': {\n    'max_allowed': <class 'int'>,\n    'used': <class 'int'>,\n    'missed': <class 'int'>,\n    },\n  },\nOptional  (str) cef_translated_pkts: <class 'int'>,\nOptional  (str) in_to_out_drops: <class 'int'>,\nOptional  (str) out_to_in_drops: <class 'int'>,\nOptional  (str) cef_punted_pkts: <class 'int'>,\nOptional  (str) expired_translations: <class 'int'>,\nOptional  (str) pool_stats_drop: <class 'int'>,\nOptional  (str) mapping_stats_drop: <class 'int'>,\nOptional  (str) port_block_alloc_fail: <class 'int'>,\nOptional  (str) ip_alias_add_fail: <class 'int'>,\nOptional  (str) limit_entry_add_fail: <class 'int'>,\nOptional  (str) queued_pkts: <class 'int'>,\nOptional  (str) peak_translations: <class 'int'>,\nOptional  (str) occurred: <class 'str'>,\nOptional  (str) total_doors: <class 'int'>,\nOptional  (str) appl_doors: <class 'int'>,\nOptional  (str) normal_doors: <class 'int'>,\n}", "uid": "show_ip_nat_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_nat.py#L385"}}, "show ip nat translations": {"ios": {"class": "ShowIpNatTranslations", "doc": "\n        * show ip nat translations\n        * show ip nat translations verbose\n    ", "module_name": "show_ip_nat", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'protocol': <class 'str'>,\n        Optional  (str) inside_global: <class 'str'>,\n        Optional  (str) inside_local: <class 'str'>,\n        Optional  (str) outside_local: <class 'str'>,\n        Optional  (str) outside_global: <class 'str'>,\n        Optional  (str) group_id: <class 'int'>,\n        Optional  (str) time_left: <class 'str'>,\n        Optional  (str) details: {\n          'create': <class 'str'>,\n          'use': <class 'str'>,\n          'timeout': <class 'str'>,\n          'map_id_in': <class 'int'>,\n          'mac_address': <class 'str'>,\n          'input_idb': <class 'str'>,\n          'entry_id': <class 'str'>,\n          'use_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  Optional  (str) number_of_translations: <class 'int'>,\n  },\n}", "uid": "show_ip_nat_translations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ip_nat.py#L31"}, "iosxe": {"class": "ShowIpNatTranslations", "doc": "\n        * show ip nat translations\n        * show ip nat translations verbose\n        * show ip nat translations vrf {vrf}\n        * show ip nat translations vrf {vrf} verbose\n    ", "module_name": "show_ip_nat", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'protocol': <class 'str'>,\n        Optional  (str) inside_global: <class 'str'>,\n        Optional  (str) inside_local: <class 'str'>,\n        Optional  (str) outside_local: <class 'str'>,\n        Optional  (str) outside_global: <class 'str'>,\n        Optional  (str) group_id: <class 'int'>,\n        Optional  (str) time_left: <class 'str'>,\n        Optional  (str) details: {\n          'create': <class 'str'>,\n          'use': <class 'str'>,\n          'timeout': <class 'str'>,\n          'map_id_in': <class 'int'>,\n          'mac_address': <class 'str'>,\n          'input_idb': <class 'str'>,\n          'entry_id': <class 'str'>,\n          'use_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  Optional  (str) number_of_translations: <class 'int'>,\n  },\n}", "uid": "show_ip_nat_translations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_nat.py#L64"}}, "show ip nat translations verbose": {"ios": {"class": "ShowIpNatTranslations", "doc": "\n        * show ip nat translations\n        * show ip nat translations verbose\n    ", "module_name": "show_ip_nat", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'protocol': <class 'str'>,\n        Optional  (str) inside_global: <class 'str'>,\n        Optional  (str) inside_local: <class 'str'>,\n        Optional  (str) outside_local: <class 'str'>,\n        Optional  (str) outside_global: <class 'str'>,\n        Optional  (str) group_id: <class 'int'>,\n        Optional  (str) time_left: <class 'str'>,\n        Optional  (str) details: {\n          'create': <class 'str'>,\n          'use': <class 'str'>,\n          'timeout': <class 'str'>,\n          'map_id_in': <class 'int'>,\n          'mac_address': <class 'str'>,\n          'input_idb': <class 'str'>,\n          'entry_id': <class 'str'>,\n          'use_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  Optional  (str) number_of_translations: <class 'int'>,\n  },\n}", "uid": "show_ip_nat_translations_verbose", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ip_nat.py#L31"}, "iosxe": {"class": "ShowIpNatTranslations", "doc": "\n        * show ip nat translations\n        * show ip nat translations verbose\n        * show ip nat translations vrf {vrf}\n        * show ip nat translations vrf {vrf} verbose\n    ", "module_name": "show_ip_nat", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'protocol': <class 'str'>,\n        Optional  (str) inside_global: <class 'str'>,\n        Optional  (str) inside_local: <class 'str'>,\n        Optional  (str) outside_local: <class 'str'>,\n        Optional  (str) outside_global: <class 'str'>,\n        Optional  (str) group_id: <class 'int'>,\n        Optional  (str) time_left: <class 'str'>,\n        Optional  (str) details: {\n          'create': <class 'str'>,\n          'use': <class 'str'>,\n          'timeout': <class 'str'>,\n          'map_id_in': <class 'int'>,\n          'mac_address': <class 'str'>,\n          'input_idb': <class 'str'>,\n          'entry_id': <class 'str'>,\n          'use_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  Optional  (str) number_of_translations: <class 'int'>,\n  },\n}", "uid": "show_ip_nat_translations_verbose", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_nat.py#L64"}}, "show ip nat translations vrf {vrf}": {"ios": {"class": "ShowIpNatTranslations", "doc": "\n        * show ip nat translations\n        * show ip nat translations verbose\n    ", "module_name": "show_ip_nat", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'protocol': <class 'str'>,\n        Optional  (str) inside_global: <class 'str'>,\n        Optional  (str) inside_local: <class 'str'>,\n        Optional  (str) outside_local: <class 'str'>,\n        Optional  (str) outside_global: <class 'str'>,\n        Optional  (str) group_id: <class 'int'>,\n        Optional  (str) time_left: <class 'str'>,\n        Optional  (str) details: {\n          'create': <class 'str'>,\n          'use': <class 'str'>,\n          'timeout': <class 'str'>,\n          'map_id_in': <class 'int'>,\n          'mac_address': <class 'str'>,\n          'input_idb': <class 'str'>,\n          'entry_id': <class 'str'>,\n          'use_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  Optional  (str) number_of_translations: <class 'int'>,\n  },\n}", "uid": "show_ip_nat_translations_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ip_nat.py#L31"}, "iosxe": {"class": "ShowIpNatTranslations", "doc": "\n        * show ip nat translations\n        * show ip nat translations verbose\n        * show ip nat translations vrf {vrf}\n        * show ip nat translations vrf {vrf} verbose\n    ", "module_name": "show_ip_nat", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'protocol': <class 'str'>,\n        Optional  (str) inside_global: <class 'str'>,\n        Optional  (str) inside_local: <class 'str'>,\n        Optional  (str) outside_local: <class 'str'>,\n        Optional  (str) outside_global: <class 'str'>,\n        Optional  (str) group_id: <class 'int'>,\n        Optional  (str) time_left: <class 'str'>,\n        Optional  (str) details: {\n          'create': <class 'str'>,\n          'use': <class 'str'>,\n          'timeout': <class 'str'>,\n          'map_id_in': <class 'int'>,\n          'mac_address': <class 'str'>,\n          'input_idb': <class 'str'>,\n          'entry_id': <class 'str'>,\n          'use_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  Optional  (str) number_of_translations: <class 'int'>,\n  },\n}", "uid": "show_ip_nat_translations_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_nat.py#L64"}}, "show ip nat translations vrf {vrf} verbose": {"ios": {"class": "ShowIpNatTranslations", "doc": "\n        * show ip nat translations\n        * show ip nat translations verbose\n    ", "module_name": "show_ip_nat", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'protocol': <class 'str'>,\n        Optional  (str) inside_global: <class 'str'>,\n        Optional  (str) inside_local: <class 'str'>,\n        Optional  (str) outside_local: <class 'str'>,\n        Optional  (str) outside_global: <class 'str'>,\n        Optional  (str) group_id: <class 'int'>,\n        Optional  (str) time_left: <class 'str'>,\n        Optional  (str) details: {\n          'create': <class 'str'>,\n          'use': <class 'str'>,\n          'timeout': <class 'str'>,\n          'map_id_in': <class 'int'>,\n          'mac_address': <class 'str'>,\n          'input_idb': <class 'str'>,\n          'entry_id': <class 'str'>,\n          'use_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  Optional  (str) number_of_translations: <class 'int'>,\n  },\n}", "uid": "show_ip_nat_translations_vrf_vrf_verbose", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ip_nat.py#L31"}, "iosxe": {"class": "ShowIpNatTranslations", "doc": "\n        * show ip nat translations\n        * show ip nat translations verbose\n        * show ip nat translations vrf {vrf}\n        * show ip nat translations vrf {vrf} verbose\n    ", "module_name": "show_ip_nat", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'protocol': <class 'str'>,\n        Optional  (str) inside_global: <class 'str'>,\n        Optional  (str) inside_local: <class 'str'>,\n        Optional  (str) outside_local: <class 'str'>,\n        Optional  (str) outside_global: <class 'str'>,\n        Optional  (str) group_id: <class 'int'>,\n        Optional  (str) time_left: <class 'str'>,\n        Optional  (str) details: {\n          'create': <class 'str'>,\n          'use': <class 'str'>,\n          'timeout': <class 'str'>,\n          'map_id_in': <class 'int'>,\n          'mac_address': <class 'str'>,\n          'input_idb': <class 'str'>,\n          'entry_id': <class 'str'>,\n          'use_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  Optional  (str) number_of_translations: <class 'int'>,\n  },\n}", "uid": "show_ip_nat_translations_vrf_vrf_verbose", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_nat.py#L64"}}, "show ip ospf": {"ios": {"class": "ShowIpOspf", "doc": " Parser for \"show ip ospf\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            Optional  (str) enable: <class 'bool'>,\n            'nsr': {\n              'enable': <class 'bool'>,\n              },\n            'bfd': {\n              'enable': <class 'bool'>,\n              Optional  (str) strict_mode: <class 'bool'>,\n              },\n            Optional  (str) domain_id_type: <class 'str'>,\n            Optional  (str) domain_id_value: <class 'str'>,\n            Optional  (str) start_time: <class 'str'>,\n            Optional  (str) nssa: <class 'bool'>,\n            Optional  (str) area_transit: <class 'bool'>,\n            Optional  (str) redistribution: {\n              Optional  (str) max_prefix: {\n                Optional  (str) num_of_prefix: <class 'int'>,\n                Optional  (str) prefix_thld: <class 'int'>,\n                Optional  (str) warn_only: <class 'bool'>,\n                },\n              Optional  (str) connected: {\n                'enabled': <class 'bool'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) static: {\n                'enabled': <class 'bool'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) bgp: {\n                'bgp_id': <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) nssa_only: <class 'str'>,\n                },\n              Optional  (str) isis: {\n                'isis_pid': <class 'str'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              Optional  (str) max_lsa_current: <class 'int'>,\n              Optional  (str) max_lsa_threshold_value: <class 'int'>,\n              Optional  (str) max_lsa_ignore_count: <class 'int'>,\n              Optional  (str) max_lsa_current_count: <class 'int'>,\n              Optional  (str) max_lsa_ignore_time: <class 'int'>,\n              Optional  (str) max_lsa_reset_time: <class 'int'>,\n              Optional  (str) max_lsa_limit: <class 'int'>,\n              Optional  (str) max_lsa_warning_only: <class 'bool'>,\n              },\n            Optional  (str) stub_router: {\n              Optional  (str) always: {\n                'always': <class 'bool'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                Optional  (str) state: <class 'str'>,\n                },\n              Optional  (str) on_startup: {\n                'on_startup': <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                'state': <class 'str'>,\n                },\n              },\n            Optional  (str) spf_control: {\n              Optional  (str) incremental_spf: <class 'bool'>,\n              'throttle': {\n                'spf': {\n                  'start': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  },\n                'lsa': {\n                  Optional  (str) start: <class 'int'>,\n                  Optional  (str) hold: <class 'int'>,\n                  Optional  (str) maximum: <class 'int'>,\n                  Optional  (str) arrival: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) auto_cost: {\n              'enable': <class 'bool'>,\n              'reference_bandwidth': <class 'int'>,\n              'bandwidth_unit': <class 'str'>,\n              },\n            Optional  (str) adjacency_stagger: {\n              'initial_number': <class 'int'>,\n              'maximum_number': <class 'int'>,\n              Optional  (str) no_initial_limit: <class 'bool'>,\n              },\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                'enable': <class 'bool'>,\n                'type': <class 'str'>,\n                Optional  (str) helper_enable: <class 'bool'>,\n                Optional  (str) restart_interval: <class 'int'>,\n                },\n              },\n            Optional  (str) event_log: {\n              'enable': <class 'bool'>,\n              Optional  (str) max_events: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              },\n            Optional  (str) numbers: {\n              Optional  (str) external_lsa: <class 'int'>,\n              Optional  (str) external_lsa_checksum: <class 'str'>,\n              Optional  (str) opaque_as_lsa: <class 'int'>,\n              Optional  (str) opaque_as_lsa_checksum: <class 'str'>,\n              Optional  (str) dc_bitless: <class 'int'>,\n              Optional  (str) do_not_age: <class 'int'>,\n              },\n            Optional  (str) total_areas: <class 'int'>,\n            Optional  (str) total_normal_areas: <class 'int'>,\n            Optional  (str) total_stub_areas: <class 'int'>,\n            Optional  (str) total_nssa_areas: <class 'int'>,\n            Optional  (str) total_areas_transit_capable: <class 'int'>,\n            Optional  (str) lsa_group_pacing_timer: <class 'int'>,\n            Optional  (str) interface_flood_pacing_timer: <class 'int'>,\n            Optional  (str) retransmission_pacing_timer: <class 'int'>,\n            Optional  (str) external_flood_list_length: <class 'int'>,\n            Optional  (str) db_exchange_summary_list_optimization: <class 'bool'>,\n            Optional  (str) elapsed_time: <class 'str'>,\n            Optional  (str) lls: <class 'bool'>,\n            Optional  (str) opqaue_lsa: <class 'bool'>,\n            Optional  (str) flags: {\n              Optional  (str) abr: <class 'bool'>,\n              Optional  (str) asbr: <class 'bool'>,\n              },\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_id': <class 'str'>,\n                'area_type': <class 'str'>,\n                Optional  (str) summary: <class 'bool'>,\n                Optional  (str) default_cost: <class 'int'>,\n                Optional  (str) authentication: <class 'bool'>,\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    Optional  (str) cost: <class 'int'>,\n                    'advertise': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) rrr_enabled: <class 'bool'>,\n                Optional  (str) statistics: {\n                  Optional  (str) spf_runs_count: <class 'int'>,\n                  Optional  (str) spf_last_executed: <class 'str'>,\n                  Optional  (str) interfaces_count: <class 'int'>,\n                  Optional  (str) loopback_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) area_scope_opaque_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_opaque_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                  Optional  (str) indication_lsa_count: <class 'int'>,\n                  Optional  (str) donotage_lsa_count: <class 'int'>,\n                  Optional  (str) flood_list_length: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L41"}, "iosxe": {"class": "ShowIpOspf", "doc": " Parser for:\n        * 'show ip ospf'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            Optional  (str) enable: <class 'bool'>,\n            'nsr': {\n              'enable': <class 'bool'>,\n              },\n            'bfd': {\n              'enable': <class 'bool'>,\n              Optional  (str) strict_mode: <class 'bool'>,\n              },\n            Optional  (str) domain_id_type: <class 'str'>,\n            Optional  (str) domain_id_value: <class 'str'>,\n            Optional  (str) start_time: <class 'str'>,\n            Optional  (str) nssa: <class 'bool'>,\n            Optional  (str) area_transit: <class 'bool'>,\n            Optional  (str) redistribution: {\n              Optional  (str) max_prefix: {\n                Optional  (str) num_of_prefix: <class 'int'>,\n                Optional  (str) prefix_thld: <class 'int'>,\n                Optional  (str) warn_only: <class 'bool'>,\n                },\n              Optional  (str) connected: {\n                'enabled': <class 'bool'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) static: {\n                'enabled': <class 'bool'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) bgp: {\n                'bgp_id': <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) nssa_only: <class 'str'>,\n                },\n              Optional  (str) isis: {\n                'isis_pid': <class 'str'>,\n                Optional  (str) subnets: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              Optional  (str) max_lsa_current: <class 'int'>,\n              Optional  (str) max_lsa_threshold_value: <class 'int'>,\n              Optional  (str) max_lsa_ignore_count: <class 'int'>,\n              Optional  (str) max_lsa_current_count: <class 'int'>,\n              Optional  (str) max_lsa_ignore_time: <class 'int'>,\n              Optional  (str) max_lsa_reset_time: <class 'int'>,\n              Optional  (str) max_lsa_limit: <class 'int'>,\n              Optional  (str) max_lsa_warning_only: <class 'bool'>,\n              },\n            Optional  (str) stub_router: {\n              Optional  (str) always: {\n                'always': <class 'bool'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                Optional  (str) state: <class 'str'>,\n                },\n              Optional  (str) on_startup: {\n                'on_startup': <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                'state': <class 'str'>,\n                },\n              },\n            Optional  (str) spf_control: {\n              Optional  (str) incremental_spf: <class 'bool'>,\n              'throttle': {\n                'spf': {\n                  'start': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  },\n                'lsa': {\n                  Optional  (str) start: <class 'int'>,\n                  Optional  (str) hold: <class 'int'>,\n                  Optional  (str) maximum: <class 'int'>,\n                  Optional  (str) arrival: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) auto_cost: {\n              'enable': <class 'bool'>,\n              'reference_bandwidth': <class 'int'>,\n              'bandwidth_unit': <class 'str'>,\n              },\n            Optional  (str) adjacency_stagger: {\n              'initial_number': <class 'int'>,\n              'maximum_number': <class 'int'>,\n              Optional  (str) no_initial_limit: <class 'bool'>,\n              },\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                'enable': <class 'bool'>,\n                'type': <class 'str'>,\n                Optional  (str) helper_enable: <class 'bool'>,\n                Optional  (str) restart_interval: <class 'int'>,\n                },\n              },\n            Optional  (str) event_log: {\n              'enable': <class 'bool'>,\n              Optional  (str) max_events: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              },\n            Optional  (str) numbers: {\n              Optional  (str) external_lsa: <class 'int'>,\n              Optional  (str) external_lsa_checksum: <class 'str'>,\n              Optional  (str) opaque_as_lsa: <class 'int'>,\n              Optional  (str) opaque_as_lsa_checksum: <class 'str'>,\n              Optional  (str) dc_bitless: <class 'int'>,\n              Optional  (str) do_not_age: <class 'int'>,\n              },\n            Optional  (str) total_areas: <class 'int'>,\n            Optional  (str) total_normal_areas: <class 'int'>,\n            Optional  (str) total_stub_areas: <class 'int'>,\n            Optional  (str) total_nssa_areas: <class 'int'>,\n            Optional  (str) total_areas_transit_capable: <class 'int'>,\n            Optional  (str) lsa_group_pacing_timer: <class 'int'>,\n            Optional  (str) interface_flood_pacing_timer: <class 'int'>,\n            Optional  (str) retransmission_pacing_timer: <class 'int'>,\n            Optional  (str) external_flood_list_length: <class 'int'>,\n            Optional  (str) db_exchange_summary_list_optimization: <class 'bool'>,\n            Optional  (str) elapsed_time: <class 'str'>,\n            Optional  (str) lls: <class 'bool'>,\n            Optional  (str) opqaue_lsa: <class 'bool'>,\n            Optional  (str) flags: {\n              Optional  (str) abr: <class 'bool'>,\n              Optional  (str) asbr: <class 'bool'>,\n              },\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_id': <class 'str'>,\n                'area_type': <class 'str'>,\n                Optional  (str) summary: <class 'bool'>,\n                Optional  (str) default_cost: <class 'int'>,\n                Optional  (str) authentication: <class 'bool'>,\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    Optional  (str) cost: <class 'int'>,\n                    'advertise': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) rrr_enabled: <class 'bool'>,\n                Optional  (str) statistics: {\n                  Optional  (str) spf_runs_count: <class 'int'>,\n                  Optional  (str) spf_last_executed: <class 'str'>,\n                  Optional  (str) interfaces_count: <class 'int'>,\n                  Optional  (str) loopback_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) area_scope_opaque_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_opaque_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                  Optional  (str) indication_lsa_count: <class 'int'>,\n                  Optional  (str) donotage_lsa_count: <class 'int'>,\n                  Optional  (str) flood_list_length: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L333"}, "nxos": {"class": "ShowIpOspf", "doc": "Parser for:\n        show ip ospf\n        show ip ospf vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            'instance': <class 'int'>,\n            Optional  (str) name_lookup: <class 'bool'>,\n            Optional  (str) nsr: {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                'enable': <class 'bool'>,\n                'type': <class 'str'>,\n                'restart_interval': <class 'int'>,\n                'state': <class 'str'>,\n                'exist_status': <class 'str'>,\n                },\n              },\n            Optional  (str) single_tos_routes_enable: <class 'bool'>,\n            Optional  (str) opaque_lsa_enable: <class 'bool'>,\n            Optional  (str) this_router_is: <class 'str'>,\n            Optional  (str) preference: {\n              'single_value': {\n                'all': <class 'int'>,\n                },\n              },\n            Optional  (str) bfd: {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) auto_cost: {\n              'enable': <class 'bool'>,\n              'reference_bandwidth': <class 'int'>,\n              'bandwidth_unit': <class 'str'>,\n              },\n            Optional  (str) spf_control: {\n              'paths': <class 'int'>,\n              'throttle': {\n                'spf': {\n                  'start': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  },\n                'lsa': {\n                  'start': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  Optional  (str) minimum: <class 'int'>,\n                  Optional  (str) group_pacing: <class 'int'>,\n                  Optional  (str) numbers: {\n                    Optional  (str) external_lsas: {\n                      Optional  (str) total: <class 'int'>,\n                      Optional  (str) checksum: <class 'str'>,\n                      },\n                    Optional  (str) opaque_as_lsas: {\n                      Optional  (str) total: <class 'int'>,\n                      Optional  (str) checksum: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) numbers: {\n              'active_areas': {\n                'total': <class 'int'>,\n                'nssa': <class 'int'>,\n                'normal': <class 'int'>,\n                'stub': <class 'int'>,\n                },\n              'areas': {\n                'total': <class 'int'>,\n                'nssa': <class 'int'>,\n                'normal': <class 'int'>,\n                'stub': <class 'int'>,\n                },\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              },\n            Optional  (str) stub_router: {\n              'always': {\n                'always': <class 'bool'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                },\n              Optional  (str) on_startup: {\n                'on_startup': <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                },\n              },\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) discard_route_external: <class 'bool'>,\n            Optional  (str) discard_route_internal: <class 'bool'>,\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_type': <class 'str'>,\n                'area_id': <class 'str'>,\n                Optional  (str) generate_nssa_default_route: <class 'bool'>,\n                Optional  (str) summary: <class 'bool'>,\n                Optional  (str) perform_translation: <class 'str'>,\n                Optional  (str) existed: <class 'str'>,\n                Optional  (str) default_cost: <class 'int'>,\n                Optional  (str) numbers: {\n                  'interfaces': <class 'int'>,\n                  'active_interfaces': <class 'int'>,\n                  'passive_interfaces': <class 'int'>,\n                  'loopback_interfaces': <class 'int'>,\n                  },\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    'advertise': <class 'bool'>,\n                    'cost': <class 'int'>,\n                    'net': <class 'int'>,\n                    },\n                  },\n                Optional  (str) authentication: <class 'str'>,\n                Optional  (str) statistics: {\n                  'spf_runs_count': <class 'int'>,\n                  'spf_last_run_time': <class 'float'>,\n                  'area_scope_lsa_count': <class 'int'>,\n                  'area_scope_lsa_cksum_sum': <class 'str'>,\n                  Optional  (str) as_nssa_translator_event_count: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) redistribution: {\n              Optional  (str) bgp: {\n                'bgp_id': <class 'int'>,\n                },\n              Optional  (str) static: {\n                'enabled': <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L196"}}, "show ip ospf database": {"iosxe": {"class": "ShowIpOspfDatabase", "doc": " Parser for:\n        * 'show ip ospf database'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'lsa_id': <class 'str'>,\n                              'adv_router': <class 'str'>,\n                              'age': <class 'int'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              Optional  (str) link_count: <class 'int'>,\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L3699"}}, "show ip ospf database external": {"ios": {"class": "ShowIpOspfDatabaseExternal", "doc": " Parser for \"show ip ospf database external\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'external': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    Optional  (str) flags: <class 'str'>,\n                                    'metric': <class 'int'>,\n                                    'forwarding_address': <class 'str'>,\n                                    'external_route_tag': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_external", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L77"}, "iosxe": {"class": "ShowIpOspfDatabaseExternal", "doc": " Parser for:\n        * 'show ip ospf database external'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'external': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    Optional  (str) flags: <class 'str'>,\n                                    'metric': <class 'int'>,\n                                    'forwarding_address': <class 'str'>,\n                                    'external_route_tag': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_external", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L5232"}}, "show ip ospf database external detail": {"nxos": {"class": "ShowIpOspfDatabaseExternalDetail", "doc": "Parser for:\n        show ip ospf database external detail\n        show ip ospf database external detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              },\n                            'body': {\n                              'external': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    'tos': <class 'int'>,\n                                    Optional  (str) flags: <class 'str'>,\n                                    'metric': <class 'int'>,\n                                    'forwarding_address': <class 'str'>,\n                                    'external_route_tag': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_external_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3403"}}, "show ip ospf database external detail vrf {vrf}": {"nxos": {"class": "ShowIpOspfDatabaseExternalDetail", "doc": "Parser for:\n        show ip ospf database external detail\n        show ip ospf database external detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              },\n                            'body': {\n                              'external': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    'tos': <class 'int'>,\n                                    Optional  (str) flags: <class 'str'>,\n                                    'metric': <class 'int'>,\n                                    'forwarding_address': <class 'str'>,\n                                    'external_route_tag': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_external_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3403"}}, "show ip ospf database network": {"ios": {"class": "ShowIpOspfDatabaseNetwork", "doc": " Parser for \"show ip ospf database network\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'network': {\n                                'network_mask': <class 'str'>,\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_network", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L82"}, "iosxe": {"class": "ShowIpOspfDatabaseNetwork", "doc": " Parser for:\n        * 'show ip ospf database network'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'network': {\n                                'network_mask': <class 'str'>,\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_network", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L5316"}}, "show ip ospf database network detail": {"nxos": {"class": "ShowIpOspfDatabaseNetworkDetail", "doc": "Parser for:\n        show ip ospf database network detail\n        show ip ospf database network detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              },\n                            'body': {\n                              'network': {\n                                'network_mask': <class 'str'>,\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_network_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3489"}}, "show ip ospf database network detail vrf {vrf}": {"nxos": {"class": "ShowIpOspfDatabaseNetworkDetail", "doc": "Parser for:\n        show ip ospf database network detail\n        show ip ospf database network detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              },\n                            'body': {\n                              'network': {\n                                'network_mask': <class 'str'>,\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_network_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3489"}}, "show ip ospf database opaque-area": {"ios": {"class": "ShowIpOspfDatabaseOpaqueArea", "doc": " Parser for \"show ip ospf database opaque-area\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) opaque_type: <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) mpls_te_router_id: <class 'str'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) num_of_links: <class 'int'>,\n                                Optional  (str) router_capabilities_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    Optional  (str) information_capabilities: {\n                                      Optional  (str) graceful_restart: <class 'bool'>,\n                                      Optional  (str) graceful_restart_helper: <class 'bool'>,\n                                      Optional  (str) stub_router: <class 'bool'>,\n                                      Optional  (str) traffic_enginnering: <class 'bool'>,\n                                      Optional  (str) p2p_over_lan: <class 'bool'>,\n                                      Optional  (str) experimental_te: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sr_algorithm_tlv: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) algorithm: {\n                                      Optional  (str) spf: <class 'bool'>,\n                                      Optional  (str) strict_spf: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sid_range_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'range_size': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) node_msd_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'sub_type': {\n                                      'node_max_sid_depth_value': <class 'int'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) local_block_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'range_size': <class 'int'>,\n                                    'length': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_prefix_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'route_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'flags': <class 'str'>,\n                                    'prefix': <class 'str'>,\n                                    'af': <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'flags': <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        'algo': <class 'str'>,\n                                        'sid': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    'link_type': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        Optional  (str) length: <class 'int'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        Optional  (str) weight: <class 'int'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        Optional  (str) remote_interface_address: <class 'str'>,\n                                        Optional  (str) local_interface_id: <class 'int'>,\n                                        Optional  (str) remote_interface_id: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    Optional  (str) link_type: <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    Optional  (str) link_id: <class 'str'>,\n                                    Optional  (str) te_metric: <class 'int'>,\n                                    Optional  (str) max_bandwidth: <class 'int'>,\n                                    Optional  (str) max_reservable_bandwidth: <class 'int'>,\n                                    Optional  (str) admin_group: <class 'str'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_opaque-area", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L93"}, "iosxe": {"class": "ShowIpOspfDatabaseOpaqueArea", "doc": " Parser for:\n        * 'show ip ospf database opaque-area'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) opaque_type: <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) mpls_te_router_id: <class 'str'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) num_of_links: <class 'int'>,\n                                Optional  (str) router_capabilities_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    Optional  (str) information_capabilities: {\n                                      Optional  (str) graceful_restart: <class 'bool'>,\n                                      Optional  (str) graceful_restart_helper: <class 'bool'>,\n                                      Optional  (str) stub_router: <class 'bool'>,\n                                      Optional  (str) traffic_enginnering: <class 'bool'>,\n                                      Optional  (str) p2p_over_lan: <class 'bool'>,\n                                      Optional  (str) experimental_te: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sr_algorithm_tlv: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) algorithm: {\n                                      Optional  (str) spf: <class 'bool'>,\n                                      Optional  (str) strict_spf: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sid_range_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'range_size': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) node_msd_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'sub_type': {\n                                      'node_max_sid_depth_value': <class 'int'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) local_block_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'range_size': <class 'int'>,\n                                    'length': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_prefix_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'route_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'flags': <class 'str'>,\n                                    'prefix': <class 'str'>,\n                                    'af': <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'flags': <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        'algo': <class 'str'>,\n                                        'sid': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    'link_type': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        Optional  (str) length: <class 'int'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        Optional  (str) weight: <class 'int'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        Optional  (str) remote_interface_address: <class 'str'>,\n                                        Optional  (str) local_interface_id: <class 'int'>,\n                                        Optional  (str) remote_interface_id: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    Optional  (str) link_type: <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    Optional  (str) link_id: <class 'str'>,\n                                    Optional  (str) te_metric: <class 'int'>,\n                                    Optional  (str) max_bandwidth: <class 'int'>,\n                                    Optional  (str) max_reservable_bandwidth: <class 'int'>,\n                                    Optional  (str) admin_group: <class 'str'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_opaque-area", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L5646"}}, "show ip ospf database opaque-area adv-router {address}": {"iosxe": {"class": "ShowIpOspfDatabaseOpaqueAreaAdvRouter", "doc": " Parser for:\n        * 'show ip ospf database opaque-area adv-router {address}'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) opaque_type: <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) mpls_te_router_id: <class 'str'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) num_of_links: <class 'int'>,\n                                Optional  (str) router_capabilities_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    Optional  (str) information_capabilities: {\n                                      Optional  (str) graceful_restart: <class 'bool'>,\n                                      Optional  (str) graceful_restart_helper: <class 'bool'>,\n                                      Optional  (str) stub_router: <class 'bool'>,\n                                      Optional  (str) traffic_enginnering: <class 'bool'>,\n                                      Optional  (str) p2p_over_lan: <class 'bool'>,\n                                      Optional  (str) experimental_te: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sr_algorithm_tlv: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) algorithm: {\n                                      Optional  (str) spf: <class 'bool'>,\n                                      Optional  (str) strict_spf: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sid_range_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'range_size': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) node_msd_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'sub_type': {\n                                      'node_max_sid_depth_value': <class 'int'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) local_block_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'range_size': <class 'int'>,\n                                    'length': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_prefix_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'route_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'flags': <class 'str'>,\n                                    'prefix': <class 'str'>,\n                                    'af': <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'flags': <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        'algo': <class 'str'>,\n                                        'sid': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    'link_type': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        Optional  (str) length: <class 'int'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        Optional  (str) weight: <class 'int'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        Optional  (str) remote_interface_address: <class 'str'>,\n                                        Optional  (str) local_interface_id: <class 'int'>,\n                                        Optional  (str) remote_interface_id: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    Optional  (str) link_type: <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    Optional  (str) link_id: <class 'str'>,\n                                    Optional  (str) te_metric: <class 'int'>,\n                                    Optional  (str) max_bandwidth: <class 'int'>,\n                                    Optional  (str) max_reservable_bandwidth: <class 'int'>,\n                                    Optional  (str) admin_group: <class 'str'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_opaque-area_adv-router_address", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L8228"}}, "show ip ospf database opaque-area detail": {"nxos": {"class": "ShowIpOspfDatabaseOpaqueAreaDetail", "doc": "Parser for:\n        show ip ospf database opaque-area detail\n        show ip ospf database opaque-area detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              'opaque_type': <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              Optional  (str) mpls_te_router_id: <class 'str'>,\n                              Optional  (str) num_links: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_type': <class 'int'>,\n                                    'link_name': <class 'str'>,\n                                    'link_id': <class 'str'>,\n                                    'te_metric': <class 'int'>,\n                                    'max_bandwidth': <class 'int'>,\n                                    'max_reservable_bandwidth': <class 'int'>,\n                                    'admin_group': <class 'str'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_opaque-area_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3795"}}, "show ip ospf database opaque-area detail vrf {vrf}": {"nxos": {"class": "ShowIpOspfDatabaseOpaqueAreaDetail", "doc": "Parser for:\n        show ip ospf database opaque-area detail\n        show ip ospf database opaque-area detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              'opaque_type': <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              Optional  (str) mpls_te_router_id: <class 'str'>,\n                              Optional  (str) num_links: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_type': <class 'int'>,\n                                    'link_name': <class 'str'>,\n                                    'link_id': <class 'str'>,\n                                    'te_metric': <class 'int'>,\n                                    'max_bandwidth': <class 'int'>,\n                                    'max_reservable_bandwidth': <class 'int'>,\n                                    'admin_group': <class 'str'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_opaque-area_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3795"}}, "show ip ospf database opaque-area self-originate": {"iosxe": {"class": "ShowIpOspfDatabaseOpaqueAreaSelfOriginate", "doc": " Parser for:\n        * 'show ip ospf database opaque-area self-originate'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) opaque_type: <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) mpls_te_router_id: <class 'str'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) num_of_links: <class 'int'>,\n                                Optional  (str) router_capabilities_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    Optional  (str) information_capabilities: {\n                                      Optional  (str) graceful_restart: <class 'bool'>,\n                                      Optional  (str) graceful_restart_helper: <class 'bool'>,\n                                      Optional  (str) stub_router: <class 'bool'>,\n                                      Optional  (str) traffic_enginnering: <class 'bool'>,\n                                      Optional  (str) p2p_over_lan: <class 'bool'>,\n                                      Optional  (str) experimental_te: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sr_algorithm_tlv: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) algorithm: {\n                                      Optional  (str) spf: <class 'bool'>,\n                                      Optional  (str) strict_spf: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sid_range_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'range_size': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) node_msd_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'sub_type': {\n                                      'node_max_sid_depth_value': <class 'int'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) local_block_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'range_size': <class 'int'>,\n                                    'length': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_prefix_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'route_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'flags': <class 'str'>,\n                                    'prefix': <class 'str'>,\n                                    'af': <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'flags': <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        'algo': <class 'str'>,\n                                        'sid': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    'link_type': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        Optional  (str) length: <class 'int'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        Optional  (str) weight: <class 'int'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        Optional  (str) remote_interface_address: <class 'str'>,\n                                        Optional  (str) local_interface_id: <class 'int'>,\n                                        Optional  (str) remote_interface_id: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    Optional  (str) link_type: <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    Optional  (str) link_id: <class 'str'>,\n                                    Optional  (str) te_metric: <class 'int'>,\n                                    Optional  (str) max_bandwidth: <class 'int'>,\n                                    Optional  (str) max_reservable_bandwidth: <class 'int'>,\n                                    Optional  (str) admin_group: <class 'str'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_opaque-area_self-originate", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L8211"}}, "show ip ospf database opaque-area type ext-link": {"iosxe": {"class": "ShowIpOspfDatabaseOpaqueAreaTypeExtLink", "doc": " Parser for:\n            * show ip ospf database opaque-area type ext-link\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) opaque_type: <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) mpls_te_router_id: <class 'str'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) num_of_links: <class 'int'>,\n                                Optional  (str) router_capabilities_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    Optional  (str) information_capabilities: {\n                                      Optional  (str) graceful_restart: <class 'bool'>,\n                                      Optional  (str) graceful_restart_helper: <class 'bool'>,\n                                      Optional  (str) stub_router: <class 'bool'>,\n                                      Optional  (str) traffic_enginnering: <class 'bool'>,\n                                      Optional  (str) p2p_over_lan: <class 'bool'>,\n                                      Optional  (str) experimental_te: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sr_algorithm_tlv: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) algorithm: {\n                                      Optional  (str) spf: <class 'bool'>,\n                                      Optional  (str) strict_spf: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sid_range_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'range_size': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) node_msd_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'sub_type': {\n                                      'node_max_sid_depth_value': <class 'int'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) local_block_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'range_size': <class 'int'>,\n                                    'length': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_prefix_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'route_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'flags': <class 'str'>,\n                                    'prefix': <class 'str'>,\n                                    'af': <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'flags': <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        'algo': <class 'str'>,\n                                        'sid': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    'link_type': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        Optional  (str) length: <class 'int'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        Optional  (str) weight: <class 'int'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        Optional  (str) remote_interface_address: <class 'str'>,\n                                        Optional  (str) local_interface_id: <class 'int'>,\n                                        Optional  (str) remote_interface_id: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    Optional  (str) link_type: <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    Optional  (str) link_id: <class 'str'>,\n                                    Optional  (str) te_metric: <class 'int'>,\n                                    Optional  (str) max_bandwidth: <class 'int'>,\n                                    Optional  (str) max_reservable_bandwidth: <class 'int'>,\n                                    Optional  (str) admin_group: <class 'str'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_opaque-area_type_ext-link", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L8241"}}, "show ip ospf database opaque-area type ext-link adv-router {address}": {"iosxe": {"class": "ShowIpOspfDatabaseOpaqueAreaTypeExtLinkAdvRouter", "doc": " Parser for:\n            * show ip ospf database opaque-area type ext-link adv-router {address}\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) opaque_type: <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) mpls_te_router_id: <class 'str'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) num_of_links: <class 'int'>,\n                                Optional  (str) router_capabilities_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    Optional  (str) information_capabilities: {\n                                      Optional  (str) graceful_restart: <class 'bool'>,\n                                      Optional  (str) graceful_restart_helper: <class 'bool'>,\n                                      Optional  (str) stub_router: <class 'bool'>,\n                                      Optional  (str) traffic_enginnering: <class 'bool'>,\n                                      Optional  (str) p2p_over_lan: <class 'bool'>,\n                                      Optional  (str) experimental_te: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sr_algorithm_tlv: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) algorithm: {\n                                      Optional  (str) spf: <class 'bool'>,\n                                      Optional  (str) strict_spf: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sid_range_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'range_size': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) node_msd_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'sub_type': {\n                                      'node_max_sid_depth_value': <class 'int'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) local_block_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'range_size': <class 'int'>,\n                                    'length': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_prefix_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'route_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'flags': <class 'str'>,\n                                    'prefix': <class 'str'>,\n                                    'af': <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'flags': <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        'algo': <class 'str'>,\n                                        'sid': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    'link_type': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        Optional  (str) length: <class 'int'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        Optional  (str) weight: <class 'int'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        Optional  (str) remote_interface_address: <class 'str'>,\n                                        Optional  (str) local_interface_id: <class 'int'>,\n                                        Optional  (str) remote_interface_id: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    Optional  (str) link_type: <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    Optional  (str) link_id: <class 'str'>,\n                                    Optional  (str) te_metric: <class 'int'>,\n                                    Optional  (str) max_bandwidth: <class 'int'>,\n                                    Optional  (str) max_reservable_bandwidth: <class 'int'>,\n                                    Optional  (str) admin_group: <class 'str'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_opaque-area_type_ext-link_adv-router_address", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L8265"}}, "show ip ospf database opaque-area type ext-link self-originate": {"iosxe": {"class": "ShowIpOspfDatabaseOpaqueAreaTypeExtLinkSelfOriginate", "doc": " Parser for:\n            * show ip ospf database opaque-area type ext-link self-originate\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) opaque_type: <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) mpls_te_router_id: <class 'str'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) num_of_links: <class 'int'>,\n                                Optional  (str) router_capabilities_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    Optional  (str) information_capabilities: {\n                                      Optional  (str) graceful_restart: <class 'bool'>,\n                                      Optional  (str) graceful_restart_helper: <class 'bool'>,\n                                      Optional  (str) stub_router: <class 'bool'>,\n                                      Optional  (str) traffic_enginnering: <class 'bool'>,\n                                      Optional  (str) p2p_over_lan: <class 'bool'>,\n                                      Optional  (str) experimental_te: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sr_algorithm_tlv: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) algorithm: {\n                                      Optional  (str) spf: <class 'bool'>,\n                                      Optional  (str) strict_spf: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sid_range_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'range_size': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) node_msd_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'sub_type': {\n                                      'node_max_sid_depth_value': <class 'int'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) local_block_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'range_size': <class 'int'>,\n                                    'length': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_prefix_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'route_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'flags': <class 'str'>,\n                                    'prefix': <class 'str'>,\n                                    'af': <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'flags': <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        'algo': <class 'str'>,\n                                        'sid': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    'link_type': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        Optional  (str) length: <class 'int'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        Optional  (str) weight: <class 'int'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        Optional  (str) remote_interface_address: <class 'str'>,\n                                        Optional  (str) local_interface_id: <class 'int'>,\n                                        Optional  (str) remote_interface_id: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    Optional  (str) link_type: <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    Optional  (str) link_id: <class 'str'>,\n                                    Optional  (str) te_metric: <class 'int'>,\n                                    Optional  (str) max_bandwidth: <class 'int'>,\n                                    Optional  (str) max_reservable_bandwidth: <class 'int'>,\n                                    Optional  (str) admin_group: <class 'str'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_opaque-area_type_ext-link_self-originate", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L8253"}}, "show ip ospf database opaque-area {lsa_id} self-originate": {"iosxe": {"class": "ShowIpOspfDatabaseOpaqueAreaSelfOriginate", "doc": " Parser for:\n        * 'show ip ospf database opaque-area self-originate'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) opaque_type: <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) mpls_te_router_id: <class 'str'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) num_of_links: <class 'int'>,\n                                Optional  (str) router_capabilities_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    Optional  (str) information_capabilities: {\n                                      Optional  (str) graceful_restart: <class 'bool'>,\n                                      Optional  (str) graceful_restart_helper: <class 'bool'>,\n                                      Optional  (str) stub_router: <class 'bool'>,\n                                      Optional  (str) traffic_enginnering: <class 'bool'>,\n                                      Optional  (str) p2p_over_lan: <class 'bool'>,\n                                      Optional  (str) experimental_te: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sr_algorithm_tlv: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) algorithm: {\n                                      Optional  (str) spf: <class 'bool'>,\n                                      Optional  (str) strict_spf: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sid_range_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'range_size': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) node_msd_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'sub_type': {\n                                      'node_max_sid_depth_value': <class 'int'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) local_block_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'range_size': <class 'int'>,\n                                    'length': <class 'int'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'label': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_prefix_tlvs: {\n                                  Any  (str) *: {\n                                    'tlv_type': <class 'str'>,\n                                    'route_type': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    'flags': <class 'str'>,\n                                    'prefix': <class 'str'>,\n                                    'af': <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        'length': <class 'int'>,\n                                        'flags': <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        'algo': <class 'str'>,\n                                        'sid': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'length': <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    'link_type': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    'sub_tlvs': {\n                                      Any  (str) *: {\n                                        'type': <class 'str'>,\n                                        Optional  (str) length: <class 'int'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'int'>,\n                                        Optional  (str) weight: <class 'int'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        Optional  (str) remote_interface_address: <class 'str'>,\n                                        Optional  (str) local_interface_id: <class 'int'>,\n                                        Optional  (str) remote_interface_id: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    Optional  (str) link_type: <class 'int'>,\n                                    Optional  (str) link_name: <class 'str'>,\n                                    Optional  (str) link_id: <class 'str'>,\n                                    Optional  (str) te_metric: <class 'int'>,\n                                    Optional  (str) max_bandwidth: <class 'int'>,\n                                    Optional  (str) max_reservable_bandwidth: <class 'int'>,\n                                    Optional  (str) admin_group: <class 'str'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_opaque-area_lsa_id_self-originate", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L8211"}}, "show ip ospf database router": {"ios": {"class": "ShowIpOspfDatabaseRouter", "doc": " Parser for \"show ip ospf database router\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              Optional  (str) as_boundary_router: <class 'bool'>,\n                              Optional  (str) area_border_router: <class 'bool'>,\n                              },\n                            'body': {\n                              'router': {\n                                Optional  (str) flags: <class 'str'>,\n                                'num_of_links': <class 'int'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'type': <class 'str'>,\n                                    Optional  (str) num_mtid_metrics: <class 'int'>,\n                                    Optional  (str) num_tos_metrics: <class 'int'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        Optional  (str) metric: <class 'int'>,\n                                        Optional  (str) tos: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L72"}, "iosxe": {"class": "ShowIpOspfDatabaseRouter", "doc": " Parser for:\n        * 'show ip ospf database router'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              Optional  (str) as_boundary_router: <class 'bool'>,\n                              Optional  (str) area_border_router: <class 'bool'>,\n                              },\n                            'body': {\n                              'router': {\n                                Optional  (str) flags: <class 'str'>,\n                                'num_of_links': <class 'int'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'type': <class 'str'>,\n                                    Optional  (str) num_mtid_metrics: <class 'int'>,\n                                    Optional  (str) num_tos_metrics: <class 'int'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        Optional  (str) metric: <class 'int'>,\n                                        Optional  (str) tos: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L5141"}}, "show ip ospf database router detail": {"nxos": {"class": "ShowIpOspfDatabaseRouterDetail", "doc": "Parser for:\n        show ip ospf database router detail\n        show ip ospf database router detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              },\n                            'body': {\n                              'router': {\n                                Optional  (str) flags: <class 'str'>,\n                                'num_of_links': <class 'int'>,\n                                'links': {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'type': <class 'str'>,\n                                    'num_tos_metrics': <class 'int'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        'metric': <class 'int'>,\n                                        'tos': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_router_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3680"}}, "show ip ospf database router detail vrf {vrf}": {"nxos": {"class": "ShowIpOspfDatabaseRouterDetail", "doc": "Parser for:\n        show ip ospf database router detail\n        show ip ospf database router detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              },\n                            'body': {\n                              'router': {\n                                Optional  (str) flags: <class 'str'>,\n                                'num_of_links': <class 'int'>,\n                                'links': {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'type': <class 'str'>,\n                                    'num_tos_metrics': <class 'int'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        'metric': <class 'int'>,\n                                        'tos': <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_router_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3680"}}, "show ip ospf database router self-originate": {"iosxe": {"class": "ShowIpOspfDatabaseRouterSelfOriginate", "doc": " Parser for:\n        * 'show ip ospf database router self-originate'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              Optional  (str) as_boundary_router: <class 'bool'>,\n                              Optional  (str) area_border_router: <class 'bool'>,\n                              },\n                            'body': {\n                              'router': {\n                                Optional  (str) flags: <class 'str'>,\n                                'num_of_links': <class 'int'>,\n                                Optional  (str) links: {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'type': <class 'str'>,\n                                    Optional  (str) num_mtid_metrics: <class 'int'>,\n                                    Optional  (str) num_tos_metrics: <class 'int'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        Optional  (str) metric: <class 'int'>,\n                                        Optional  (str) tos: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_router_self-originate", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7272"}}, "show ip ospf database summary": {"ios": {"class": "ShowIpOspfDatabaseSummary", "doc": " Parser for \"show ip ospf database summary\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L87"}, "iosxe": {"class": "ShowIpOspfDatabaseSummary", "doc": " Parser for:\n        * 'show ip ospf database summary'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L5403"}}, "show ip ospf database summary detail": {"nxos": {"class": "ShowIpOspfDatabaseSummaryDetail", "doc": "Parser for:\n        show ip ospf database summary detail\n        show ip ospf database summary detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    'tos': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_summary_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3580"}}, "show ip ospf database summary detail vrf {vrf}": {"nxos": {"class": "ShowIpOspfDatabaseSummaryDetail", "doc": "Parser for:\n        show ip ospf database summary detail\n        show ip ospf database summary detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              Optional  (str) maxage: <class 'bool'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    'tos': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_database_summary_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L3580"}}, "show ip ospf fast-reroute ti-lfa": {"iosxe": {"class": "ShowIpOspfFastRerouteTiLfa", "doc": "Parser for show ip ospf fast-reroute ti-lfa\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'process_id': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    'ospf_object': {\n      Any  (str) *: {\n        'ipfrr_enabled': <class 'str'>,\n        'sr_enabled': <class 'str'>,\n        'ti_lfa_configured': <class 'str'>,\n        'ti_lfa_enabled': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_fast-reroute_ti-lfa", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7423"}}, "show ip ospf interface": {"ios": {"class": "ShowIpOspfInterface", "doc": " Parser for \"show ip ospf interface\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L46"}, "iosxe": {"class": "ShowIpOspfInterface", "doc": " Parser for:\n        * 'show ip ospf interface'\n        * 'show ip ospf interface {interface}'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L1751"}, "nxos": {"class": "ShowIpOspfInterface", "doc": "Parser for:\n        show ip ospf interface\n        show ip ospf interface <interface>\n        show ip ospf interface vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'cost': <class 'int'>,\n                    'index': <class 'int'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) link_scope_lsa_count: <class 'int'>,\n                      Optional  (str) link_scope_lsa_cksum_sum: <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'cost': <class 'int'>,\n                    'index': <class 'int'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) statistics: {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'backbone_area_id': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'cost': <class 'int'>,\n                    'index': <class 'int'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) statistics: {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1920"}}, "show ip ospf interface brief": {"iosxe": {"class": "ShowIpOspfInterfaceBrief", "doc": " Parser for:\n        * 'show ip ospf interface brief'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'ip_address': <class 'str'>,\n            'cost': <class 'int'>,\n            'state': <class 'str'>,\n            'nbrs_full': <class 'int'>,\n            'nbrs_count': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L1386"}}, "show ip ospf interface vrf {vrf}": {"nxos": {"class": "ShowIpOspfInterface", "doc": "Parser for:\n        show ip ospf interface\n        show ip ospf interface <interface>\n        show ip ospf interface vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'cost': <class 'int'>,\n                    'index': <class 'int'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) link_scope_lsa_count: <class 'int'>,\n                      Optional  (str) link_scope_lsa_cksum_sum: <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'cost': <class 'int'>,\n                    'index': <class 'int'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) statistics: {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'backbone_area_id': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'cost': <class 'int'>,\n                    'index': <class 'int'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) statistics: {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1920"}}, "show ip ospf interface {interface}": {"ios": {"class": "ShowIpOspfInterface", "doc": " Parser for \"show ip ospf interface\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L46"}, "iosxe": {"class": "ShowIpOspfInterface", "doc": " Parser for:\n        * 'show ip ospf interface'\n        * 'show ip ospf interface {interface}'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    Optional  (str) interface_id: <class 'int'>,\n                    Optional  (str) attached: <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    Optional  (str) if_cfg: <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) oob_resync_timeout: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) lls: <class 'bool'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) ti_lfa_protected: <class 'bool'>,\n                    Optional  (str) ipfrr_candidate: <class 'bool'>,\n                    Optional  (str) ipfrr_protected: <class 'bool'>,\n                    Optional  (str) stub_host: <class 'bool'>,\n                    Optional  (str) prefix_suppression: <class 'bool'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) graceful_restart: {\n                      Any  (str) *: {\n                        'type': <class 'str'>,\n                        'helper': <class 'bool'>,\n                        },\n                      },\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    Optional  (str) teapp: {\n                      Optional  (str) topology_id: <class 'str'>,\n                      Any  (str) *: {\n                        Optional  (str) affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        Optional  (str) extended_affinity: {\n                          'length': <class 'int'>,\n                          'bits': <class 'str'>,\n                          },\n                        },\n                      },\n                    Optional  (str) sr_policy_manager: {\n                      'te_opaque_lsa': <class 'str'>,\n                      },\n                    Optional  (str) sr_mpls_enabled: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L1751"}, "nxos": {"class": "ShowIpOspfInterface", "doc": "Parser for:\n        show ip ospf interface\n        show ip ospf interface <interface>\n        show ip ospf interface vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'cost': <class 'int'>,\n                    'index': <class 'int'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) link_scope_lsa_count: <class 'int'>,\n                      Optional  (str) link_scope_lsa_cksum_sum: <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'cost': <class 'int'>,\n                    'index': <class 'int'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) statistics: {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      },\n                    'backbone_area_id': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'str'>,\n                    'ip_address': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'cost': <class 'int'>,\n                    'index': <class 'int'>,\n                    'if_cfg': <class 'bool'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) statistics: {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      Optional  (str) total_neighbors: <class 'int'>,\n                      Optional  (str) num_nbrs_flooding: <class 'int'>,\n                      Optional  (str) num_nbrs_adjacent: <class 'int'>,\n                      },\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        Optional  (str) key_chain: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        Optional  (str) key: <class 'str'>,\n                        Optional  (str) crypto_algorithm: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1920"}}, "show ip ospf max-metric": {"iosxe": {"class": "ShowIpOspfMaxMetric", "doc": " Parser for:\n        * 'show ip ospf max-metric'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            'base_topology_mtid': {\n              Any  (str) *: {\n                'start_time': <class 'str'>,\n                'time_elapsed': <class 'str'>,\n                'router_lsa_max_metric': {\n                  Any  (str) *: {\n                    Optional  (str) condition: <class 'str'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) advertise_lsa_metric: <class 'int'>,\n                    Optional  (str) unset_reason: <class 'str'>,\n                    Optional  (str) unset_time: <class 'str'>,\n                    Optional  (str) unset_time_elapsed: <class 'str'>,\n                    Optional  (str) time_remaining: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_max-metric", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L6314"}}, "show ip ospf mpls ldp interface": {"ios": {"class": "ShowIpOspfMplsLdpInterface", "doc": " Parser for \"show ip ospf mpls ldp interface\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'ldp': {\n                'autoconfig': <class 'bool'>,\n                'autoconfig_area_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'interfaces': {\n                  Any  (str) *: {\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        'holddown_timer': <class 'bool'>,\n                        'state': <class 'str'>,\n                        Optional  (str) state_info: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_mpls_ldp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L99"}, "iosxe": {"class": "ShowIpOspfMplsLdpInterface", "doc": " Parser for:\n        * 'show ip ospf mpls ldp interface'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'ldp': {\n                'autoconfig': <class 'bool'>,\n                'autoconfig_area_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'interfaces': {\n                  Any  (str) *: {\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        'holddown_timer': <class 'bool'>,\n                        'state': <class 'str'>,\n                        Optional  (str) state_info: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_mpls_ldp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L5715"}, "nxos": {"class": "ShowIpOspfMplsLdpInterface", "doc": "Parser for:\n        show ip ospf mpls ldp interface\n        show ip ospf mpls ldp interface <interface>\n        show ip ospf mpls ldp interface vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'mpls': {\n                  'ldp': {\n                    'autoconfig': <class 'bool'>,\n                    'autoconfig_area_id': <class 'str'>,\n                    'igp_sync': <class 'bool'>,\n                    Optional  (str) required: <class 'bool'>,\n                    Optional  (str) achieved: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'area': <class 'str'>,\n                    'name': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'area': <class 'str'>,\n                    'name': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'area': <class 'str'>,\n                    'name': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_mpls_ldp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L939"}}, "show ip ospf mpls ldp interface vrf {vrf}": {"nxos": {"class": "ShowIpOspfMplsLdpInterface", "doc": "Parser for:\n        show ip ospf mpls ldp interface\n        show ip ospf mpls ldp interface <interface>\n        show ip ospf mpls ldp interface vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'mpls': {\n                  'ldp': {\n                    'autoconfig': <class 'bool'>,\n                    'autoconfig_area_id': <class 'str'>,\n                    'igp_sync': <class 'bool'>,\n                    Optional  (str) required: <class 'bool'>,\n                    Optional  (str) achieved: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'area': <class 'str'>,\n                    'name': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'area': <class 'str'>,\n                    'name': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'area': <class 'str'>,\n                    'name': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_mpls_ldp_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L939"}}, "show ip ospf mpls ldp interface {interface}": {"ios": {"class": "ShowIpOspfMplsLdpInterface", "doc": " Parser for \"show ip ospf mpls ldp interface\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'ldp': {\n                'autoconfig': <class 'bool'>,\n                'autoconfig_area_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'interfaces': {\n                  Any  (str) *: {\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        'holddown_timer': <class 'bool'>,\n                        'state': <class 'str'>,\n                        Optional  (str) state_info: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_mpls_ldp_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L99"}, "iosxe": {"class": "ShowIpOspfMplsLdpInterface", "doc": " Parser for:\n        * 'show ip ospf mpls ldp interface'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'ldp': {\n                'autoconfig': <class 'bool'>,\n                'autoconfig_area_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'interfaces': {\n                  Any  (str) *: {\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        'holddown_timer': <class 'bool'>,\n                        'state': <class 'str'>,\n                        Optional  (str) state_info: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_mpls_ldp_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L5715"}, "nxos": {"class": "ShowIpOspfMplsLdpInterface", "doc": "Parser for:\n        show ip ospf mpls ldp interface\n        show ip ospf mpls ldp interface <interface>\n        show ip ospf mpls ldp interface vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'mpls': {\n                  'ldp': {\n                    'autoconfig': <class 'bool'>,\n                    'autoconfig_area_id': <class 'str'>,\n                    'igp_sync': <class 'bool'>,\n                    Optional  (str) required: <class 'bool'>,\n                    Optional  (str) achieved: <class 'bool'>,\n                    },\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'area': <class 'str'>,\n                    'name': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'area': <class 'str'>,\n                    'name': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'area': <class 'str'>,\n                    'name': <class 'str'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'mpls': {\n                      'ldp': {\n                        'autoconfig': <class 'bool'>,\n                        'autoconfig_area_id': <class 'str'>,\n                        'igp_sync': <class 'bool'>,\n                        Optional  (str) required: <class 'bool'>,\n                        Optional  (str) achieved: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_mpls_ldp_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L939"}}, "show ip ospf mpls traffic-eng link": {"ios": {"class": "ShowIpOspfMplsTrafficEngLink", "doc": " Parser for \"show ip ospf mpls traffic-eng link\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'te': {\n                'router_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'mpls': {\n                  'te': {\n                    'enable': <class 'bool'>,\n                    Optional  (str) total_links: <class 'int'>,\n                    Optional  (str) area_instance: <class 'int'>,\n                    Optional  (str) link_hash_bucket: {\n                      Any  (str) *: {\n                        'link_fragments': {\n                          Any  (str) *: {\n                            'link_instance': <class 'int'>,\n                            'network_type': <class 'str'>,\n                            'link_id': <class 'str'>,\n                            'interface_address': <class 'str'>,\n                            'te_admin_metric': <class 'int'>,\n                            'igp_admin_metric': <class 'int'>,\n                            'max_bandwidth': <class 'int'>,\n                            'max_reservable_bandwidth': <class 'int'>,\n                            'affinity_bit': <class 'str'>,\n                            'total_priority': <class 'int'>,\n                            Optional  (str) unreserved_bandwidths: {\n                              Any  (str) *: {\n                                'priority': <class 'int'>,\n                                'unreserved_bandwidth': <class 'int'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_mpls_traffic-eng_link", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L105"}, "iosxe": {"class": "ShowIpOspfMplsTrafficEngLink", "doc": " Parser for:\n        * 'show ip ospf mpls traffic-eng link'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'te': {\n                'router_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'mpls': {\n                  'te': {\n                    'enable': <class 'bool'>,\n                    Optional  (str) total_links: <class 'int'>,\n                    Optional  (str) area_instance: <class 'int'>,\n                    Optional  (str) link_hash_bucket: {\n                      Any  (str) *: {\n                        'link_fragments': {\n                          Any  (str) *: {\n                            'link_instance': <class 'int'>,\n                            'network_type': <class 'str'>,\n                            'link_id': <class 'str'>,\n                            'interface_address': <class 'str'>,\n                            'te_admin_metric': <class 'int'>,\n                            'igp_admin_metric': <class 'int'>,\n                            'max_bandwidth': <class 'int'>,\n                            'max_reservable_bandwidth': <class 'int'>,\n                            'affinity_bit': <class 'str'>,\n                            'total_priority': <class 'int'>,\n                            Optional  (str) unreserved_bandwidths: {\n                              Any  (str) *: {\n                                'priority': <class 'int'>,\n                                'unreserved_bandwidth': <class 'int'>,\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_mpls_traffic-eng_link", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L5975"}}, "show ip ospf neighbor": {"iosxe": {"class": "ShowIpOspfNeighbor", "doc": " Parser for:\n        * 'show ip ospf neighbor'\n        * 'show ip ospf neighbor {interface}'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'priority': <class 'int'>,\n        'state': <class 'str'>,\n        'dead_time': <class 'str'>,\n        'address': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7210"}}, "show ip ospf neighbor detail": {"ios": {"class": "ShowIpOspfNeighborDetail", "doc": " Parser for \"show ip ospf neighbor detail\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) bfd_state: <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) sr_adj_label: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L67"}, "iosxe": {"class": "ShowIpOspfNeighborDetail", "doc": " Parser for:\n        * 'show ip ospf neighbor detail'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) bfd_state: <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) sr_adj_label: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L3258"}}, "show ip ospf neighbor {interface}": {"iosxe": {"class": "ShowIpOspfNeighbor", "doc": " Parser for:\n        * 'show ip ospf neighbor'\n        * 'show ip ospf neighbor {interface}'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'neighbors': {\n      Any  (str) *: {\n        'priority': <class 'int'>,\n        'state': <class 'str'>,\n        'dead_time': <class 'str'>,\n        'address': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_neighbor_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7210"}}, "show ip ospf neighbor {neighbor} detail": {"ios": {"class": "ShowIpOspfNeighborDetail", "doc": " Parser for \"show ip ospf neighbor detail\" ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) bfd_state: <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) sr_adj_label: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_neighbor_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L67"}, "iosxe": {"class": "ShowIpOspfNeighborDetail", "doc": " Parser for:\n        * 'show ip ospf neighbor detail'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) bfd_state: <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) sr_adj_label: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'interface': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) interface_id: <class 'str'>,\n                        Optional  (str) hello_options: <class 'str'>,\n                        Optional  (str) dbd_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_neighbor_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L3258"}}, "show ip ospf neighbors detail": {"nxos": {"class": "ShowIpOspfNeighborDetail", "doc": "Parser for:\n        show ip ospf neighbors detail\n        show ip ospf neighbors <neighbor> detail\n        show ip ospf neighbors detail vrf <vrf>\n        show ip ospf neighbors <neighbor> detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'interfaces': {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L2458"}}, "show ip ospf neighbors detail vrf {vrf}": {"nxos": {"class": "ShowIpOspfNeighborDetail", "doc": "Parser for:\n        show ip ospf neighbors detail\n        show ip ospf neighbors <neighbor> detail\n        show ip ospf neighbors detail vrf <vrf>\n        show ip ospf neighbors <neighbor> detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'interfaces': {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_neighbors_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L2458"}}, "show ip ospf neighbors {neighbor} detail": {"nxos": {"class": "ShowIpOspfNeighborDetail", "doc": "Parser for:\n        show ip ospf neighbors detail\n        show ip ospf neighbors <neighbor> detail\n        show ip ospf neighbors detail vrf <vrf>\n        show ip ospf neighbors <neighbor> detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'interfaces': {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_neighbors_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L2458"}}, "show ip ospf neighbors {neighbor} detail vrf {vrf}": {"nxos": {"class": "ShowIpOspfNeighborDetail", "doc": "Parser for:\n        show ip ospf neighbors detail\n        show ip ospf neighbors <neighbor> detail\n        show ip ospf neighbors detail vrf <vrf>\n        show ip ospf neighbors <neighbor> detail vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'interfaces': {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'last_state_change': <class 'str'>,\n                        Optional  (str) priority: <class 'int'>,\n                        Optional  (str) dr_ip_addr: <class 'str'>,\n                        Optional  (str) bdr_ip_addr: <class 'str'>,\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        'hello_options': <class 'str'>,\n                        'dbd_options': <class 'str'>,\n                        'last_non_hello_packet_received': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_neighbors_neighbor_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L2458"}}, "show ip ospf segment-routing": {"iosxe": {"class": "ShowIpOspfSegmentRouting", "doc": " Parser for show ip ospf segment-routing\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'process_id': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    Optional  (str) global_segment_routing_state: <class 'str'>,\n    Optional  (str) segment_routing_enabled: {\n      'area': {\n        Any  (str) *: {\n          'topology_name': <class 'str'>,\n          'forwarding': <class 'str'>,\n          'strict_spf': <class 'str'>,\n          },\n        },\n      },\n    'sr_attributes': {\n      'sr_label_preferred': <class 'bool'>,\n      'advertise_explicit_null': <class 'bool'>,\n      },\n    Optional  (str) global_block_srgb: {\n      'range': {\n        'start': <class 'int'>,\n        'end': <class 'int'>,\n        },\n      'state': <class 'str'>,\n      },\n    Optional  (str) local_block_srlb: {\n      'range': {\n        'start': <class 'int'>,\n        'end': <class 'int'>,\n        },\n      'state': <class 'str'>,\n      },\n    Optional  (str) registered_with: {\n      Any  (str) *: {\n        Optional  (str) client_handle: <class 'int'>,\n        Optional  (str) sr_algo: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'handle': <class 'str'>,\n              'bit_mask': <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) client_id: <class 'int'>,\n        },\n      },\n    Optional  (str) max_labels: {\n      'platform': <class 'int'>,\n      'available': <class 'int'>,\n      'pushed_by_ospf': {\n        'uloop_tunnels': <class 'int'>,\n        'ti_lfa_tunnels': <class 'int'>,\n        },\n      },\n    'mfi_label_reservation_ack_pending': <class 'bool'>,\n    'bind_retry_timer_running': <class 'bool'>,\n    Optional  (str) bind_retry_timer_left: <class 'str'>,\n    Optional  (str) adj_label_bind_retry_timer_running: <class 'bool'>,\n    Optional  (str) adj_label_bind_retry_timer_left: <class 'str'>,\n    Optional  (str) srp_app_locks_requested: {\n      'srgb': <class 'int'>,\n      'srlb': <class 'int'>,\n      },\n    Optional  (str) teapp: {\n      'te_router_id': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_segment-routing", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7904"}}, "show ip ospf segment-routing adjacency-sid": {"iosxe": {"class": "ShowIpOspfSegmentRoutingAdjacencySid", "doc": " Parser for commands:\n            * show ip ospf {process_id} segment-routing adjacency-sid\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'process_id': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    'adjacency_sids': {\n      Any  (str) *: {\n        'neighbor_id': <class 'str'>,\n        'neighbor_address': <class 'str'>,\n        'interface': <class 'str'>,\n        'flags': <class 'str'>,\n        Optional  (str) backup_nexthop: <class 'str'>,\n        Optional  (str) backup_interface: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_segment-routing_adjacency-sid", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7311"}}, "show ip ospf segment-routing global-block": {"iosxe": {"class": "ShowIpOspfSegmentRoutingGlobalBlock", "doc": " Parser for commands:\n            * show ip ospf {pid} segment-routing global-block\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'process_id': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    'area': <class 'int'>,\n    'routers': {\n      Any  (str) *: {\n        'router_id': <class 'str'>,\n        'sr_capable': <class 'str'>,\n        Optional  (str) sr_algorithm: <class 'str'>,\n        Optional  (str) srgb_base: <class 'int'>,\n        Optional  (str) srgb_range: <class 'int'>,\n        Optional  (str) sid_label: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_segment-routing_global-block", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7743"}}, "show ip ospf segment-routing local-block": {"iosxe": {"class": "ShowIpOspfSegmentRoutingLocalBlock", "doc": " Parser for:\n        * 'show ip ospf {process_id} segment-routing local-block'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    'areas': {\n      Any  (str) *: {\n        'router_id': {\n          Any  (str) *: {\n            'sr_capable': <class 'str'>,\n            Optional  (str) srlb_base: <class 'int'>,\n            Optional  (str) srlb_range: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_segment-routing_local-block", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L78"}}, "show ip ospf segment-routing protected-adjacencies": {"iosxe": {"class": "ShowIpOspfSegmentRoutingProtectedAdjacencies", "doc": " Parser for show ip ospf segment-routing protected-adjacencies\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'process_id': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    Optional  (str) areas: {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'interfaces': {\n              Any  (str) *: {\n                'address': <class 'str'>,\n                'adj_sid': <class 'int'>,\n                Optional  (str) backup_nexthop: <class 'str'>,\n                Optional  (str) backup_interface: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_segment-routing_protected-adjacencies", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7528"}}, "show ip ospf segment-routing sid-database": {"iosxe": {"class": "ShowIpOspfSegmentRoutingSidDatabase", "doc": " Parser for commands:\n            * show ip ospf segment-routing sid-database\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'process_id': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    Optional  (str) sids: {\n      Any  (str) *: {\n        'index': {\n          Any  (str) *: {\n            Optional  (str) codes: <class 'str'>,\n            'prefix': <class 'str'>,\n            Optional  (str) adv_rtr_id: <class 'str'>,\n            Optional  (str) area_id: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) algo: <class 'int'>,\n            },\n          },\n        },\n      'total_entries': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_segment-routing_sid-database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7633"}}, "show ip ospf sham-links": {"ios": {"class": "ShowIpOspfShamLinks", "doc": " Parser for 'show ip ospf sham-links' ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    'local_id': <class 'str'>,\n                    'remote_id': <class 'str'>,\n                    'transit_area_id': <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'cost': <class 'int'>,\n                    'state': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) demand_circuit: <class 'bool'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) adjacency_state: <class 'str'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) first: <class 'str'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_retransmission_max_length: <class 'int'>,\n                    Optional  (str) last_retransmission_max_scan: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_length: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_time: <class 'int'>,\n                    Optional  (str) total_retransmission: <class 'int'>,\n                    Optional  (str) retrans_qlen: <class 'int'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_sham-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L54"}, "iosxe": {"class": "ShowIpOspfShamLinks", "doc": " Parser for:\n        * 'show ip ospf sham-links'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    'local_id': <class 'str'>,\n                    'remote_id': <class 'str'>,\n                    'transit_area_id': <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    'cost': <class 'int'>,\n                    'state': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) demand_circuit: <class 'bool'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) adjacency_state: <class 'str'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) first: <class 'str'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_retransmission_max_length: <class 'int'>,\n                    Optional  (str) last_retransmission_max_scan: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_length: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_time: <class 'int'>,\n                    Optional  (str) total_retransmission: <class 'int'>,\n                    Optional  (str) retrans_qlen: <class 'int'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_sham-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L3025"}, "nxos": {"class": "ShowIpOspfShamLinks", "doc": "Parser for:\n        show ip ospf sham-links\n        show ip ospf sham-links vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    'transit_area_id': <class 'str'>,\n                    'backbone_area_id': <class 'str'>,\n                    'local_id': <class 'str'>,\n                    'remote_id': <class 'str'>,\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) unnumbered_interface: <class 'str'>,\n                    Optional  (str) unnumbered_ip_address: <class 'str'>,\n                    'hello_interval': <class 'int'>,\n                    'dead_interval': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    'index': <class 'int'>,\n                    Optional  (str) nbr_total: <class 'int'>,\n                    Optional  (str) nbr_flood: <class 'int'>,\n                    Optional  (str) nbr_adjs: <class 'int'>,\n                    'destination': <class 'str'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        'key_chain': <class 'str'>,\n                        Optional  (str) status: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      Optional  (str) key_id: <class 'str'>,\n                      },\n                    'cost': <class 'int'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) wait_timer: <class 'int'>,\n                    'statistics': {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'instance': <class 'str'>,\n                        'area': <class 'str'>,\n                        'backbone_area_id': <class 'str'>,\n                        'local': <class 'str'>,\n                        'remote': <class 'str'>,\n                        'state': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        'hello_option': <class 'str'>,\n                        'dbd_option': <class 'str'>,\n                        'last_change': <class 'str'>,\n                        'last_non_hello_received': <class 'str'>,\n                        'statistics': {\n                          'nbr_event_count': <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_sham-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1752"}}, "show ip ospf sham-links vrf {vrf}": {"nxos": {"class": "ShowIpOspfShamLinks", "doc": "Parser for:\n        show ip ospf sham-links\n        show ip ospf sham-links vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    'transit_area_id': <class 'str'>,\n                    'backbone_area_id': <class 'str'>,\n                    'local_id': <class 'str'>,\n                    'remote_id': <class 'str'>,\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) unnumbered_interface: <class 'str'>,\n                    Optional  (str) unnumbered_ip_address: <class 'str'>,\n                    'hello_interval': <class 'int'>,\n                    'dead_interval': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    'index': <class 'int'>,\n                    Optional  (str) nbr_total: <class 'int'>,\n                    Optional  (str) nbr_flood: <class 'int'>,\n                    Optional  (str) nbr_adjs: <class 'int'>,\n                    'destination': <class 'str'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        'key_chain': <class 'str'>,\n                        Optional  (str) status: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      Optional  (str) key_id: <class 'str'>,\n                      },\n                    'cost': <class 'int'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) wait_timer: <class 'int'>,\n                    'statistics': {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'instance': <class 'str'>,\n                        'area': <class 'str'>,\n                        'backbone_area_id': <class 'str'>,\n                        'local': <class 'str'>,\n                        'remote': <class 'str'>,\n                        'state': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        'hello_option': <class 'str'>,\n                        'dbd_option': <class 'str'>,\n                        'last_change': <class 'str'>,\n                        'last_non_hello_received': <class 'str'>,\n                        'statistics': {\n                          'nbr_event_count': <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_sham-links_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1752"}}, "show ip ospf traffic": {"iosxe": {"class": "ShowIpOspfTraffic", "doc": " Parser for:\n        * \"show ip ospf traffic\"\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\nOptional  (str) ospf_statistics: {\n  'last_clear_traffic_counters': <class 'str'>,\n  'rcvd': {\n    'total': <class 'int'>,\n    'checksum_errors': <class 'int'>,\n    'hello': <class 'int'>,\n    'database_desc': <class 'int'>,\n    'link_state_req': <class 'int'>,\n    'link_state_updates': <class 'int'>,\n    'link_state_acks': <class 'int'>,\n    },\n  'sent': {\n    'total': <class 'int'>,\n    'hello': <class 'int'>,\n    'database_desc': <class 'int'>,\n    'link_state_req': <class 'int'>,\n    'link_state_updates': <class 'int'>,\n    'link_state_acks': <class 'int'>,\n    },\n  },\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) ospf_queue_statistics: {\n              'limit': {\n                'inputq': <class 'int'>,\n                'outputq': <class 'int'>,\n                'updateq': <class 'int'>,\n                },\n              'drops': {\n                'inputq': <class 'int'>,\n                'outputq': <class 'int'>,\n                'updateq': <class 'int'>,\n                },\n              'max_delay_msec': {\n                'inputq': <class 'int'>,\n                'outputq': <class 'int'>,\n                'updateq': <class 'int'>,\n                },\n              'max_size': {\n                'total': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'invalid': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'hello': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'db_des': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'ls_req': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'ls_upd': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'ls_ack': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                },\n              'current_size': {\n                'total': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'invalid': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'hello': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'db_des': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'ls_req': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'ls_upd': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                'ls_ack': {\n                  'inputq': <class 'int'>,\n                  'outputq': <class 'int'>,\n                  'updateq': <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) interface_statistics: {\n              'interfaces': {\n                Any  (str) *: {\n                  'last_clear_traffic_counters': <class 'str'>,\n                  'ospf_packets_received_sent': {\n                    'type': {\n                      Any  (str) *: {\n                        'packets': <class 'int'>,\n                        'bytes': <class 'int'>,\n                        },\n                      },\n                    },\n                  'ospf_header_errors': {\n                    'length': <class 'int'>,\n                    'instance_id': <class 'int'>,\n                    'checksum': <class 'int'>,\n                    'auth_type': <class 'int'>,\n                    'version': <class 'int'>,\n                    'bad_source': <class 'int'>,\n                    'no_virtual_link': <class 'int'>,\n                    'area_mismatch': <class 'int'>,\n                    'no_sham_link': <class 'int'>,\n                    'self_originated': <class 'int'>,\n                    'duplicate_id': <class 'int'>,\n                    'hello': <class 'int'>,\n                    'mtu_mismatch': <class 'int'>,\n                    'nbr_ignored': <class 'int'>,\n                    'lls': <class 'int'>,\n                    'unknown_neighbor': <class 'int'>,\n                    'authentication': <class 'int'>,\n                    'ttl_check_fail': <class 'int'>,\n                    Optional  (str) adjacency_throttle: <class 'int'>,\n                    Optional  (str) bfd: <class 'int'>,\n                    'test_discard': <class 'int'>,\n                    },\n                  'ospf_lsa_errors': {\n                    'type': <class 'int'>,\n                    'length': <class 'int'>,\n                    'data': <class 'int'>,\n                    'checksum': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            'summary_traffic_statistics': {\n              'ospf_packets_received_sent': {\n                'type': {\n                  Any  (str) *: {\n                    'packets': <class 'int'>,\n                    'bytes': <class 'int'>,\n                    },\n                  },\n                },\n              'ospf_header_errors': {\n                'length': <class 'int'>,\n                'instance_id': <class 'int'>,\n                'checksum': <class 'int'>,\n                'auth_type': <class 'int'>,\n                'version': <class 'int'>,\n                'bad_source': <class 'int'>,\n                'no_virtual_link': <class 'int'>,\n                'area_mismatch': <class 'int'>,\n                'no_sham_link': <class 'int'>,\n                'self_originated': <class 'int'>,\n                'duplicate_id': <class 'int'>,\n                'hello': <class 'int'>,\n                'mtu_mismatch': <class 'int'>,\n                'nbr_ignored': <class 'int'>,\n                'lls': <class 'int'>,\n                'unknown_neighbor': <class 'int'>,\n                'authentication': <class 'int'>,\n                'ttl_check_fail': <class 'int'>,\n                Optional  (str) adjacency_throttle: <class 'int'>,\n                Optional  (str) bfd: <class 'int'>,\n                'test_discard': <class 'int'>,\n                },\n              'ospf_lsa_errors': {\n                'type': <class 'int'>,\n                'length': <class 'int'>,\n                'data': <class 'int'>,\n                'checksum': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L6687"}}, "show ip ospf virtual-links": {"ios": {"class": "ShowIpOspfVirtualLinks", "doc": null, "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'transit_area_id': <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    'state': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) adjacency_state: <class 'str'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) first: <class 'str'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_retransmission_max_length: <class 'int'>,\n                    Optional  (str) last_retransmission_max_scan: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_length: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_time: <class 'int'>,\n                    Optional  (str) total_retransmission: <class 'int'>,\n                    Optional  (str) retrans_qlen: <class 'int'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_virtual-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ospf.py#L62"}, "iosxe": {"class": "ShowIpOspfVirtualLinks", "doc": " Parser for:\n        * 'show ip ospf virtual-links'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'transit_area_id': <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    'state': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) adjacency_state: <class 'str'>,\n                    Optional  (str) ttl_security: {\n                      'enable': <class 'bool'>,\n                      Optional  (str) hops: <class 'int'>,\n                      },\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) first: <class 'str'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_retransmission_max_length: <class 'int'>,\n                    Optional  (str) last_retransmission_max_scan: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_length: <class 'int'>,\n                    Optional  (str) last_retransmission_scan_time: <class 'int'>,\n                    Optional  (str) total_retransmission: <class 'int'>,\n                    Optional  (str) retrans_qlen: <class 'int'>,\n                    Optional  (str) topology: {\n                      Any  (str) *: {\n                        'cost': <class 'int'>,\n                        'disabled': <class 'bool'>,\n                        'shutdown': <class 'bool'>,\n                        'name': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_virtual-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L3113"}, "nxos": {"class": "ShowIpOspfVirtualLinks", "doc": "Parser for:\n        show ip ospf virtual-links\n        show ip ospf virtual-links vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    'transit_area_id': <class 'str'>,\n                    'backbone_area_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) unnumbered_interface: <class 'str'>,\n                    Optional  (str) unnumbered_ip_address: <class 'str'>,\n                    'interface': <class 'str'>,\n                    'remote_addr': <class 'str'>,\n                    'hello_interval': <class 'int'>,\n                    'dead_interval': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    'index': <class 'int'>,\n                    Optional  (str) nbr_total: <class 'int'>,\n                    Optional  (str) nbr_flood: <class 'int'>,\n                    Optional  (str) nbr_adjs: <class 'int'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        'key_chain': <class 'str'>,\n                        Optional  (str) status: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      Optional  (str) key_id: <class 'str'>,\n                      },\n                    'cost': <class 'int'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) wait_timer: <class 'int'>,\n                    'statistics': {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        'hello_option': <class 'str'>,\n                        'dbd_option': <class 'str'>,\n                        'last_change': <class 'str'>,\n                        'last_non_hello_received': <class 'str'>,\n                        'statistics': {\n                          'nbr_event_count': <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_virtual-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1638"}}, "show ip ospf virtual-links vrf {vrf}": {"nxos": {"class": "ShowIpOspfVirtualLinks", "doc": "Parser for:\n        show ip ospf virtual-links\n        show ip ospf virtual-links vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    'transit_area_id': <class 'str'>,\n                    'backbone_area_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    Optional  (str) unnumbered_interface: <class 'str'>,\n                    Optional  (str) unnumbered_ip_address: <class 'str'>,\n                    'interface': <class 'str'>,\n                    'remote_addr': <class 'str'>,\n                    'hello_interval': <class 'int'>,\n                    'dead_interval': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    'index': <class 'int'>,\n                    Optional  (str) nbr_total: <class 'int'>,\n                    Optional  (str) nbr_flood: <class 'int'>,\n                    Optional  (str) nbr_adjs: <class 'int'>,\n                    Optional  (str) authentication: {\n                      Optional  (str) auth_trailer_key_chain: {\n                        'key_chain': <class 'str'>,\n                        Optional  (str) status: <class 'str'>,\n                        },\n                      Optional  (str) auth_trailer_key: {\n                        'crypto_algorithm': <class 'str'>,\n                        },\n                      Optional  (str) key_id: <class 'str'>,\n                      },\n                    'cost': <class 'int'>,\n                    'state': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) wait_timer: <class 'int'>,\n                    'statistics': {\n                      'link_scope_lsa_count': <class 'int'>,\n                      'link_scope_lsa_cksum_sum': <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'state': <class 'str'>,\n                        'dead_timer': <class 'str'>,\n                        'hello_option': <class 'str'>,\n                        'dbd_option': <class 'str'>,\n                        'last_change': <class 'str'>,\n                        'last_non_hello_received': <class 'str'>,\n                        'statistics': {\n                          'nbr_event_count': <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_virtual-links_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L1638"}}, "show ip ospf vrf {vrf}": {"nxos": {"class": "ShowIpOspf", "doc": "Parser for:\n        show ip ospf\n        show ip ospf vrf <vrf>", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            'instance': <class 'int'>,\n            Optional  (str) name_lookup: <class 'bool'>,\n            Optional  (str) nsr: {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                'enable': <class 'bool'>,\n                'type': <class 'str'>,\n                'restart_interval': <class 'int'>,\n                'state': <class 'str'>,\n                'exist_status': <class 'str'>,\n                },\n              },\n            Optional  (str) single_tos_routes_enable: <class 'bool'>,\n            Optional  (str) opaque_lsa_enable: <class 'bool'>,\n            Optional  (str) this_router_is: <class 'str'>,\n            Optional  (str) preference: {\n              'single_value': {\n                'all': <class 'int'>,\n                },\n              },\n            Optional  (str) bfd: {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) auto_cost: {\n              'enable': <class 'bool'>,\n              'reference_bandwidth': <class 'int'>,\n              'bandwidth_unit': <class 'str'>,\n              },\n            Optional  (str) spf_control: {\n              'paths': <class 'int'>,\n              'throttle': {\n                'spf': {\n                  'start': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  },\n                'lsa': {\n                  'start': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  Optional  (str) minimum: <class 'int'>,\n                  Optional  (str) group_pacing: <class 'int'>,\n                  Optional  (str) numbers: {\n                    Optional  (str) external_lsas: {\n                      Optional  (str) total: <class 'int'>,\n                      Optional  (str) checksum: <class 'str'>,\n                      },\n                    Optional  (str) opaque_as_lsas: {\n                      Optional  (str) total: <class 'int'>,\n                      Optional  (str) checksum: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) numbers: {\n              'active_areas': {\n                'total': <class 'int'>,\n                'nssa': <class 'int'>,\n                'normal': <class 'int'>,\n                'stub': <class 'int'>,\n                },\n              'areas': {\n                'total': <class 'int'>,\n                'nssa': <class 'int'>,\n                'normal': <class 'int'>,\n                'stub': <class 'int'>,\n                },\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              },\n            Optional  (str) stub_router: {\n              'always': {\n                'always': <class 'bool'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                },\n              Optional  (str) on_startup: {\n                'on_startup': <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                },\n              },\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) discard_route_external: <class 'bool'>,\n            Optional  (str) discard_route_internal: <class 'bool'>,\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_type': <class 'str'>,\n                'area_id': <class 'str'>,\n                Optional  (str) generate_nssa_default_route: <class 'bool'>,\n                Optional  (str) summary: <class 'bool'>,\n                Optional  (str) perform_translation: <class 'str'>,\n                Optional  (str) existed: <class 'str'>,\n                Optional  (str) default_cost: <class 'int'>,\n                Optional  (str) numbers: {\n                  'interfaces': <class 'int'>,\n                  'active_interfaces': <class 'int'>,\n                  'passive_interfaces': <class 'int'>,\n                  'loopback_interfaces': <class 'int'>,\n                  },\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    'advertise': <class 'bool'>,\n                    'cost': <class 'int'>,\n                    'net': <class 'int'>,\n                    },\n                  },\n                Optional  (str) authentication: <class 'str'>,\n                Optional  (str) statistics: {\n                  'spf_runs_count': <class 'int'>,\n                  'spf_last_run_time': <class 'float'>,\n                  'area_scope_lsa_count': <class 'int'>,\n                  'area_scope_lsa_cksum_sum': <class 'str'>,\n                  Optional  (str) as_nssa_translator_event_count: <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) redistribution: {\n              Optional  (str) bgp: {\n                'bgp_id': <class 'int'>,\n                },\n              Optional  (str) static: {\n                'enabled': <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ospf.py#L196"}}, "show ip ospf {process_id} segment-routing adjacency-sid": {"iosxe": {"class": "ShowIpOspfSegmentRoutingAdjacencySid", "doc": " Parser for commands:\n            * show ip ospf {process_id} segment-routing adjacency-sid\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'process_id': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    'adjacency_sids': {\n      Any  (str) *: {\n        'neighbor_id': <class 'str'>,\n        'neighbor_address': <class 'str'>,\n        'interface': <class 'str'>,\n        'flags': <class 'str'>,\n        Optional  (str) backup_nexthop: <class 'str'>,\n        Optional  (str) backup_interface: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_process_id_segment-routing_adjacency-sid", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7311"}}, "show ip ospf {process_id} segment-routing global-block": {"iosxe": {"class": "ShowIpOspfSegmentRoutingGlobalBlock", "doc": " Parser for commands:\n            * show ip ospf {pid} segment-routing global-block\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'process_id': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    'area': <class 'int'>,\n    'routers': {\n      Any  (str) *: {\n        'router_id': <class 'str'>,\n        'sr_capable': <class 'str'>,\n        Optional  (str) sr_algorithm: <class 'str'>,\n        Optional  (str) srgb_base: <class 'int'>,\n        Optional  (str) srgb_range: <class 'int'>,\n        Optional  (str) sid_label: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_process_id_segment-routing_global-block", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L7743"}}, "show ip ospf {process_id} segment-routing local-block": {"iosxe": {"class": "ShowIpOspfSegmentRoutingLocalBlock", "doc": " Parser for:\n        * 'show ip ospf {process_id} segment-routing local-block'\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'router_id': <class 'str'>,\n    'areas': {\n      Any  (str) *: {\n        'router_id': {\n          Any  (str) *: {\n            'sr_capable': <class 'str'>,\n            Optional  (str) srlb_base: <class 'int'>,\n            Optional  (str) srlb_range: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_ospf_process_id_segment-routing_local-block", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ospf.py#L78"}}, "show ip pim bsr-router": {"ios": {"class": "ShowIpPimBsrRouter", "doc": "Parser for:\n        show ip pim bsr-router\n        show ip pim vrf <vrf> bsr-router", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Any  (str) *: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) next_advertisment: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address_host: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_bsr-router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L56"}, "iosxe": {"class": "ShowIpPimBsrRouter", "doc": "Parser for:\n        show ip pim bsr-router\n        show ip pim vrf <vrf> bsr-router", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Any  (str) *: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) next_advertisment: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address_host: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_bsr-router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L643"}}, "show ip pim df": {"nxos": {"class": "ShowIpPimDf", "doc": "Parser for:\n        show ip pim df\n        show ip pim df vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) df_ordinal: <class 'int'>,\n                Optional  (str) df_bits: <class 'str'>,\n                Optional  (str) metric_pref: <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) group_range: <class 'str'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) interface_state: <class 'str'>,\n                Optional  (str) winner_metric_pref: <class 'int'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                Optional  (str) is_rpf: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_df", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1612"}}, "show ip pim df vrf {vrf}": {"nxos": {"class": "ShowIpPimDf", "doc": "Parser for:\n        show ip pim df\n        show ip pim df vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) df_ordinal: <class 'int'>,\n                Optional  (str) df_bits: <class 'str'>,\n                Optional  (str) metric_pref: <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) group_range: <class 'str'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) interface_state: <class 'str'>,\n                Optional  (str) winner_metric_pref: <class 'int'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                Optional  (str) is_rpf: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_df_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1612"}}, "show ip pim group-range": {"nxos": {"class": "ShowIpPimGroupRange", "doc": "parser for:\n        show ip pim group-range\n        show ip pim group-range vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'sm': {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) action: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) shared_tree_only: <class 'str'>,\n              Optional  (str) range: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_group-range", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3128"}}, "show ip pim group-range vrf {vrf}": {"nxos": {"class": "ShowIpPimGroupRange", "doc": "parser for:\n        show ip pim group-range\n        show ip pim group-range vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'sm': {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) action: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) shared_tree_only: <class 'str'>,\n              Optional  (str) range: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_group-range_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3128"}}, "show ip pim interface": {"ios": {"class": "ShowIpPimInterface", "doc": "Parser for:\n            show ip pim interface\n            show ip pim vrf <vrf> interface", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L49"}, "iosxe": {"class": "ShowIpPimInterface", "doc": "Parser for:\n            show ip pim interface\n            show ip pim vrf <vrf> interface", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L508"}, "nxos": {"class": "ShowIpPimInterface", "doc": "Parser for:\n        show ip pim interface\n        show ip pim interface vrf <vrf>\n        show ip pim interface <interface>\n        show ip pim interface <interface> vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) ip_subnet: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3517"}}, "show ip pim interface detail": {"ios": {"class": "ShowIpPimInterfaceDetail", "doc": " Parser for:\n        show ip pim Interface detail\n        show ip pim vrf <vrf_name> interface detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_packets_in: <class 'int'>,\n            Optional  (str) hello_packets_out: <class 'int'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) internet_protocol_processing: <class 'bool'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) multicast: {\n              Optional  (str) switching: <class 'str'>,\n              Optional  (str) packets_in: <class 'int'>,\n              Optional  (str) packets_out: <class 'int'>,\n              Optional  (str) ttl_threshold: <class 'int'>,\n              Optional  (str) tag_switching: <class 'bool'>,\n              },\n            Optional  (str) pim_status: <class 'str'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dm: {\n              },\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) state_refresh_processing: <class 'str'>,\n            Optional  (str) state_refresh_origination: <class 'str'>,\n            Optional  (str) nbma_mode: <class 'str'>,\n            Optional  (str) atm_multipoint_signalling: <class 'str'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) neighbors_rpf_proxy_capable: <class 'bool'>,\n            Optional  (str) none_dr_join: <class 'bool'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L70"}, "iosxe": {"class": "ShowIpPimInterfaceDetail", "doc": null, "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_packets_in: <class 'int'>,\n            Optional  (str) hello_packets_out: <class 'int'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) internet_protocol_processing: <class 'bool'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) multicast: {\n              Optional  (str) switching: <class 'str'>,\n              Optional  (str) packets_in: <class 'int'>,\n              Optional  (str) packets_out: <class 'int'>,\n              Optional  (str) ttl_threshold: <class 'int'>,\n              Optional  (str) tag_switching: <class 'bool'>,\n              },\n            Optional  (str) pim_status: <class 'str'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dm: {\n              },\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) state_refresh_processing: <class 'str'>,\n            Optional  (str) state_refresh_origination: <class 'str'>,\n            Optional  (str) nbma_mode: <class 'str'>,\n            Optional  (str) atm_multipoint_signalling: <class 'str'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) neighbors_rpf_proxy_capable: <class 'bool'>,\n            Optional  (str) none_dr_join: <class 'bool'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1353"}}, "show ip pim interface df": {"ios": {"class": "ShowIpPimInterfaceDf", "doc": "Parser for show ip pim [vrf <WORD>] interface df", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Any  (str) *: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_interface_df", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L102"}, "iosxe": {"class": "ShowIpPimInterfaceDf", "doc": "Parser for show ip pim [vrf <WORD>] interface df", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Any  (str) *: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_interface_df", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1942"}}, "show ip pim interface vrf {vrf}": {"nxos": {"class": "ShowIpPimInterface", "doc": "Parser for:\n        show ip pim interface\n        show ip pim interface vrf <vrf>\n        show ip pim interface <interface>\n        show ip pim interface <interface> vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) ip_subnet: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3517"}}, "show ip pim interface {interface}": {"nxos": {"class": "ShowIpPimInterface", "doc": "Parser for:\n        show ip pim interface\n        show ip pim interface vrf <vrf>\n        show ip pim interface <interface>\n        show ip pim interface <interface> vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) ip_subnet: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3517"}}, "show ip pim interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpPimInterface", "doc": "Parser for:\n        show ip pim interface\n        show ip pim interface vrf <vrf>\n        show ip pim interface <interface>\n        show ip pim interface <interface> vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) ip_subnet: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) statistics: {\n              Optional  (str) general: {\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3517"}}, "show ip pim neighbor": {"ios": {"class": "ShowIpPimNeighbor", "doc": "Parser for show ip pim [vrf <WORD>] neighbor", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L83"}, "iosxe": {"class": "ShowIpPimNeighbor", "doc": "Parser for show ip pim [vrf <WORD>] neighbor", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1844"}, "nxos": {"class": "ShowIpPimNeighbor", "doc": "Parser for:\n        show ip pim neighbor\n        show ip pim neighbor vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                'bfd_status': <class 'bool'>,\n                'expiration': <class 'str'>,\n                'dr_priority': <class 'int'>,\n                'up_time': <class 'str'>,\n                'interface': <class 'str'>,\n                'bidir_capable': <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2652"}}, "show ip pim neighbor vrf {vrf}": {"nxos": {"class": "ShowIpPimNeighbor", "doc": "Parser for:\n        show ip pim neighbor\n        show ip pim neighbor vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                'bfd_status': <class 'bool'>,\n                'expiration': <class 'str'>,\n                'dr_priority': <class 'int'>,\n                'up_time': <class 'str'>,\n                'interface': <class 'str'>,\n                'bidir_capable': <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_neighbor_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2652"}}, "show ip pim policy statistics register-policy": {"nxos": {"class": "ShowIpPimPolicyStaticticsRegisterPolicy", "doc": "Parser for:\n        show ip pim policy statictics register_policy\n        show ip pim policy statictics register_policy vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) accept_register: <class 'str'>,\n            Optional  (str) register_policy: {\n              Any  (str) *: {\n                Optional  (str) total_accept_count: <class 'int'>,\n                Optional  (str) total_reject_count: <class 'int'>,\n                Any  (str) *: {\n                  Optional  (str) compare_count: <class 'int'>,\n                  Optional  (str) match_count: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_policy_statistics_register-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3255"}}, "show ip pim policy statistics register-policy vrf {vrf}": {"nxos": {"class": "ShowIpPimPolicyStaticticsRegisterPolicy", "doc": "Parser for:\n        show ip pim policy statictics register_policy\n        show ip pim policy statictics register_policy vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) accept_register: <class 'str'>,\n            Optional  (str) register_policy: {\n              Any  (str) *: {\n                Optional  (str) total_accept_count: <class 'int'>,\n                Optional  (str) total_reject_count: <class 'int'>,\n                Any  (str) *: {\n                  Optional  (str) compare_count: <class 'int'>,\n                  Optional  (str) match_count: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_policy_statistics_register-policy_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L3255"}}, "show ip pim route": {"nxos": {"class": "ShowIpPimRoute", "doc": "Parser for:\n        show ip pim route\n        show ip pim route vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) topology_tree_info: {\n          Any  (str) *: {\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) source_address: <class 'str'>,\n            Optional  (str) is_rpt: <class 'bool'>,\n            Optional  (str) rp_bit: <class 'bool'>,\n            Optional  (str) expiration: <class 'str'>,\n            Optional  (str) incoming_interface: <class 'str'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) rp_address: <class 'str'>,\n            Optional  (str) rpf_neighbor: <class 'str'>,\n            Optional  (str) jp_holdtime_roundup: <class 'int'>,\n            Optional  (str) oif: <class 'str'>,\n            Optional  (str) oif_count: <class 'int'>,\n            Optional  (str) oif_timeout_count: <class 'int'>,\n            Optional  (str) oif_timeout: <class 'str'>,\n            Optional  (str) immediate: <class 'str'>,\n            Optional  (str) immediate_count: <class 'int'>,\n            Optional  (str) immediate_timeout_count: <class 'int'>,\n            Optional  (str) immediate_timeout: <class 'str'>,\n            Optional  (str) timeout_interval: <class 'int'>,\n            Optional  (str) sgr_prune_count: <class 'int'>,\n            Optional  (str) sgr_prune: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2285"}}, "show ip pim route vrf {vrf}": {"nxos": {"class": "ShowIpPimRoute", "doc": "Parser for:\n        show ip pim route\n        show ip pim route vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) topology_tree_info: {\n          Any  (str) *: {\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) source_address: <class 'str'>,\n            Optional  (str) is_rpt: <class 'bool'>,\n            Optional  (str) rp_bit: <class 'bool'>,\n            Optional  (str) expiration: <class 'str'>,\n            Optional  (str) incoming_interface: <class 'str'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) rp_address: <class 'str'>,\n            Optional  (str) rpf_neighbor: <class 'str'>,\n            Optional  (str) jp_holdtime_roundup: <class 'int'>,\n            Optional  (str) oif: <class 'str'>,\n            Optional  (str) oif_count: <class 'int'>,\n            Optional  (str) oif_timeout_count: <class 'int'>,\n            Optional  (str) oif_timeout: <class 'str'>,\n            Optional  (str) immediate: <class 'str'>,\n            Optional  (str) immediate_count: <class 'int'>,\n            Optional  (str) immediate_timeout_count: <class 'int'>,\n            Optional  (str) immediate_timeout: <class 'str'>,\n            Optional  (str) timeout_interval: <class 'int'>,\n            Optional  (str) sgr_prune_count: <class 'int'>,\n            Optional  (str) sgr_prune: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2285"}}, "show ip pim rp mapping": {"ios": {"class": "ShowIpPimRpMapping", "doc": " Parser for:\n         show ip pim rp mapping\n         show ip pim vrf <vrf_name> rp mapping", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'rp_mappings': {\n            Any  (str) *: {\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) protocol: <class 'str'>,\n              Optional  (str) rp_address_host: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) hold_time: <class 'int'>,\n              },\n            },\n          'rp_list': {\n            Any  (str) *: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) bsr_version: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) sm: {\n                Optional  (str) policy_name: <class 'str'>,\n                Optional  (str) override: <class 'bool'>,\n                },\n              Optional  (str) bidir: {\n                },\n              },\n            },\n          Optional  (str) bsr: {\n            'rp': {\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) group_policy: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_rp_mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L63"}, "iosxe": {"class": "ShowIpPimRpMapping", "doc": null, "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'rp_mappings': {\n            Any  (str) *: {\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) protocol: <class 'str'>,\n              Optional  (str) rp_address_host: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) hold_time: <class 'int'>,\n              },\n            },\n          'rp_list': {\n            Any  (str) *: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) bsr_version: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) sm: {\n                Optional  (str) policy_name: <class 'str'>,\n                Optional  (str) override: <class 'bool'>,\n                },\n              Optional  (str) bidir: {\n                },\n              },\n            },\n          Optional  (str) bsr: {\n            'rp': {\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) group_policy: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_rp_mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L939"}}, "show ip pim vrf detail": {"nxos": {"class": "ShowIpPimVrfDetail", "doc": "Parser for:\n        show ip pim vrf detail\n        show ip pim vrf <vrf> detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) register_source: <class 'str'>,\n            Optional  (str) register_source_address: <class 'str'>,\n            Optional  (str) sg_expiry_timer: {\n              Optional  (str) sg_list: <class 'str'>,\n              Optional  (str) infinity: <class 'bool'>,\n              Optional  (str) sg_expiry_timer_configured: <class 'bool'>,\n              Optional  (str) sg_expiry_timer: <class 'int'>,\n              Optional  (str) config_version: <class 'int'>,\n              Optional  (str) active_version: <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) vrf_id: <class 'int'>,\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) interface_count: <class 'int'>,\n        Optional  (str) bfd: {\n          Optional  (str) enable: <class 'bool'>,\n          },\n        Optional  (str) mvpn: {\n          Optional  (str) enable: <class 'bool'>,\n          },\n        Optional  (str) state_limit: <class 'str'>,\n        Optional  (str) register_rate_limit: <class 'str'>,\n        Optional  (str) cli_vrf_done: <class 'bool'>,\n        Optional  (str) cibtype_auto_enabled: <class 'bool'>,\n        Optional  (str) vxlan_vni_id: <class 'int'>,\n        Optional  (str) shared_tree_ranges: <class 'str'>,\n        Optional  (str) pre_build_spt: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2814"}}, "show ip pim vrf {vrf} bsr-router": {"ios": {"class": "ShowIpPimBsrRouter", "doc": "Parser for:\n        show ip pim bsr-router\n        show ip pim vrf <vrf> bsr-router", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Any  (str) *: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) next_advertisment: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address_host: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_bsr-router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L56"}, "iosxe": {"class": "ShowIpPimBsrRouter", "doc": "Parser for:\n        show ip pim bsr-router\n        show ip pim vrf <vrf> bsr-router", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Any  (str) *: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) next_advertisment: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) address_host: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_bsr-router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L643"}}, "show ip pim vrf {vrf} detail": {"nxos": {"class": "ShowIpPimVrfDetail", "doc": "Parser for:\n        show ip pim vrf detail\n        show ip pim vrf <vrf> detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) register_source: <class 'str'>,\n            Optional  (str) register_source_address: <class 'str'>,\n            Optional  (str) sg_expiry_timer: {\n              Optional  (str) sg_list: <class 'str'>,\n              Optional  (str) infinity: <class 'bool'>,\n              Optional  (str) sg_expiry_timer_configured: <class 'bool'>,\n              Optional  (str) sg_expiry_timer: <class 'int'>,\n              Optional  (str) config_version: <class 'int'>,\n              Optional  (str) active_version: <class 'int'>,\n              },\n            },\n          },\n        Optional  (str) vrf_id: <class 'int'>,\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) interface_count: <class 'int'>,\n        Optional  (str) bfd: {\n          Optional  (str) enable: <class 'bool'>,\n          },\n        Optional  (str) mvpn: {\n          Optional  (str) enable: <class 'bool'>,\n          },\n        Optional  (str) state_limit: <class 'str'>,\n        Optional  (str) register_rate_limit: <class 'str'>,\n        Optional  (str) cli_vrf_done: <class 'bool'>,\n        Optional  (str) cibtype_auto_enabled: <class 'bool'>,\n        Optional  (str) vxlan_vni_id: <class 'int'>,\n        Optional  (str) shared_tree_ranges: <class 'str'>,\n        Optional  (str) pre_build_spt: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2814"}}, "show ip pim vrf {vrf} interface": {"ios": {"class": "ShowIpPimInterface", "doc": "Parser for:\n            show ip pim interface\n            show ip pim vrf <vrf> interface", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L49"}, "iosxe": {"class": "ShowIpPimInterface", "doc": "Parser for:\n            show ip pim interface\n            show ip pim vrf <vrf> interface", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L508"}}, "show ip pim vrf {vrf} interface detail": {"ios": {"class": "ShowIpPimInterfaceDetail", "doc": " Parser for:\n        show ip pim Interface detail\n        show ip pim vrf <vrf_name> interface detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_packets_in: <class 'int'>,\n            Optional  (str) hello_packets_out: <class 'int'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) internet_protocol_processing: <class 'bool'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) multicast: {\n              Optional  (str) switching: <class 'str'>,\n              Optional  (str) packets_in: <class 'int'>,\n              Optional  (str) packets_out: <class 'int'>,\n              Optional  (str) ttl_threshold: <class 'int'>,\n              Optional  (str) tag_switching: <class 'bool'>,\n              },\n            Optional  (str) pim_status: <class 'str'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dm: {\n              },\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) state_refresh_processing: <class 'str'>,\n            Optional  (str) state_refresh_origination: <class 'str'>,\n            Optional  (str) nbma_mode: <class 'str'>,\n            Optional  (str) atm_multipoint_signalling: <class 'str'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) neighbors_rpf_proxy_capable: <class 'bool'>,\n            Optional  (str) none_dr_join: <class 'bool'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L70"}, "iosxe": {"class": "ShowIpPimInterfaceDetail", "doc": null, "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_packets_in: <class 'int'>,\n            Optional  (str) hello_packets_out: <class 'int'>,\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) enable: <class 'bool'>,\n            Optional  (str) internet_protocol_processing: <class 'bool'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) multicast: {\n              Optional  (str) switching: <class 'str'>,\n              Optional  (str) packets_in: <class 'int'>,\n              Optional  (str) packets_out: <class 'int'>,\n              Optional  (str) ttl_threshold: <class 'int'>,\n              Optional  (str) tag_switching: <class 'bool'>,\n              },\n            Optional  (str) pim_status: <class 'str'>,\n            Optional  (str) version: <class 'int'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) dm: {\n              },\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) state_refresh_processing: <class 'str'>,\n            Optional  (str) state_refresh_origination: <class 'str'>,\n            Optional  (str) nbma_mode: <class 'str'>,\n            Optional  (str) atm_multipoint_signalling: <class 'str'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) neighbors_rpf_proxy_capable: <class 'bool'>,\n            Optional  (str) none_dr_join: <class 'bool'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1353"}}, "show ip pim vrf {vrf} interface df": {"ios": {"class": "ShowIpPimInterfaceDf", "doc": "Parser for show ip pim [vrf <WORD>] interface df", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Any  (str) *: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_interface_df", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L102"}, "iosxe": {"class": "ShowIpPimInterfaceDf", "doc": "Parser for show ip pim [vrf <WORD>] interface df", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Any  (str) *: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_interface_df", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1942"}}, "show ip pim vrf {vrf} neighbor": {"ios": {"class": "ShowIpPimNeighbor", "doc": "Parser for show ip pim [vrf <WORD>] neighbor", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L83"}, "iosxe": {"class": "ShowIpPimNeighbor", "doc": "Parser for show ip pim [vrf <WORD>] neighbor", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1844"}}, "show ip pim vrf {vrf} rp mapping": {"ios": {"class": "ShowIpPimRpMapping", "doc": " Parser for:\n         show ip pim rp mapping\n         show ip pim vrf <vrf_name> rp mapping", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'rp_mappings': {\n            Any  (str) *: {\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) protocol: <class 'str'>,\n              Optional  (str) rp_address_host: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) hold_time: <class 'int'>,\n              },\n            },\n          'rp_list': {\n            Any  (str) *: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) bsr_version: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) sm: {\n                Optional  (str) policy_name: <class 'str'>,\n                Optional  (str) override: <class 'bool'>,\n                },\n              Optional  (str) bidir: {\n                },\n              },\n            },\n          Optional  (str) bsr: {\n            'rp': {\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) group_policy: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_rp_mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L63"}, "iosxe": {"class": "ShowIpPimRpMapping", "doc": null, "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'rp_mappings': {\n            Any  (str) *: {\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) protocol: <class 'str'>,\n              Optional  (str) rp_address_host: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) hold_time: <class 'int'>,\n              },\n            },\n          'rp_list': {\n            Any  (str) *: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) bsr_version: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) sm: {\n                Optional  (str) policy_name: <class 'str'>,\n                Optional  (str) override: <class 'bool'>,\n                },\n              Optional  (str) bidir: {\n                },\n              },\n            },\n          Optional  (str) bsr: {\n            'rp': {\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) group_policy: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_pim_vrf_vrf_rp_mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L939"}}, "show ip protocols": {"ios": {"class": "ShowIpProtocols", "doc": " Parser for \"show ip protocols\" ", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'protocols': {\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'distance': <class 'int'>,\n                'maximum_paths': <class 'int'>,\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) network: <class 'list'>,\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) route_policy: <class 'int'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) default_set: <class 'bool'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'send_version': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'last_update': <class 'str'>,\n                    'distance': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                Optional  (str) network: {\n                  Any  (str) *: {\n                    'netmask': <class 'str'>,\n                    'area': <class 'str'>,\n                    },\n                  },\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'intra_area': <class 'int'>,\n                        'inter_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_areas': <class 'int'>,\n                'total_stub_area': <class 'int'>,\n                'total_normal_area': <class 'int'>,\n                'total_nssa_area': <class 'int'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) application: {\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'update_frequency': <class 'int'>,\n    'invalid': <class 'int'>,\n    'holddown': <class 'int'>,\n    'flushed': <class 'int'>,\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'bgp_id': <class 'int'>,\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                Optional  (str) outgoing_filter_list: <class 'str'>,\n                Optional  (str) incoming_filter_list: <class 'str'>,\n                'igp_sync': <class 'bool'>,\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    'internal': <class 'int'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    Optional  (str) route_map: <class 'str'>,\n                    },\n                  },\n                Optional  (str) routing_information_sources: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) redistributing: <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) configured_interfaces: <class 'list'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_protocols", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_protocols.py#L15"}, "iosxe": {"class": "ShowIpProtocols", "doc": " Parser for \"show ip protocols\" ", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'protocols': {\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'distance': <class 'int'>,\n                'maximum_paths': <class 'int'>,\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) network: <class 'list'>,\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) route_policy: <class 'int'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) default_set: <class 'bool'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'send_version': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'last_update': <class 'str'>,\n                    'distance': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                Optional  (str) network: {\n                  Any  (str) *: {\n                    'netmask': <class 'str'>,\n                    'area': <class 'str'>,\n                    },\n                  },\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'intra_area': <class 'int'>,\n                        'inter_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_areas': <class 'int'>,\n                'total_stub_area': <class 'int'>,\n                'total_normal_area': <class 'int'>,\n                'total_nssa_area': <class 'int'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) application: {\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'update_frequency': <class 'int'>,\n    'invalid': <class 'int'>,\n    'holddown': <class 'int'>,\n    'flushed': <class 'int'>,\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'bgp_id': <class 'int'>,\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                Optional  (str) outgoing_filter_list: <class 'str'>,\n                Optional  (str) incoming_filter_list: <class 'str'>,\n                'igp_sync': <class 'bool'>,\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    'internal': <class 'int'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    Optional  (str) route_map: <class 'str'>,\n                    },\n                  },\n                Optional  (str) routing_information_sources: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) redistributing: <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) configured_interfaces: <class 'list'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_protocols", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L279"}}, "show ip protocols vrf {vrf}": {"ios": {"class": "ShowIpProtocols", "doc": " Parser for \"show ip protocols\" ", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'protocols': {\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'distance': <class 'int'>,\n                'maximum_paths': <class 'int'>,\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) network: <class 'list'>,\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) route_policy: <class 'int'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) default_set: <class 'bool'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'send_version': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'last_update': <class 'str'>,\n                    'distance': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                Optional  (str) network: {\n                  Any  (str) *: {\n                    'netmask': <class 'str'>,\n                    'area': <class 'str'>,\n                    },\n                  },\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'intra_area': <class 'int'>,\n                        'inter_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_areas': <class 'int'>,\n                'total_stub_area': <class 'int'>,\n                'total_normal_area': <class 'int'>,\n                'total_nssa_area': <class 'int'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) application: {\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'update_frequency': <class 'int'>,\n    'invalid': <class 'int'>,\n    'holddown': <class 'int'>,\n    'flushed': <class 'int'>,\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'bgp_id': <class 'int'>,\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                Optional  (str) outgoing_filter_list: <class 'str'>,\n                Optional  (str) incoming_filter_list: <class 'str'>,\n                'igp_sync': <class 'bool'>,\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    'internal': <class 'int'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    Optional  (str) route_map: <class 'str'>,\n                    },\n                  },\n                Optional  (str) routing_information_sources: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) redistributing: <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) configured_interfaces: <class 'list'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_protocols_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_protocols.py#L15"}, "iosxe": {"class": "ShowIpProtocols", "doc": " Parser for \"show ip protocols\" ", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'protocols': {\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'distance': <class 'int'>,\n                'maximum_paths': <class 'int'>,\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) network: <class 'list'>,\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) route_policy: <class 'int'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) default_set: <class 'bool'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'send_version': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'last_update': <class 'str'>,\n                    'distance': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                Optional  (str) network: {\n                  Any  (str) *: {\n                    'netmask': <class 'str'>,\n                    'area': <class 'str'>,\n                    },\n                  },\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'intra_area': <class 'int'>,\n                        'inter_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_areas': <class 'int'>,\n                'total_stub_area': <class 'int'>,\n                'total_normal_area': <class 'int'>,\n                'total_nssa_area': <class 'int'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) application: {\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'update_frequency': <class 'int'>,\n    'invalid': <class 'int'>,\n    'holddown': <class 'int'>,\n    'flushed': <class 'int'>,\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'bgp_id': <class 'int'>,\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                Optional  (str) outgoing_filter_list: <class 'str'>,\n                Optional  (str) incoming_filter_list: <class 'str'>,\n                'igp_sync': <class 'bool'>,\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    'internal': <class 'int'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    Optional  (str) route_map: <class 'str'>,\n                    },\n                  },\n                Optional  (str) routing_information_sources: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) redistributing: <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) configured_interfaces: <class 'list'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_protocols_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L279"}}, "show ip protocols vrf {vrf} | sec rip": {"ios": {"class": "ShowIpProtocolsSectionRip", "doc": "\n\tParser for :\n\t\t'show ip protocols | sec rip'\n\t\t'show ip protocols vrf {vrf} | sec rip'\n\t", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'protocols': {\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'distance': <class 'int'>,\n                'maximum_paths': <class 'int'>,\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) network: <class 'list'>,\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) route_policy: <class 'int'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) default_set: <class 'bool'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'send_version': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'last_update': <class 'str'>,\n                    'distance': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                Optional  (str) network: {\n                  Any  (str) *: {\n                    'netmask': <class 'str'>,\n                    'area': <class 'str'>,\n                    },\n                  },\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'intra_area': <class 'int'>,\n                        'inter_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_areas': <class 'int'>,\n                'total_stub_area': <class 'int'>,\n                'total_normal_area': <class 'int'>,\n                'total_nssa_area': <class 'int'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) application: {\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'update_frequency': <class 'int'>,\n    'invalid': <class 'int'>,\n    'holddown': <class 'int'>,\n    'flushed': <class 'int'>,\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'bgp_id': <class 'int'>,\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                Optional  (str) outgoing_filter_list: <class 'str'>,\n                Optional  (str) incoming_filter_list: <class 'str'>,\n                'igp_sync': <class 'bool'>,\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    'internal': <class 'int'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    Optional  (str) route_map: <class 'str'>,\n                    },\n                  },\n                Optional  (str) routing_information_sources: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) redistributing: <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) configured_interfaces: <class 'list'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_protocols_vrf_vrf___sec_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_protocols.py#L19"}, "iosxe": {"class": "ShowIpProtocolsSectionRip", "doc": "Parser for :\n       show ip protocols | sec rip\n       show ip protocols vrf {vrf} | sec rip\n       ", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'protocols': {\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'distance': <class 'int'>,\n                'maximum_paths': <class 'int'>,\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) network: <class 'list'>,\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) route_policy: <class 'int'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) default_set: <class 'bool'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'send_version': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'last_update': <class 'str'>,\n                    'distance': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                Optional  (str) network: {\n                  Any  (str) *: {\n                    'netmask': <class 'str'>,\n                    'area': <class 'str'>,\n                    },\n                  },\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'intra_area': <class 'int'>,\n                        'inter_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_areas': <class 'int'>,\n                'total_stub_area': <class 'int'>,\n                'total_normal_area': <class 'int'>,\n                'total_nssa_area': <class 'int'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) application: {\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'update_frequency': <class 'int'>,\n    'invalid': <class 'int'>,\n    'holddown': <class 'int'>,\n    'flushed': <class 'int'>,\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'bgp_id': <class 'int'>,\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                Optional  (str) outgoing_filter_list: <class 'str'>,\n                Optional  (str) incoming_filter_list: <class 'str'>,\n                'igp_sync': <class 'bool'>,\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    'internal': <class 'int'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    Optional  (str) route_map: <class 'str'>,\n                    },\n                  },\n                Optional  (str) routing_information_sources: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) redistributing: <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) configured_interfaces: <class 'list'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_protocols_vrf_vrf___sec_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L1169"}}, "show ip protocols | sec rip": {"ios": {"class": "ShowIpProtocolsSectionRip", "doc": "\n\tParser for :\n\t\t'show ip protocols | sec rip'\n\t\t'show ip protocols vrf {vrf} | sec rip'\n\t", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'protocols': {\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'distance': <class 'int'>,\n                'maximum_paths': <class 'int'>,\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) network: <class 'list'>,\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) route_policy: <class 'int'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) default_set: <class 'bool'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'send_version': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'last_update': <class 'str'>,\n                    'distance': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                Optional  (str) network: {\n                  Any  (str) *: {\n                    'netmask': <class 'str'>,\n                    'area': <class 'str'>,\n                    },\n                  },\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'intra_area': <class 'int'>,\n                        'inter_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_areas': <class 'int'>,\n                'total_stub_area': <class 'int'>,\n                'total_normal_area': <class 'int'>,\n                'total_nssa_area': <class 'int'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) application: {\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'update_frequency': <class 'int'>,\n    'invalid': <class 'int'>,\n    'holddown': <class 'int'>,\n    'flushed': <class 'int'>,\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'bgp_id': <class 'int'>,\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                Optional  (str) outgoing_filter_list: <class 'str'>,\n                Optional  (str) incoming_filter_list: <class 'str'>,\n                'igp_sync': <class 'bool'>,\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    'internal': <class 'int'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    Optional  (str) route_map: <class 'str'>,\n                    },\n                  },\n                Optional  (str) routing_information_sources: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) redistributing: <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) configured_interfaces: <class 'list'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_protocols___sec_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_protocols.py#L19"}, "iosxe": {"class": "ShowIpProtocolsSectionRip", "doc": "Parser for :\n       show ip protocols | sec rip\n       show ip protocols vrf {vrf} | sec rip\n       ", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'protocols': {\n  Optional  (str) rip: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) instance: {\n              Any  (str) *: {\n                'distance': <class 'int'>,\n                'maximum_paths': <class 'int'>,\n                Optional  (str) output_delay: <class 'int'>,\n                'send_version': Or (<class 'int'>, <class 'str'>),\n                'receive_version': Or (<class 'int'>, <class 'str'>),\n                Optional  (str) automatic_network_summarization_in_effect: <class 'bool'>,\n                'outgoing_update_filterlist': {\n                  'outgoing_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                'incoming_update_filterlist': {\n                  'incoming_update_filterlist': <class 'str'>,\n                  Optional  (str) interfaces: {\n                    Any  (str) *: {\n                      'filter': <class 'str'>,\n                      'per_user': <class 'bool'>,\n                      'default': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) incoming_route_metric: {\n                  'added': <class 'str'>,\n                  'list': <class 'str'>,\n                  },\n                Optional  (str) network: <class 'list'>,\n                Optional  (str) default_redistribution_metric: <class 'int'>,\n                'redistribute': {\n                  Any  (str) *: {\n                    Optional  (Any) Any  (str) *: {\n                      Optional  (str) metric: <class 'int'>,\n                      Optional  (str) route_policy: <class 'int'>,\n                      Optional  (str) route_type: <class 'str'>,\n                      },\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) route_policy: <class 'int'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  'invalid_interval': <class 'int'>,\n                  'holddown_interval': <class 'int'>,\n                  'flush_interval': <class 'int'>,\n                  },\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) address: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) summary_address: {\n                      Any  (str) *: {\n                        Optional  (str) metric: <class 'str'>,\n                        },\n                      },\n                    Optional  (str) filtered_per_user: <class 'int'>,\n                    Optional  (str) default_set: <class 'bool'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    'send_version': <class 'str'>,\n                    'receive_version': <class 'str'>,\n                    'triggered_rip': <class 'str'>,\n                    'key_chain': <class 'str'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'last_update': <class 'str'>,\n                    'distance': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) eigrp: {\n    'protocol_under_dev': <class 'bool'>,\n    },\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'spf_control': {\n                  'paths': <class 'int'>,\n                  },\n                Optional  (str) network: {\n                  Any  (str) *: {\n                    'netmask': <class 'str'>,\n                    'area': <class 'str'>,\n                    },\n                  },\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'intra_area': <class 'int'>,\n                        'inter_area': <class 'int'>,\n                        },\n                      Optional  (str) coarse: {\n                        'internal': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                'total_areas': <class 'int'>,\n                'total_stub_area': <class 'int'>,\n                'total_normal_area': <class 'int'>,\n                'total_nssa_area': <class 'int'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    Optional  (str) configured_interfaces: <class 'list'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) application: {\n    'outgoing_filter_list': <class 'str'>,\n    'incoming_filter_list': <class 'str'>,\n    'maximum_path': <class 'int'>,\n    'preference': {\n      'single_value': {\n        'all': <class 'int'>,\n        },\n      },\n    'update_frequency': <class 'int'>,\n    'invalid': <class 'int'>,\n    'holddown': <class 'int'>,\n    'flushed': <class 'int'>,\n    },\n  Optional  (str) bgp: {\n    'instance': {\n      'default': {\n        'bgp_id': <class 'int'>,\n        'vrf': {\n          'default': {\n            'address_family': {\n              'ipv4': {\n                Optional  (str) outgoing_filter_list: <class 'str'>,\n                Optional  (str) incoming_filter_list: <class 'str'>,\n                'igp_sync': <class 'bool'>,\n                'automatic_route_summarization': <class 'bool'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                Optional  (str) preference: {\n                  'multi_values': {\n                    'external': <class 'int'>,\n                    'local': <class 'int'>,\n                    'internal': <class 'int'>,\n                    },\n                  },\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    Optional  (str) route_map: <class 'str'>,\n                    },\n                  },\n                Optional  (str) routing_information_sources: {\n                  Any  (str) *: {\n                    'neighbor_id': <class 'str'>,\n                    'distance': <class 'int'>,\n                    'last_update': <class 'str'>,\n                    },\n                  },\n                Optional  (str) timers: {\n                  'update_interval': <class 'int'>,\n                  'next_update': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) isis: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                'outgoing_filter_list': <class 'str'>,\n                'incoming_filter_list': <class 'str'>,\n                Optional  (str) redistributing: <class 'str'>,\n                Optional  (str) address_summarization: <class 'list'>,\n                Optional  (str) maximum_path: <class 'int'>,\n                'preference': {\n                  'single_value': {\n                    'all': <class 'int'>,\n                    },\n                  },\n                Optional  (str) configured_interfaces: <class 'list'>,\n                Optional  (str) passive_interfaces: <class 'list'>,\n                Optional  (str) routing_information_sources: {\n                  'gateway': {\n                    Any  (str) *: {\n                      'distance': <class 'int'>,\n                      'last_update': <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_protocols___sec_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L1169"}}, "show ip rip": {"nxos": {"class": "ShowIpRipVrfAll", "doc": "Parser for:\n        * show ip rip\n        * show ip rip vrf <vrf>\n        * show ip rip vrf all", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'isolate_mode': <class 'bool'>,\n'mmode': <class 'str'>,\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'port': <class 'int'>,\n            'multicast_group': <class 'str'>,\n            'distance': <class 'int'>,\n            Optional  (str) timers: {\n              Optional  (str) update_interval: <class 'int'>,\n              Optional  (str) expire_in: <class 'int'>,\n              Optional  (str) collect_garbage: <class 'int'>,\n              },\n            'default_metric': <class 'int'>,\n            'maximum_paths': <class 'int'>,\n            Optional  (str) default_originate: <class 'str'>,\n            'process': <class 'str'>,\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                },\n              },\n            Optional  (str) redistribute: {\n              Any  (str) *: {\n                Optional  (str) route_policy: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_rip.py#L606"}}, "show ip rip database": {"ios": {"class": "ShowIpRipDatabase", "doc": "Parser for :\n        show ip rip database\n        show ip rip database vrf {vrf}\n    ", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) from: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) summary_type: <class 'str'>,\n                    Optional  (str) expire_time: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_rip_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_rip.py#L20"}, "iosxe": {"class": "ShowIpRipDatabase", "doc": "Parser for :\n           show ip rip database\n           show ip rip database vrf {vrf}\n           ", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) from: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) summary_type: <class 'str'>,\n                    Optional  (str) expire_time: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_rip_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L53"}}, "show ip rip database vrf {vrf}": {"ios": {"class": "ShowIpRipDatabase", "doc": "Parser for :\n        show ip rip database\n        show ip rip database vrf {vrf}\n    ", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) from: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) summary_type: <class 'str'>,\n                    Optional  (str) expire_time: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_rip_database_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_rip.py#L20"}, "iosxe": {"class": "ShowIpRipDatabase", "doc": "Parser for :\n           show ip rip database\n           show ip rip database vrf {vrf}\n           ", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) from: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) summary_type: <class 'str'>,\n                    Optional  (str) expire_time: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_rip_database_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L53"}}, "show ip rip interface": {"nxos": {"class": "ShowIpRipInterfaceVrfAll", "doc": "Parser for:\n        * show ip rip interface\n        * show ip rip interface vrf {vrf}\n        * show ip rip interface vrf all", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'interfaces': {\n              Any  (str) *: {\n                Optional  (str) states: {\n                  Optional  (str) protocol_state: <class 'str'>,\n                  Optional  (str) link_state: <class 'str'>,\n                  Optional  (str) admin_state: <class 'str'>,\n                  },\n                'oper_status': <class 'str'>,\n                Optional  (str) authentication: {\n                  'auth_key_chain': {\n                    'key_chain': <class 'str'>,\n                    },\n                  'auth_key': {\n                    'crypto_algorithm': <class 'str'>,\n                    },\n                  },\n                'ipv4': {\n                  Any  (str) *: {\n                    'ip': <class 'str'>,\n                    'prefix_length': <class 'int'>,\n                    },\n                  },\n                'metric': <class 'int'>,\n                Optional  (str) split_horizon: <class 'bool'>,\n                Optional  (str) passive: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_rip_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_rip.py#L305"}}, "show ip rip interface vrf {vrf}": {"nxos": {"class": "ShowIpRipInterfaceVrfAll", "doc": "Parser for:\n        * show ip rip interface\n        * show ip rip interface vrf {vrf}\n        * show ip rip interface vrf all", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'interfaces': {\n              Any  (str) *: {\n                Optional  (str) states: {\n                  Optional  (str) protocol_state: <class 'str'>,\n                  Optional  (str) link_state: <class 'str'>,\n                  Optional  (str) admin_state: <class 'str'>,\n                  },\n                'oper_status': <class 'str'>,\n                Optional  (str) authentication: {\n                  'auth_key_chain': {\n                    'key_chain': <class 'str'>,\n                    },\n                  'auth_key': {\n                    'crypto_algorithm': <class 'str'>,\n                    },\n                  },\n                'ipv4': {\n                  Any  (str) *: {\n                    'ip': <class 'str'>,\n                    'prefix_length': <class 'int'>,\n                    },\n                  },\n                'metric': <class 'int'>,\n                Optional  (str) split_horizon: <class 'bool'>,\n                Optional  (str) passive: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_rip_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_rip.py#L305"}}, "show ip rip route": {"nxos": {"class": "ShowIpRipRouteVrfAll", "doc": "Parser for:\n        * show ip rip route\n        * show ip rip route vrf <vrf>\n        * show ip rip route vrf all", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'best_route': <class 'bool'>,\n                'next_hops': <class 'int'>,\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) tag: <class 'int'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) expire_time: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_rip_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_rip.py#L832"}}, "show ip rip route vrf {vrf}": {"nxos": {"class": "ShowIpRipRouteVrfAll", "doc": "Parser for:\n        * show ip rip route\n        * show ip rip route vrf <vrf>\n        * show ip rip route vrf all", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'best_route': <class 'bool'>,\n                'next_hops': <class 'int'>,\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) tag: <class 'int'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) expire_time: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_rip_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_rip.py#L832"}}, "show ip rip vrf {vrf}": {"nxos": {"class": "ShowIpRipVrfAll", "doc": "Parser for:\n        * show ip rip\n        * show ip rip vrf <vrf>\n        * show ip rip vrf all", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'isolate_mode': <class 'bool'>,\n'mmode': <class 'str'>,\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'port': <class 'int'>,\n            'multicast_group': <class 'str'>,\n            'distance': <class 'int'>,\n            Optional  (str) timers: {\n              Optional  (str) update_interval: <class 'int'>,\n              Optional  (str) expire_in: <class 'int'>,\n              Optional  (str) collect_garbage: <class 'int'>,\n              },\n            'default_metric': <class 'int'>,\n            'maximum_paths': <class 'int'>,\n            Optional  (str) default_originate: <class 'str'>,\n            'process': <class 'str'>,\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                },\n              },\n            Optional  (str) redistribute: {\n              Any  (str) *: {\n                Optional  (str) route_policy: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_rip_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_rip.py#L606"}}, "show ip route": {"iosxe": {"class": "ShowIpRouteDistributor", "doc": "distributor class for show ip route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ip_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L14"}, "nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route interface {interface}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route summary": {"ios": {"class": "ShowIpRouteSummary", "doc": "Parser for :\n       show ip route summary\n       show ip route vrf <vrf> summary", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'vrf_id': <class 'str'>,\n    'maximum_paths': <class 'int'>,\n    'total_route_source': {\n      'networks': <class 'int'>,\n      'subnets': <class 'int'>,\n      'replicates': <class 'int'>,\n      'overhead': <class 'int'>,\n      'memory_bytes': <class 'int'>,\n      },\n    'route_source': {\n      Any  (str) *: {\n        Any  (str) *: {\n          'networks': <class 'int'>,\n          'subnets': <class 'int'>,\n          'replicates': <class 'int'>,\n          'overhead': <class 'int'>,\n          'memory_bytes': <class 'int'>,\n          Optional  (str) intra_area: <class 'int'>,\n          Optional  (str) inter_area: <class 'int'>,\n          Optional  (str) external_1: <class 'int'>,\n          Optional  (str) external_2: <class 'int'>,\n          Optional  (str) nssa_external_1: <class 'int'>,\n          Optional  (str) nssa_external_2: <class 'int'>,\n          Optional  (str) level_1: <class 'int'>,\n          Optional  (str) level_2: <class 'int'>,\n          Optional  (str) external: <class 'int'>,\n          Optional  (str) internal: <class 'int'>,\n          Optional  (str) local: <class 'int'>,\n          },\n        Optional  (str) networks: <class 'int'>,\n        Optional  (str) subnets: <class 'int'>,\n        Optional  (str) replicates: <class 'int'>,\n        Optional  (str) overhead: <class 'int'>,\n        Optional  (str) memory_bytes: <class 'int'>,\n        Optional  (str) intra_area: <class 'int'>,\n        Optional  (str) inter_area: <class 'int'>,\n        Optional  (str) external_1: <class 'int'>,\n        Optional  (str) external_2: <class 'int'>,\n        Optional  (str) nssa_external_1: <class 'int'>,\n        Optional  (str) nssa_external_2: <class 'int'>,\n        Optional  (str) level_1: <class 'int'>,\n        Optional  (str) level_2: <class 'int'>,\n        Optional  (str) external: <class 'int'>,\n        Optional  (str) internal: <class 'int'>,\n        Optional  (str) local: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py#L46"}, "iosxe": {"class": "ShowIpRouteSummary", "doc": null, "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'vrf_id': <class 'str'>,\n    'maximum_paths': <class 'int'>,\n    'total_route_source': {\n      'networks': <class 'int'>,\n      'subnets': <class 'int'>,\n      'replicates': <class 'int'>,\n      'overhead': <class 'int'>,\n      'memory_bytes': <class 'int'>,\n      },\n    'route_source': {\n      Any  (str) *: {\n        Any  (str) *: {\n          'networks': <class 'int'>,\n          'subnets': <class 'int'>,\n          'replicates': <class 'int'>,\n          'overhead': <class 'int'>,\n          'memory_bytes': <class 'int'>,\n          Optional  (str) intra_area: <class 'int'>,\n          Optional  (str) inter_area: <class 'int'>,\n          Optional  (str) external_1: <class 'int'>,\n          Optional  (str) external_2: <class 'int'>,\n          Optional  (str) nssa_external_1: <class 'int'>,\n          Optional  (str) nssa_external_2: <class 'int'>,\n          Optional  (str) level_1: <class 'int'>,\n          Optional  (str) level_2: <class 'int'>,\n          Optional  (str) external: <class 'int'>,\n          Optional  (str) internal: <class 'int'>,\n          Optional  (str) local: <class 'int'>,\n          },\n        Optional  (str) networks: <class 'int'>,\n        Optional  (str) subnets: <class 'int'>,\n        Optional  (str) replicates: <class 'int'>,\n        Optional  (str) overhead: <class 'int'>,\n        Optional  (str) memory_bytes: <class 'int'>,\n        Optional  (str) intra_area: <class 'int'>,\n        Optional  (str) inter_area: <class 'int'>,\n        Optional  (str) external_1: <class 'int'>,\n        Optional  (str) external_2: <class 'int'>,\n        Optional  (str) nssa_external_1: <class 'int'>,\n        Optional  (str) nssa_external_2: <class 'int'>,\n        Optional  (str) level_1: <class 'int'>,\n        Optional  (str) level_2: <class 'int'>,\n        Optional  (str) external: <class 'int'>,\n        Optional  (str) internal: <class 'int'>,\n        Optional  (str) local: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1846"}, "nxos": {"class": "ShowIpRouteSummary", "doc": "Parser for\n        * show ip route summary\n        * show ip route summary vrf {vrf}", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'backup_paths': {\n      Optional  (Any) Any  (str) *: <class 'int'>,\n      },\n    'best_paths': {\n      Optional  (Any) Any  (str) *: <class 'int'>,\n      },\n    Optional  (str) num_routes_per_mask: {\n      Optional  (Any) Any  (str) *: <class 'int'>,\n      },\n    'total_paths': <class 'int'>,\n    'total_routes': <class 'int'>,\n    },\n  },\n}", "uid": "show_ip_route_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L349"}}, "show ip route summary vrf {vrf}": {"nxos": {"class": "ShowIpRouteSummary", "doc": "Parser for\n        * show ip route summary\n        * show ip route summary vrf {vrf}", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'backup_paths': {\n      Optional  (Any) Any  (str) *: <class 'int'>,\n      },\n    'best_paths': {\n      Optional  (Any) Any  (str) *: <class 'int'>,\n      },\n    Optional  (str) num_routes_per_mask: {\n      Optional  (Any) Any  (str) *: <class 'int'>,\n      },\n    'total_paths': <class 'int'>,\n    'total_routes': <class 'int'>,\n    },\n  },\n}", "uid": "show_ip_route_summary_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L349"}}, "show ip route vrf all": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route vrf {vrf}": {"iosxe": {"class": "ShowIpRouteDistributor", "doc": "distributor class for show ip route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ip_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L14"}, "nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route vrf {vrf} summary": {"ios": {"class": "ShowIpRouteSummary", "doc": "Parser for :\n       show ip route summary\n       show ip route vrf <vrf> summary", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'vrf_id': <class 'str'>,\n    'maximum_paths': <class 'int'>,\n    'total_route_source': {\n      'networks': <class 'int'>,\n      'subnets': <class 'int'>,\n      'replicates': <class 'int'>,\n      'overhead': <class 'int'>,\n      'memory_bytes': <class 'int'>,\n      },\n    'route_source': {\n      Any  (str) *: {\n        Any  (str) *: {\n          'networks': <class 'int'>,\n          'subnets': <class 'int'>,\n          'replicates': <class 'int'>,\n          'overhead': <class 'int'>,\n          'memory_bytes': <class 'int'>,\n          Optional  (str) intra_area: <class 'int'>,\n          Optional  (str) inter_area: <class 'int'>,\n          Optional  (str) external_1: <class 'int'>,\n          Optional  (str) external_2: <class 'int'>,\n          Optional  (str) nssa_external_1: <class 'int'>,\n          Optional  (str) nssa_external_2: <class 'int'>,\n          Optional  (str) level_1: <class 'int'>,\n          Optional  (str) level_2: <class 'int'>,\n          Optional  (str) external: <class 'int'>,\n          Optional  (str) internal: <class 'int'>,\n          Optional  (str) local: <class 'int'>,\n          },\n        Optional  (str) networks: <class 'int'>,\n        Optional  (str) subnets: <class 'int'>,\n        Optional  (str) replicates: <class 'int'>,\n        Optional  (str) overhead: <class 'int'>,\n        Optional  (str) memory_bytes: <class 'int'>,\n        Optional  (str) intra_area: <class 'int'>,\n        Optional  (str) inter_area: <class 'int'>,\n        Optional  (str) external_1: <class 'int'>,\n        Optional  (str) external_2: <class 'int'>,\n        Optional  (str) nssa_external_1: <class 'int'>,\n        Optional  (str) nssa_external_2: <class 'int'>,\n        Optional  (str) level_1: <class 'int'>,\n        Optional  (str) level_2: <class 'int'>,\n        Optional  (str) external: <class 'int'>,\n        Optional  (str) internal: <class 'int'>,\n        Optional  (str) local: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_vrf_vrf_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py#L46"}, "iosxe": {"class": "ShowIpRouteSummary", "doc": null, "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'vrf_id': <class 'str'>,\n    'maximum_paths': <class 'int'>,\n    'total_route_source': {\n      'networks': <class 'int'>,\n      'subnets': <class 'int'>,\n      'replicates': <class 'int'>,\n      'overhead': <class 'int'>,\n      'memory_bytes': <class 'int'>,\n      },\n    'route_source': {\n      Any  (str) *: {\n        Any  (str) *: {\n          'networks': <class 'int'>,\n          'subnets': <class 'int'>,\n          'replicates': <class 'int'>,\n          'overhead': <class 'int'>,\n          'memory_bytes': <class 'int'>,\n          Optional  (str) intra_area: <class 'int'>,\n          Optional  (str) inter_area: <class 'int'>,\n          Optional  (str) external_1: <class 'int'>,\n          Optional  (str) external_2: <class 'int'>,\n          Optional  (str) nssa_external_1: <class 'int'>,\n          Optional  (str) nssa_external_2: <class 'int'>,\n          Optional  (str) level_1: <class 'int'>,\n          Optional  (str) level_2: <class 'int'>,\n          Optional  (str) external: <class 'int'>,\n          Optional  (str) internal: <class 'int'>,\n          Optional  (str) local: <class 'int'>,\n          },\n        Optional  (str) networks: <class 'int'>,\n        Optional  (str) subnets: <class 'int'>,\n        Optional  (str) replicates: <class 'int'>,\n        Optional  (str) overhead: <class 'int'>,\n        Optional  (str) memory_bytes: <class 'int'>,\n        Optional  (str) intra_area: <class 'int'>,\n        Optional  (str) inter_area: <class 'int'>,\n        Optional  (str) external_1: <class 'int'>,\n        Optional  (str) external_2: <class 'int'>,\n        Optional  (str) nssa_external_1: <class 'int'>,\n        Optional  (str) nssa_external_2: <class 'int'>,\n        Optional  (str) level_1: <class 'int'>,\n        Optional  (str) level_2: <class 'int'>,\n        Optional  (str) external: <class 'int'>,\n        Optional  (str) internal: <class 'int'>,\n        Optional  (str) local: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_vrf_vrf_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1846"}}, "show ip route vrf {vrf} {protocol}": {"iosxe": {"class": "ShowIpRouteDistributor", "doc": "distributor class for show ip route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ip_route_vrf_vrf_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L14"}}, "show ip route vrf {vrf} {route}": {"iosxe": {"class": "ShowIpRouteDistributor", "doc": "distributor class for show ip route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ip_route_vrf_vrf_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L14"}}, "show ip route {protocol}": {"iosxe": {"class": "ShowIpRouteDistributor", "doc": "distributor class for show ip route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ip_route_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L14"}, "nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {protocol} interface {interface}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_protocol_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {protocol} interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_protocol_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {protocol} vrf {vrf}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_protocol_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {route}": {"iosxe": {"class": "ShowIpRouteDistributor", "doc": "distributor class for show ip route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ip_route_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L14"}, "nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {route} interface {interface}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_route_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {route} interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_route_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {route} vrf {vrf}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {route} {protocol}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_route_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {route} {protocol} interface {interface}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_route_protocol_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {route} {protocol} interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_route_protocol_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip route {route} {protocol} vrf {vrf}": {"nxos": {"class": "ShowIpRoute", "doc": "Parser for :\n        'show ip route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol} interface {interface}',\n        'show ip route {route} {protocol} vrf {vrf}',\n        'show ip route {protocol} interface {interface} vrf {vrf}',\n        'show ip route {route} interface {interface} vrf {vrf}',\n        'show ip route {route} {protocol}',\n        'show ip route {protocol} interface {interface}',\n        'show ip route {protocol} vrf {vrf}',\n        'show ip route {route} interface {interface}',\n        'show ip route {route} vrf {vrf}',\n        'show ip route interface {interface} vrf {vrf}',\n        'show ip route {protocol}',\n        'show ip route {route}',\n        'show ip route interface {interface}',\n        'show ip route vrf {vrf}',\n        'show ip route vrf all',\n        'show ip route'\n    ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_route_route_protocol_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L549"}}, "show ip static route": {"ios": {"class": "ShowIpStaticRoute", "doc": null, "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) preference: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_static_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py#L9"}, "iosxe": {"class": "ShowIpStaticRoute", "doc": "Parser for :\n       show ip static route\n       show ip static route vrf <vrf>\n    ", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) preference: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_static_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py#L55"}}, "show ip static route vrf {vrf}": {"ios": {"class": "ShowIpStaticRoute", "doc": null, "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) preference: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_static_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py#L9"}, "iosxe": {"class": "ShowIpStaticRoute", "doc": "Parser for :\n       show ip static route\n       show ip static route vrf <vrf>\n    ", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) preference: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_static_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py#L55"}}, "show ip static-route": {"nxos": {"class": "ShowIpStaticRoute", "doc": "Parser for:\n       show ip static-route\n       show ip static-route vrf <vrf>\n       show ip static-route vrf all\n    ", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_netmask: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_static-route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py#L52"}}, "show ip static-route multicast vrf all": {"nxos": {"class": "ShowIpStaticRouteMulticast", "doc": "Parser for show ip static-route multicast vrf all", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'mroute': {\n          Any  (str) *: {\n            'path': {\n              Any  (str) *: {\n                'neighbor_address': <class 'str'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) vrf_id: <class 'str'>,\n                Optional  (str) urib: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_static-route_multicast_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L450"}}, "show ip static-route vrf {vrf}": {"nxos": {"class": "ShowIpStaticRoute", "doc": "Parser for:\n       show ip static-route\n       show ip static-route vrf <vrf>\n       show ip static-route vrf all\n    ", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_netmask: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_static-route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py#L52"}}, "show ip traffic": {"ios": {"class": "ShowIpTraffic", "doc": "Parser for: show ip traffic", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'arp_statistics': {\n  'arp_in_requests': <class 'int'>,\n  'arp_in_replies': <class 'int'>,\n  'arp_in_reverse': <class 'int'>,\n  'arp_in_other': <class 'int'>,\n  'arp_out_requests': <class 'int'>,\n  'arp_out_replies': <class 'int'>,\n  'arp_out_proxy': <class 'int'>,\n  'arp_out_reverse': <class 'int'>,\n  Optional  (str) arp_drops_input_full: <class 'int'>,\n  },\n'ip_statistics': {\n  'ip_rcvd_total': <class 'int'>,\n  'ip_rcvd_local_destination': <class 'int'>,\n  'ip_rcvd_format_errors': <class 'int'>,\n  'ip_rcvd_checksum_errors': <class 'int'>,\n  'ip_rcvd_bad_hop': <class 'int'>,\n  'ip_rcvd_unknwn_protocol': <class 'int'>,\n  'ip_rcvd_not_gateway': <class 'int'>,\n  'ip_rcvd_sec_failures': <class 'int'>,\n  'ip_rcvd_bad_optns': <class 'int'>,\n  'ip_rcvd_with_optns': <class 'int'>,\n  'ip_opts_end': <class 'int'>,\n  'ip_opts_nop': <class 'int'>,\n  'ip_opts_basic_security': <class 'int'>,\n  'ip_opts_loose_src_route': <class 'int'>,\n  'ip_opts_timestamp': <class 'int'>,\n  'ip_opts_extended_security': <class 'int'>,\n  'ip_opts_record_route': <class 'int'>,\n  'ip_opts_strm_id': <class 'int'>,\n  'ip_opts_strct_src_route': <class 'int'>,\n  'ip_opts_alert': <class 'int'>,\n  'ip_opts_cipso': <class 'int'>,\n  'ip_opts_ump': <class 'int'>,\n  'ip_opts_other': <class 'int'>,\n  Optional  (str) ip_opts_ignored: <class 'int'>,\n  'ip_frags_reassembled': <class 'int'>,\n  'ip_frags_timeouts': <class 'int'>,\n  'ip_frags_no_reassembled': <class 'int'>,\n  'ip_frags_fragmented': <class 'int'>,\n  Optional  (str) ip_frags_fragments: <class 'int'>,\n  'ip_frags_no_fragmented': <class 'int'>,\n  Optional  (str) ip_frags_invalid_hole: <class 'int'>,\n  'ip_bcast_received': <class 'int'>,\n  'ip_bcast_sent': <class 'int'>,\n  'ip_mcast_received': <class 'int'>,\n  'ip_mcast_sent': <class 'int'>,\n  'ip_sent_generated': <class 'int'>,\n  'ip_sent_forwarded': <class 'int'>,\n  'ip_drop_encap_failed': <class 'int'>,\n  'ip_drop_unresolved': <class 'int'>,\n  'ip_drop_no_adj': <class 'int'>,\n  'ip_drop_no_route': <class 'int'>,\n  'ip_drop_unicast_rpf': <class 'int'>,\n  'ip_drop_forced_drop': <class 'int'>,\n  Optional  (str) ip_drop_unsupp_address: <class 'int'>,\n  'ip_drop_opts_denied': <class 'int'>,\n  Optional  (str) ip_drop_src_ip: <class 'int'>,\n  },\n'icmp_statistics': {\n  'icmp_received_format_errors': <class 'int'>,\n  'icmp_received_checksum_errors': <class 'int'>,\n  'icmp_received_redirects': <class 'int'>,\n  'icmp_received_unreachable': <class 'int'>,\n  'icmp_received_echo': <class 'int'>,\n  'icmp_received_echo_reply': <class 'int'>,\n  'icmp_received_mask_requests': <class 'int'>,\n  'icmp_received_mask_replies': <class 'int'>,\n  'icmp_received_quench': <class 'int'>,\n  'icmp_received_parameter': <class 'int'>,\n  'icmp_received_timestamp': <class 'int'>,\n  Optional  (str) icmp_received_timestamp_replies: <class 'int'>,\n  'icmp_received_info_request': <class 'int'>,\n  'icmp_received_other': <class 'int'>,\n  'icmp_received_irdp_solicitations': <class 'int'>,\n  'icmp_received_irdp_advertisements': <class 'int'>,\n  Optional  (str) icmp_received_time_exceeded: <class 'int'>,\n  Optional  (str) icmp_received_info_replies: <class 'int'>,\n  'icmp_sent_redirects': <class 'int'>,\n  'icmp_sent_unreachable': <class 'int'>,\n  'icmp_sent_echo': <class 'int'>,\n  'icmp_sent_echo_reply': <class 'int'>,\n  'icmp_sent_mask_requests': <class 'int'>,\n  'icmp_sent_mask_replies': <class 'int'>,\n  'icmp_sent_quench': <class 'int'>,\n  'icmp_sent_timestamp': <class 'int'>,\n  Optional  (str) icmp_sent_timestamp_replies: <class 'int'>,\n  Optional  (str) icmp_sent_info_reply: <class 'int'>,\n  Optional  (str) icmp_sent_time_exceeded: <class 'int'>,\n  'icmp_sent_parameter_problem': <class 'int'>,\n  'icmp_sent_irdp_solicitations': <class 'int'>,\n  'icmp_sent_irdp_advertisements': <class 'int'>,\n  },\n'udp_statistics': {\n  'udp_received_total': <class 'int'>,\n  'udp_received_udp_checksum_errors': <class 'int'>,\n  'udp_received_no_port': <class 'int'>,\n  Optional  (str) udp_received_finput: <class 'int'>,\n  'udp_sent_total': <class 'int'>,\n  'udp_sent_fwd_broadcasts': <class 'int'>,\n  },\n'ospf_statistics': {\n  Optional  (str) ospf_traffic_cntrs_clear: <class 'str'>,\n  'ospf_received_total': <class 'int'>,\n  'ospf_received_checksum_errors': <class 'int'>,\n  'ospf_received_hello': <class 'int'>,\n  'ospf_received_database_desc': <class 'int'>,\n  'ospf_received_link_state_req': <class 'int'>,\n  'ospf_received_lnk_st_updates': <class 'int'>,\n  'ospf_received_lnk_st_acks': <class 'int'>,\n  'ospf_sent_total': <class 'int'>,\n  'ospf_sent_hello': <class 'int'>,\n  'ospf_sent_database_desc': <class 'int'>,\n  'ospf_sent_lnk_st_acks': <class 'int'>,\n  'ospf_sent_lnk_st_updates': <class 'int'>,\n  },\n'pimv2_statistics': {\n  'pimv2_total': <class 'str'>,\n  'pimv2_checksum_errors': <class 'int'>,\n  'pimv2_format_errors': <class 'int'>,\n  'pimv2_registers': <class 'str'>,\n  'pimv2_non_rp': <class 'int'>,\n  'pimv2_non_sm_group': <class 'int'>,\n  'pimv2_registers_stops': <class 'str'>,\n  'pimv2_hellos': <class 'str'>,\n  'pimv2_join_prunes': <class 'str'>,\n  'pimv2_asserts': <class 'str'>,\n  'pimv2_grafts': <class 'str'>,\n  'pimv2_bootstraps': <class 'str'>,\n  'pimv2_candidate_rp_advs': <class 'str'>,\n  Optional  (str) pimv2_queue_drops: <class 'int'>,\n  'pimv2_state_refresh': <class 'str'>,\n  },\n'igmp_statistics': {\n  'igmp_total': <class 'str'>,\n  'igmp_format_errors': <class 'str'>,\n  'igmp_checksum_errors': <class 'str'>,\n  'igmp_host_queries': <class 'str'>,\n  'igmp_host_reports': <class 'str'>,\n  'igmp_host_leaves': <class 'str'>,\n  'igmp_dvmrp': <class 'str'>,\n  'igmp_pim': <class 'str'>,\n  Optional  (str) igmp_queue_drops: <class 'int'>,\n  },\n'tcp_statistics': {\n  'tcp_received_total': <class 'int'>,\n  'tcp_received_checksum_errors': <class 'int'>,\n  'tcp_received_no_port': <class 'int'>,\n  'tcp_sent_total': <class 'int'>,\n  },\n'eigrp_ipv4_statistics': {\n  'eigrp_ipv4_received_total': <class 'int'>,\n  'eigrp_ipv4_sent_total': <class 'int'>,\n  },\nOptional  (str) bgp_statistics: {\n  'bgp_received_total': <class 'int'>,\n  'bgp_received_opens': <class 'int'>,\n  'bgp_received_notifications': <class 'int'>,\n  'bgp_received_updates': <class 'int'>,\n  'bgp_received_keepalives': <class 'int'>,\n  'bgp_received_route_refresh': <class 'int'>,\n  'bgp_received_unrecognized': <class 'int'>,\n  'bgp_sent_total': <class 'int'>,\n  'bgp_sent_opens': <class 'int'>,\n  'bgp_sent_notifications': <class 'int'>,\n  'bgp_sent_updates': <class 'int'>,\n  'bgp_sent_keepalives': <class 'int'>,\n  'bgp_sent_route_refresh': <class 'int'>,\n  },\n}", "uid": "show_ip_traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_arp.py#L58"}, "iosxe": {"class": "ShowIpTraffic", "doc": "Parser for:\n        show ip traffic\n        parser class - implements detail parsing mechanisms for cli,xml and yang output.\n    ", "module_name": "show_arp", "package": "genie.libs.parser", "schema": "{\n'arp_statistics': {\n  'arp_in_requests': <class 'int'>,\n  'arp_in_replies': <class 'int'>,\n  'arp_in_reverse': <class 'int'>,\n  'arp_in_other': <class 'int'>,\n  'arp_out_requests': <class 'int'>,\n  'arp_out_replies': <class 'int'>,\n  'arp_out_proxy': <class 'int'>,\n  'arp_out_reverse': <class 'int'>,\n  Optional  (str) arp_drops_input_full: <class 'int'>,\n  },\n'ip_statistics': {\n  'ip_rcvd_total': <class 'int'>,\n  'ip_rcvd_local_destination': <class 'int'>,\n  'ip_rcvd_format_errors': <class 'int'>,\n  'ip_rcvd_checksum_errors': <class 'int'>,\n  'ip_rcvd_bad_hop': <class 'int'>,\n  'ip_rcvd_unknwn_protocol': <class 'int'>,\n  'ip_rcvd_not_gateway': <class 'int'>,\n  'ip_rcvd_sec_failures': <class 'int'>,\n  'ip_rcvd_bad_optns': <class 'int'>,\n  'ip_rcvd_with_optns': <class 'int'>,\n  'ip_opts_end': <class 'int'>,\n  'ip_opts_nop': <class 'int'>,\n  'ip_opts_basic_security': <class 'int'>,\n  'ip_opts_loose_src_route': <class 'int'>,\n  'ip_opts_timestamp': <class 'int'>,\n  'ip_opts_extended_security': <class 'int'>,\n  'ip_opts_record_route': <class 'int'>,\n  'ip_opts_strm_id': <class 'int'>,\n  'ip_opts_strct_src_route': <class 'int'>,\n  'ip_opts_alert': <class 'int'>,\n  'ip_opts_cipso': <class 'int'>,\n  'ip_opts_ump': <class 'int'>,\n  'ip_opts_other': <class 'int'>,\n  Optional  (str) ip_opts_ignored: <class 'int'>,\n  'ip_frags_reassembled': <class 'int'>,\n  'ip_frags_timeouts': <class 'int'>,\n  'ip_frags_no_reassembled': <class 'int'>,\n  'ip_frags_fragmented': <class 'int'>,\n  Optional  (str) ip_frags_fragments: <class 'int'>,\n  'ip_frags_no_fragmented': <class 'int'>,\n  Optional  (str) ip_frags_invalid_hole: <class 'int'>,\n  'ip_bcast_received': <class 'int'>,\n  'ip_bcast_sent': <class 'int'>,\n  'ip_mcast_received': <class 'int'>,\n  'ip_mcast_sent': <class 'int'>,\n  'ip_sent_generated': <class 'int'>,\n  'ip_sent_forwarded': <class 'int'>,\n  'ip_drop_encap_failed': <class 'int'>,\n  'ip_drop_unresolved': <class 'int'>,\n  'ip_drop_no_adj': <class 'int'>,\n  'ip_drop_no_route': <class 'int'>,\n  'ip_drop_unicast_rpf': <class 'int'>,\n  'ip_drop_forced_drop': <class 'int'>,\n  Optional  (str) ip_drop_unsupp_address: <class 'int'>,\n  'ip_drop_opts_denied': <class 'int'>,\n  Optional  (str) ip_drop_src_ip: <class 'int'>,\n  },\n'icmp_statistics': {\n  'icmp_received_format_errors': <class 'int'>,\n  'icmp_received_checksum_errors': <class 'int'>,\n  'icmp_received_redirects': <class 'int'>,\n  'icmp_received_unreachable': <class 'int'>,\n  'icmp_received_echo': <class 'int'>,\n  'icmp_received_echo_reply': <class 'int'>,\n  'icmp_received_mask_requests': <class 'int'>,\n  'icmp_received_mask_replies': <class 'int'>,\n  'icmp_received_quench': <class 'int'>,\n  'icmp_received_parameter': <class 'int'>,\n  'icmp_received_timestamp': <class 'int'>,\n  Optional  (str) icmp_received_timestamp_replies: <class 'int'>,\n  'icmp_received_info_request': <class 'int'>,\n  'icmp_received_other': <class 'int'>,\n  'icmp_received_irdp_solicitations': <class 'int'>,\n  'icmp_received_irdp_advertisements': <class 'int'>,\n  Optional  (str) icmp_received_time_exceeded: <class 'int'>,\n  Optional  (str) icmp_received_info_replies: <class 'int'>,\n  'icmp_sent_redirects': <class 'int'>,\n  'icmp_sent_unreachable': <class 'int'>,\n  'icmp_sent_echo': <class 'int'>,\n  'icmp_sent_echo_reply': <class 'int'>,\n  'icmp_sent_mask_requests': <class 'int'>,\n  'icmp_sent_mask_replies': <class 'int'>,\n  'icmp_sent_quench': <class 'int'>,\n  'icmp_sent_timestamp': <class 'int'>,\n  Optional  (str) icmp_sent_timestamp_replies: <class 'int'>,\n  Optional  (str) icmp_sent_info_reply: <class 'int'>,\n  Optional  (str) icmp_sent_time_exceeded: <class 'int'>,\n  'icmp_sent_parameter_problem': <class 'int'>,\n  'icmp_sent_irdp_solicitations': <class 'int'>,\n  'icmp_sent_irdp_advertisements': <class 'int'>,\n  },\n'udp_statistics': {\n  'udp_received_total': <class 'int'>,\n  'udp_received_udp_checksum_errors': <class 'int'>,\n  'udp_received_no_port': <class 'int'>,\n  Optional  (str) udp_received_finput: <class 'int'>,\n  'udp_sent_total': <class 'int'>,\n  'udp_sent_fwd_broadcasts': <class 'int'>,\n  },\n'ospf_statistics': {\n  Optional  (str) ospf_traffic_cntrs_clear: <class 'str'>,\n  'ospf_received_total': <class 'int'>,\n  'ospf_received_checksum_errors': <class 'int'>,\n  'ospf_received_hello': <class 'int'>,\n  'ospf_received_database_desc': <class 'int'>,\n  'ospf_received_link_state_req': <class 'int'>,\n  'ospf_received_lnk_st_updates': <class 'int'>,\n  'ospf_received_lnk_st_acks': <class 'int'>,\n  'ospf_sent_total': <class 'int'>,\n  'ospf_sent_hello': <class 'int'>,\n  'ospf_sent_database_desc': <class 'int'>,\n  'ospf_sent_lnk_st_acks': <class 'int'>,\n  'ospf_sent_lnk_st_updates': <class 'int'>,\n  },\n'pimv2_statistics': {\n  'pimv2_total': <class 'str'>,\n  'pimv2_checksum_errors': <class 'int'>,\n  'pimv2_format_errors': <class 'int'>,\n  'pimv2_registers': <class 'str'>,\n  'pimv2_non_rp': <class 'int'>,\n  'pimv2_non_sm_group': <class 'int'>,\n  'pimv2_registers_stops': <class 'str'>,\n  'pimv2_hellos': <class 'str'>,\n  'pimv2_join_prunes': <class 'str'>,\n  'pimv2_asserts': <class 'str'>,\n  'pimv2_grafts': <class 'str'>,\n  'pimv2_bootstraps': <class 'str'>,\n  'pimv2_candidate_rp_advs': <class 'str'>,\n  Optional  (str) pimv2_queue_drops: <class 'int'>,\n  'pimv2_state_refresh': <class 'str'>,\n  },\n'igmp_statistics': {\n  'igmp_total': <class 'str'>,\n  'igmp_format_errors': <class 'str'>,\n  'igmp_checksum_errors': <class 'str'>,\n  'igmp_host_queries': <class 'str'>,\n  'igmp_host_reports': <class 'str'>,\n  'igmp_host_leaves': <class 'str'>,\n  'igmp_dvmrp': <class 'str'>,\n  'igmp_pim': <class 'str'>,\n  Optional  (str) igmp_queue_drops: <class 'int'>,\n  },\n'tcp_statistics': {\n  'tcp_received_total': <class 'int'>,\n  'tcp_received_checksum_errors': <class 'int'>,\n  'tcp_received_no_port': <class 'int'>,\n  'tcp_sent_total': <class 'int'>,\n  },\n'eigrp_ipv4_statistics': {\n  'eigrp_ipv4_received_total': <class 'int'>,\n  'eigrp_ipv4_sent_total': <class 'int'>,\n  },\nOptional  (str) bgp_statistics: {\n  'bgp_received_total': <class 'int'>,\n  'bgp_received_opens': <class 'int'>,\n  'bgp_received_notifications': <class 'int'>,\n  'bgp_received_updates': <class 'int'>,\n  'bgp_received_keepalives': <class 'int'>,\n  'bgp_received_route_refresh': <class 'int'>,\n  'bgp_received_unrecognized': <class 'int'>,\n  'bgp_sent_total': <class 'int'>,\n  'bgp_sent_opens': <class 'int'>,\n  'bgp_sent_notifications': <class 'int'>,\n  'bgp_sent_updates': <class 'int'>,\n  'bgp_sent_keepalives': <class 'int'>,\n  'bgp_sent_route_refresh': <class 'int'>,\n  },\n}", "uid": "show_ip_traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_arp.py#L377"}}, "show ip vrf": {"iosxe": {"class": "ShowIpVrf", "doc": "Parser for: \n        * 'show ip vrf'\n        * 'show ip vrf <vrf>'", "module_name": "show_ip_vrf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) route_distinguisher: <class 'str'>,\n    'interfaces': <class 'list'>,\n    },\n  },\n}", "uid": "show_ip_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_vrf.py#L37"}}, "show ip vrf detail": {"iosxe": {"class": "ShowIpVrfDetail", "doc": "Parser for \n        * 'show ip vrf detail'\n        * 'show ip vrf detail <vrf>'", "module_name": "show_ip_vrf", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) vrf_id: <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) being_deleted: <class 'bool'>,\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  Optional  (str) interfaces: <class 'list'>,\n  Optional  (str) interface: {\n    Any  (str) *: {\n      'vrf': <class 'str'>,\n      },\n    },\n  Optional  (str) flags: <class 'str'>,\n  Optional  (str) cli_format: <class 'str'>,\n  Optional  (str) support_af: <class 'str'>,\n  Optional  (str) address_family: {\n    Any  (str) *: {\n      'table_id': <class 'str'>,\n      Optional  (str) flags: <class 'str'>,\n      Optional  (str) vrf_label: {\n        Optional  (str) distribution_protocol: <class 'str'>,\n        Optional  (str) allocation_mode: <class 'str'>,\n        },\n      Optional  (str) route_targets: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) import_from_global: {\n        'import_from_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) export_to_global: {\n        'export_to_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) routing_table_limit: {\n        Optional  (str) routing_table_limit_number: <class 'int'>,\n        'routing_table_limit_action': {\n          Optional  (str) enable_alert_percent: {\n            'alert_percent_value': <class 'int'>,\n            },\n          Optional  (str) enable_alert_limit_number: {\n            'alert_limit_number': <class 'int'>,\n            },\n          Optional  (str) enable_simple_alert: {\n            'simple_alert': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_vrf.py#L89"}}, "show ip vrf detail {vrf}": {"iosxe": {"class": "ShowIpVrfDetail", "doc": "Parser for \n        * 'show ip vrf detail'\n        * 'show ip vrf detail <vrf>'", "module_name": "show_ip_vrf", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) vrf_id: <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) being_deleted: <class 'bool'>,\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  Optional  (str) interfaces: <class 'list'>,\n  Optional  (str) interface: {\n    Any  (str) *: {\n      'vrf': <class 'str'>,\n      },\n    },\n  Optional  (str) flags: <class 'str'>,\n  Optional  (str) cli_format: <class 'str'>,\n  Optional  (str) support_af: <class 'str'>,\n  Optional  (str) address_family: {\n    Any  (str) *: {\n      'table_id': <class 'str'>,\n      Optional  (str) flags: <class 'str'>,\n      Optional  (str) vrf_label: {\n        Optional  (str) distribution_protocol: <class 'str'>,\n        Optional  (str) allocation_mode: <class 'str'>,\n        },\n      Optional  (str) route_targets: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) import_from_global: {\n        'import_from_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) export_to_global: {\n        'export_to_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) routing_table_limit: {\n        Optional  (str) routing_table_limit_number: <class 'int'>,\n        'routing_table_limit_action': {\n          Optional  (str) enable_alert_percent: {\n            'alert_percent_value': <class 'int'>,\n            },\n          Optional  (str) enable_alert_limit_number: {\n            'alert_limit_number': <class 'int'>,\n            },\n          Optional  (str) enable_simple_alert: {\n            'simple_alert': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ip_vrf_detail_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_vrf.py#L89"}}, "show ip vrf {vrf}": {"iosxe": {"class": "ShowIpVrf", "doc": "Parser for: \n        * 'show ip vrf'\n        * 'show ip vrf <vrf>'", "module_name": "show_ip_vrf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) route_distinguisher: <class 'str'>,\n    'interfaces': <class 'list'>,\n    },\n  },\n}", "uid": "show_ip_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ip_vrf.py#L37"}}, "show ipv4 interface brief": {"iosxr": {"class": "ShowIpv4InterfaceBrief", "doc": "Parser for\n           show ipv4 interface brief | include {ip}\n           show ipv4 interface brief\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) protocol_status: <class 'str'>,\n    Optional  (str) vrf_name: <class 'str'>,\n    },\n  },\n}", "uid": "show_ipv4_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L106"}}, "show ipv4 interface brief | include {ip}": {"iosxr": {"class": "ShowIpv4InterfaceBrief", "doc": "Parser for\n           show ipv4 interface brief | include {ip}\n           show ipv4 interface brief\n    ", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) ip_address: <class 'str'>,\n    Optional  (str) interface_status: <class 'str'>,\n    Optional  (str) protocol_status: <class 'str'>,\n    Optional  (str) vrf_name: <class 'str'>,\n    },\n  },\n}", "uid": "show_ipv4_interface_brief___include_ip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L106"}}, "show ipv4 vrf all interface": {"iosxr": {"class": "ShowIpv4VrfAllInterface", "doc": "Parser for show ipv4 vrf all interface\n                    show ipv4 vrf <vrf> interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  'int_status': <class 'str'>,\n  'vrf': <class 'str'>,\n  'vrf_id': <class 'str'>,\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) multicast_groups_address: <class 'str'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) route_tag: <class 'int'>,\n      },\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) mtu_available: <class 'int'>,\n    Optional  (str) helper_address: <class 'str'>,\n    Optional  (str) broadcast_forwarding: <class 'str'>,\n    Optional  (str) out_access_list: <class 'str'>,\n    Optional  (str) in_access_list: <class 'str'>,\n    Optional  (str) in_common_access_list: <class 'str'>,\n    Optional  (str) proxy_arp: <class 'str'>,\n    Optional  (str) icmp_redirects: <class 'str'>,\n    Optional  (str) icmp_unreachables: <class 'str'>,\n    Optional  (str) icmp_replies: <class 'str'>,\n    Optional  (str) table_id: <class 'str'>,\n    Optional  (str) unnumbered: {\n      Optional  (str) unnumbered_intf_ref: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ipv4_vrf_all_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L1218"}}, "show ipv4 vrf {vrf} interface": {"iosxr": {"class": "ShowIpv4VrfAllInterface", "doc": "Parser for show ipv4 vrf all interface\n                    show ipv4 vrf <vrf> interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  'int_status': <class 'str'>,\n  'vrf': <class 'str'>,\n  'vrf_id': <class 'str'>,\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) multicast_groups_address: <class 'str'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) route_tag: <class 'int'>,\n      },\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) mtu_available: <class 'int'>,\n    Optional  (str) helper_address: <class 'str'>,\n    Optional  (str) broadcast_forwarding: <class 'str'>,\n    Optional  (str) out_access_list: <class 'str'>,\n    Optional  (str) in_access_list: <class 'str'>,\n    Optional  (str) in_common_access_list: <class 'str'>,\n    Optional  (str) proxy_arp: <class 'str'>,\n    Optional  (str) icmp_redirects: <class 'str'>,\n    Optional  (str) icmp_unreachables: <class 'str'>,\n    Optional  (str) icmp_replies: <class 'str'>,\n    Optional  (str) table_id: <class 'str'>,\n    Optional  (str) unnumbered: {\n      Optional  (str) unnumbered_intf_ref: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ipv4_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L1218"}}, "show ipv4 vrf {vrf} interface {interface}": {"iosxr": {"class": "ShowIpv4VrfAllInterface", "doc": "Parser for show ipv4 vrf all interface\n                    show ipv4 vrf <vrf> interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  'int_status': <class 'str'>,\n  'vrf': <class 'str'>,\n  'vrf_id': <class 'str'>,\n  Optional  (str) multicast_groups: <class 'list'>,\n  Optional  (str) multicast_groups_address: <class 'str'>,\n  Optional  (str) ipv4: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) secondary: <class 'bool'>,\n      Optional  (str) route_tag: <class 'int'>,\n      },\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) mtu_available: <class 'int'>,\n    Optional  (str) helper_address: <class 'str'>,\n    Optional  (str) broadcast_forwarding: <class 'str'>,\n    Optional  (str) out_access_list: <class 'str'>,\n    Optional  (str) in_access_list: <class 'str'>,\n    Optional  (str) in_common_access_list: <class 'str'>,\n    Optional  (str) proxy_arp: <class 'str'>,\n    Optional  (str) icmp_redirects: <class 'str'>,\n    Optional  (str) icmp_unreachables: <class 'str'>,\n    Optional  (str) icmp_replies: <class 'str'>,\n    Optional  (str) table_id: <class 'str'>,\n    Optional  (str) unnumbered: {\n      Optional  (str) unnumbered_intf_ref: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ipv4_vrf_vrf_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L1218"}}, "show ipv6 access-list": {"iosxe": {"class": "ShowIpv6AccessLists", "doc": "Parser for show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) lsap: <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            Optional  (str) dscp: <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) precedence_code: <class 'int'>,\n            Optional  (str) destination_network: {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'int'>,\n                },\n              },\n            Optional  (str) msg_type: <class 'str'>,\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_access-list", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L702"}}, "show ipv6 access-list {acl}": {"iosxe": {"class": "ShowIpv6AccessLists", "doc": "Parser for show ipv6 access-lists\n                  show ipv6 access-lists <acl>", "module_name": "show_acl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'type': <class 'str'>,\n  Optional  (str) per_user: <class 'bool'>,\n  Optional  (str) aces: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'matches': {\n        Optional  (str) l2: {\n          'eth': {\n            'destination_mac_address': <class 'str'>,\n            'source_mac_address': <class 'str'>,\n            Optional  (str) ether_type: <class 'str'>,\n            Optional  (str) cos: <class 'int'>,\n            Optional  (str) vlan: <class 'int'>,\n            Optional  (str) protocol_family: <class 'str'>,\n            Optional  (str) lsap: <class 'str'>,\n            },\n          },\n        Optional  (str) l3: {\n          Any  (str) *: {\n            Optional  (str) dscp: <class 'str'>,\n            Optional  (str) ttl: <class 'int'>,\n            Optional  (str) ttl_operator: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) precedence: <class 'str'>,\n            Optional  (str) precedence_code: <class 'int'>,\n            Optional  (str) destination_network: {\n              Any  (str) *: {\n                'destination_network': <class 'str'>,\n                },\n              },\n            'source_network': {\n              Any  (str) *: {\n                'source_network': <class 'str'>,\n                },\n              },\n            },\n          },\n        Optional  (str) l4: {\n          Any  (str) *: {\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) code: <class 'int'>,\n            Optional  (str) acknowledgement_number: <class 'int'>,\n            Optional  (str) data_offset: <class 'int'>,\n            Optional  (str) reserved: <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            Optional  (str) window_size: <class 'int'>,\n            Optional  (str) urgent_pointer: <class 'int'>,\n            Optional  (str) options: <class 'int'>,\n            Optional  (str) options_name: <class 'str'>,\n            Optional  (str) established: <class 'bool'>,\n            Optional  (str) source_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'str'>,\n                },\n              },\n            Optional  (str) destination_port: {\n              Optional  (str) range: {\n                'lower_port': <class 'int'>,\n                'upper_port': <class 'int'>,\n                },\n              Optional  (str) operator: {\n                'operator': <class 'str'>,\n                'port': <class 'int'>,\n                },\n              },\n            Optional  (str) msg_type: <class 'str'>,\n            },\n          },\n        },\n      'actions': {\n        'forwarding': <class 'str'>,\n        Optional  (str) logging: <class 'str'>,\n        },\n      Optional  (str) statistics: {\n        'matched_packets': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_access-list_acl", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_acl.py#L702"}}, "show ipv6 cef": {"iosxe": {"class": "ShowIpv6Cef", "doc": "parser for show ipv6 cef\n                  show ipv6 cef vrf <vrf>\n                  show ipv6 cef <prefix>\n                  show ipv6 cef vrf <vrf> <prefix>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            'nexthop': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) local_label: <class 'int'>,\n                    Optional  (str) sid: <class 'str'>,\n                    Optional  (str) local_sid: <class 'str'>,\n                    Optional  (str) outgoing_label: <class 'list'>,\n                    Optional  (str) outgoing_label_backup: <class 'str'>,\n                    Optional  (str) outgoing_label_info: <class 'str'>,\n                    Optional  (str) repair: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) per_destination_sharing: <class 'bool'>,\n            Optional  (str) sr_local_label_info: <class 'str'>,\n            Optional  (str) flags: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_cef", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1725"}}, "show ipv6 cef vrf {vrf}": {"iosxe": {"class": "ShowIpv6Cef", "doc": "parser for show ipv6 cef\n                  show ipv6 cef vrf <vrf>\n                  show ipv6 cef <prefix>\n                  show ipv6 cef vrf <vrf> <prefix>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            'nexthop': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) local_label: <class 'int'>,\n                    Optional  (str) sid: <class 'str'>,\n                    Optional  (str) local_sid: <class 'str'>,\n                    Optional  (str) outgoing_label: <class 'list'>,\n                    Optional  (str) outgoing_label_backup: <class 'str'>,\n                    Optional  (str) outgoing_label_info: <class 'str'>,\n                    Optional  (str) repair: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) per_destination_sharing: <class 'bool'>,\n            Optional  (str) sr_local_label_info: <class 'str'>,\n            Optional  (str) flags: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_cef_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1725"}}, "show ipv6 cef vrf {vrf} {prefix}": {"iosxe": {"class": "ShowIpv6Cef", "doc": "parser for show ipv6 cef\n                  show ipv6 cef vrf <vrf>\n                  show ipv6 cef <prefix>\n                  show ipv6 cef vrf <vrf> <prefix>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            'nexthop': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) local_label: <class 'int'>,\n                    Optional  (str) sid: <class 'str'>,\n                    Optional  (str) local_sid: <class 'str'>,\n                    Optional  (str) outgoing_label: <class 'list'>,\n                    Optional  (str) outgoing_label_backup: <class 'str'>,\n                    Optional  (str) outgoing_label_info: <class 'str'>,\n                    Optional  (str) repair: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) per_destination_sharing: <class 'bool'>,\n            Optional  (str) sr_local_label_info: <class 'str'>,\n            Optional  (str) flags: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_cef_vrf_vrf_prefix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1725"}}, "show ipv6 cef {prefix}": {"iosxe": {"class": "ShowIpv6Cef", "doc": "parser for show ipv6 cef\n                  show ipv6 cef vrf <vrf>\n                  show ipv6 cef <prefix>\n                  show ipv6 cef vrf <vrf> <prefix>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'prefix': {\n          Any  (str) *: {\n            'nexthop': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    Optional  (str) local_label: <class 'int'>,\n                    Optional  (str) sid: <class 'str'>,\n                    Optional  (str) local_sid: <class 'str'>,\n                    Optional  (str) outgoing_label: <class 'list'>,\n                    Optional  (str) outgoing_label_backup: <class 'str'>,\n                    Optional  (str) outgoing_label_info: <class 'str'>,\n                    Optional  (str) repair: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) epoch: <class 'int'>,\n            Optional  (str) per_destination_sharing: <class 'bool'>,\n            Optional  (str) sr_local_label_info: <class 'str'>,\n            Optional  (str) flags: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_cef_prefix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L1725"}}, "show ipv6 eigrp neighbors": {"ios": {"class": "ShowIpv6EigrpNeighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_eigrp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_eigrp.py#L26"}, "iosxe": {"class": "ShowIpv6EigrpNeighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_eigrp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_eigrp.py#L302"}}, "show ipv6 eigrp neighbors detail": {"ios": {"class": "ShowIpv6EigrpNeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            Optional  (str) eigrp_interface: {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    'topology_ids_from_peer': <class 'int'>,\n                    'topology_advert_to_peer': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_eigrp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_eigrp.py#L46"}, "iosxe": {"class": "ShowIpv6EigrpNeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            Optional  (str) eigrp_interface: {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    'topology_ids_from_peer': <class 'int'>,\n                    'topology_advert_to_peer': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_eigrp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_eigrp.py#L671"}}, "show ipv6 eigrp neighbors detail vrf {vrf}": {"nxos": {"class": "ShowIpv6EigrpNeighborsDetail", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'retransmit_count': <class 'int'>,\n                    'retry_count': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    'q_cnt': <class 'int'>,\n                    'peer_handle': <class 'int'>,\n                    'nbr_sw_ver': {\n                      'os_majorver': <class 'int'>,\n                      'os_minorver': <class 'int'>,\n                      'tlv_majorrev': <class 'int'>,\n                      'tlv_minorrev': <class 'int'>,\n                      },\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'prefixes': <class 'int'>,\n                    'bfd_state': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_eigrp_neighbors_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_eigrp.py#L375"}}, "show ipv6 eigrp neighbors vrf {vrf}": {"nxos": {"class": "ShowIpv6EigrpNeighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_eigrp_neighbors_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_eigrp.py#L166"}}, "show ipv6 eigrp vrf {vrf} neighbors": {"iosxe": {"class": "ShowIpv6EigrpNeighbors", "doc": null, "module_name": "show_eigrp", "package": "genie.libs.parser", "schema": "{\n'eigrp_instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'named_mode': <class 'bool'>,\n            'eigrp_interface': {\n              Any  (str) *: {\n                'eigrp_nbr': {\n                  Any  (str) *: {\n                    'peer_handle': <class 'int'>,\n                    'hold': <class 'int'>,\n                    'uptime': <class 'str'>,\n                    'q_cnt': <class 'int'>,\n                    'last_seq_number': <class 'int'>,\n                    'srtt': <class 'float'>,\n                    'rto': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_eigrp_vrf_vrf_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_eigrp.py#L302"}}, "show ipv6 icmp neighbor detail": {"nxos": {"class": "ShowIpv6IcmpNeighborDetail", "doc": "Parser for :\n        show ipv6 icmp neighbor detail\n        show ipv6 icmp neighbor detail vrf all\n        show ipv6 icmp neighbor detail vrf <vrf>\n        show ipv6 icmp neighbor <interface> detail\n        show ipv6 icmp neighbor <interface> detail vrf all\n        show ipv6 icmp neighbor <interface> detail vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        'age': <class 'str'>,\n        Optional  (str) physical_interface: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_icmp_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L590"}}, "show ipv6 icmp neighbor detail vrf {vrf}": {"nxos": {"class": "ShowIpv6IcmpNeighborDetail", "doc": "Parser for :\n        show ipv6 icmp neighbor detail\n        show ipv6 icmp neighbor detail vrf all\n        show ipv6 icmp neighbor detail vrf <vrf>\n        show ipv6 icmp neighbor <interface> detail\n        show ipv6 icmp neighbor <interface> detail vrf all\n        show ipv6 icmp neighbor <interface> detail vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        'age': <class 'str'>,\n        Optional  (str) physical_interface: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_icmp_neighbor_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L590"}}, "show ipv6 icmp neighbor {interface} detail": {"nxos": {"class": "ShowIpv6IcmpNeighborDetail", "doc": "Parser for :\n        show ipv6 icmp neighbor detail\n        show ipv6 icmp neighbor detail vrf all\n        show ipv6 icmp neighbor detail vrf <vrf>\n        show ipv6 icmp neighbor <interface> detail\n        show ipv6 icmp neighbor <interface> detail vrf all\n        show ipv6 icmp neighbor <interface> detail vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        'age': <class 'str'>,\n        Optional  (str) physical_interface: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_icmp_neighbor_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L590"}}, "show ipv6 icmp neighbor {interface} detail vrf {vrf}": {"nxos": {"class": "ShowIpv6IcmpNeighborDetail", "doc": "Parser for :\n        show ipv6 icmp neighbor detail\n        show ipv6 icmp neighbor detail vrf all\n        show ipv6 icmp neighbor detail vrf <vrf>\n        show ipv6 icmp neighbor <interface> detail\n        show ipv6 icmp neighbor <interface> detail vrf all\n        show ipv6 icmp neighbor <interface> detail vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        'age': <class 'str'>,\n        Optional  (str) physical_interface: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_icmp_neighbor_interface_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L590"}}, "show ipv6 interface": {"ios": {"class": "ShowIpv6Interface", "doc": "Parser for show ipv6 interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) autoconf: <class 'bool'>,\n  'ipv6': {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) origin: <class 'str'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) eui_64: <class 'bool'>,\n      Optional  (str) virtual: <class 'bool'>,\n      Optional  (str) autoconf: {\n        'valid_lifetime': <class 'int'>,\n        'preferred_lifetime': <class 'int'>,\n        },\n      },\n    'enabled': <class 'bool'>,\n    Optional  (str) icmp: {\n      Optional  (str) error_messages_limited: <class 'int'>,\n      Optional  (str) redirects: <class 'bool'>,\n      Optional  (str) unreachables: <class 'str'>,\n      },\n    Optional  (str) nd: {\n      Optional  (str) suppress: <class 'bool'>,\n      Optional  (str) dad_enabled: <class 'bool'>,\n      Optional  (str) dad_attempts: <class 'int'>,\n      Optional  (str) reachable_time: <class 'int'>,\n      Optional  (str) using_time: <class 'int'>,\n      Optional  (str) ns_retransmit_interval: <class 'int'>,\n      Optional  (str) advertised_reachable_time: <class 'int'>,\n      Optional  (str) advertised_retransmit_interval: <class 'int'>,\n      Optional  (str) router_advertisements_interval: <class 'int'>,\n      Optional  (str) router_advertisements_live: <class 'int'>,\n      Optional  (str) advertised_default_router_preference: <class 'str'>,\n      Optional  (str) advertised_retransmit_interval_unspecified: <class 'bool'>,\n      Optional  (str) advertised_reachable_time_unspecified: <class 'bool'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    },\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) vrf: <class 'str'>,\n  Optional  (str) addresses_config_method: <class 'str'>,\n  Optional  (str) joined_group_addresses: <class 'list'>,\n  },\n}", "uid": "show_ipv6_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L83"}, "iosxe": {"class": "ShowIpv6Interface", "doc": "Parser for show ipv6 interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) autoconf: <class 'bool'>,\n  'ipv6': {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) origin: <class 'str'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) eui_64: <class 'bool'>,\n      Optional  (str) virtual: <class 'bool'>,\n      Optional  (str) autoconf: {\n        'valid_lifetime': <class 'int'>,\n        'preferred_lifetime': <class 'int'>,\n        },\n      },\n    'enabled': <class 'bool'>,\n    Optional  (str) icmp: {\n      Optional  (str) error_messages_limited: <class 'int'>,\n      Optional  (str) redirects: <class 'bool'>,\n      Optional  (str) unreachables: <class 'str'>,\n      },\n    Optional  (str) nd: {\n      Optional  (str) suppress: <class 'bool'>,\n      Optional  (str) dad_enabled: <class 'bool'>,\n      Optional  (str) dad_attempts: <class 'int'>,\n      Optional  (str) reachable_time: <class 'int'>,\n      Optional  (str) using_time: <class 'int'>,\n      Optional  (str) ns_retransmit_interval: <class 'int'>,\n      Optional  (str) advertised_reachable_time: <class 'int'>,\n      Optional  (str) advertised_retransmit_interval: <class 'int'>,\n      Optional  (str) router_advertisements_interval: <class 'int'>,\n      Optional  (str) router_advertisements_live: <class 'int'>,\n      Optional  (str) advertised_default_router_preference: <class 'str'>,\n      Optional  (str) advertised_retransmit_interval_unspecified: <class 'bool'>,\n      Optional  (str) advertised_reachable_time_unspecified: <class 'bool'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    },\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) vrf: <class 'str'>,\n  Optional  (str) addresses_config_method: <class 'str'>,\n  Optional  (str) joined_group_addresses: <class 'list'>,\n  },\n}", "uid": "show_ipv6_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2565"}}, "show ipv6 interface vrf all": {"nxos": {"class": "ShowIpv6InterfaceVrfAll", "doc": "Parser for show ipv6 interface vrf all\n        show ipv6 interface vrf <vrf>\n        show ipv6 interface <interface> vrf all\n        show ipv6 interface <interface> vrf <vrf>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'interface_status': <class 'str'>,\n  'iod': <class 'int'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) ipv6: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) status: <class 'str'>,\n      },\n    'counters': {\n      'unicast_packets_forwarded': <class 'int'>,\n      'unicast_packets_originated': <class 'int'>,\n      'unicast_packets_consumed': <class 'int'>,\n      'unicast_bytes_forwarded': <class 'int'>,\n      'unicast_bytes_originated': <class 'int'>,\n      'unicast_bytes_consumed': <class 'int'>,\n      'multicast_packets_forwarded': <class 'int'>,\n      'multicast_packets_originated': <class 'int'>,\n      'multicast_packets_consumed': <class 'int'>,\n      'multicast_bytes_forwarded': <class 'int'>,\n      'multicast_bytes_originated': <class 'int'>,\n      'multicast_bytes_consumed': <class 'int'>,\n      },\n    Optional  (str) ipv6_subnet: <class 'str'>,\n    'ipv6_link_local': <class 'str'>,\n    'ipv6_link_local_state': <class 'str'>,\n    'ipv6_ll_state': <class 'str'>,\n    Optional  (str) ipv6_virtual_add: <class 'str'>,\n    Optional  (str) ipv6_virtual_groups: <class 'list'>,\n    Optional  (str) virtual_add: <class 'bool'>,\n    Optional  (str) multicast_groups: <class 'bool'>,\n    'ipv6_multicast_routing': <class 'str'>,\n    'ipv6_report_link_local': <class 'str'>,\n    'ipv6_forwarding_feature': <class 'str'>,\n    Optional  (str) ipv6_multicast_groups: <class 'list'>,\n    Optional  (str) ipv6_multicast_entries: <class 'str'>,\n    'ipv6_mtu': <class 'int'>,\n    'ipv6_unicast_rev_path_forwarding': <class 'str'>,\n    'ipv6_load_sharing': <class 'str'>,\n    'ipv6_last_reset': <class 'str'>,\n    },\n  },\n}", "uid": "show_ipv6_interface_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2171"}}, "show ipv6 interface vrf {vrf}": {"nxos": {"class": "ShowIpv6InterfaceVrfAll", "doc": "Parser for show ipv6 interface vrf all\n        show ipv6 interface vrf <vrf>\n        show ipv6 interface <interface> vrf all\n        show ipv6 interface <interface> vrf <vrf>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'interface_status': <class 'str'>,\n  'iod': <class 'int'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) ipv6: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) status: <class 'str'>,\n      },\n    'counters': {\n      'unicast_packets_forwarded': <class 'int'>,\n      'unicast_packets_originated': <class 'int'>,\n      'unicast_packets_consumed': <class 'int'>,\n      'unicast_bytes_forwarded': <class 'int'>,\n      'unicast_bytes_originated': <class 'int'>,\n      'unicast_bytes_consumed': <class 'int'>,\n      'multicast_packets_forwarded': <class 'int'>,\n      'multicast_packets_originated': <class 'int'>,\n      'multicast_packets_consumed': <class 'int'>,\n      'multicast_bytes_forwarded': <class 'int'>,\n      'multicast_bytes_originated': <class 'int'>,\n      'multicast_bytes_consumed': <class 'int'>,\n      },\n    Optional  (str) ipv6_subnet: <class 'str'>,\n    'ipv6_link_local': <class 'str'>,\n    'ipv6_link_local_state': <class 'str'>,\n    'ipv6_ll_state': <class 'str'>,\n    Optional  (str) ipv6_virtual_add: <class 'str'>,\n    Optional  (str) ipv6_virtual_groups: <class 'list'>,\n    Optional  (str) virtual_add: <class 'bool'>,\n    Optional  (str) multicast_groups: <class 'bool'>,\n    'ipv6_multicast_routing': <class 'str'>,\n    'ipv6_report_link_local': <class 'str'>,\n    'ipv6_forwarding_feature': <class 'str'>,\n    Optional  (str) ipv6_multicast_groups: <class 'list'>,\n    Optional  (str) ipv6_multicast_entries: <class 'str'>,\n    'ipv6_mtu': <class 'int'>,\n    'ipv6_unicast_rev_path_forwarding': <class 'str'>,\n    'ipv6_load_sharing': <class 'str'>,\n    'ipv6_last_reset': <class 'str'>,\n    },\n  },\n}", "uid": "show_ipv6_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2171"}}, "show ipv6 interface {interface}": {"ios": {"class": "ShowIpv6Interface", "doc": "Parser for show ipv6 interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) autoconf: <class 'bool'>,\n  'ipv6': {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) origin: <class 'str'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) eui_64: <class 'bool'>,\n      Optional  (str) virtual: <class 'bool'>,\n      Optional  (str) autoconf: {\n        'valid_lifetime': <class 'int'>,\n        'preferred_lifetime': <class 'int'>,\n        },\n      },\n    'enabled': <class 'bool'>,\n    Optional  (str) icmp: {\n      Optional  (str) error_messages_limited: <class 'int'>,\n      Optional  (str) redirects: <class 'bool'>,\n      Optional  (str) unreachables: <class 'str'>,\n      },\n    Optional  (str) nd: {\n      Optional  (str) suppress: <class 'bool'>,\n      Optional  (str) dad_enabled: <class 'bool'>,\n      Optional  (str) dad_attempts: <class 'int'>,\n      Optional  (str) reachable_time: <class 'int'>,\n      Optional  (str) using_time: <class 'int'>,\n      Optional  (str) ns_retransmit_interval: <class 'int'>,\n      Optional  (str) advertised_reachable_time: <class 'int'>,\n      Optional  (str) advertised_retransmit_interval: <class 'int'>,\n      Optional  (str) router_advertisements_interval: <class 'int'>,\n      Optional  (str) router_advertisements_live: <class 'int'>,\n      Optional  (str) advertised_default_router_preference: <class 'str'>,\n      Optional  (str) advertised_retransmit_interval_unspecified: <class 'bool'>,\n      Optional  (str) advertised_reachable_time_unspecified: <class 'bool'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    },\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) vrf: <class 'str'>,\n  Optional  (str) addresses_config_method: <class 'str'>,\n  Optional  (str) joined_group_addresses: <class 'list'>,\n  },\n}", "uid": "show_ipv6_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_interface.py#L83"}, "iosxe": {"class": "ShowIpv6Interface", "doc": "Parser for show ipv6 interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) autoconf: <class 'bool'>,\n  'ipv6': {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) status: <class 'str'>,\n      Optional  (str) origin: <class 'str'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) eui_64: <class 'bool'>,\n      Optional  (str) virtual: <class 'bool'>,\n      Optional  (str) autoconf: {\n        'valid_lifetime': <class 'int'>,\n        'preferred_lifetime': <class 'int'>,\n        },\n      },\n    'enabled': <class 'bool'>,\n    Optional  (str) icmp: {\n      Optional  (str) error_messages_limited: <class 'int'>,\n      Optional  (str) redirects: <class 'bool'>,\n      Optional  (str) unreachables: <class 'str'>,\n      },\n    Optional  (str) nd: {\n      Optional  (str) suppress: <class 'bool'>,\n      Optional  (str) dad_enabled: <class 'bool'>,\n      Optional  (str) dad_attempts: <class 'int'>,\n      Optional  (str) reachable_time: <class 'int'>,\n      Optional  (str) using_time: <class 'int'>,\n      Optional  (str) ns_retransmit_interval: <class 'int'>,\n      Optional  (str) advertised_reachable_time: <class 'int'>,\n      Optional  (str) advertised_retransmit_interval: <class 'int'>,\n      Optional  (str) router_advertisements_interval: <class 'int'>,\n      Optional  (str) router_advertisements_live: <class 'int'>,\n      Optional  (str) advertised_default_router_preference: <class 'str'>,\n      Optional  (str) advertised_retransmit_interval_unspecified: <class 'bool'>,\n      Optional  (str) advertised_reachable_time_unspecified: <class 'bool'>,\n      },\n    Optional  (str) unnumbered: {\n      'interface_ref': <class 'str'>,\n      },\n    },\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) vrf: <class 'str'>,\n  Optional  (str) addresses_config_method: <class 'str'>,\n  Optional  (str) joined_group_addresses: <class 'list'>,\n  },\n}", "uid": "show_ipv6_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_interface.py#L2565"}}, "show ipv6 interface {interface} vrf all": {"nxos": {"class": "ShowIpv6InterfaceVrfAll", "doc": "Parser for show ipv6 interface vrf all\n        show ipv6 interface vrf <vrf>\n        show ipv6 interface <interface> vrf all\n        show ipv6 interface <interface> vrf <vrf>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'interface_status': <class 'str'>,\n  'iod': <class 'int'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) ipv6: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) status: <class 'str'>,\n      },\n    'counters': {\n      'unicast_packets_forwarded': <class 'int'>,\n      'unicast_packets_originated': <class 'int'>,\n      'unicast_packets_consumed': <class 'int'>,\n      'unicast_bytes_forwarded': <class 'int'>,\n      'unicast_bytes_originated': <class 'int'>,\n      'unicast_bytes_consumed': <class 'int'>,\n      'multicast_packets_forwarded': <class 'int'>,\n      'multicast_packets_originated': <class 'int'>,\n      'multicast_packets_consumed': <class 'int'>,\n      'multicast_bytes_forwarded': <class 'int'>,\n      'multicast_bytes_originated': <class 'int'>,\n      'multicast_bytes_consumed': <class 'int'>,\n      },\n    Optional  (str) ipv6_subnet: <class 'str'>,\n    'ipv6_link_local': <class 'str'>,\n    'ipv6_link_local_state': <class 'str'>,\n    'ipv6_ll_state': <class 'str'>,\n    Optional  (str) ipv6_virtual_add: <class 'str'>,\n    Optional  (str) ipv6_virtual_groups: <class 'list'>,\n    Optional  (str) virtual_add: <class 'bool'>,\n    Optional  (str) multicast_groups: <class 'bool'>,\n    'ipv6_multicast_routing': <class 'str'>,\n    'ipv6_report_link_local': <class 'str'>,\n    'ipv6_forwarding_feature': <class 'str'>,\n    Optional  (str) ipv6_multicast_groups: <class 'list'>,\n    Optional  (str) ipv6_multicast_entries: <class 'str'>,\n    'ipv6_mtu': <class 'int'>,\n    'ipv6_unicast_rev_path_forwarding': <class 'str'>,\n    'ipv6_load_sharing': <class 'str'>,\n    'ipv6_last_reset': <class 'str'>,\n    },\n  },\n}", "uid": "show_ipv6_interface_interface_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2171"}}, "show ipv6 interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpv6InterfaceVrfAll", "doc": "Parser for show ipv6 interface vrf all\n        show ipv6 interface vrf <vrf>\n        show ipv6 interface <interface> vrf all\n        show ipv6 interface <interface> vrf <vrf>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'interface_status': <class 'str'>,\n  'iod': <class 'int'>,\n  'enabled': <class 'bool'>,\n  Optional  (str) ipv6: {\n    Any  (str) *: {\n      Optional  (str) ip: <class 'str'>,\n      Optional  (str) prefix_length: <class 'str'>,\n      Optional  (str) anycast: <class 'bool'>,\n      Optional  (str) status: <class 'str'>,\n      },\n    'counters': {\n      'unicast_packets_forwarded': <class 'int'>,\n      'unicast_packets_originated': <class 'int'>,\n      'unicast_packets_consumed': <class 'int'>,\n      'unicast_bytes_forwarded': <class 'int'>,\n      'unicast_bytes_originated': <class 'int'>,\n      'unicast_bytes_consumed': <class 'int'>,\n      'multicast_packets_forwarded': <class 'int'>,\n      'multicast_packets_originated': <class 'int'>,\n      'multicast_packets_consumed': <class 'int'>,\n      'multicast_bytes_forwarded': <class 'int'>,\n      'multicast_bytes_originated': <class 'int'>,\n      'multicast_bytes_consumed': <class 'int'>,\n      },\n    Optional  (str) ipv6_subnet: <class 'str'>,\n    'ipv6_link_local': <class 'str'>,\n    'ipv6_link_local_state': <class 'str'>,\n    'ipv6_ll_state': <class 'str'>,\n    Optional  (str) ipv6_virtual_add: <class 'str'>,\n    Optional  (str) ipv6_virtual_groups: <class 'list'>,\n    Optional  (str) virtual_add: <class 'bool'>,\n    Optional  (str) multicast_groups: <class 'bool'>,\n    'ipv6_multicast_routing': <class 'str'>,\n    'ipv6_report_link_local': <class 'str'>,\n    'ipv6_forwarding_feature': <class 'str'>,\n    Optional  (str) ipv6_multicast_groups: <class 'list'>,\n    Optional  (str) ipv6_multicast_entries: <class 'str'>,\n    'ipv6_mtu': <class 'int'>,\n    'ipv6_unicast_rev_path_forwarding': <class 'str'>,\n    'ipv6_load_sharing': <class 'str'>,\n    'ipv6_last_reset': <class 'str'>,\n    },\n  },\n}", "uid": "show_ipv6_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2171"}}, "show ipv6 mld groups": {"nxos": {"class": "ShowIpv6MldGroups", "doc": "Parser for:\n        show ipv6 mld groups\n        show ipv6 mld groups vrf all\n        show ipv6 mld groups vrf <vrf>", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'groups_count': <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            Optional  (str) source: {\n              Any  (str) *: {\n                'expire': <class 'str'>,\n                'up_time': <class 'str'>,\n                'last_reporter': <class 'str'>,\n                'type': <class 'str'>,\n                },\n              },\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) last_reporter: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_groups", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L539"}}, "show ipv6 mld groups detail": {"ios": {"class": "ShowIpv6MldGroupsDetail", "doc": "Parser for:\n        show ipv6 mld groups detail\n        show ipv6 mld vrf <vrf> groups detail", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'filter_mode': <class 'str'>,\n            'host_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                Optional  (str) expire: <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L24"}, "iosxe": {"class": "ShowIpv6MldGroupsDetail", "doc": "Parser for:\n        show ipv6 mld groups detail\n        show ipv6 mld vrf <vrf> groups detail", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'filter_mode': <class 'str'>,\n            'host_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                Optional  (str) expire: <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L275"}}, "show ipv6 mld groups vrf {vrf}": {"nxos": {"class": "ShowIpv6MldGroups", "doc": "Parser for:\n        show ipv6 mld groups\n        show ipv6 mld groups vrf all\n        show ipv6 mld groups vrf <vrf>", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'groups_count': <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'group': {\n          Any  (str) *: {\n            Optional  (str) source: {\n              Any  (str) *: {\n                'expire': <class 'str'>,\n                'up_time': <class 'str'>,\n                'last_reporter': <class 'str'>,\n                'type': <class 'str'>,\n                },\n              },\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) up_time: <class 'str'>,\n            Optional  (str) last_reporter: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_groups_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L539"}}, "show ipv6 mld interface": {"ios": {"class": "ShowIpv6MldInterface", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) max_groups: <class 'int'>,\n    Optional  (str) active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        'oper_status': <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) interface_adress: <class 'str'>,\n        'enable': <class 'bool'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'joins': <class 'int'>,\n          'leaves': <class 'int'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L18"}, "iosxe": {"class": "ShowIpv6MldInterface", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) max_groups: <class 'int'>,\n    Optional  (str) active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        'oper_status': <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) interface_adress: <class 'str'>,\n        'enable': <class 'bool'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'joins': <class 'int'>,\n          'leaves': <class 'int'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L60"}, "nxos": {"class": "ShowIpv6MldInterface", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld interface vrf all\n        show ipv6 mld interface vrf <vrf>", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) count: <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'enable': <class 'bool'>,\n        'link_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) ipv6: {\n          Any  (str) *: {\n            'ip': <class 'str'>,\n            'prefix_length': <class 'str'>,\n            'status': <class 'str'>,\n            },\n          },\n        Optional  (str) link_local: {\n          'address': <class 'str'>,\n          'status': <class 'str'>,\n          Optional  (str) ipv6_address: <class 'str'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) querier_version: <class 'int'>,\n        Optional  (str) next_query_sent_in: <class 'str'>,\n        Optional  (str) membership_count: <class 'int'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) configured_query_max_response_time: <class 'int'>,\n        Optional  (str) startup_query: {\n          Optional  (str) configured_interval: <class 'int'>,\n          Optional  (str) interval: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          },\n        Optional  (str) last_member: {\n          Optional  (str) mrt: <class 'int'>,\n          Optional  (str) query_count: <class 'int'>,\n          },\n        Optional  (str) group_timeout: <class 'int'>,\n        Optional  (str) configured_group_timeout: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) unsolicited_report_interval: <class 'int'>,\n        Optional  (str) robustness_variable: <class 'int'>,\n        Optional  (str) configured_robustness_variable: <class 'int'>,\n        Optional  (str) link_local_groups_reporting: <class 'bool'>,\n        Optional  (str) immediate_leave: <class 'bool'>,\n        Optional  (str) enable_refcount: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) available_groups: <class 'int'>,\n        Optional  (str) statistics: {\n          'sent': {\n            Any  (str) *: <class 'int'>,\n            },\n          'received': {\n            Any  (str) *: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L105"}}, "show ipv6 mld interface vrf {vrf}": {"nxos": {"class": "ShowIpv6MldInterface", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld interface vrf all\n        show ipv6 mld interface vrf <vrf>", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) count: <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'enable': <class 'bool'>,\n        'link_status': <class 'str'>,\n        'oper_status': <class 'str'>,\n        Optional  (str) ipv6: {\n          Any  (str) *: {\n            'ip': <class 'str'>,\n            'prefix_length': <class 'str'>,\n            'status': <class 'str'>,\n            },\n          },\n        Optional  (str) link_local: {\n          'address': <class 'str'>,\n          'status': <class 'str'>,\n          Optional  (str) ipv6_address: <class 'str'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) querier_version: <class 'int'>,\n        Optional  (str) next_query_sent_in: <class 'str'>,\n        Optional  (str) membership_count: <class 'int'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) host_version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) configured_query_interval: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) configured_query_max_response_time: <class 'int'>,\n        Optional  (str) startup_query: {\n          Optional  (str) configured_interval: <class 'int'>,\n          Optional  (str) interval: <class 'int'>,\n          Optional  (str) count: <class 'int'>,\n          },\n        Optional  (str) last_member: {\n          Optional  (str) mrt: <class 'int'>,\n          Optional  (str) query_count: <class 'int'>,\n          },\n        Optional  (str) group_timeout: <class 'int'>,\n        Optional  (str) configured_group_timeout: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) configured_querier_timeout: <class 'int'>,\n        Optional  (str) unsolicited_report_interval: <class 'int'>,\n        Optional  (str) robustness_variable: <class 'int'>,\n        Optional  (str) configured_robustness_variable: <class 'int'>,\n        Optional  (str) link_local_groups_reporting: <class 'bool'>,\n        Optional  (str) immediate_leave: <class 'bool'>,\n        Optional  (str) enable_refcount: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) available_groups: <class 'int'>,\n        Optional  (str) statistics: {\n          'sent': {\n            Any  (str) *: <class 'int'>,\n            },\n          'received': {\n            Any  (str) *: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L105"}}, "show ipv6 mld local-groups": {"nxos": {"class": "ShowIpv6MldLocalGroups", "doc": "Parser for:\n        show ipv6 mld local-groups\n        show ipv6 mld local-groups vrf all\n        show ipv6 mld local-groups vrf <vrf>", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            Optional  (str) source: {\n              Any  (str) *: {\n                'last_reported': <class 'str'>,\n                'type': <class 'str'>,\n                },\n              },\n            Optional  (str) last_reported: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_local-groups", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L743"}}, "show ipv6 mld local-groups vrf {vrf}": {"nxos": {"class": "ShowIpv6MldLocalGroups", "doc": "Parser for:\n        show ipv6 mld local-groups\n        show ipv6 mld local-groups vrf all\n        show ipv6 mld local-groups vrf <vrf>", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    Optional  (str) interface: {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            Optional  (str) source: {\n              Any  (str) *: {\n                'last_reported': <class 'str'>,\n                'type': <class 'str'>,\n                },\n              },\n            Optional  (str) last_reported: <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_local-groups_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mld.py#L743"}}, "show ipv6 mld ssm-map {group}": {"ios": {"class": "ShowIpv6MldSsmMap", "doc": "Parser for:\n        show ipv6 mld ssm-map <group_address>\n        show ipv6 mld vrf <vrf> ssm-map <group_address>", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'source_addr': <class 'str'>,\n        'group_address': <class 'str'>,\n        'database': <class 'str'>,\n        'group_mode_ssm': <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_ssm-map_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L30"}, "iosxe": {"class": "ShowIpv6MldSsmMap", "doc": "Parser for:\n        show ipv6 mld ssm-map <group_address>\n        show ipv6 mld vrf <vrf> ssm-map <group_address>", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'source_addr': <class 'str'>,\n        'group_address': <class 'str'>,\n        'database': <class 'str'>,\n        'group_mode_ssm': <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_ssm-map_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L455"}}, "show ipv6 mld vrf {vrf} groups detail": {"ios": {"class": "ShowIpv6MldGroupsDetail", "doc": "Parser for:\n        show ipv6 mld groups detail\n        show ipv6 mld vrf <vrf> groups detail", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'filter_mode': <class 'str'>,\n            'host_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                Optional  (str) expire: <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_vrf_vrf_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L24"}, "iosxe": {"class": "ShowIpv6MldGroupsDetail", "doc": "Parser for:\n        show ipv6 mld groups detail\n        show ipv6 mld vrf <vrf> groups detail", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'filter_mode': <class 'str'>,\n            'host_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                Optional  (str) expire: <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_vrf_vrf_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L275"}}, "show ipv6 mld vrf {vrf} interface": {"ios": {"class": "ShowIpv6MldInterface", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) max_groups: <class 'int'>,\n    Optional  (str) active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        'oper_status': <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) interface_adress: <class 'str'>,\n        'enable': <class 'bool'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'joins': <class 'int'>,\n          'leaves': <class 'int'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L18"}, "iosxe": {"class": "ShowIpv6MldInterface", "doc": "Parser for:\n        show ipv6 mld interface\n        show ipv6 mld vrf <vrf> interface", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) max_groups: <class 'int'>,\n    Optional  (str) active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        'oper_status': <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) interface_adress: <class 'str'>,\n        'enable': <class 'bool'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        Optional  (str) group_policy: <class 'str'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'joins': <class 'int'>,\n          'leaves': <class 'int'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) query_this_system: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L60"}}, "show ipv6 mld vrf {vrf} ssm-map {group}": {"ios": {"class": "ShowIpv6MldSsmMap", "doc": "Parser for:\n        show ipv6 mld ssm-map <group_address>\n        show ipv6 mld vrf <vrf> ssm-map <group_address>", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'source_addr': <class 'str'>,\n        'group_address': <class 'str'>,\n        'database': <class 'str'>,\n        'group_mode_ssm': <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_vrf_vrf_ssm-map_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mld.py#L30"}, "iosxe": {"class": "ShowIpv6MldSsmMap", "doc": "Parser for:\n        show ipv6 mld ssm-map <group_address>\n        show ipv6 mld vrf <vrf> ssm-map <group_address>", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'ssm_map': {\n      Any  (str) *: {\n        'source_addr': <class 'str'>,\n        'group_address': <class 'str'>,\n        'database': <class 'str'>,\n        'group_mode_ssm': <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mld_vrf_vrf_ssm-map_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mld.py#L455"}}, "show ipv6 mroute": {"ios": {"class": "ShowIpv6Mroute", "doc": "Parser for:\n       show ipv6 mroute\n       show ipv6 mroute vrf <vrf>", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'expire': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) vcd: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mroute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L28"}, "iosxe": {"class": "ShowIpv6Mroute", "doc": "Parser for:\n       show ipv6 mroute\n       show ipv6 mroute vrf <vrf>", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'expire': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) vcd: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mroute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L297"}}, "show ipv6 mroute vrf all": {"nxos": {"class": "ShowIpv6MrouteVrfAll", "doc": "Parser for show ipv6 mroute vrf all", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) oil_count: <class 'str'>,\n                Optional  (str) bidir: <class 'bool'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) rpf_nbr: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    Optional  (str) oil_uptime: <class 'str'>,\n                    Optional  (str) oil_flags: <class 'str'>,\n                    Optional  (str) oif_rpf: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mroute_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L247"}}, "show ipv6 mroute vrf {vrf}": {"ios": {"class": "ShowIpv6Mroute", "doc": "Parser for:\n       show ipv6 mroute\n       show ipv6 mroute vrf <vrf>", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'expire': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) vcd: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mroute_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mcast.py#L28"}, "iosxe": {"class": "ShowIpv6Mroute", "doc": "Parser for:\n       show ipv6 mroute\n       show ipv6 mroute vrf <vrf>", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) multicast_group: {\n          Any  (str) *: {\n            Optional  (str) source_address: {\n              Any  (str) *: {\n                Optional  (str) uptime: <class 'str'>,\n                Optional  (str) expire: <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rp_bit: <class 'bool'>,\n                Optional  (str) msdp_learned: <class 'bool'>,\n                Optional  (str) rp: <class 'str'>,\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) rpf_info: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'rpf_nbr': <class 'str'>,\n                    Optional  (str) rpf_info: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'expire': <class 'str'>,\n                    'state_mode': <class 'str'>,\n                    Optional  (str) flags: <class 'str'>,\n                    Optional  (str) vcd: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_mroute_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mcast.py#L297"}}, "show ipv6 nd interface": {"nxos": {"class": "ShowIpv6NdInterface", "doc": "Parser for :\n        show ipv6 nd interface\n        show ipv6 nd interface vrf all\n        show ipv6 nd interface vrf <vrf>\n        show ipv6 nd interface <interface>\n        show ipv6 nd interface <interface> vrf all\n        show ipv6 nd interface <interface> vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'oper_status': <class 'str'>,\n        'enable': <class 'bool'>,\n        'ip': <class 'str'>,\n        'mac_extract': <class 'str'>,\n        'local_address': <class 'str'>,\n        'link_status': <class 'str'>,\n        'router_advertisement': {\n          'interval': <class 'int'>,\n          'lifetime': <class 'int'>,\n          'managed_address_configuration': <class 'bool'>,\n          'other_stateful_configuration': <class 'bool'>,\n          'default_router_preference': <class 'str'>,\n          'current_hop_limit': <class 'int'>,\n          'mtu': <class 'int'>,\n          'reachable_time': <class 'int'>,\n          'retrans_timer': <class 'int'>,\n          'suppress': <class 'bool'>,\n          'suppress_mtu': <class 'bool'>,\n          'suppress_route_information': <class 'bool'>,\n          },\n        'active_timers': {\n          'last_neighbor_solicitation': <class 'str'>,\n          'last_neighbor_advertisement': <class 'str'>,\n          'last_router_advertisement': <class 'str'>,\n          'next_router_advertisement': <class 'str'>,\n          },\n        'neighbor_solicitation': {\n          'interval': <class 'int'>,\n          'retry_base': <class 'int'>,\n          'retry_interval': <class 'int'>,\n          'retry_attempts': <class 'int'>,\n          },\n        'error_message': {\n          'redirects': <class 'bool'>,\n          'unreachables': <class 'bool'>,\n          },\n        'dad': {\n          'maximum_attempts': <class 'int'>,\n          'current_attempt': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_nd_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L275"}}, "show ipv6 nd interface vrf {vrf}": {"nxos": {"class": "ShowIpv6NdInterface", "doc": "Parser for :\n        show ipv6 nd interface\n        show ipv6 nd interface vrf all\n        show ipv6 nd interface vrf <vrf>\n        show ipv6 nd interface <interface>\n        show ipv6 nd interface <interface> vrf all\n        show ipv6 nd interface <interface> vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'oper_status': <class 'str'>,\n        'enable': <class 'bool'>,\n        'ip': <class 'str'>,\n        'mac_extract': <class 'str'>,\n        'local_address': <class 'str'>,\n        'link_status': <class 'str'>,\n        'router_advertisement': {\n          'interval': <class 'int'>,\n          'lifetime': <class 'int'>,\n          'managed_address_configuration': <class 'bool'>,\n          'other_stateful_configuration': <class 'bool'>,\n          'default_router_preference': <class 'str'>,\n          'current_hop_limit': <class 'int'>,\n          'mtu': <class 'int'>,\n          'reachable_time': <class 'int'>,\n          'retrans_timer': <class 'int'>,\n          'suppress': <class 'bool'>,\n          'suppress_mtu': <class 'bool'>,\n          'suppress_route_information': <class 'bool'>,\n          },\n        'active_timers': {\n          'last_neighbor_solicitation': <class 'str'>,\n          'last_neighbor_advertisement': <class 'str'>,\n          'last_router_advertisement': <class 'str'>,\n          'next_router_advertisement': <class 'str'>,\n          },\n        'neighbor_solicitation': {\n          'interval': <class 'int'>,\n          'retry_base': <class 'int'>,\n          'retry_interval': <class 'int'>,\n          'retry_attempts': <class 'int'>,\n          },\n        'error_message': {\n          'redirects': <class 'bool'>,\n          'unreachables': <class 'bool'>,\n          },\n        'dad': {\n          'maximum_attempts': <class 'int'>,\n          'current_attempt': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_nd_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L275"}}, "show ipv6 nd interface {interface}": {"nxos": {"class": "ShowIpv6NdInterface", "doc": "Parser for :\n        show ipv6 nd interface\n        show ipv6 nd interface vrf all\n        show ipv6 nd interface vrf <vrf>\n        show ipv6 nd interface <interface>\n        show ipv6 nd interface <interface> vrf all\n        show ipv6 nd interface <interface> vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'oper_status': <class 'str'>,\n        'enable': <class 'bool'>,\n        'ip': <class 'str'>,\n        'mac_extract': <class 'str'>,\n        'local_address': <class 'str'>,\n        'link_status': <class 'str'>,\n        'router_advertisement': {\n          'interval': <class 'int'>,\n          'lifetime': <class 'int'>,\n          'managed_address_configuration': <class 'bool'>,\n          'other_stateful_configuration': <class 'bool'>,\n          'default_router_preference': <class 'str'>,\n          'current_hop_limit': <class 'int'>,\n          'mtu': <class 'int'>,\n          'reachable_time': <class 'int'>,\n          'retrans_timer': <class 'int'>,\n          'suppress': <class 'bool'>,\n          'suppress_mtu': <class 'bool'>,\n          'suppress_route_information': <class 'bool'>,\n          },\n        'active_timers': {\n          'last_neighbor_solicitation': <class 'str'>,\n          'last_neighbor_advertisement': <class 'str'>,\n          'last_router_advertisement': <class 'str'>,\n          'next_router_advertisement': <class 'str'>,\n          },\n        'neighbor_solicitation': {\n          'interval': <class 'int'>,\n          'retry_base': <class 'int'>,\n          'retry_interval': <class 'int'>,\n          'retry_attempts': <class 'int'>,\n          },\n        'error_message': {\n          'redirects': <class 'bool'>,\n          'unreachables': <class 'bool'>,\n          },\n        'dad': {\n          'maximum_attempts': <class 'int'>,\n          'current_attempt': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_nd_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L275"}}, "show ipv6 nd interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpv6NdInterface", "doc": "Parser for :\n        show ipv6 nd interface\n        show ipv6 nd interface vrf all\n        show ipv6 nd interface vrf <vrf>\n        show ipv6 nd interface <interface>\n        show ipv6 nd interface <interface> vrf all\n        show ipv6 nd interface <interface> vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'oper_status': <class 'str'>,\n        'enable': <class 'bool'>,\n        'ip': <class 'str'>,\n        'mac_extract': <class 'str'>,\n        'local_address': <class 'str'>,\n        'link_status': <class 'str'>,\n        'router_advertisement': {\n          'interval': <class 'int'>,\n          'lifetime': <class 'int'>,\n          'managed_address_configuration': <class 'bool'>,\n          'other_stateful_configuration': <class 'bool'>,\n          'default_router_preference': <class 'str'>,\n          'current_hop_limit': <class 'int'>,\n          'mtu': <class 'int'>,\n          'reachable_time': <class 'int'>,\n          'retrans_timer': <class 'int'>,\n          'suppress': <class 'bool'>,\n          'suppress_mtu': <class 'bool'>,\n          'suppress_route_information': <class 'bool'>,\n          },\n        'active_timers': {\n          'last_neighbor_solicitation': <class 'str'>,\n          'last_neighbor_advertisement': <class 'str'>,\n          'last_router_advertisement': <class 'str'>,\n          'next_router_advertisement': <class 'str'>,\n          },\n        'neighbor_solicitation': {\n          'interval': <class 'int'>,\n          'retry_base': <class 'int'>,\n          'retry_interval': <class 'int'>,\n          'retry_attempts': <class 'int'>,\n          },\n        'error_message': {\n          'redirects': <class 'bool'>,\n          'unreachables': <class 'bool'>,\n          },\n        'dad': {\n          'maximum_attempts': <class 'int'>,\n          'current_attempt': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_nd_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L275"}}, "show ipv6 neighbor detail": {"nxos": {"class": "ShowIpv6NeighborDetail", "doc": "Parser for :\n        show ipv6 neighbor detail\n        show ipv6 neighbor detail vrf all\n        show ipv6 neighbor detail vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        Optional  (str) preference: <class 'int'>,\n        'origin': <class 'str'>,\n        Optional  (str) physical_interface: <class 'str'>,\n        Optional  (str) packet_count: <class 'int'>,\n        Optional  (str) byte_count: <class 'int'>,\n        Optional  (str) best: <class 'str'>,\n        Optional  (str) throttled: <class 'str'>,\n        },\n      },\n    },\n  },\n'adjacency_hit': {\n  Any  (str) *: {\n    'packet_count': <class 'int'>,\n    'byte_count': <class 'int'>,\n    },\n  },\n'adjacency_statistics_last_updated_before': <class 'str'>,\n'total_number_of_entries': <class 'int'>,\n}", "uid": "show_ipv6_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L74"}}, "show ipv6 neighbor detail vrf {vrf}": {"nxos": {"class": "ShowIpv6NeighborDetail", "doc": "Parser for :\n        show ipv6 neighbor detail\n        show ipv6 neighbor detail vrf all\n        show ipv6 neighbor detail vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        Optional  (str) preference: <class 'int'>,\n        'origin': <class 'str'>,\n        Optional  (str) physical_interface: <class 'str'>,\n        Optional  (str) packet_count: <class 'int'>,\n        Optional  (str) byte_count: <class 'int'>,\n        Optional  (str) best: <class 'str'>,\n        Optional  (str) throttled: <class 'str'>,\n        },\n      },\n    },\n  },\n'adjacency_hit': {\n  Any  (str) *: {\n    'packet_count': <class 'int'>,\n    'byte_count': <class 'int'>,\n    },\n  },\n'adjacency_statistics_last_updated_before': <class 'str'>,\n'total_number_of_entries': <class 'int'>,\n}", "uid": "show_ipv6_neighbor_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L74"}}, "show ipv6 neighbors": {"iosxe": {"class": "ShowIpv6Neighbors", "doc": "\n       Parser for 'show ipv6 neighbors'\n                  'show ipv6 neighbors vrf <vrf>'\n                  'show ipv6 neighbors <interface>'\n    ", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        Optional  (str) trlv: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ipv6.py#L54"}, "iosxr": {"class": "ShowIpv6Neighbors", "doc": "Parser for :\n        'show ipv6 neighbors'\n        'show ipv6 neighbors vrf {vrf}'\n        'show ipv6 neighbors {interface}'\n        'show ipv6 neighbors vrf {vrf} {interface}'\n        ", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        'location': <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) dynamic: <class 'str'>,\n        Optional  (str) sync: <class 'str'>,\n        Optional  (str) origin: <class 'str'>,\n        Optional  (str) serg_flags: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ipv6.py#L166"}}, "show ipv6 neighbors detail": {"iosxe": {"class": "ShowIpv6NeighborsDetail", "doc": "\n       Parser for 'show ipv6 neighbors detail'\n                  'show ipv6 neighbors vrf <vrf> detail'\n    ", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        Optional  (str) trlv: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ipv6.py#L119"}, "iosxr": {"class": "ShowIpv6NeighborsDetail", "doc": "Parser for show ipv6 neighbors detail", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        'location': <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) dynamic: <class 'str'>,\n        Optional  (str) sync: <class 'str'>,\n        Optional  (str) origin: <class 'str'>,\n        Optional  (str) serg_flags: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ipv6.py#L53"}}, "show ipv6 neighbors vrf {vrf}": {"iosxe": {"class": "ShowIpv6Neighbors", "doc": "\n       Parser for 'show ipv6 neighbors'\n                  'show ipv6 neighbors vrf <vrf>'\n                  'show ipv6 neighbors <interface>'\n    ", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        Optional  (str) trlv: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ipv6.py#L54"}, "iosxr": {"class": "ShowIpv6Neighbors", "doc": "Parser for :\n        'show ipv6 neighbors'\n        'show ipv6 neighbors vrf {vrf}'\n        'show ipv6 neighbors {interface}'\n        'show ipv6 neighbors vrf {vrf} {interface}'\n        ", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        'location': <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) dynamic: <class 'str'>,\n        Optional  (str) sync: <class 'str'>,\n        Optional  (str) origin: <class 'str'>,\n        Optional  (str) serg_flags: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ipv6.py#L166"}}, "show ipv6 neighbors vrf {vrf} detail": {"iosxe": {"class": "ShowIpv6NeighborsDetail", "doc": "\n       Parser for 'show ipv6 neighbors detail'\n                  'show ipv6 neighbors vrf <vrf> detail'\n    ", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        Optional  (str) trlv: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ipv6.py#L119"}}, "show ipv6 neighbors vrf {vrf} {interface}": {"iosxe": {"class": "ShowIpv6Neighbors", "doc": "\n       Parser for 'show ipv6 neighbors'\n                  'show ipv6 neighbors vrf <vrf>'\n                  'show ipv6 neighbors <interface>'\n    ", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        Optional  (str) trlv: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ipv6.py#L54"}, "iosxr": {"class": "ShowIpv6Neighbors", "doc": "Parser for :\n        'show ipv6 neighbors'\n        'show ipv6 neighbors vrf {vrf}'\n        'show ipv6 neighbors {interface}'\n        'show ipv6 neighbors vrf {vrf} {interface}'\n        ", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        'location': <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) dynamic: <class 'str'>,\n        Optional  (str) sync: <class 'str'>,\n        Optional  (str) origin: <class 'str'>,\n        Optional  (str) serg_flags: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ipv6.py#L166"}}, "show ipv6 neighbors {interface}": {"iosxe": {"class": "ShowIpv6Neighbors", "doc": "\n       Parser for 'show ipv6 neighbors'\n                  'show ipv6 neighbors vrf <vrf>'\n                  'show ipv6 neighbors <interface>'\n    ", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        Optional  (str) trlv: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ipv6.py#L54"}, "iosxr": {"class": "ShowIpv6Neighbors", "doc": "Parser for :\n        'show ipv6 neighbors'\n        'show ipv6 neighbors vrf {vrf}'\n        'show ipv6 neighbors {interface}'\n        'show ipv6 neighbors vrf {vrf} {interface}'\n        ", "module_name": "show_ipv6", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'link_layer_address': <class 'str'>,\n        'age': <class 'str'>,\n        'neighbor_state': <class 'str'>,\n        'location': <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) dynamic: <class 'str'>,\n        Optional  (str) sync: <class 'str'>,\n        Optional  (str) origin: <class 'str'>,\n        Optional  (str) serg_flags: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_neighbors_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ipv6.py#L166"}}, "show ipv6 pim bsr candidate-rp": {"ios": {"class": "ShowIpv6PimBsrCandidateRp", "doc": "Parser for:\n        show ipv6 pim bsr candidate-rp\n        show ipv6 pim vrf <vrf> bsr candidate-rp", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Any  (str) *: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) scope: <class 'str'>,\n              },\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_bsr_candidate-rp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L43"}, "iosxe": {"class": "ShowIpv6PimBsrCandidateRp", "doc": "Parser for:\n        show ipv6 pim bsr candidate-rp\n        show ipv6 pim vrf <vrf> bsr candidate-rp", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Any  (str) *: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) scope: <class 'str'>,\n              },\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_bsr_candidate-rp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L355"}}, "show ipv6 pim bsr election": {"ios": {"class": "ShowIpv6PimBsrElection", "doc": "Parser for:\n        show ipv6 pim bsr election\n        show ipv6 pim vrf <vrf> bsr election", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) scope_range_list: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) rpf_interface: <class 'str'>,\n              Optional  (str) rpf_address: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_bsr_election", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L37"}, "iosxe": {"class": "ShowIpv6PimBsrElection", "doc": "Parser for:\n        show ipv6 pim bsr election\n        show ipv6 pim vrf <vrf> bsr election", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) scope_range_list: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) rpf_interface: <class 'str'>,\n              Optional  (str) rpf_address: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_bsr_election", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L187"}}, "show ipv6 pim df": {"nxos": {"class": "ShowIpv6PimDf", "doc": "Parser for:\n        show ipv6 pim df\n        show ipv6 pim df vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) df_ordinal: <class 'int'>,\n                Optional  (str) metric_pref: <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) group_range: <class 'str'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) interface_state: <class 'str'>,\n                Optional  (str) winner_metric_pref: <class 'int'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_df", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1417"}}, "show ipv6 pim df vrf {vrf}": {"nxos": {"class": "ShowIpv6PimDf", "doc": "Parser for:\n        show ipv6 pim df\n        show ipv6 pim df vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) bidir: {\n            Optional  (str) interface_df_election: {\n              Optional  (Any) Any  (str) *: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) df_ordinal: <class 'int'>,\n                Optional  (str) metric_pref: <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) group_range: <class 'str'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) df_address: <class 'str'>,\n                Optional  (str) df_uptime: <class 'str'>,\n                Optional  (str) interface_state: <class 'str'>,\n                Optional  (str) winner_metric_pref: <class 'int'>,\n                Optional  (str) winner_metric: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_df_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1417"}}, "show ipv6 pim group-range": {"nxos": {"class": "ShowIpv6PimGroupRange", "doc": "Parser for:\n        show ipv6 pim group-range\n        show ipv6 pim group-range vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'sm': {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) shared_tree_only: <class 'str'>,\n              Optional  (str) range: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_group-range", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2528"}}, "show ipv6 pim group-range vrf {vrf}": {"nxos": {"class": "ShowIpv6PimGroupRange", "doc": "Parser for:\n        show ipv6 pim group-range\n        show ipv6 pim group-range vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'sm': {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              Optional  (str) shared_tree_only: <class 'str'>,\n              Optional  (str) range: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_group-range_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2528"}}, "show ipv6 pim interface": {"ios": {"class": "ShowIpv6PimInterface", "doc": "Parser for:\n        show ipv6 pim interface\n        show ipv6 pim vrf <vrf> interface", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'dr_priority': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        'neighbor_count': <class 'int'>,\n        'pim_enabled': <class 'bool'>,\n        Optional  (str) dr_address: <class 'str'>,\n        Optional  (str) address: <class 'list'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L31"}, "iosxe": {"class": "ShowIpv6PimInterface", "doc": "Parser for:\n        show ipv6 pim interface\n        show ipv6 pim vrf <vrf> interface", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'dr_priority': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        'neighbor_count': <class 'int'>,\n        'pim_enabled': <class 'bool'>,\n        Optional  (str) dr_address: <class 'str'>,\n        Optional  (str) address: <class 'list'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L66"}, "nxos": {"class": "ShowIpv6PimInterface", "doc": "Parser for:\n        show ipv6 pim interface vrf <vrf>\n        show ipv6 pim interface\n        show ipv6 pim interface <interface>\n        show ipv6 pim interface <interface> vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) statistics: {\n              Optional  (str) last_reset: <class 'str'>,\n              Optional  (str) general: {\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L95"}}, "show ipv6 pim interface vrf {vrf}": {"nxos": {"class": "ShowIpv6PimInterface", "doc": "Parser for:\n        show ipv6 pim interface vrf <vrf>\n        show ipv6 pim interface\n        show ipv6 pim interface <interface>\n        show ipv6 pim interface <interface> vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) statistics: {\n              Optional  (str) last_reset: <class 'str'>,\n              Optional  (str) general: {\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L95"}}, "show ipv6 pim interface {interface}": {"nxos": {"class": "ShowIpv6PimInterface", "doc": "Parser for:\n        show ipv6 pim interface vrf <vrf>\n        show ipv6 pim interface\n        show ipv6 pim interface <interface>\n        show ipv6 pim interface <interface> vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) statistics: {\n              Optional  (str) last_reset: <class 'str'>,\n              Optional  (str) general: {\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L95"}}, "show ipv6 pim interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpv6PimInterface", "doc": "Parser for:\n        show ipv6 pim interface vrf <vrf>\n        show ipv6 pim interface\n        show ipv6 pim interface <interface>\n        show ipv6 pim interface <interface> vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            Optional  (str) oper_status: <class 'str'>,\n            Optional  (str) link_status: <class 'str'>,\n            Optional  (str) admin_status: <class 'str'>,\n            Optional  (str) address: <class 'list'>,\n            Optional  (str) dr_address: <class 'str'>,\n            Optional  (str) dr_priority: <class 'int'>,\n            Optional  (str) configured_dr_priority: <class 'int'>,\n            Optional  (str) neighbor_count: <class 'int'>,\n            Optional  (str) hello_interval: <class 'int'>,\n            Optional  (str) hello_expiration: <class 'str'>,\n            Optional  (str) neighbor_holdtime: <class 'int'>,\n            Optional  (str) dr_delay: <class 'int'>,\n            Optional  (str) bsr_border: <class 'bool'>,\n            Optional  (str) genid: <class 'str'>,\n            Optional  (str) hello_md5_ah_authentication: <class 'str'>,\n            Optional  (str) neighbor_filter: <class 'str'>,\n            Optional  (str) jp_inbound_policy: <class 'str'>,\n            Optional  (str) jp_outbound_policy: <class 'str'>,\n            Optional  (str) jp_interval: <class 'int'>,\n            Optional  (str) jp_next_sending: <class 'int'>,\n            Optional  (str) bfd: {\n              Optional  (str) enable: <class 'bool'>,\n              },\n            Optional  (str) sm: {\n              Optional  (str) passive: <class 'bool'>,\n              },\n            Optional  (str) vpc_svi: <class 'bool'>,\n            Optional  (str) auto_enabled: <class 'bool'>,\n            Optional  (str) statistics: {\n              Optional  (str) last_reset: <class 'str'>,\n              Optional  (str) general: {\n                Optional  (str) hellos: <class 'str'>,\n                Optional  (str) jps: <class 'str'>,\n                Optional  (str) asserts: <class 'str'>,\n                Optional  (str) grafts: <class 'str'>,\n                Optional  (str) graft_acks: <class 'str'>,\n                Optional  (str) df_offers: <class 'str'>,\n                Optional  (str) df_winners: <class 'str'>,\n                Optional  (str) df_backoffs: <class 'str'>,\n                Optional  (str) df_passes: <class 'str'>,\n                },\n              Optional  (str) errors: {\n                Optional  (str) checksum: <class 'int'>,\n                Optional  (str) invalid_packet_types: <class 'int'>,\n                Optional  (str) invalid_df_subtypes: <class 'int'>,\n                Optional  (str) authentication_failed: <class 'int'>,\n                Optional  (str) packet_length_errors: <class 'int'>,\n                Optional  (str) bad_version_packets: <class 'int'>,\n                Optional  (str) packets_from_self: <class 'int'>,\n                Optional  (str) packets_from_non_neighbors: <class 'int'>,\n                Optional  (str) packets_received_on_passiveinterface: <class 'int'>,\n                Optional  (str) jps_received_on_rpf_interface: <class 'int'>,\n                Optional  (str) joins_received_with_no_rp: <class 'int'>,\n                Optional  (str) joins_received_with_wrong_rp: <class 'int'>,\n                Optional  (str) joins_received_with_ssm_groups: <class 'int'>,\n                Optional  (str) joins_received_with_bidir_groups: <class 'int'>,\n                Optional  (str) jps_filtered_by_inbound_policy: <class 'int'>,\n                Optional  (str) jps_filtered_by_outbound_policy: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L95"}}, "show ipv6 pim neighbor": {"ios": {"class": "ShowIpv6PimNeighbor", "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L90"}, "iosxe": {"class": "ShowIpv6PimNeighbor", "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1865"}, "nxos": {"class": "ShowIpv6PimNeighbor", "doc": "Parser for:\n        show ipv6 pim neighbor\n        show ipv6 pim neighbor vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) bfd_status: <class 'bool'>,\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) ecmp_redirect_capable: <class 'bool'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2076"}}, "show ipv6 pim neighbor detail": {"ios": {"class": "ShowIpv6PimNeighborDetail", "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L97"}, "iosxe": {"class": "ShowIpv6PimNeighborDetail", "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1886"}}, "show ipv6 pim neighbor vrf {vrf}": {"nxos": {"class": "ShowIpv6PimNeighbor", "doc": "Parser for:\n        show ipv6 pim neighbor\n        show ipv6 pim neighbor vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) bfd_status: <class 'bool'>,\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) ecmp_redirect_capable: <class 'bool'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_neighbor_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L2076"}}, "show ipv6 pim route": {"nxos": {"class": "ShowIpv6PimRoute", "doc": "Parser for:\n        show ipv6 pim route\n        show ipv6 pim route vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) topology_tree_info: {\n          Any  (str) *: {\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) source_address: <class 'str'>,\n            Optional  (str) is_rpt: <class 'bool'>,\n            Optional  (str) rp_bit: <class 'bool'>,\n            Optional  (str) expiration: <class 'str'>,\n            Optional  (str) incoming_interface: <class 'str'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) rp_address: <class 'str'>,\n            Optional  (str) rpf_neighbor: <class 'str'>,\n            Optional  (str) jp_holdtime_roundup: <class 'int'>,\n            Optional  (str) oif: <class 'str'>,\n            Optional  (str) oif_count: <class 'int'>,\n            Optional  (str) oif_timeout_count: <class 'int'>,\n            Optional  (str) oif_timeout: <class 'str'>,\n            Optional  (str) immediate: <class 'str'>,\n            Optional  (str) immediate_count: <class 'int'>,\n            Optional  (str) immediate_timeout_count: <class 'int'>,\n            Optional  (str) immediate_timeout: <class 'str'>,\n            Optional  (str) timeout_interval: <class 'int'>,\n            Optional  (str) sgr_prune_count: <class 'int'>,\n            Optional  (str) sgr_prune: <class 'str'>,\n            Optional  (str) route_fabric_owned: <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1812"}}, "show ipv6 pim route vrf {vrf}": {"nxos": {"class": "ShowIpv6PimRoute", "doc": "Parser for:\n        show ipv6 pim route\n        show ipv6 pim route vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) topology_tree_info: {\n          Any  (str) *: {\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) source_address: <class 'str'>,\n            Optional  (str) is_rpt: <class 'bool'>,\n            Optional  (str) rp_bit: <class 'bool'>,\n            Optional  (str) expiration: <class 'str'>,\n            Optional  (str) incoming_interface: <class 'str'>,\n            Optional  (str) mode: <class 'str'>,\n            Optional  (str) rp_address: <class 'str'>,\n            Optional  (str) rpf_neighbor: <class 'str'>,\n            Optional  (str) jp_holdtime_roundup: <class 'int'>,\n            Optional  (str) oif: <class 'str'>,\n            Optional  (str) oif_count: <class 'int'>,\n            Optional  (str) oif_timeout_count: <class 'int'>,\n            Optional  (str) oif_timeout: <class 'str'>,\n            Optional  (str) immediate: <class 'str'>,\n            Optional  (str) immediate_count: <class 'int'>,\n            Optional  (str) immediate_timeout_count: <class 'int'>,\n            Optional  (str) immediate_timeout: <class 'str'>,\n            Optional  (str) timeout_interval: <class 'int'>,\n            Optional  (str) sgr_prune_count: <class 'int'>,\n            Optional  (str) sgr_prune: <class 'str'>,\n            Optional  (str) route_fabric_owned: <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L1812"}}, "show ipv6 pim vrf all detail": {"nxos": {"class": "ShowIpv6PimVrfAllDetail", "doc": "Parser for show ipv6 pim vrf all detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) vrf_id: <class 'int'>,\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) interface_count: <class 'int'>,\n        Optional  (str) bfd: {\n          Optional  (str) enable: <class 'bool'>,\n          },\n        Optional  (str) state_limit: <class 'str'>,\n        Optional  (str) register_rate_limit: <class 'str'>,\n        Optional  (str) shared_tree_route_map: <class 'str'>,\n        Optional  (str) shared_tree_route_ranges: <class 'str'>,\n        Optional  (str) shared_tree_ranges: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4105"}}, "show ipv6 pim vrf {vrf} bsr candidate-rp": {"ios": {"class": "ShowIpv6PimBsrCandidateRp", "doc": "Parser for:\n        show ipv6 pim bsr candidate-rp\n        show ipv6 pim vrf <vrf> bsr candidate-rp", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Any  (str) *: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) scope: <class 'str'>,\n              },\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_vrf_bsr_candidate-rp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L43"}, "iosxe": {"class": "ShowIpv6PimBsrCandidateRp", "doc": "Parser for:\n        show ipv6 pim bsr candidate-rp\n        show ipv6 pim vrf <vrf> bsr candidate-rp", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Any  (str) *: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) holdtime: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) scope: <class 'str'>,\n              },\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_vrf_bsr_candidate-rp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L355"}}, "show ipv6 pim vrf {vrf} bsr election": {"ios": {"class": "ShowIpv6PimBsrElection", "doc": "Parser for:\n        show ipv6 pim bsr election\n        show ipv6 pim vrf <vrf> bsr election", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) scope_range_list: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) rpf_interface: <class 'str'>,\n              Optional  (str) rpf_address: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_vrf_bsr_election", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L37"}, "iosxe": {"class": "ShowIpv6PimBsrElection", "doc": "Parser for:\n        show ipv6 pim bsr election\n        show ipv6 pim vrf <vrf> bsr election", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'rp': {\n          'bsr': {\n            Optional  (str) bsr_candidate: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              },\n            Optional  (str) bsr: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) hash_mask_length: <class 'int'>,\n              Optional  (str) scope_range_list: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              Optional  (str) rpf_interface: <class 'str'>,\n              Optional  (str) rpf_address: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_vrf_bsr_election", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L187"}}, "show ipv6 pim vrf {vrf} interface": {"ios": {"class": "ShowIpv6PimInterface", "doc": "Parser for:\n        show ipv6 pim interface\n        show ipv6 pim vrf <vrf> interface", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'dr_priority': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        'neighbor_count': <class 'int'>,\n        'pim_enabled': <class 'bool'>,\n        Optional  (str) dr_address: <class 'str'>,\n        Optional  (str) address: <class 'list'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L31"}, "iosxe": {"class": "ShowIpv6PimInterface", "doc": "Parser for:\n        show ipv6 pim interface\n        show ipv6 pim vrf <vrf> interface", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'dr_priority': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        'neighbor_count': <class 'int'>,\n        'pim_enabled': <class 'bool'>,\n        Optional  (str) dr_address: <class 'str'>,\n        Optional  (str) address: <class 'list'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L66"}}, "show ipv6 pim vrf {vrf} neighbor": {"ios": {"class": "ShowIpv6PimNeighbor", "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_vrf_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L90"}, "iosxe": {"class": "ShowIpv6PimNeighbor", "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_vrf_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1865"}}, "show ipv6 pim vrf {vrf} neighbor detail": {"ios": {"class": "ShowIpv6PimNeighborDetail", "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_vrf_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L97"}, "iosxe": {"class": "ShowIpv6PimNeighborDetail", "doc": "Parser for show ipv6 pim [vrf <WORD>] neighbor detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_pim_vrf_vrf_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1886"}}, "show ipv6 prefix-list detail": {"ios": {"class": "ShowIpv6PrefixListDetail", "doc": "Parser for show ipv6 prefix-list detail", "module_name": "show_prefix_list", "package": "genie.libs.parser", "schema": "{\n'prefix_set_name': {\n  Any  (str) *: {\n    'prefix_set_name': <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) count: <class 'int'>,\n    Optional  (str) range_entries: <class 'int'>,\n    Optional  (str) sequences: <class 'str'>,\n    Optional  (str) refcount: <class 'int'>,\n    Optional  (str) prefixes: {\n      Any  (str) *: {\n        Optional  (str) prefix: <class 'str'>,\n        Optional  (str) masklength_range: <class 'str'>,\n        Optional  (str) sequence: <class 'int'>,\n        Optional  (str) hit_count: <class 'int'>,\n        Optional  (str) refcount: <class 'int'>,\n        Optional  (str) action: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_prefix-list_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_prefix_list.py#L19"}, "iosxe": {"class": "ShowIpv6PrefixListDetail", "doc": "Parser for show ipv6 prefix-list detail", "module_name": "show_prefix_list", "package": "genie.libs.parser", "schema": "{\n'prefix_set_name': {\n  Any  (str) *: {\n    'prefix_set_name': <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) count: <class 'int'>,\n    Optional  (str) range_entries: <class 'int'>,\n    Optional  (str) sequences: <class 'str'>,\n    Optional  (str) refcount: <class 'int'>,\n    Optional  (str) prefixes: {\n      Any  (str) *: {\n        Optional  (str) prefix: <class 'str'>,\n        Optional  (str) masklength_range: <class 'str'>,\n        Optional  (str) sequence: <class 'int'>,\n        Optional  (str) hit_count: <class 'int'>,\n        Optional  (str) refcount: <class 'int'>,\n        Optional  (str) action: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_prefix-list_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_prefix_list.py#L168"}}, "show ipv6 protocols vrf {vrf} | sec rip": {"ios": {"class": "ShowIpv6ProtocolsSectionRip", "doc": "Parser for :\n\t\tshow ipv6 protocols | sec rip\n\t\tshow ipv6 protocols vrf {vrf} | sec rip\n\t", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) instance: {\n          Any  (str) *: {\n            Optional  (str) redistribute: {\n              Any  (str) *: {\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) route_policy: <class 'str'>,\n                },\n              },\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_protocols_vrf_vrf___sec_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_protocols.py#L27"}, "iosxe": {"class": "ShowIpv6ProtocolsSectionRip", "doc": "Parser for :\n           show ipv6 protocols | sec rip\n           show ipv6 protocols vrf {vrf} | sec rip\n           ", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) instance: {\n          Any  (str) *: {\n            Optional  (str) redistribute: {\n              Any  (str) *: {\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) route_policy: <class 'str'>,\n                },\n              },\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_protocols_vrf_vrf___sec_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L1221"}}, "show ipv6 protocols | sec rip": {"ios": {"class": "ShowIpv6ProtocolsSectionRip", "doc": "Parser for :\n\t\tshow ipv6 protocols | sec rip\n\t\tshow ipv6 protocols vrf {vrf} | sec rip\n\t", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) instance: {\n          Any  (str) *: {\n            Optional  (str) redistribute: {\n              Any  (str) *: {\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) route_policy: <class 'str'>,\n                },\n              },\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_protocols___sec_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_protocols.py#L27"}, "iosxe": {"class": "ShowIpv6ProtocolsSectionRip", "doc": "Parser for :\n           show ipv6 protocols | sec rip\n           show ipv6 protocols vrf {vrf} | sec rip\n           ", "module_name": "show_protocols", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) instance: {\n          Any  (str) *: {\n            Optional  (str) redistribute: {\n              Any  (str) *: {\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) route_policy: <class 'str'>,\n                },\n              },\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_protocols___sec_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_protocols.py#L1221"}}, "show ipv6 rip": {"ios": {"class": "ShowIpv6Rip", "doc": "Parser for :\n        show ipv6 rip\n        show ipv6 rip vrf {vrf}", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) distance: <class 'int'>,\n        Optional  (str) maximum_paths: <class 'int'>,\n        Optional  (str) pid: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        Optional  (str) multicast_group: <class 'str'>,\n        Optional  (str) split_horizon: <class 'bool'>,\n        Optional  (str) poison_reverse: <class 'bool'>,\n        'originate_default_route': {\n          'enabled': <class 'bool'>,\n          },\n        Optional  (str) redistribute: {\n          Any  (str) *: {\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route_policy: <class 'str'>,\n            },\n          Optional  (str) bgp: {\n            Any  (str) *: {\n              Optional  (str) metric: <class 'int'>,\n              Optional  (str) route_policy: <class 'str'>,\n              },\n            },\n          },\n        'timers': {\n          Optional  (str) update_interval: <class 'int'>,\n          Optional  (str) holddown_interval: <class 'int'>,\n          Optional  (str) flush_interval: <class 'int'>,\n          Optional  (str) expire_time: <class 'int'>,\n          },\n        Optional  (str) interfaces: {\n          Any  (str) *: {\n            },\n          },\n        Optional  (str) statistics: {\n          Optional  (str) periodic_updates: <class 'int'>,\n          Optional  (str) delayed_events: <class 'int'>,\n          Optional  (str) trigger_updates: <class 'int'>,\n          Optional  (str) full_advertisement: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_rip.py#L34"}, "iosxe": {"class": "ShowIpv6Rip", "doc": "Parser for :\n           show ipv6 rip\n           show ipv6 rip vrf {vrf}", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) distance: <class 'int'>,\n        Optional  (str) maximum_paths: <class 'int'>,\n        Optional  (str) pid: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        Optional  (str) multicast_group: <class 'str'>,\n        Optional  (str) split_horizon: <class 'bool'>,\n        Optional  (str) poison_reverse: <class 'bool'>,\n        'originate_default_route': {\n          'enabled': <class 'bool'>,\n          },\n        Optional  (str) redistribute: {\n          Any  (str) *: {\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route_policy: <class 'str'>,\n            },\n          Optional  (str) bgp: {\n            Any  (str) *: {\n              Optional  (str) metric: <class 'int'>,\n              Optional  (str) route_policy: <class 'str'>,\n              },\n            },\n          },\n        'timers': {\n          Optional  (str) update_interval: <class 'int'>,\n          Optional  (str) holddown_interval: <class 'int'>,\n          Optional  (str) flush_interval: <class 'int'>,\n          Optional  (str) expire_time: <class 'int'>,\n          },\n        Optional  (str) interfaces: {\n          Any  (str) *: {\n            },\n          },\n        Optional  (str) statistics: {\n          Optional  (str) periodic_updates: <class 'int'>,\n          Optional  (str) delayed_events: <class 'int'>,\n          Optional  (str) trigger_updates: <class 'int'>,\n          Optional  (str) full_advertisement: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L239"}, "nxos": {"class": "ShowIpv6RipVrfAll", "doc": "Parser for:\n        * show ipv6 rip\n        * show ipv6 rip vrf {vrf}\n        * show ipv6 rip vrf all", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'isolate_mode': <class 'bool'>,\n'mmode': <class 'str'>,\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'port': <class 'int'>,\n            'multicast_group': <class 'str'>,\n            'distance': <class 'int'>,\n            Optional  (str) timers: {\n              Optional  (str) update_interval: <class 'int'>,\n              Optional  (str) expire_in: <class 'int'>,\n              Optional  (str) collect_garbage: <class 'int'>,\n              },\n            'default_metric': <class 'int'>,\n            'maximum_paths': <class 'int'>,\n            Optional  (str) default_originate: <class 'str'>,\n            'process': <class 'str'>,\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                },\n              },\n            Optional  (str) redistribute: {\n              Any  (str) *: {\n                Optional  (str) route_policy: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_rip.py#L106"}}, "show ipv6 rip database": {"ios": {"class": "ShowIpv6RipDatabase", "doc": "Parser for :\n        show ipv6 rip database\n        show ipv6 rip database vrf {vrf}\n    ", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) installed: <class 'bool'>,\n                Optional  (str) route_type: <class 'str'>,\n                Optional  (str) expire_time: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_rip.py#L27"}, "iosxe": {"class": "ShowIpv6RipDatabase", "doc": "Parser for :\n           show ipv6 rip database\n           show ipv6 rip database vrf {vrf}\n           ", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) installed: <class 'bool'>,\n                Optional  (str) route_type: <class 'str'>,\n                Optional  (str) expire_time: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L478"}}, "show ipv6 rip route": {"nxos": {"class": "ShowIpv6RipRouteVrfAll", "doc": "Parser for:\n        * show ipv6 rip route\n        * show ipv6 rip route vrf {vrf}\n        * show ipv6 rip route vrf all", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'best_route': <class 'bool'>,\n                'next_hops': <class 'int'>,\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) tag: <class 'int'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) expire_time: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_rip.py#L1121"}}, "show ipv6 rip route vrf {vrf}": {"nxos": {"class": "ShowIpv6RipRouteVrfAll", "doc": "Parser for:\n        * show ipv6 rip route\n        * show ipv6 rip route vrf {vrf}\n        * show ipv6 rip route vrf all", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'best_route': <class 'bool'>,\n                'next_hops': <class 'int'>,\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) tag: <class 'int'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) expire_time: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_rip.py#L1121"}}, "show ipv6 rip vrf {vrf}": {"ios": {"class": "ShowIpv6Rip", "doc": "Parser for :\n        show ipv6 rip\n        show ipv6 rip vrf {vrf}", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) distance: <class 'int'>,\n        Optional  (str) maximum_paths: <class 'int'>,\n        Optional  (str) pid: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        Optional  (str) multicast_group: <class 'str'>,\n        Optional  (str) split_horizon: <class 'bool'>,\n        Optional  (str) poison_reverse: <class 'bool'>,\n        'originate_default_route': {\n          'enabled': <class 'bool'>,\n          },\n        Optional  (str) redistribute: {\n          Any  (str) *: {\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route_policy: <class 'str'>,\n            },\n          Optional  (str) bgp: {\n            Any  (str) *: {\n              Optional  (str) metric: <class 'int'>,\n              Optional  (str) route_policy: <class 'str'>,\n              },\n            },\n          },\n        'timers': {\n          Optional  (str) update_interval: <class 'int'>,\n          Optional  (str) holddown_interval: <class 'int'>,\n          Optional  (str) flush_interval: <class 'int'>,\n          Optional  (str) expire_time: <class 'int'>,\n          },\n        Optional  (str) interfaces: {\n          Any  (str) *: {\n            },\n          },\n        Optional  (str) statistics: {\n          Optional  (str) periodic_updates: <class 'int'>,\n          Optional  (str) delayed_events: <class 'int'>,\n          Optional  (str) trigger_updates: <class 'int'>,\n          Optional  (str) full_advertisement: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_rip.py#L34"}, "iosxe": {"class": "ShowIpv6Rip", "doc": "Parser for :\n           show ipv6 rip\n           show ipv6 rip vrf {vrf}", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) distance: <class 'int'>,\n        Optional  (str) maximum_paths: <class 'int'>,\n        Optional  (str) pid: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        Optional  (str) multicast_group: <class 'str'>,\n        Optional  (str) split_horizon: <class 'bool'>,\n        Optional  (str) poison_reverse: <class 'bool'>,\n        'originate_default_route': {\n          'enabled': <class 'bool'>,\n          },\n        Optional  (str) redistribute: {\n          Any  (str) *: {\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) route_policy: <class 'str'>,\n            },\n          Optional  (str) bgp: {\n            Any  (str) *: {\n              Optional  (str) metric: <class 'int'>,\n              Optional  (str) route_policy: <class 'str'>,\n              },\n            },\n          },\n        'timers': {\n          Optional  (str) update_interval: <class 'int'>,\n          Optional  (str) holddown_interval: <class 'int'>,\n          Optional  (str) flush_interval: <class 'int'>,\n          Optional  (str) expire_time: <class 'int'>,\n          },\n        Optional  (str) interfaces: {\n          Any  (str) *: {\n            },\n          },\n        Optional  (str) statistics: {\n          Optional  (str) periodic_updates: <class 'int'>,\n          Optional  (str) delayed_events: <class 'int'>,\n          Optional  (str) trigger_updates: <class 'int'>,\n          Optional  (str) full_advertisement: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L239"}, "nxos": {"class": "ShowIpv6RipVrfAll", "doc": "Parser for:\n        * show ipv6 rip\n        * show ipv6 rip vrf {vrf}\n        * show ipv6 rip vrf all", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'isolate_mode': <class 'bool'>,\n'mmode': <class 'str'>,\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'port': <class 'int'>,\n            'multicast_group': <class 'str'>,\n            'distance': <class 'int'>,\n            Optional  (str) timers: {\n              Optional  (str) update_interval: <class 'int'>,\n              Optional  (str) expire_in: <class 'int'>,\n              Optional  (str) collect_garbage: <class 'int'>,\n              },\n            'default_metric': <class 'int'>,\n            'maximum_paths': <class 'int'>,\n            Optional  (str) default_originate: <class 'str'>,\n            'process': <class 'str'>,\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                },\n              },\n            Optional  (str) redistribute: {\n              Any  (str) *: {\n                Optional  (str) route_policy: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_rip.py#L106"}}, "show ipv6 rip vrf {vrf} database": {"ios": {"class": "ShowIpv6RipDatabase", "doc": "Parser for :\n        show ipv6 rip database\n        show ipv6 rip database vrf {vrf}\n    ", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) installed: <class 'bool'>,\n                Optional  (str) route_type: <class 'str'>,\n                Optional  (str) expire_time: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip_vrf_vrf_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_rip.py#L27"}, "iosxe": {"class": "ShowIpv6RipDatabase", "doc": "Parser for :\n           show ipv6 rip database\n           show ipv6 rip database vrf {vrf}\n           ", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'index': {\n              Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                Optional  (str) installed: <class 'bool'>,\n                Optional  (str) route_type: <class 'str'>,\n                Optional  (str) expire_time: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_rip_vrf_vrf_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rip.py#L478"}}, "show ipv6 route": {"iosxe": {"class": "ShowIpv6RouteDistributor", "doc": "distributor class for show ipv6 route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ipv6_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L58"}, "nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route interface {interface}": {"iosxe": {"class": "ShowIpv6RouteDistributor", "doc": "distributor class for show ipv6 route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ipv6_route_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L58"}, "nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route updated": {"ios": {"class": "ShowIpv6RouteUpdated", "doc": "Parser for :\n       show ipv6 route updated\n       show ipv6 route vrf <vrf> updated", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'ipv6_unicast_routing_enabled': <class 'bool'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_updated", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py#L28"}, "iosxe": {"class": "ShowIpv6RouteUpdated", "doc": "Parser for :\n       show ipv6 route updated\n       show ipv6 route vrf <vrf> updated", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'ipv6_unicast_routing_enabled': <class 'bool'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_updated", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L698"}}, "show ipv6 route vrf all": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route vrf {vrf}": {"iosxe": {"class": "ShowIpv6RouteDistributor", "doc": "distributor class for show ipv6 route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ipv6_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L58"}, "nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route vrf {vrf} interface {interface}": {"iosxe": {"class": "ShowIpv6RouteDistributor", "doc": "distributor class for show ipv6 route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ipv6_route_vrf_vrf_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L58"}}, "show ipv6 route vrf {vrf} updated": {"ios": {"class": "ShowIpv6RouteUpdated", "doc": "Parser for :\n       show ipv6 route updated\n       show ipv6 route vrf <vrf> updated", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'ipv6_unicast_routing_enabled': <class 'bool'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_vrf_vrf_updated", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_routing.py#L28"}, "iosxe": {"class": "ShowIpv6RouteUpdated", "doc": "Parser for :\n       show ipv6 route updated\n       show ipv6 route vrf <vrf> updated", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'ipv6_unicast_routing_enabled': <class 'bool'>,\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_vrf_vrf_updated", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L698"}}, "show ipv6 route vrf {vrf} {protocol}": {"iosxe": {"class": "ShowIpv6RouteDistributor", "doc": "distributor class for show ipv6 route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ipv6_route_vrf_vrf_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L58"}}, "show ipv6 route vrf {vrf} {route}": {"iosxe": {"class": "ShowIpv6RouteDistributor", "doc": "distributor class for show ipv6 route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ipv6_route_vrf_vrf_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L58"}}, "show ipv6 route {protocol}": {"iosxe": {"class": "ShowIpv6RouteDistributor", "doc": "distributor class for show ipv6 route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ipv6_route_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L58"}, "nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {protocol} interface {interface}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_protocol_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {protocol} interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_protocol_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {protocol} vrf {vrf}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_protocol_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {route}": {"iosxe": {"class": "ShowIpv6RouteDistributor", "doc": "distributor class for show ipv6 route", "module_name": "show_routing", "package": "genie.libs.parser", "schema": null, "uid": "show_ipv6_route_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_routing.py#L58"}, "nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {route} interface {interface}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_route_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {route} interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_route_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {route} vrf {vrf}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {route} {protocol}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_route_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {route} {protocol} interface {interface}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_route_protocol_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {route} {protocol} interface {interface} vrf {vrf}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_route_protocol_interface_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 route {route} {protocol} vrf {vrf}": {"nxos": {"class": "ShowIpv6Route", "doc": "Parser for :\n        'show ipv6 route {route} {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol} interface {interface}',\n        'show ipv6 route {route} {protocol} vrf {vrf}',\n        'show ipv6 route {protocol} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} interface {interface} vrf {vrf}',\n        'show ipv6 route {route} {protocol}',\n        'show ipv6 route {protocol} interface {interface}',\n        'show ipv6 route {protocol} vrf {vrf}',\n        'show ipv6 route {route} interface {interface}',\n        'show ipv6 route {route} vrf {vrf}',\n        'show ipv6 route interface {interface} vrf {vrf}',\n        'show ipv6 route {protocol}',\n        'show ipv6 route {route}',\n        'show ipv6 route interface {interface}',\n        'show ipv6 route vrf {vrf}',\n        'show ipv6 route vrf all',\n        'show ipv6 route'\n       ", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_route_route_protocol_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L967"}}, "show ipv6 routers": {"nxos": {"class": "ShowIpv6Routers", "doc": "Parser for :\n        show ipv6 routers\n        show ipv6 routers vrf all\n        show ipv6 routers vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'is_router': <class 'bool'>,\n        'last_update': <class 'str'>,\n        'current_hop_limit': <class 'int'>,\n        'addr_flag': <class 'int'>,\n        'other_flag': <class 'int'>,\n        'mtu': <class 'int'>,\n        'lifetime': <class 'int'>,\n        'preference': <class 'str'>,\n        'homeagent_flag': <class 'int'>,\n        'retransmission_time': <class 'int'>,\n        'reachable_time': <class 'int'>,\n        Optional  (str) prefix: {\n          Any  (str) *: {\n            'autonomous_flag': <class 'int'>,\n            'onlink_flag': <class 'int'>,\n            'preferred_lifetime': <class 'int'>,\n            'valid_lifetime': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_routers", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L714"}}, "show ipv6 routers vrf {vrf}": {"nxos": {"class": "ShowIpv6Routers", "doc": "Parser for :\n        show ipv6 routers\n        show ipv6 routers vrf all\n        show ipv6 routers vrf <vrf>", "module_name": "show_nd", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'neighbors': {\n      Any  (str) *: {\n        'ip': <class 'str'>,\n        'is_router': <class 'bool'>,\n        'last_update': <class 'str'>,\n        'current_hop_limit': <class 'int'>,\n        'addr_flag': <class 'int'>,\n        'other_flag': <class 'int'>,\n        'mtu': <class 'int'>,\n        'lifetime': <class 'int'>,\n        'preference': <class 'str'>,\n        'homeagent_flag': <class 'int'>,\n        'retransmission_time': <class 'int'>,\n        'reachable_time': <class 'int'>,\n        Optional  (str) prefix: {\n          Any  (str) *: {\n            'autonomous_flag': <class 'int'>,\n            'onlink_flag': <class 'int'>,\n            'preferred_lifetime': <class 'int'>,\n            'valid_lifetime': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_routers_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_nd.py#L714"}}, "show ipv6 static detail": {"ios": {"class": "ShowIpv6StaticDetail", "doc": null, "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_paths_number: <class 'int'>,\n                  Optional  (str) rejected_by: <class 'str'>,\n                  Optional  (str) max_depth: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) track_state: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_static_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py#L12"}, "iosxe": {"class": "ShowIpv6StaticDetail", "doc": "Parser for:\n       show ipv6 static detail\n       show ipv6 static vrf <vrf> detail\n    ", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_paths_number: <class 'int'>,\n                  Optional  (str) rejected_by: <class 'str'>,\n                  Optional  (str) max_depth: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) track_state: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_static_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py#L239"}}, "show ipv6 static vrf {vrf} detail": {"ios": {"class": "ShowIpv6StaticDetail", "doc": null, "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_paths_number: <class 'int'>,\n                  Optional  (str) rejected_by: <class 'str'>,\n                  Optional  (str) max_depth: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) track_state: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_static_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_static_routing.py#L12"}, "iosxe": {"class": "ShowIpv6StaticDetail", "doc": "Parser for:\n       show ipv6 static detail\n       show ipv6 static vrf <vrf> detail\n    ", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_paths_number: <class 'int'>,\n                  Optional  (str) rejected_by: <class 'str'>,\n                  Optional  (str) max_depth: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) track_state: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_static_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_static_routing.py#L239"}}, "show ipv6 static-route": {"nxos": {"class": "ShowIpv6StaticRoute", "doc": "Parser for:\n        show ipv6 static-route\n        show ipv6 static-route vrf <vrf>\n        show ipv6 static-route vrf all", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) resolved_tid: <class 'int'>,\n                  Optional  (str) bfd_enabled: <class 'bool'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_netmask: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_tid: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) bfd_enabled: <class 'bool'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_static-route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py#L260"}}, "show ipv6 static-route multicast vrf all": {"nxos": {"class": "ShowIpv6StaticRouteMulticast", "doc": "Parser for show ipv6 static-route multicast vrf all", "module_name": "show_mcast", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) mroute: {\n          Any  (str) *: {\n            Optional  (str) path: {\n              Any  (str) *: {\n                Optional  (str) neighbor_address: <class 'str'>,\n                Optional  (str) nh_vrf: <class 'str'>,\n                Optional  (str) reslv_tid: <class 'str'>,\n                Optional  (str) interface_name: <class 'str'>,\n                Optional  (str) rnh_status: <class 'str'>,\n                Optional  (str) bfd_enable: <class 'bool'>,\n                Optional  (str) vrf_id: <class 'str'>,\n                Optional  (str) preference: <class 'str'>,\n                Optional  (str) mroute_int: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_static-route_multicast_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_mcast.py#L617"}}, "show ipv6 static-route vrf {vrf}": {"nxos": {"class": "ShowIpv6StaticRoute", "doc": "Parser for:\n        show ipv6 static-route\n        show ipv6 static-route vrf <vrf>\n        show ipv6 static-route vrf all", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) resolved_tid: <class 'int'>,\n                  Optional  (str) bfd_enabled: <class 'bool'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_netmask: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) resolved_tid: <class 'int'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) bfd_enabled: <class 'bool'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) rnh_active: <class 'bool'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ipv6_static-route_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_static_routing.py#L260"}}, "show ipv6 vrf all interface": {"iosxr": {"class": "ShowIpv6VrfAllInterface", "doc": "Parser for show ipv6 vrf all interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  'int_status': <class 'str'>,\n  'vrf': <class 'str'>,\n  'vrf_id': <class 'str'>,\n  'enabled': <class 'bool'>,\n  'ipv6_enabled': <class 'bool'>,\n  Optional  (str) ipv6: {\n    Any  (str) *: {\n      Optional  (str) ipv6: <class 'str'>,\n      Optional  (str) ipv6_prefix_length: <class 'str'>,\n      Optional  (str) ipv6_status: <class 'str'>,\n      Optional  (str) ipv6_route_tag: <class 'str'>,\n      Optional  (str) ipv6_eui64: <class 'bool'>,\n      Optional  (str) ipv6_subnet: <class 'str'>,\n      },\n    Optional  (str) ipv6_link_local: <class 'str'>,\n    Optional  (str) ipv6_link_local_state: <class 'str'>,\n    Optional  (str) ipv6_group_address: <class 'str'>,\n    Optional  (str) ipv6_groups: <class 'list'>,\n    Optional  (str) ipv6_mtu: <class 'str'>,\n    Optional  (str) ipv6_mtu_available: <class 'str'>,\n    Optional  (str) icmp_redirects: <class 'str'>,\n    Optional  (str) icmp_unreachables: <class 'str'>,\n    Optional  (str) nd_dad: <class 'str'>,\n    Optional  (str) dad_attempts: <class 'str'>,\n    Optional  (str) nd_reachable_time: <class 'str'>,\n    Optional  (str) nd_cache_limit: <class 'str'>,\n    Optional  (str) nd_adv_retrans_int: <class 'str'>,\n    Optional  (str) nd_adv_duration: <class 'str'>,\n    Optional  (str) nd_router_adv: <class 'str'>,\n    Optional  (str) stateless_autoconfig: <class 'bool'>,\n    Optional  (str) out_access_list: <class 'str'>,\n    Optional  (str) in_access_list: <class 'str'>,\n    Optional  (str) in_common_access_list: <class 'str'>,\n    Optional  (str) table_id: <class 'str'>,\n    Optional  (str) complete_protocol_adj: <class 'str'>,\n    Optional  (str) complete_glean_adj: <class 'str'>,\n    Optional  (str) incomplete_protocol_adj: <class 'str'>,\n    Optional  (str) incomplete_glean_adj: <class 'str'>,\n    Optional  (str) dropped_protocol_req: <class 'str'>,\n    Optional  (str) dropped_glean_req: <class 'str'>,\n    },\n  },\n}", "uid": "show_ipv6_vrf_all_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L1572"}}, "show ipv6 vrf {vrf} interface": {"iosxr": {"class": "ShowIpv6VrfAllInterface", "doc": "Parser for show ipv6 vrf all interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  'int_status': <class 'str'>,\n  'vrf': <class 'str'>,\n  'vrf_id': <class 'str'>,\n  'enabled': <class 'bool'>,\n  'ipv6_enabled': <class 'bool'>,\n  Optional  (str) ipv6: {\n    Any  (str) *: {\n      Optional  (str) ipv6: <class 'str'>,\n      Optional  (str) ipv6_prefix_length: <class 'str'>,\n      Optional  (str) ipv6_status: <class 'str'>,\n      Optional  (str) ipv6_route_tag: <class 'str'>,\n      Optional  (str) ipv6_eui64: <class 'bool'>,\n      Optional  (str) ipv6_subnet: <class 'str'>,\n      },\n    Optional  (str) ipv6_link_local: <class 'str'>,\n    Optional  (str) ipv6_link_local_state: <class 'str'>,\n    Optional  (str) ipv6_group_address: <class 'str'>,\n    Optional  (str) ipv6_groups: <class 'list'>,\n    Optional  (str) ipv6_mtu: <class 'str'>,\n    Optional  (str) ipv6_mtu_available: <class 'str'>,\n    Optional  (str) icmp_redirects: <class 'str'>,\n    Optional  (str) icmp_unreachables: <class 'str'>,\n    Optional  (str) nd_dad: <class 'str'>,\n    Optional  (str) dad_attempts: <class 'str'>,\n    Optional  (str) nd_reachable_time: <class 'str'>,\n    Optional  (str) nd_cache_limit: <class 'str'>,\n    Optional  (str) nd_adv_retrans_int: <class 'str'>,\n    Optional  (str) nd_adv_duration: <class 'str'>,\n    Optional  (str) nd_router_adv: <class 'str'>,\n    Optional  (str) stateless_autoconfig: <class 'bool'>,\n    Optional  (str) out_access_list: <class 'str'>,\n    Optional  (str) in_access_list: <class 'str'>,\n    Optional  (str) in_common_access_list: <class 'str'>,\n    Optional  (str) table_id: <class 'str'>,\n    Optional  (str) complete_protocol_adj: <class 'str'>,\n    Optional  (str) complete_glean_adj: <class 'str'>,\n    Optional  (str) incomplete_protocol_adj: <class 'str'>,\n    Optional  (str) incomplete_glean_adj: <class 'str'>,\n    Optional  (str) dropped_protocol_req: <class 'str'>,\n    Optional  (str) dropped_glean_req: <class 'str'>,\n    },\n  },\n}", "uid": "show_ipv6_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L1572"}}, "show ipv6 vrf {vrf} interface {interface}": {"iosxr": {"class": "ShowIpv6VrfAllInterface", "doc": "Parser for show ipv6 vrf all interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'oper_status': <class 'str'>,\n  'int_status': <class 'str'>,\n  'vrf': <class 'str'>,\n  'vrf_id': <class 'str'>,\n  'enabled': <class 'bool'>,\n  'ipv6_enabled': <class 'bool'>,\n  Optional  (str) ipv6: {\n    Any  (str) *: {\n      Optional  (str) ipv6: <class 'str'>,\n      Optional  (str) ipv6_prefix_length: <class 'str'>,\n      Optional  (str) ipv6_status: <class 'str'>,\n      Optional  (str) ipv6_route_tag: <class 'str'>,\n      Optional  (str) ipv6_eui64: <class 'bool'>,\n      Optional  (str) ipv6_subnet: <class 'str'>,\n      },\n    Optional  (str) ipv6_link_local: <class 'str'>,\n    Optional  (str) ipv6_link_local_state: <class 'str'>,\n    Optional  (str) ipv6_group_address: <class 'str'>,\n    Optional  (str) ipv6_groups: <class 'list'>,\n    Optional  (str) ipv6_mtu: <class 'str'>,\n    Optional  (str) ipv6_mtu_available: <class 'str'>,\n    Optional  (str) icmp_redirects: <class 'str'>,\n    Optional  (str) icmp_unreachables: <class 'str'>,\n    Optional  (str) nd_dad: <class 'str'>,\n    Optional  (str) dad_attempts: <class 'str'>,\n    Optional  (str) nd_reachable_time: <class 'str'>,\n    Optional  (str) nd_cache_limit: <class 'str'>,\n    Optional  (str) nd_adv_retrans_int: <class 'str'>,\n    Optional  (str) nd_adv_duration: <class 'str'>,\n    Optional  (str) nd_router_adv: <class 'str'>,\n    Optional  (str) stateless_autoconfig: <class 'bool'>,\n    Optional  (str) out_access_list: <class 'str'>,\n    Optional  (str) in_access_list: <class 'str'>,\n    Optional  (str) in_common_access_list: <class 'str'>,\n    Optional  (str) table_id: <class 'str'>,\n    Optional  (str) complete_protocol_adj: <class 'str'>,\n    Optional  (str) complete_glean_adj: <class 'str'>,\n    Optional  (str) incomplete_protocol_adj: <class 'str'>,\n    Optional  (str) incomplete_glean_adj: <class 'str'>,\n    Optional  (str) dropped_protocol_req: <class 'str'>,\n    Optional  (str) dropped_glean_req: <class 'str'>,\n    },\n  },\n}", "uid": "show_ipv6_vrf_vrf_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L1572"}}, "show isis": {"iosxr": {"class": "ShowIsis", "doc": " Parser for commands:\n        * show isis\n        * show isis protocol\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'process_id': <class 'str'>,\n    'instance': <class 'str'>,\n    'vrf': {\n      Any  (str) *: {\n        'system_id': <class 'str'>,\n        'is_levels': <class 'str'>,\n        Optional  (str) manual_area_address: <class 'list'>,\n        Optional  (str) routing_area_address: <class 'list'>,\n        'non_stop_forwarding': <class 'str'>,\n        'most_recent_startup_mode': <class 'str'>,\n        'te_connection_status': <class 'str'>,\n        Optional  (str) srlb: {\n          'start': <class 'int'>,\n          'end': <class 'int'>,\n          },\n        Optional  (str) srgb: {\n          'start': <class 'int'>,\n          'end': <class 'int'>,\n          },\n        Optional  (str) interfaces: {\n          Any  (str) *: {\n            'running_state': <class 'str'>,\n            'configuration_state': <class 'str'>,\n            },\n          },\n        Optional  (str) topology: {\n          Any  (str) *: {\n            'vrf': {\n              Any  (str) *: {\n                'distance': <class 'int'>,\n                'adv_passive_only': <class 'bool'>,\n                'protocols_redistributed': <class 'bool'>,\n                'level': {\n                  Any  (str) *: {\n                    Optional  (str) generate_style: <class 'str'>,\n                    Optional  (str) accept_style: <class 'str'>,\n                    'metric': <class 'int'>,\n                    Optional  (str) ispf_status: <class 'str'>,\n                    },\n                  },\n                Optional  (str) redistributing: <class 'list'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L517"}, "nxos": {"class": "ShowIsis", "doc": "Parser for show isis", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'isis_process': <class 'str'>,\n    'instance_number': <class 'int'>,\n    'uuid': <class 'str'>,\n    'process_id': <class 'int'>,\n    'vrf': {\n      Any  (str) *: {\n        'vrf': <class 'str'>,\n        'system_id': <class 'str'>,\n        'is_type': <class 'str'>,\n        'sap': <class 'int'>,\n        'queue_handle': <class 'int'>,\n        'maximum_lsp_mtu': <class 'int'>,\n        'stateful_ha': <class 'str'>,\n        'graceful_restart': {\n          'enable': <class 'bool'>,\n          'state': <class 'str'>,\n          'last_gr_status': <class 'str'>,\n          },\n        'start_mode': <class 'str'>,\n        'bfd_ipv4': <class 'str'>,\n        'bfd_ipv6': <class 'str'>,\n        'topology_mode': <class 'str'>,\n        'metric_type': {\n          'advertise': <class 'list'>,\n          'accept': <class 'list'>,\n          },\n        'area_address': <class 'list'>,\n        'process': <class 'str'>,\n        'vrf_id': <class 'int'>,\n        'during_non_graceful_controlled_restart': <class 'str'>,\n        'resolution_of_l3_to_l2': <class 'str'>,\n        'sr_ipv4': <class 'str'>,\n        'sr_ipv6': <class 'str'>,\n        'supported_interfaces': <class 'list'>,\n        'topology': {\n          Any  (str) *: {\n            'address_family': {\n              Optional  (str) ipv4_unicast: {\n                'number_of_interface': <class 'int'>,\n                'distance': <class 'int'>,\n                },\n              Optional  (str) ipv6_unicast: {\n                'number_of_interface': <class 'int'>,\n                'distance': <class 'int'>,\n                },\n              },\n            },\n          },\n        'authentication': {\n          'level_1': {\n            Optional  (str) authentication_type: <class 'dict'>,\n            'auth_check': <class 'str'>,\n            },\n          'level_2': {\n            Optional  (str) authentication_type: <class 'dict'>,\n            'auth_check': <class 'str'>,\n            },\n          },\n        'l1_next_spf': <class 'str'>,\n        'l2_next_spf': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_isis", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L102"}}, "show isis adjacency": {"iosxr": {"class": "ShowIsisAdjacency", "doc": "Parser for show isis adjacency", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'isis': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'level': {\n          Any  (str) *: {\n            Optional  (str) total_adjacency_count: <class 'int'>,\n            Optional  (str) interfaces: {\n              Any  (str) *: {\n                'system_id': {\n                  Any  (str) *: {\n                    'interface': <class 'str'>,\n                    'snpa': <class 'str'>,\n                    'state': <class 'str'>,\n                    'hold': <class 'str'>,\n                    'changed': <class 'str'>,\n                    Optional  (str) nsf: <class 'str'>,\n                    Optional  (str) bfd: <class 'str'>,\n                    Optional  (str) ipv4_bfd: <class 'str'>,\n                    Optional  (str) ipv6_bfd: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_adjacency", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L189"}, "nxos": {"class": "ShowIsisAdjacency", "doc": "Parser for show isis adjacency", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'adjacencies': {\n              Any  (str) *: {\n                'neighbor_snpa': {\n                  Any  (str) *: {\n                    'level': {\n                      Any  (str) *: {\n                        'hold_time': <class 'str'>,\n                        'state': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_adjacency", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L1088"}}, "show isis adjacency vrf {vrf}": {"nxos": {"class": "ShowIsisAdjacency", "doc": "Parser for show isis adjacency", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'adjacencies': {\n              Any  (str) *: {\n                'neighbor_snpa': {\n                  Any  (str) *: {\n                    'level': {\n                      Any  (str) *: {\n                        'hold_time': <class 'str'>,\n                        'state': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_adjacency_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L1088"}}, "show isis database detail": {"iosxe": {"class": "ShowIsisDatabaseDetail", "doc": "Parser for show isis database detail", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'tag': {\n  Any  (str) *: {\n    'level': {\n      Any  (str) *: {\n        Any  (str) *: {\n          'lsp_sequence_num': <class 'str'>,\n          'lsp_checksum': <class 'str'>,\n          Optional  (str) local_router: <class 'bool'>,\n          'lsp_holdtime': <class 'str'>,\n          Optional  (str) lsp_rcvd: <class 'str'>,\n          'attach_bit': <class 'int'>,\n          'p_bit': <class 'int'>,\n          'overload_bit': <class 'int'>,\n          Optional  (str) area_address: <class 'str'>,\n          Optional  (str) router_id: <class 'str'>,\n          Optional  (str) nlpid: <class 'str'>,\n          Optional  (str) topology: {\n            Any  (str) *: {\n              'code': <class 'str'>,\n              },\n            },\n          Optional  (str) hostname: <class 'str'>,\n          Optional  (str) ip_address: <class 'str'>,\n          Optional  (str) ipv6_address: <class 'str'>,\n          Optional  (str) is_neighbor: {\n            Any  (str) *: {\n              'neighbor_id': <class 'str'>,\n              'metric': <class 'int'>,\n              },\n            },\n          Optional  (str) extended_is_neighbor: {\n            Any  (str) *: {\n              'neighbor_id': <class 'str'>,\n              'metric': <class 'int'>,\n              },\n            },\n          Optional  (str) mt_is_neighbor: {\n            Any  (str) *: {\n              'neighbor_id': <class 'str'>,\n              'metric': <class 'int'>,\n              },\n            },\n          Optional  (str) ipv4_internal_reachability: {\n            Any  (str) *: {\n              'ip_prefix': <class 'str'>,\n              'prefix_len': <class 'str'>,\n              'metric': <class 'int'>,\n              },\n            },\n          Optional  (str) mt_ipv6_reachability: {\n            Any  (str) *: {\n              'ip_prefix': <class 'str'>,\n              'prefix_len': <class 'str'>,\n              'metric': <class 'int'>,\n              },\n            },\n          Optional  (str) ipv6_reachability: {\n            Any  (str) *: {\n              'ip_prefix': <class 'str'>,\n              'prefix_len': <class 'str'>,\n              'metric': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_database_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_isis.py#L327"}, "iosxr": {"class": "ShowIsisDatabaseDetail", "doc": " Parser for commands:\n       * show isis database detail \n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'level': {\n      Any  (str) *: {\n        'lspid': {\n          Any  (str) *: {\n            'lsp': {\n              'seq_num': <class 'str'>,\n              Optional  (str) local_router: <class 'bool'>,\n              'checksum': <class 'str'>,\n              'holdtime': <class 'int'>,\n              Optional  (str) received: <class 'int'>,\n              'attach_bit': <class 'int'>,\n              'p_bit': <class 'int'>,\n              'overload_bit': <class 'int'>,\n              },\n            Optional  (str) router_id: <class 'str'>,\n            Optional  (str) router_cap: <class 'str'>,\n            Optional  (str) area_address: <class 'str'>,\n            Optional  (str) nlpid: <class 'list'>,\n            Optional  (str) ip_address: <class 'str'>,\n            Optional  (str) ipv6_address: <class 'str'>,\n            Optional  (str) hostname: <class 'str'>,\n            Optional  (str) topology: <class 'list'>,\n            Optional  (str) tlv: <class 'int'>,\n            Optional  (str) tlv_length: <class 'int'>,\n            Optional  (str) extended_ipv4_reachability: {\n              Any  (str) *: {\n                'ip_prefix': <class 'str'>,\n                'prefix_length': <class 'str'>,\n                'metric': <class 'int'>,\n                },\n              },\n            Optional  (str) ip_interarea: {\n              Any  (str) *: {\n                'address_family': {\n                  Any  (str) *: {\n                    'metric': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            Optional  (str) mt_is_neighbor: {\n              Any  (str) *: {\n                'mt_id': <class 'str'>,\n                'metric': <class 'int'>,\n                },\n              },\n            Optional  (str) is_neighbor: {\n              Any  (str) *: {\n                'metric': <class 'int'>,\n                },\n              },\n            Optional  (str) ip_neighbor: {\n              Any  (str) *: {\n                'ip_prefix': <class 'str'>,\n                'prefix_length': <class 'str'>,\n                'metric': <class 'int'>,\n                },\n              },\n            Optional  (str) es_neighbor: {\n              Any  (str) *: {\n                'metric': <class 'int'>,\n                },\n              },\n            Optional  (str) extended_is_neighbor: {\n              Any  (str) *: {\n                'metric': <class 'int'>,\n                },\n              },\n            Optional  (str) mt_ipv4_reachability: {\n              Any  (str) *: {\n                'ip_prefix': <class 'str'>,\n                Optional  (str) prefix_length: <class 'str'>,\n                'metric': <class 'str'>,\n                },\n              },\n            Optional  (str) ipv4_reachability: {\n              Any  (str) *: {\n                'ip_prefix': <class 'str'>,\n                Optional  (str) prefix_length: <class 'str'>,\n                'metric': <class 'str'>,\n                },\n              },\n            Optional  (str) mt_ipv6_reachability: {\n              Any  (str) *: {\n                'ip_prefix': <class 'str'>,\n                Optional  (str) prefix_length: <class 'str'>,\n                'metric': <class 'int'>,\n                },\n              },\n            Optional  (str) ipv6_reachability: {\n              Any  (str) *: {\n                'ip_prefix': <class 'str'>,\n                Optional  (str) prefix_length: <class 'str'>,\n                'metric': <class 'str'>,\n                },\n              },\n            Optional  (str) mt_entries: {\n              Any  (str) *: {\n                Optional  (str) attach_bit: <class 'int'>,\n                Optional  (str) p_bit: <class 'int'>,\n                Optional  (str) overload_bit: <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) total_lsp_count: <class 'int'>,\n        Optional  (str) local_lsp_count: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_database_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L3534"}, "nxos": {"class": "ShowIsisDatabaseDetail", "doc": "Parser for show isis database detail", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'level_db': {\n          Any  (str) *: {\n            Any  (str) *: {\n              'lsp_id': <class 'str'>,\n              'lsp_status': <class 'str'>,\n              'sequence': <class 'str'>,\n              'checksum': <class 'str'>,\n              'lifetime': <class 'int'>,\n              'attach_bit': <class 'int'>,\n              'p_bit': <class 'int'>,\n              'overload_bit': <class 'int'>,\n              't_bit': <class 'int'>,\n              'instance': <class 'str'>,\n              Optional  (str) area_address: <class 'str'>,\n              Optional  (str) nlpid: <class 'str'>,\n              Optional  (str) hostname: <class 'str'>,\n              Optional  (str) router_id: <class 'str'>,\n              Optional  (str) length: <class 'int'>,\n              Optional  (str) mt_entries: {\n                Any  (str) *: {\n                  'att': <class 'int'>,\n                  'ol': <class 'int'>,\n                  },\n                },\n              Optional  (str) extended_is_neighbor: {\n                Any  (str) *: {\n                  'neighbor_id': <class 'str'>,\n                  'metric': <class 'int'>,\n                  },\n                },\n              Optional  (str) mt_is_neighbor: {\n                Any  (str) *: {\n                  'neighbor_id': <class 'str'>,\n                  'metric': <class 'int'>,\n                  'topo_id': <class 'int'>,\n                  },\n                },\n              Optional  (str) ip_address: <class 'str'>,\n              Optional  (str) extended_ip: {\n                Any  (str) *: {\n                  'metric': <class 'int'>,\n                  'up_down': <class 'str'>,\n                  Optional  (str) sub_tlv_length: <class 'int'>,\n                  Optional  (str) sub_tlv_type: <class 'int'>,\n                  },\n                },\n              Optional  (str) ipv6_address: <class 'str'>,\n              Optional  (str) mt_ipv6_prefix: {\n                Any  (str) *: {\n                  'metric': <class 'int'>,\n                  'topo_id': <class 'int'>,\n                  'up_down': <class 'str'>,\n                  'ext_origin': <class 'str'>,\n                  Optional  (str) sub_tlv_length: <class 'int'>,\n                  Optional  (str) sub_tlv_type: <class 'int'>,\n                  },\n                },\n              'digest_offset': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_database_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L1419"}}, "show isis database detail vrf {vrf}": {"nxos": {"class": "ShowIsisDatabaseDetail", "doc": "Parser for show isis database detail", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'level_db': {\n          Any  (str) *: {\n            Any  (str) *: {\n              'lsp_id': <class 'str'>,\n              'lsp_status': <class 'str'>,\n              'sequence': <class 'str'>,\n              'checksum': <class 'str'>,\n              'lifetime': <class 'int'>,\n              'attach_bit': <class 'int'>,\n              'p_bit': <class 'int'>,\n              'overload_bit': <class 'int'>,\n              't_bit': <class 'int'>,\n              'instance': <class 'str'>,\n              Optional  (str) area_address: <class 'str'>,\n              Optional  (str) nlpid: <class 'str'>,\n              Optional  (str) hostname: <class 'str'>,\n              Optional  (str) router_id: <class 'str'>,\n              Optional  (str) length: <class 'int'>,\n              Optional  (str) mt_entries: {\n                Any  (str) *: {\n                  'att': <class 'int'>,\n                  'ol': <class 'int'>,\n                  },\n                },\n              Optional  (str) extended_is_neighbor: {\n                Any  (str) *: {\n                  'neighbor_id': <class 'str'>,\n                  'metric': <class 'int'>,\n                  },\n                },\n              Optional  (str) mt_is_neighbor: {\n                Any  (str) *: {\n                  'neighbor_id': <class 'str'>,\n                  'metric': <class 'int'>,\n                  'topo_id': <class 'int'>,\n                  },\n                },\n              Optional  (str) ip_address: <class 'str'>,\n              Optional  (str) extended_ip: {\n                Any  (str) *: {\n                  'metric': <class 'int'>,\n                  'up_down': <class 'str'>,\n                  Optional  (str) sub_tlv_length: <class 'int'>,\n                  Optional  (str) sub_tlv_type: <class 'int'>,\n                  },\n                },\n              Optional  (str) ipv6_address: <class 'str'>,\n              Optional  (str) mt_ipv6_prefix: {\n                Any  (str) *: {\n                  'metric': <class 'int'>,\n                  'topo_id': <class 'int'>,\n                  'up_down': <class 'str'>,\n                  'ext_origin': <class 'str'>,\n                  Optional  (str) sub_tlv_length: <class 'int'>,\n                  Optional  (str) sub_tlv_type: <class 'int'>,\n                  },\n                },\n              'digest_offset': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_database_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L1419"}}, "show isis fast-reroute summary": {"iosxr": {"class": "ShowIsisFastRerouteSummary", "doc": " 'Parser for 'show isis fast-reroute summary' ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'topology': {\n      Any  (str) *: {\n        'level': {\n          Any  (str) *: {\n            Any  (str) *: {\n              'critical_priority': <class 'int'>,\n              'high_priority': <class 'int'>,\n              'medium_priority': <class 'int'>,\n              'low_priority': <class 'int'>,\n              'total': <class 'int'>,\n              },\n            'protection_coverage': {\n              'critical_priority': <class 'str'>,\n              'high_priority': <class 'str'>,\n              'medium_priority': <class 'str'>,\n              'low_priority': <class 'str'>,\n              'total': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_fast-reroute_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L70"}}, "show isis hostname": {"iosxe": {"class": "ShowIsisHostname", "doc": "Parser for show isis hostname", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'tag': {\n  Any  (str) *: {\n    Optional  (str) hostname_db: {\n      'hostname': {\n        Any  (str) *: {\n          'hostname': <class 'str'>,\n          Optional  (str) level: <class 'int'>,\n          Optional  (str) local_router: <class 'bool'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_hostname", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_isis.py#L109"}, "iosxr": {"class": "ShowIsisHostname", "doc": " Parser for commands:\n        * 'show isis hostname'\n        * 'show isis instance {instance} hostname'\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'isis': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'level': {\n          Any  (str) *: {\n            'system_id': {\n              Any  (str) *: {\n                'dynamic_hostname': <class 'str'>,\n                Optional  (str) local_router: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_hostname", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L949"}, "nxos": {"class": "ShowIsisHostname", "doc": "Parser for show isis hostname", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'hostname_db': {\n          'hostname': {\n            Any  (str) *: {\n              'hostname': <class 'str'>,\n              'level': <class 'list'>,\n              Optional  (str) local_router: <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_hostname", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L1181"}}, "show isis hostname detail": {"nxos": {"class": "ShowIsisHostnameDetail", "doc": "Parser for \n            * show isis hostname detail\n            * show isis hostname detail vrf {vrf}", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'hostname_db': {\n          'hostname': {\n            Any  (str) *: {\n              'hostname': <class 'str'>,\n              'level': <class 'list'>,\n              Optional  (str) local_router: <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_hostname_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L1274"}}, "show isis hostname detail vrf {vrf}": {"nxos": {"class": "ShowIsisHostnameDetail", "doc": "Parser for \n            * show isis hostname detail\n            * show isis hostname detail vrf {vrf}", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'hostname_db': {\n          'hostname': {\n            Any  (str) *: {\n              'hostname': <class 'str'>,\n              'level': <class 'list'>,\n              Optional  (str) local_router: <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_hostname_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L1274"}}, "show isis hostname vrf {vrf}": {"nxos": {"class": "ShowIsisHostname", "doc": "Parser for show isis hostname", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'hostname_db': {\n          'hostname': {\n            Any  (str) *: {\n              'hostname': <class 'str'>,\n              'level': <class 'list'>,\n              Optional  (str) local_router: <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_hostname_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L1181"}}, "show isis instance {instance} hostname": {"iosxr": {"class": "ShowIsisHostname", "doc": " Parser for commands:\n        * 'show isis hostname'\n        * 'show isis instance {instance} hostname'\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'isis': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'level': {\n          Any  (str) *: {\n            'system_id': {\n              Any  (str) *: {\n                'dynamic_hostname': <class 'str'>,\n                Optional  (str) local_router: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_instance_instance_hostname", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L949"}}, "show isis interface": {"iosxr": {"class": "ShowIsisInterface", "doc": " Parser for commands:\n        * show isis interface\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) adjacency_formation: <class 'str'>,\n        Optional  (str) prefix_advertisement: <class 'str'>,\n        Optional  (str) ipv6_bfd: <class 'bool'>,\n        Optional  (str) ipv4_bfd: <class 'bool'>,\n        Optional  (str) bfd_min_interval: <class 'int'>,\n        Optional  (str) bfd_multiplier: <class 'int'>,\n        Optional  (str) bandwidth: <class 'int'>,\n        Optional  (str) circuit_type: <class 'str'>,\n        Optional  (str) media_type: <class 'str'>,\n        Optional  (str) circuit_number: <class 'int'>,\n        Optional  (str) rsi_srlg: <class 'str'>,\n        Optional  (str) next_p2p_iih_in: <class 'int'>,\n        Optional  (str) extended_circuit_number: <class 'int'>,\n        Optional  (str) lsp_rexmit_queue_size: <class 'int'>,\n        Optional  (str) lsp: {\n          'transmit_timer_expires_ms': <class 'int'>,\n          'transmission_state': <class 'str'>,\n          'lsp_transmit_back_to_back_limit': <class 'int'>,\n          'lsp_transmit_back_to_back_limit_window_msec': <class 'int'>,\n          },\n        Optional  (str) underlying_interface: {\n          Any  (str) *: {\n            'index': <class 'str'>,\n            },\n          },\n        Optional  (str) level: {\n          Any  (str) *: {\n            'adjacency_count': <class 'int'>,\n            Optional  (str) lsp_pacing_interval_ms: <class 'int'>,\n            'psnp_entry_queue_size': <class 'int'>,\n            Optional  (str) next_lan_iih_sec: <class 'int'>,\n            Optional  (str) lan_id: <class 'str'>,\n            Optional  (str) hello_interval_sec: <class 'int'>,\n            Optional  (str) hello_multiplier: <class 'int'>,\n            Optional  (str) priority: {\n              'local': <class 'str'>,\n              'dis': <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) clns_io: {\n          'protocol_state': <class 'str'>,\n          'mtu': <class 'int'>,\n          Optional  (str) snpa: <class 'str'>,\n          Optional  (str) layer2_mcast_groups_membership: {\n            Optional  (str) all_level_1_iss: <class 'str'>,\n            Optional  (str) all_level_2_iss: <class 'str'>,\n            },\n          },\n        Optional  (str) topology: {\n          Any  (str) *: {\n            'adjacency_formation': <class 'str'>,\n            'state': <class 'str'>,\n            'prefix_advertisement': <class 'str'>,\n            Optional  (str) protocol_state: <class 'str'>,\n            'metric': {\n              'level': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            'weight': {\n              'level': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            'mpls': {\n              'mpls_max_label_stack': <class 'str'>,\n              'ldp_sync': {\n                'level': {\n                  Any  (str) *: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) frr: {\n              'level': {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  'type': <class 'str'>,\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) tie_breaker: <class 'str'>,\n                    Optional  (str) line_card_disjoint: <class 'str'>,\n                    Optional  (str) lowest_backup_metric: <class 'str'>,\n                    Optional  (str) node_protecting: <class 'str'>,\n                    Optional  (str) primary_path: <class 'str'>,\n                    Optional  (str) link_protecting: <class 'str'>,\n                    Optional  (str) srlg_disjoint: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'forwarding_address': <class 'list'>,\n            'global_prefix': <class 'list'>,\n            Optional  (str) protocol_state: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L2487"}, "nxos": {"class": "ShowIsisInterface", "doc": "Parser for show isis interface", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'status': <class 'str'>,\n            'ipv4': <class 'str'>,\n            'ipv4_subnet': <class 'str'>,\n            'ipv6': {\n              Any  (str) *: {\n                'state': <class 'str'>,\n                },\n              },\n            'ipv6_subnet': <class 'str'>,\n            'ipv6_link_local_address': <class 'str'>,\n            'authentication': {\n              Any  (str) *: {\n                Optional  (str) authentication_type: {\n                  },\n                'auth_check': <class 'str'>,\n                },\n              },\n            'index': <class 'str'>,\n            'local_circuit_id': <class 'str'>,\n            'circuit_type': <class 'str'>,\n            'bfd_ipv4': <class 'str'>,\n            'bfd_ipv6': <class 'str'>,\n            'mtr': <class 'str'>,\n            Optional  (str) passive: <class 'str'>,\n            Optional  (str) mtu: <class 'int'>,\n            Optional  (str) lsp_interval_ms: <class 'int'>,\n            'levels': {\n              Any  (str) *: {\n                Optional  (str) metric: <class 'str'>,\n                Optional  (str) designated_is: <class 'str'>,\n                Optional  (str) metric_0: <class 'str'>,\n                Optional  (str) metric_2: <class 'str'>,\n                Optional  (str) csnp: <class 'str'>,\n                Optional  (str) next_csnp: <class 'str'>,\n                Optional  (str) hello: <class 'str'>,\n                Optional  (str) multi: <class 'str'>,\n                Optional  (str) next_iih: <class 'str'>,\n                Optional  (str) adjs: <class 'str'>,\n                Optional  (str) adjs_up: <class 'str'>,\n                Optional  (str) pri: <class 'str'>,\n                Optional  (str) circuit_id: <class 'str'>,\n                Optional  (str) since: <class 'str'>,\n                },\n              },\n            'topologies': {\n              Any  (str) *: {\n                'level': {\n                  Any  (str) *: {\n                    'metric': <class 'str'>,\n                    'metric_cfg': <class 'str'>,\n                    'fwdng': <class 'str'>,\n                    'ipv4_mt': <class 'str'>,\n                    'ipv4_cfg': <class 'str'>,\n                    'ipv6_mt': <class 'str'>,\n                    'ipv6_cfg': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L594"}}, "show isis interface vrf {vrf}": {"nxos": {"class": "ShowIsisInterface", "doc": "Parser for show isis interface", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'status': <class 'str'>,\n            'ipv4': <class 'str'>,\n            'ipv4_subnet': <class 'str'>,\n            'ipv6': {\n              Any  (str) *: {\n                'state': <class 'str'>,\n                },\n              },\n            'ipv6_subnet': <class 'str'>,\n            'ipv6_link_local_address': <class 'str'>,\n            'authentication': {\n              Any  (str) *: {\n                Optional  (str) authentication_type: {\n                  },\n                'auth_check': <class 'str'>,\n                },\n              },\n            'index': <class 'str'>,\n            'local_circuit_id': <class 'str'>,\n            'circuit_type': <class 'str'>,\n            'bfd_ipv4': <class 'str'>,\n            'bfd_ipv6': <class 'str'>,\n            'mtr': <class 'str'>,\n            Optional  (str) passive: <class 'str'>,\n            Optional  (str) mtu: <class 'int'>,\n            Optional  (str) lsp_interval_ms: <class 'int'>,\n            'levels': {\n              Any  (str) *: {\n                Optional  (str) metric: <class 'str'>,\n                Optional  (str) designated_is: <class 'str'>,\n                Optional  (str) metric_0: <class 'str'>,\n                Optional  (str) metric_2: <class 'str'>,\n                Optional  (str) csnp: <class 'str'>,\n                Optional  (str) next_csnp: <class 'str'>,\n                Optional  (str) hello: <class 'str'>,\n                Optional  (str) multi: <class 'str'>,\n                Optional  (str) next_iih: <class 'str'>,\n                Optional  (str) adjs: <class 'str'>,\n                Optional  (str) adjs_up: <class 'str'>,\n                Optional  (str) pri: <class 'str'>,\n                Optional  (str) circuit_id: <class 'str'>,\n                Optional  (str) since: <class 'str'>,\n                },\n              },\n            'topologies': {\n              Any  (str) *: {\n                'level': {\n                  Any  (str) *: {\n                    'metric': <class 'str'>,\n                    'metric_cfg': <class 'str'>,\n                    'fwdng': <class 'str'>,\n                    'ipv4_mt': <class 'str'>,\n                    'ipv4_cfg': <class 'str'>,\n                    'ipv6_mt': <class 'str'>,\n                    'ipv6_cfg': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_interface_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L594"}}, "show isis interface {interface}": {"iosxr": {"class": "ShowIsisInterface", "doc": " Parser for commands:\n        * show isis interface\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        Optional  (str) adjacency_formation: <class 'str'>,\n        Optional  (str) prefix_advertisement: <class 'str'>,\n        Optional  (str) ipv6_bfd: <class 'bool'>,\n        Optional  (str) ipv4_bfd: <class 'bool'>,\n        Optional  (str) bfd_min_interval: <class 'int'>,\n        Optional  (str) bfd_multiplier: <class 'int'>,\n        Optional  (str) bandwidth: <class 'int'>,\n        Optional  (str) circuit_type: <class 'str'>,\n        Optional  (str) media_type: <class 'str'>,\n        Optional  (str) circuit_number: <class 'int'>,\n        Optional  (str) rsi_srlg: <class 'str'>,\n        Optional  (str) next_p2p_iih_in: <class 'int'>,\n        Optional  (str) extended_circuit_number: <class 'int'>,\n        Optional  (str) lsp_rexmit_queue_size: <class 'int'>,\n        Optional  (str) lsp: {\n          'transmit_timer_expires_ms': <class 'int'>,\n          'transmission_state': <class 'str'>,\n          'lsp_transmit_back_to_back_limit': <class 'int'>,\n          'lsp_transmit_back_to_back_limit_window_msec': <class 'int'>,\n          },\n        Optional  (str) underlying_interface: {\n          Any  (str) *: {\n            'index': <class 'str'>,\n            },\n          },\n        Optional  (str) level: {\n          Any  (str) *: {\n            'adjacency_count': <class 'int'>,\n            Optional  (str) lsp_pacing_interval_ms: <class 'int'>,\n            'psnp_entry_queue_size': <class 'int'>,\n            Optional  (str) next_lan_iih_sec: <class 'int'>,\n            Optional  (str) lan_id: <class 'str'>,\n            Optional  (str) hello_interval_sec: <class 'int'>,\n            Optional  (str) hello_multiplier: <class 'int'>,\n            Optional  (str) priority: {\n              'local': <class 'str'>,\n              'dis': <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) clns_io: {\n          'protocol_state': <class 'str'>,\n          'mtu': <class 'int'>,\n          Optional  (str) snpa: <class 'str'>,\n          Optional  (str) layer2_mcast_groups_membership: {\n            Optional  (str) all_level_1_iss: <class 'str'>,\n            Optional  (str) all_level_2_iss: <class 'str'>,\n            },\n          },\n        Optional  (str) topology: {\n          Any  (str) *: {\n            'adjacency_formation': <class 'str'>,\n            'state': <class 'str'>,\n            'prefix_advertisement': <class 'str'>,\n            Optional  (str) protocol_state: <class 'str'>,\n            'metric': {\n              'level': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            'weight': {\n              'level': {\n                Any  (str) *: <class 'int'>,\n                },\n              },\n            'mpls': {\n              'mpls_max_label_stack': <class 'str'>,\n              'ldp_sync': {\n                'level': {\n                  Any  (str) *: <class 'str'>,\n                  },\n                },\n              },\n            Optional  (str) frr: {\n              'level': {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  'type': <class 'str'>,\n                  Optional  (Any) Any  (str) *: {\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) tie_breaker: <class 'str'>,\n                    Optional  (str) line_card_disjoint: <class 'str'>,\n                    Optional  (str) lowest_backup_metric: <class 'str'>,\n                    Optional  (str) node_protecting: <class 'str'>,\n                    Optional  (str) primary_path: <class 'str'>,\n                    Optional  (str) link_protecting: <class 'str'>,\n                    Optional  (str) srlg_disjoint: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) address_family: {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'forwarding_address': <class 'list'>,\n            'global_prefix': <class 'list'>,\n            Optional  (str) protocol_state: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L2487"}}, "show isis lsp-log": {"iosxe": {"class": "ShowIsisLspLog", "doc": "Parser for show isis lsp-log", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'tag': {\n  Any  (str) *: {\n    'lsp_log': {\n      'level': {\n        Any  (str) *: {\n          'index': {\n            Any  (str) *: {\n              'triggers': <class 'str'>,\n              'when': <class 'str'>,\n              'count': <class 'int'>,\n              Optional  (str) interface: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_lsp-log", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_isis.py#L185"}, "iosxr": {"class": "ShowIsisLspLog", "doc": " Parser for commands:\n        * show isis lsp-log\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'lsp_log': {\n      Any  (str) *: {\n        'level': <class 'int'>,\n        'received_timestamp': <class 'str'>,\n        'count': <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) triggers: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_lsp-log", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L2276"}}, "show isis neighbors": {"iosxe": {"class": "ShowIsisNeighbors", "doc": "Parser for show isis neighbors", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'isis': {\n  Any  (str) *: {\n    Optional  (str) neighbors: {\n      Any  (str) *: {\n        'type': {\n          Any  (str) *: {\n            'circuit_id': <class 'str'>,\n            'holdtime': <class 'str'>,\n            'interface': <class 'str'>,\n            'ip_address': <class 'str'>,\n            'state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_isis.py#L42"}, "iosxr": {"class": "ShowIsisNeighbors", "doc": "Parser for show isis neighbors", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'isis': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        Optional  (str) total_neighbor_count: <class 'int'>,\n        Optional  (str) interfaces: {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                'snpa': <class 'str'>,\n                'state': <class 'str'>,\n                'holdtime': <class 'str'>,\n                'type': <class 'str'>,\n                Optional  (str) ietf_nsf: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L322"}}, "show isis private all": {"iosxr": {"class": "ShowIsisPrivateAll", "doc": " Parser for commands:\n       * show isis private all\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'cfg_refcount': <class 'int'>,\n    'isis_is_level': <class 'str'>,\n    'ignore_cksum_errs': <class 'bool'>,\n    'cfg_log_drops': <class 'bool'>,\n    'nsf_cfg_purgetime': <class 'int'>,\n    'nsf2_t1_delay': <class 'int'>,\n    'nsf2_t1_max_num_exp': <class 'int'>,\n    'nsf_cfg_interval': <class 'int'>,\n    'address_family_table': {\n      Any  (str) *: {\n        'ref_count': <class 'int'>,\n        },\n      },\n    'link_topology_table': {\n      Any  (str) *: {\n        'ref_count': <class 'int'>,\n        'index': <class 'int'>,\n        'is_running': <class 'bool'>,\n        'list_linkage': {\n          'next': <class 'str'>,\n          'previous': <class 'str'>,\n          },\n        },\n      },\n    'topology_table': {\n      Any  (str) *: {\n        'configuration': {\n          'check_adjacencies': <class 'str'>,\n          'attached_bit': <class 'str'>,\n          'max_paths': <class 'str'>,\n          'is_mcast_intact_set': <class 'bool'>,\n          'mcast_intact': <class 'bool'>,\n          'is_igp_intact_set': <class 'bool'>,\n          'igp_intact': <class 'bool'>,\n          'is_first_hop_source_set': <class 'bool'>,\n          'first_hop_source': <class 'bool'>,\n          },\n        'index': <class 'int'>,\n        'ref_count': <class 'int'>,\n        'ltopo_index': <class 'int'>,\n        'list_linkage': {\n          'next': <class 'str'>,\n          'previous': <class 'str'>,\n          },\n        },\n      },\n    'area_configuration_table': {\n      Any  (str) *: {\n        'is_lsp_gen_interval_set': <class 'bool'>,\n        'lsp_gen_interval': {\n          'initial_wait_msecs': <class 'int'>,\n          'secondary_wait_msecs': <class 'int'>,\n          'maximum_wait_msecs': <class 'int'>,\n          },\n        'is_lsp_arrivaltime_parameter_set': <class 'bool'>,\n        'lsp_arrivaltime_parameter': {\n          'backoff_cfg': {\n            'initial_wait_msecs': <class 'int'>,\n            'secondary_wait_msecs': <class 'int'>,\n            'maximum_wait_msecs': <class 'int'>,\n            },\n          'max_count': <class 'int'>,\n          'max_window_size_msec': <class 'int'>,\n          },\n        'is_lsp_checksum_interval_set': <class 'bool'>,\n        'lsp_checksum_interval_secs': <class 'int'>,\n        'is_lsp_refresh_interval_set': <class 'bool'>,\n        'lsp_refresh_interval_secs': <class 'int'>,\n        'is_lsp_lifetime_set': <class 'bool'>,\n        'lsp_lifetime_secs': <class 'int'>,\n        'is_lsp_mtu_set': <class 'bool'>,\n        'lsp_mtu': <class 'int'>,\n        'is_auth_cfg_ctx_set': <class 'bool'>,\n        'auth_cfg_ctx': {\n          'alg': <class 'str'>,\n          'failure_mode': <class 'str'>,\n          'password': <class 'str'>,\n          'accept_password': <class 'str'>,\n          },\n        'is_snp_authentication_options_set': <class 'bool'>,\n        'snp_authentication_options': <class 'int'>,\n        'is_overload_set': <class 'bool'>,\n        'overload_mode': <class 'int'>,\n        'overload_on_startup_secs': <class 'int'>,\n        'per_topo': {\n          Any  (str) *: {\n            'is_metric_style_set': <class 'bool'>,\n            'generate_metric_mask': <class 'int'>,\n            'accept_metric_mask': <class 'int'>,\n            'summary_table': <class 'str'>,\n            'metric': Any  (str) *,\n            'is_spf_interval_set': <class 'bool'>,\n            'spf_interval': {\n              'initial_wait_msecs': <class 'int'>,\n              'secondary_wait_msecs': <class 'int'>,\n              'maximum_wait_msecs': <class 'int'>,\n              },\n            'spf_periodic_interval_secs': <class 'str'>,\n            'ispf_state': <class 'str'>,\n            'max_redist_prefixes': <class 'str'>,\n            'topo_index': {\n              Any  (str) *: {\n                'is_spf_prefix_priority_acl_names_set': <class 'bool'>,\n                'spf_prefix_priority_acl_names': <class 'str'>,\n                'is_spf_prefix_priority_tags_set': <class 'bool'>,\n                'spf_prefix_priority_tags': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    'area_tables': {\n      Any  (str) *: {\n        'index': <class 'int'>,\n        'nsf_ietf_csnp_rcvd': <class 'bool'>,\n        'overload_bit_on_startup_timer': <class 'str'>,\n        'overload_bit_trigger_expired': <class 'bool'>,\n        Optional  (str) overload_bit_forced_reasons: <class 'str'>,\n        'upd_periodic_timer': <class 'str'>,\n        'checksum_ptimer': {\n          'tv_sec': <class 'int'>,\n          'tv_nsec': <class 'int'>,\n          },\n        'idb_list': {\n          'sll_head': <class 'str'>,\n          'sll_tail': <class 'str'>,\n          'sll_count': <class 'int'>,\n          'sll_maximum': <class 'int'>,\n          },\n        'list_linkage': {\n          'next': <class 'str'>,\n          'previous': <class 'str'>,\n          },\n        'adj_db': <class 'str'>,\n        'adj_log': <class 'str'>,\n        'uni_db_log': <class 'str'>,\n        'upd_db': {\n          'area': <class 'str'>,\n          'log': <class 'str'>,\n          'name': <class 'str'>,\n          'lock': {\n            'description': <class 'str'>,\n            'rwlock': {\n              'active': <class 'int'>,\n              'spare': <class 'str'>,\n              'blockedwriters': <class 'int'>,\n              'blockedreaders': <class 'int'>,\n              'heavy': <class 'int'>,\n              'owner': <class 'int'>,\n              Optional  (str) lock: {\n                'count': <class 'int'>,\n                'owner': <class 'int'>,\n                },\n              },\n            },\n          'tree': {\n            'root': <class 'str'>,\n            'key_size': <class 'int'>,\n            'size': <class 'int'>,\n            'node_alloc_data': <class 'str'>,\n            'node_alloc_fn': <class 'str'>,\n            'node_free_fn': <class 'str'>,\n            'data_to_str_fn': <class 'str'>,\n            },\n          'tree_node_chunks': {\n            'name': <class 'str'>,\n            'size': <class 'int'>,\n            'flags': <class 'int'>,\n            'chunk': <class 'str'>,\n            'num_allocated_elements': <class 'int'>,\n            },\n          },\n        'dec_db': {\n          'area': <class 'str'>,\n          'log': <class 'str'>,\n          'name': <class 'str'>,\n          'lock': {\n            'description': <class 'str'>,\n            'rwlock': {\n              'active': <class 'int'>,\n              'spare': <class 'str'>,\n              'blockedwriters': <class 'int'>,\n              'blockedreaders': <class 'int'>,\n              'heavy': <class 'int'>,\n              'lock': {\n                'count': <class 'int'>,\n                'owner': <class 'int'>,\n                },\n              'owner': <class 'int'>,\n              },\n            },\n          'tree': {\n            'root': <class 'str'>,\n            'key_size': <class 'int'>,\n            'size': <class 'int'>,\n            'node_alloc_data': <class 'str'>,\n            'node_alloc_fn': <class 'str'>,\n            'node_free_fn': <class 'str'>,\n            'data_to_str_fn': <class 'str'>,\n            },\n          'tree_node_chunks': {\n            'name': <class 'str'>,\n            'size': <class 'int'>,\n            'flags': <class 'int'>,\n            'chunk': <class 'str'>,\n            'num_allocated_elements': <class 'int'>,\n            },\n          },\n        'node_db': {\n          'node_created_fn': <class 'str'>,\n          'node_destroyed_fn': <class 'str'>,\n          'node_ltopo_created_fn': <class 'str'>,\n          'node_ltopo_destroyed_fn': <class 'str'>,\n          'node_topo_created_fn': <class 'str'>,\n          'node_topo_destroyed_fn': <class 'str'>,\n          'callback_context': <class 'str'>,\n          'root_element': <class 'str'>,\n          'num_nodes': <class 'int'>,\n          },\n        'stats': {\n          'ta_lsp_build': <class 'int'>,\n          'ta_lsp_refresh': <class 'int'>,\n          },\n        'trap_stats': {\n          'corr_lsps': <class 'int'>,\n          'auth_type_fails': <class 'int'>,\n          'auth_fails': <class 'int'>,\n          'lsp_dbase_oloads': <class 'int'>,\n          'man_addr_drop_from_areas': <class 'int'>,\n          'attmpt_to_ex_max_seq_nums': <class 'int'>,\n          'seq_num_skips': <class 'int'>,\n          'own_lsp_purges': <class 'int'>,\n          'id_field_len_mismatches': <class 'int'>,\n          'lsp_errors': <class 'int'>,\n          },\n        'per_ltopo': {\n          Any  (str) *: {\n            'area': <class 'str'>,\n            'ltopo_index': <class 'str'>,\n            'spf_periodic_timer': <class 'str'>,\n            'reachable_area_addresses': <class 'str'>,\n            'stats': {\n              'num_spfs': <class 'int'>,\n              'num_ispfs': <class 'int'>,\n              'num_nhcs': <class 'int'>,\n              'num_prcs': <class 'int'>,\n              'num_periodic_spfs': <class 'int'>,\n              },\n            'paths': {\n              'classification': <class 'int'>,\n              'is_sorted': <class 'bool'>,\n              'array': <class 'str'>,\n              'num_elements': <class 'int'>,\n              },\n            'unreached': {\n              'classification': <class 'int'>,\n              'is_sorted': <class 'bool'>,\n              'array': <class 'str'>,\n              'num_elements': <class 'int'>,\n              },\n            'firsthopchanged': {\n              'classification': <class 'int'>,\n              'is_sorted': <class 'bool'>,\n              'array': <class 'str'>,\n              'num_elements': <class 'int'>,\n              },\n            'linkchanged': {\n              'classification': <class 'int'>,\n              'is_sorted': <class 'bool'>,\n              'array': <class 'str'>,\n              'num_elements': <class 'int'>,\n              },\n            'roca_event': {\n              'log': <class 'str'>,\n              'class': <class 'str'>,\n              'mutex': {\n                'mutex': {\n                  'count': <class 'int'>,\n                  'owner': <class 'int'>,\n                  },\n                'description': <class 'str'>,\n                },\n              'timer': {\n                'timer': <class 'str'>,\n                'num_execution_events': <class 'int'>,\n                'is_pending': <class 'bool'>,\n                'is_executing': <class 'bool'>,\n                'postponed_schedule_time': {\n                  'tv_sec': <class 'int'>,\n                  'tv_nsec': <class 'int'>,\n                  },\n                'last_execution_time': {\n                  'tv_sec': <class 'int'>,\n                  'tv_nsec': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        'per_topo': {\n          Any  (str) *: {\n            'area': <class 'str'>,\n            'topo_index': <class 'str'>,\n            'te': {\n              'link_holddown_timer': <class 'str'>,\n              'purge_link_info_timer': <class 'str'>,\n              'log': <class 'str'>,\n              'tunnel_table': <class 'str'>,\n              'info_from_te': <class 'str'>,\n              'pce_info_from_te': <class 'str'>,\n              'is_pce_ready': <class 'bool'>,\n              },\n            'overloaded_count': <class 'int'>,\n            'overload_bit_trigger_running': <class 'bool'>,\n            'bgp_converged_notify_h': <class 'str'>,\n            'added_first_hops': <class 'str'>,\n            'deleted_first_hops': <class 'str'>,\n            'postponed_added_first_hops': <class 'str'>,\n            'postponed_deleted_first_hops': <class 'str'>,\n            'prefixeschanged': <class 'str'>,\n            'nodechanged': <class 'str'>,\n            'prefix_priority_acl': {\n              'critical': <class 'str'>,\n              'high': <class 'str'>,\n              'medium': <class 'str'>,\n              'low': <class 'str'>,\n              },\n            'num_redist_prefixes': <class 'int'>,\n            'max_redist_prefixes_exceeded': <class 'bool'>,\n            'max_redist_prefixes_alarm_on': <class 'bool'>,\n            'has_prefix_policy_changed': <class 'bool'>,\n            },\n          },\n        'per_af': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            },\n          },\n        },\n      },\n    Optional  (str) interfaces: {\n      Any  (str) *: {\n        'im_handle': <class 'str'>,\n        'name': <class 'str'>,\n        'ref_count': <class 'int'>,\n        'index': <class 'int'>,\n        'snmp_index': <class 'int'>,\n        'chkpt': {\n          'objid': <class 'str'>,\n          },\n        Optional  (str) ltopos_ready_active: <class 'str'>,\n        'nsf_waiting_for_running': <class 'bool'>,\n        'nsf_ietf_waiting_for_sent_rr': <class 'bool'>,\n        'is_media_ready': <class 'bool'>,\n        'im_base_caps_exist_registered': <class 'bool'>,\n        'tmrs_active': <class 'bool'>,\n        'lsp_pacing_timer': <class 'str'>,\n        'lsp_sent_last_id': <class 'str'>,\n        'lsp_sent_last_area': <class 'int'>,\n        'lsp_send_b2b_limit': <class 'int'>,\n        'lsp_send_b2b_limit_window_end': {\n          'tv_sec': <class 'int'>,\n          'tv_nsec': <class 'int'>,\n          },\n        'mesh_group': <class 'str'>,\n        'lsp_send_requested': <class 'bool'>,\n        'lsp_send_in_progress': <class 'bool'>,\n        Optional  (str) topos_enabled_passive: <class 'str'>,\n        Optional  (str) topos_enabled_active: <class 'str'>,\n        'pri_label_stack_limit': Or (<class 'int'>, <class 'str'>),\n        'bkp_label_stack_limit': Or (<class 'int'>, <class 'str'>),\n        'srte_label_stack_limit': Or (<class 'int'>, <class 'str'>),\n        'srat_label_stack_limit': Or (<class 'int'>, <class 'str'>),\n        'bandwidth': Or (<class 'int'>, <class 'str'>),\n        'is_pme_delay_loss_set': <class 'bool'>,\n        'pme_avg_delay': <class 'str'>,\n        'pme_min_delay': <class 'str'>,\n        'pme_max_delay': <class 'str'>,\n        'pme_delay_var': <class 'str'>,\n        'pme_loss': <class 'str'>,\n        'pme_total_bw': <class 'str'>,\n        'pme_rsvp_te_bw': <class 'str'>,\n        'rsvp_max_res_bw': <class 'str'>,\n        'rsvp_unres_prio_7': <class 'str'>,\n        'cfg': {\n          'refcount': <class 'int'>,\n          'is_p2p': <class 'bool'>,\n          'enabled_mode': <class 'str'>,\n          'circuit_type': <class 'str'>,\n          'ipv4_bfd_enabled': <class 'bool'>,\n          'ipv6_bfd_enabled': <class 'bool'>,\n          'bfd_interval': <class 'int'>,\n          'bfd_multiplier': <class 'int'>,\n          'topos': <class 'str'>,\n          'cross_levels': {\n            'per_topo': {\n              Any  (str) *: {\n                'metric': Or (<class 'int'>, <class 'str'>),\n                'weight': <class 'str'>,\n                'ldp_sync_cfg': <class 'str'>,\n                'admin_tag': <class 'str'>,\n                'frr_type': <class 'str'>,\n                'is_lkgp_set': <class 'int'>,\n                },\n              },\n            'is_auth_cfg_ctx_set': <class 'bool'>,\n            'auth_cfg_ctx': {\n              'alg': <class 'str'>,\n              'failure_mode': <class 'str'>,\n              'password': <class 'str'>,\n              'accept_password': <class 'str'>,\n              },\n            'hello_interval_msecs': <class 'str'>,\n            'hello_multiplier': <class 'str'>,\n            'csnp_interval_secs': <class 'str'>,\n            'lsp_pacing_interval_msecs': <class 'str'>,\n            'lsp_fast_flood_threshold': <class 'str'>,\n            'lsp_rexmit_interval_secs': <class 'str'>,\n            'min_lsp_rexmit_interval_msecs': <class 'str'>,\n            'dr_priority': <class 'str'>,\n            'is_hello_padding_set': <class 'bool'>,\n            'hello_padding': <class 'str'>,\n            },\n          'per_level': {\n            Any  (str) *: {\n              'per_topo': {\n                Any  (str) *: {\n                  'metric': <class 'str'>,\n                  'weight': <class 'str'>,\n                  'ldp_sync_cfg': <class 'str'>,\n                  'admin_tag': <class 'str'>,\n                  'frr_type': <class 'str'>,\n                  'is_lkgp_set': <class 'int'>,\n                  },\n                },\n              'is_auth_cfg_ctx_set': <class 'bool'>,\n              'auth_cfg_ctx': {\n                'alg': <class 'str'>,\n                'failure_mode': <class 'str'>,\n                'password': <class 'str'>,\n                'accept_password': <class 'str'>,\n                },\n              'hello_interval_msecs': <class 'str'>,\n              'hello_multiplier': <class 'str'>,\n              'csnp_interval_secs': <class 'str'>,\n              'lsp_pacing_interval_msecs': <class 'str'>,\n              'lsp_fast_flood_threshold': <class 'str'>,\n              'lsp_rexmit_interval_secs': <class 'str'>,\n              'min_lsp_rexmit_interval_msecs': <class 'str'>,\n              'dr_priority': <class 'str'>,\n              'is_hello_padding_set': <class 'bool'>,\n              'hello_padding': <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) per_area: {\n          Any  (str) *: {\n            'area_linkage': <class 'str'>,\n            'idb': <class 'str'>,\n            'area': <class 'str'>,\n            'adj_filter': <class 'str'>,\n            'csnp_control': {\n              'timer': <class 'str'>,\n              'next_lsp_id': <class 'str'>,\n              'building_packets': <class 'bool'>,\n              },\n            'psnp_timer': <class 'str'>,\n            'nsf_ietf': {\n              'full_csnp_set_rcvd': <class 'bool'>,\n              'csnp_set_rcvd': {\n                'list_head': <class 'str'>,\n                'list_size': <class 'int'>,\n                },\n              },\n            'adj_up_count': <class 'int'>,\n            'lan_adj_up_count': <class 'int'>,\n            'adj_list': <class 'str'>,\n            'per_ltopo': {\n              Any  (str) *: {\n                'num_requested_adjs': <class 'int'>,\n                'num_adjs': <class 'int'>,\n                },\n              },\n            'tmrs_active': <class 'bool'>,\n            'adj_filter_match_all': <class 'bool'>,\n            'lsp_count': {\n              'in': <class 'int'>,\n              'out': <class 'int'>,\n              },\n            'csnp_count': {\n              'in': <class 'int'>,\n              'out': <class 'int'>,\n              },\n            'psnp_count': {\n              'in': <class 'int'>,\n              'out': <class 'int'>,\n              },\n            'lsp_flooding_dup_count': <class 'int'>,\n            'lsp_drop_count': <class 'int'>,\n            },\n          },\n        'media': {\n          Any  (str) *: {\n            Optional  (str) caps_id: <class 'int'>,\n            Optional  (str) media_class: <class 'str'>,\n            Optional  (str) encaps_overhead: <class 'int'>,\n            },\n          },\n        Optional  (str) media_specific: {\n          Any  (str) *: {\n            'hello_timer': <class 'str'>,\n            'last_hello': {\n              'tv_sec': <class 'int'>,\n              'tv_nsec': <class 'int'>,\n              },\n            'recent_hello_send_count': <class 'int'>,\n            'adj_state': <class 'int'>,\n            'do_ietf_3way': <class 'bool'>,\n            'received_ietf_3way': <class 'bool'>,\n            'neighbor_extended_circuit_number': <class 'int'>,\n            'neighbor_system_id': <class 'str'>,\n            'lsp_rexmit_timer': <class 'str'>,\n            'mib_counters': {\n              'circuit_type': <class 'int'>,\n              'adj_changes': <class 'int'>,\n              'num_adj': <class 'int'>,\n              'init_fails': <class 'int'>,\n              'rej_adjs': <class 'int'>,\n              'id_field_len_mismatches': <class 'int'>,\n              'max_area_addr_mismatches': <class 'int'>,\n              'auth_type_fails': <class 'int'>,\n              'auth_fails': <class 'int'>,\n              'lan_des_is_canges': <class 'int'>,\n              'index': <class 'int'>,\n              },\n            'init_csnp_wait': {\n              'tv_sec': <class 'int'>,\n              'tv_nsec': <class 'int'>,\n              },\n            'lsp_rexmit_queue': {\n              'sll_head': <class 'str'>,\n              'sll_tail': <class 'str'>,\n              'sll_count': <class 'int'>,\n              'sll_maximum': <class 'int'>,\n              },\n            'stats': {\n              'iih_count': {\n                'in': <class 'int'>,\n                'out': <class 'int'>,\n                },\n              'iih_nomem': <class 'int'>,\n              'lsp_retransmits': <class 'int'>,\n              },\n            'nsf_ietf': {\n              't1_timer': <class 'str'>,\n              'num_t1_expiries': <class 'int'>,\n              'first_t1_expiry_seen': <class 'bool'>,\n              'rr_sent': <class 'bool'>,\n              'ra_rcvd': <class 'bool'>,\n              'all_ra_seen': <class 'bool'>,\n              'ra_required_nbr_count': <class 'int'>,\n              Optional  (str) ra_expected_neighbor_list: <class 'list'>,\n              },\n            'p2p_over_lan': {\n              'mcast_state': {\n                'is_mcast_group_member': <class 'bool'>,\n                'mcast_join_reason': <class 'int'>,\n                },\n              'snpa_info': {\n                'im_attr_macaddr_notify_handle': <class 'str'>,\n                'snpa': <class 'str'>,\n                'is_snpa_ok': <class 'bool'>,\n                },\n              },\n            },\n          },\n        'clns': {\n          'im_node': {\n            'exist_registered': <class 'bool'>,\n            'node_exists': <class 'bool'>,\n            'state_registered': <class 'bool'>,\n            'node_up': <class 'bool'>,\n            },\n          'mtu': <class 'int'>,\n          },\n        'per_af': {\n          Any  (str) *: {\n            'im_node': {\n              'exist_registered': <class 'bool'>,\n              'node_exists': <class 'bool'>,\n              'state_registered': <class 'bool'>,\n              'node_up': <class 'bool'>,\n              },\n            'local_address': <class 'str'>,\n            'is_nexthop_addr_registered': <class 'bool'>,\n            'is_global_prefix_registered': <class 'bool'>,\n            'is_running_passive': <class 'bool'>,\n            },\n          },\n        'per_topo': {\n          Any  (str) *: {\n            'refcount': <class 'int'>,\n            },\n          },\n        'mpls_ldp_sync': {\n          'im_attr_ldp_sync_info_notify_handle': Or (<class 'int'>, <class 'str'>),\n          'ldp_sync_info': <class 'bool'>,\n          'is_ldp_sync_info_ok': <class 'int'>,\n          },\n        'mpls_ldpv6_sync': {\n          'im_attr_ldp_sync_info_notify_handle': Or (<class 'int'>, <class 'str'>),\n          'ldp_sync_info': <class 'bool'>,\n          'is_ldp_sync_info_ok': <class 'int'>,\n          },\n        'stats': {\n          'ish_recv_count': <class 'int'>,\n          'esh_recv_count': <class 'int'>,\n          'unk_recv_count': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_private_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L4698"}}, "show isis protocol": {"iosxr": {"class": "ShowIsisProtocol", "doc": " Parser for commands:\n        * show isis protocol\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'process_id': <class 'str'>,\n    'instance': <class 'str'>,\n    'vrf': {\n      Any  (str) *: {\n        'system_id': <class 'str'>,\n        'is_levels': <class 'str'>,\n        Optional  (str) manual_area_address: <class 'list'>,\n        Optional  (str) routing_area_address: <class 'list'>,\n        'non_stop_forwarding': <class 'str'>,\n        'most_recent_startup_mode': <class 'str'>,\n        'te_connection_status': <class 'str'>,\n        Optional  (str) srlb: {\n          'start': <class 'int'>,\n          'end': <class 'int'>,\n          },\n        Optional  (str) srgb: {\n          'start': <class 'int'>,\n          'end': <class 'int'>,\n          },\n        Optional  (str) interfaces: {\n          Any  (str) *: {\n            'running_state': <class 'str'>,\n            'configuration_state': <class 'str'>,\n            },\n          },\n        Optional  (str) topology: {\n          Any  (str) *: {\n            'vrf': {\n              Any  (str) *: {\n                'distance': <class 'int'>,\n                'adv_passive_only': <class 'bool'>,\n                'protocols_redistributed': <class 'bool'>,\n                'level': {\n                  Any  (str) *: {\n                    Optional  (str) generate_style: <class 'str'>,\n                    Optional  (str) accept_style: <class 'str'>,\n                    'metric': <class 'int'>,\n                    Optional  (str) ispf_status: <class 'str'>,\n                    },\n                  },\n                Optional  (str) redistributing: <class 'list'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L908"}}, "show isis segment-routing label table": {"iosxr": {"class": "ShowIsisSegmentRoutingLabelTable", "doc": "Parser for show isis segment-routing label table", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'label': {\n      Any  (str) *: {\n        'prefix_interface': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_segment-routing_label_table", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L408"}}, "show isis segment-routing prefix-sid-map {status}": {"iosxr": {"class": "ShowIsisSegmentRoutingPrefixSidMap", "doc": " Parser for:\n          *  show isis segment-routing prefix-sid-map active-policy\n          *  show isis segment-routing prefix-sid-map backup-policy\n        ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'process_id': {\n  Any  (str) *: {\n    'policy': {\n      Any  (str) *: {\n        'sid': {\n          Any  (str) *: {\n            'prefix': <class 'str'>,\n            'range': <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            },\n          },\n        'number_of_mapping_entries': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_segment-routing_prefix-sid-map_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L53"}}, "show isis spf-log": {"iosxr": {"class": "ShowIsisSpfLog", "doc": " Parser for commands:\n        * show isis spf-log\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'spf_log': {\n          Any  (str) *: {\n            'type': <class 'str'>,\n            'start_timestamp': <class 'str'>,\n            'time_ms': <class 'int'>,\n            'level': <class 'int'>,\n            'total_nodes': <class 'int'>,\n            'trigger_count': <class 'int'>,\n            Optional  (str) first_trigger_lsp: <class 'str'>,\n            'triggers': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_spf-log", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L1700"}}, "show isis spf-log detail": {"iosxr": {"class": "ShowIsisSpfLogDetail", "doc": " Parser for command\n        * show isis spf-log detail\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'spf_log': {\n          Any  (str) *: {\n            'type': <class 'str'>,\n            'start_timestamp': <class 'str'>,\n            'total_nodes': <class 'int'>,\n            'time_ms': <class 'int'>,\n            'level': <class 'int'>,\n            Optional  (str) first_trigger_lsp: <class 'str'>,\n            'triggers': <class 'str'>,\n            'trigger_count': <class 'int'>,\n            Optional  (str) sr_uloop: <class 'str'>,\n            'delay': {\n              'since_first_trigger_ms': <class 'int'>,\n              Optional  (str) since_end_of_last_calculation: <class 'int'>,\n              },\n            Optional  (str) interrupted: <class 'str'>,\n            Optional  (str) rib_batches: {\n              'total': <class 'str'>,\n              Optional  (str) critical: <class 'str'>,\n              Optional  (str) high: <class 'str'>,\n              Optional  (str) medium: <class 'str'>,\n              Optional  (str) low: <class 'str'>,\n              },\n            'spt_calculation': {\n              'cpu_time_ms': <class 'int'>,\n              'real_time_ms': <class 'int'>,\n              },\n            'prefix_update': {\n              'cpu_time_ms': <class 'int'>,\n              'real_time_ms': <class 'int'>,\n              },\n            Optional  (str) full_calculation: {\n              'cpu_time_ms': <class 'int'>,\n              'real_time_ms': <class 'int'>,\n              },\n            'new_lsp_arrivals': <class 'int'>,\n            'next_wait_interval_ms': <class 'int'>,\n            Optional  (str) results: {\n              'nodes': {\n                'reach': <class 'int'>,\n                'unreach': <class 'int'>,\n                'total': <class 'int'>,\n                },\n              'prefixes': {\n                'items': {\n                  'critical_priority': {\n                    'reach': <class 'int'>,\n                    Optional  (str) unreach: <class 'int'>,\n                    'total': <class 'int'>,\n                    },\n                  'high_priority': {\n                    'reach': <class 'int'>,\n                    Optional  (str) unreach: <class 'int'>,\n                    'total': <class 'int'>,\n                    },\n                  'medium_priority': {\n                    'reach': <class 'int'>,\n                    Optional  (str) unreach: <class 'int'>,\n                    'total': <class 'int'>,\n                    },\n                  'low_priority': {\n                    'reach': <class 'int'>,\n                    Optional  (str) unreach: <class 'int'>,\n                    'total': <class 'int'>,\n                    },\n                  'all_priority': {\n                    'reach': <class 'int'>,\n                    Optional  (str) unreach: <class 'int'>,\n                    'total': <class 'int'>,\n                    },\n                  },\n                'routes': {\n                  'critical_priority': {\n                    'reach': <class 'int'>,\n                    Optional  (str) unreach: <class 'int'>,\n                    'total': <class 'int'>,\n                    },\n                  'high_priority': {\n                    'reach': <class 'int'>,\n                    Optional  (str) unreach: <class 'int'>,\n                    'total': <class 'int'>,\n                    },\n                  'medium_priority': {\n                    'reach': <class 'int'>,\n                    Optional  (str) unreach: <class 'int'>,\n                    'total': <class 'int'>,\n                    },\n                  'low_priority': {\n                    'reach': <class 'int'>,\n                    Optional  (str) unreach: <class 'int'>,\n                    'total': <class 'int'>,\n                    },\n                  'all_priority': {\n                    'reach': <class 'int'>,\n                    Optional  (str) unreach: <class 'int'>,\n                    'total': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_spf-log_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L1908"}, "nxos": {"class": "ShowIsisSpfLogDetail", "doc": "Parser for show isis spf-log detail", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'topology': {\n          Any  (str) *: {\n            'total_num_of_spf_calc': <class 'int'>,\n            'log_entry': {\n              'current': <class 'int'>,\n              'max': <class 'int'>,\n              },\n            'entrys': {\n              Any  (str) *: {\n                'ago': <class 'str'>,\n                'date': <class 'str'>,\n                'level': {\n                  Any  (str) *: {\n                    Optional  (str) instance: <class 'str'>,\n                    Optional  (str) init: <class 'float'>,\n                    Optional  (str) spf: <class 'float'>,\n                    Optional  (str) is_update: <class 'float'>,\n                    Optional  (str) urib_update: <class 'float'>,\n                    Optional  (str) total: <class 'float'>,\n                    Optional  (str) node: <class 'int'>,\n                    Optional  (str) count: <class 'int'>,\n                    Optional  (str) changed: <class 'int'>,\n                    Optional  (str) reason: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_spf-log_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L928"}}, "show isis spf-log detail vrf {vrf}": {"nxos": {"class": "ShowIsisSpfLogDetail", "doc": "Parser for show isis spf-log detail", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        'topology': {\n          Any  (str) *: {\n            'total_num_of_spf_calc': <class 'int'>,\n            'log_entry': {\n              'current': <class 'int'>,\n              'max': <class 'int'>,\n              },\n            'entrys': {\n              Any  (str) *: {\n                'ago': <class 'str'>,\n                'date': <class 'str'>,\n                'level': {\n                  Any  (str) *: {\n                    Optional  (str) instance: <class 'str'>,\n                    Optional  (str) init: <class 'float'>,\n                    Optional  (str) spf: <class 'float'>,\n                    Optional  (str) is_update: <class 'float'>,\n                    Optional  (str) urib_update: <class 'float'>,\n                    Optional  (str) total: <class 'float'>,\n                    Optional  (str) node: <class 'int'>,\n                    Optional  (str) count: <class 'int'>,\n                    Optional  (str) changed: <class 'int'>,\n                    Optional  (str) reason: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_spf-log_detail_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L928"}}, "show isis statistics": {"iosxr": {"class": "ShowIsisStatistics", "doc": " Parser for commands:\n        * show isis statistics\n    ", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'isis': {\n  Any  (str) *: {\n    'psnp_cache': {\n      'hits': <class 'int'>,\n      'tries': <class 'int'>,\n      },\n    'csnp_cache': {\n      'hits': <class 'int'>,\n      'tries': <class 'int'>,\n      'updates': <class 'int'>,\n      },\n    'lsp': {\n      'checksum_errors_received': <class 'int'>,\n      'dropped': <class 'int'>,\n      },\n    'upd': {\n      'max_queue_size': <class 'int'>,\n      'queue_size': <class 'int'>,\n      },\n    'snp': {\n      'dropped': <class 'int'>,\n      },\n    'transmit_time': {\n      'hello': {\n        'rate_per_sec': <class 'int'>,\n        'average_transmit_time_sec': <class 'int'>,\n        'average_transmit_time_nsec': <class 'int'>,\n        },\n      'csnp': {\n        'rate_per_sec': <class 'int'>,\n        'average_transmit_time_sec': <class 'int'>,\n        'average_transmit_time_nsec': <class 'int'>,\n        },\n      'psnp': {\n        'rate_per_sec': <class 'int'>,\n        'average_transmit_time_sec': <class 'int'>,\n        'average_transmit_time_nsec': <class 'int'>,\n        },\n      'lsp': {\n        'rate_per_sec': <class 'int'>,\n        'average_transmit_time_sec': <class 'int'>,\n        'average_transmit_time_nsec': <class 'int'>,\n        },\n      },\n    'process_time': {\n      'hello': {\n        'rate_per_sec': <class 'int'>,\n        'average_process_time_sec': <class 'int'>,\n        'average_process_time_nsec': <class 'int'>,\n        },\n      'csnp': {\n        'rate_per_sec': <class 'int'>,\n        'average_process_time_sec': <class 'int'>,\n        'average_process_time_nsec': <class 'int'>,\n        },\n      'psnp': {\n        'rate_per_sec': <class 'int'>,\n        'average_process_time_sec': <class 'int'>,\n        'average_process_time_nsec': <class 'int'>,\n        },\n      'lsp': {\n        'rate_per_sec': <class 'int'>,\n        'average_process_time_sec': <class 'int'>,\n        'average_process_time_nsec': <class 'int'>,\n        },\n      },\n    'level': {\n      Any  (str) *: {\n        'lsp': {\n          'new': <class 'int'>,\n          'refresh': <class 'int'>,\n          },\n        'address_family': {\n          Any  (str) *: {\n            'total_spf_calculation': <class 'int'>,\n            'full_spf_calculation': <class 'int'>,\n            'ispf_calculation': <class 'int'>,\n            'next_hop_calculation': <class 'int'>,\n            'partial_route_calculation': <class 'int'>,\n            'periodic_spf_calculation': <class 'int'>,\n            },\n          },\n        },\n      },\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) level: {\n          Any  (str) *: {\n            Optional  (str) lsps_sourced: {\n              'sent': <class 'int'>,\n              'received': <class 'int'>,\n              'arrival_time_throttled': <class 'int'>,\n              'flooding_duplicates': <class 'int'>,\n              },\n            Optional  (str) csnp: {\n              'sent': <class 'int'>,\n              'received': <class 'int'>,\n              },\n            Optional  (str) psnp: {\n              'sent': <class 'int'>,\n              'received': <class 'int'>,\n              },\n            Optional  (str) dr: {\n              'elections': <class 'int'>,\n              },\n            Optional  (str) hello: {\n              'sent': <class 'int'>,\n              'received': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_isis.py#L1147"}}, "show isis vrf {vrf}": {"nxos": {"class": "ShowIsis", "doc": "Parser for show isis", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'isis_process': <class 'str'>,\n    'instance_number': <class 'int'>,\n    'uuid': <class 'str'>,\n    'process_id': <class 'int'>,\n    'vrf': {\n      Any  (str) *: {\n        'vrf': <class 'str'>,\n        'system_id': <class 'str'>,\n        'is_type': <class 'str'>,\n        'sap': <class 'int'>,\n        'queue_handle': <class 'int'>,\n        'maximum_lsp_mtu': <class 'int'>,\n        'stateful_ha': <class 'str'>,\n        'graceful_restart': {\n          'enable': <class 'bool'>,\n          'state': <class 'str'>,\n          'last_gr_status': <class 'str'>,\n          },\n        'start_mode': <class 'str'>,\n        'bfd_ipv4': <class 'str'>,\n        'bfd_ipv6': <class 'str'>,\n        'topology_mode': <class 'str'>,\n        'metric_type': {\n          'advertise': <class 'list'>,\n          'accept': <class 'list'>,\n          },\n        'area_address': <class 'list'>,\n        'process': <class 'str'>,\n        'vrf_id': <class 'int'>,\n        'during_non_graceful_controlled_restart': <class 'str'>,\n        'resolution_of_l3_to_l2': <class 'str'>,\n        'sr_ipv4': <class 'str'>,\n        'sr_ipv6': <class 'str'>,\n        'supported_interfaces': <class 'list'>,\n        'topology': {\n          Any  (str) *: {\n            'address_family': {\n              Optional  (str) ipv4_unicast: {\n                'number_of_interface': <class 'int'>,\n                'distance': <class 'int'>,\n                },\n              Optional  (str) ipv6_unicast: {\n                'number_of_interface': <class 'int'>,\n                'distance': <class 'int'>,\n                },\n              },\n            },\n          },\n        'authentication': {\n          'level_1': {\n            Optional  (str) authentication_type: <class 'dict'>,\n            'auth_check': <class 'str'>,\n            },\n          'level_2': {\n            Optional  (str) authentication_type: <class 'dict'>,\n            'auth_check': <class 'str'>,\n            },\n          },\n        'l1_next_spf': <class 'str'>,\n        'l2_next_spf': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_isis_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_isis.py#L102"}}, "show issu rollback-timer": {"ios": {"class": "ShowIssuRollbackTimer", "doc": "Parser for show issu rollback-timer", "module_name": "show_issu", "package": "genie.libs.parser", "schema": "{\n'rollback_timer_state': <class 'str'>,\nOptional  (str) rollback_timer_reason: <class 'str'>,\nOptional  (str) rollback_timer_time: <class 'str'>,\n}", "uid": "show_issu_rollback-timer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_issu.py#L22"}, "iosxe": {"c9500": {"class": "ShowIssuRollbackTimer", "doc": "Parser for show issu rollback-timer", "module_name": "show_issu", "package": "genie.libs.parser", "schema": "{\n'rollback_timer_state': <class 'str'>,\nOptional  (str) rollback_timer_reason: <class 'str'>,\nOptional  (str) rollback_timer_time: <class 'str'>,\n}", "uid": "show_issu_rollback-timer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_issu.py#L214"}, "class": "ShowIssuRollbackTimer", "doc": "Parser for show issu rollback-timer", "module_name": "show_issu", "package": "genie.libs.parser", "schema": "{\n'rollback_timer_state': <class 'str'>,\nOptional  (str) rollback_timer_reason: <class 'str'>,\nOptional  (str) rollback_timer_time: <class 'str'>,\n}", "uid": "show_issu_rollback-timer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_issu.py#L336"}}, "show issu state detail": {"ios": {"class": "ShowIssuStateDetail", "doc": "Parser for show issu state detail", "module_name": "show_issu", "package": "genie.libs.parser", "schema": "{\n'slot': {\n  Any  (str) *: {\n    Optional  (str) issu_in_progress: <class 'bool'>,\n    Optional  (str) loadversion_time: <class 'str'>,\n    Optional  (str) context: <class 'str'>,\n    Optional  (str) last_operation: <class 'str'>,\n    Optional  (str) rollback_state: <class 'str'>,\n    Optional  (str) rollback_time: <class 'str'>,\n    Optional  (str) rollback_reason: <class 'str'>,\n    Optional  (str) original_rollback_image: <class 'str'>,\n    Optional  (str) running_image: <class 'str'>,\n    Optional  (str) operating_mode: <class 'str'>,\n    Optional  (str) terminal_state_reached: <class 'bool'>,\n    Optional  (str) runversion_executed: <class 'bool'>,\n    Optional  (str) boot_variable: <class 'str'>,\n    Optional  (str) primary_version: <class 'str'>,\n    Optional  (str) secondary_version: <class 'str'>,\n    Optional  (str) variable_store: <class 'str'>,\n    Optional  (str) issu_state: <class 'str'>,\n    Optional  (str) rp_state: <class 'str'>,\n    },\n  },\n}", "uid": "show_issu_state_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_issu.py#L14"}, "iosxe": {"c9500": {"class": "ShowIssuStateDetail", "doc": "Parser for show issu state detail", "module_name": "show_issu", "package": "genie.libs.parser", "schema": "{\n'slot': {\n  Any  (str) *: {\n    Optional  (str) issu_in_progress: <class 'bool'>,\n    Optional  (str) current_status: <class 'str'>,\n    Optional  (str) previous_operation: <class 'str'>,\n    Optional  (str) system_check: {\n      Optional  (str) platform_issu_support: <class 'str'>,\n      Optional  (str) standby_online: <class 'str'>,\n      Optional  (str) autoboot_enabled: <class 'str'>,\n      Optional  (str) sso_mode: <class 'str'>,\n      Optional  (str) install_boot: <class 'str'>,\n      Optional  (str) valid_boot_media: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_issu_state_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_issu.py#L49"}, "class": "ShowIssuStateDetail", "doc": "Parser for show issu state detail", "module_name": "show_issu", "package": "genie.libs.parser", "schema": "{\n'slot': {\n  Any  (str) *: {\n    Optional  (str) issu_in_progress: <class 'bool'>,\n    Optional  (str) loadversion_time: <class 'str'>,\n    Optional  (str) context: <class 'str'>,\n    Optional  (str) last_operation: <class 'str'>,\n    Optional  (str) rollback_state: <class 'str'>,\n    Optional  (str) rollback_time: <class 'str'>,\n    Optional  (str) rollback_reason: <class 'str'>,\n    Optional  (str) original_rollback_image: <class 'str'>,\n    Optional  (str) running_image: <class 'str'>,\n    Optional  (str) operating_mode: <class 'str'>,\n    Optional  (str) terminal_state_reached: <class 'bool'>,\n    Optional  (str) runversion_executed: <class 'bool'>,\n    Optional  (str) boot_variable: <class 'str'>,\n    Optional  (str) primary_version: <class 'str'>,\n    Optional  (str) secondary_version: <class 'str'>,\n    Optional  (str) variable_store: <class 'str'>,\n    Optional  (str) issu_state: <class 'str'>,\n    Optional  (str) rp_state: <class 'str'>,\n    },\n  },\n}", "uid": "show_issu_state_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_issu.py#L56"}}, "show krt queue": {"junos": {"class": "ShowKrtQueue", "doc": " Parser for:\n    * show krt queue\n    ", "module_name": "show_krt", "package": "genie.libs.parser", "schema": "{\n'krt-queue-information': {\n  'krt-queue': Use  (function) <function ShowKrtQueueSchema.validate_krt_queue_list at 0x109103950>,\n  },\n}", "uid": "show_krt_queue", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_krt.py#L299"}}, "show krt state": {"junos": {"class": "ShowKrtState", "doc": " Parser for:\n    * show krt state\n    ", "module_name": "show_krt", "package": "genie.libs.parser", "schema": "{\n'krt-state-information': {\n  'krt-queue-state': {\n    'krtq-async-count': <class 'str'>,\n    'krtq-async-non-q-count': <class 'str'>,\n    'krtq-high-mpls-adds': <class 'str'>,\n    'krtq-high-mpls-changes': <class 'str'>,\n    'krtq-high-multicast-adds-changes': <class 'str'>,\n    'krtq-high-priority-adds': <class 'str'>,\n    'krtq-high-priority-changes': <class 'str'>,\n    'krtq-high-priority-deletes': <class 'str'>,\n    'krtq-indirect-adds-changes': <class 'str'>,\n    'krtq-indirect-deletes': <class 'str'>,\n    'krtq-interface-routes': <class 'str'>,\n    'krtq-kernel-rt-learnt': <class 'str'>,\n    'krtq-normal-priority-adds': <class 'str'>,\n    'krtq-normal-priority-changes': <class 'str'>,\n    'krtq-normal-priority-deletes': <class 'str'>,\n    'krtq-normal-priority-gmp': <class 'str'>,\n    'krtq-normal-priority-indirects': <class 'str'>,\n    'krtq-operations-canceled': <class 'str'>,\n    'krtq-operations-deferred': <class 'str'>,\n    'krtq-operations-queued': <class 'str'>,\n    'krtq-rt-table-adds': <class 'str'>,\n    'krtq-rt-table-deletes': <class 'str'>,\n    'krtq-time-until-next-run': <class 'str'>,\n    },\n  'rtsock-time-until-next-scan': <class 'str'>,\n  },\n}", "uid": "show_krt_state", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_krt.py#L48"}}, "show l2route evpn ethernet-segment all": {"nxos": {"class": "ShowL2routeEvpnEternetSegmentAll", "doc": "parser for:\n        show l2route evpn ethernet-segment all", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'evpn': {\n  'ethernet_segment': {\n    Any  (str) *: {\n      'ethernet_segment': <class 'str'>,\n      'originating_rtr': <class 'str'>,\n      'prod_name': <class 'str'>,\n      'int_ifhdl': <class 'str'>,\n      'client_nfn': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_l2route_evpn_ethernet-segment_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1105"}}, "show l2route evpn imet all detail": {"nxos": {"class": "ShowL2routeEvpnImetAllDetail", "doc": "Parser for show l2route evpn imet all detail ", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'vni': {\n  Any  (str) *: {\n    'ip': {\n      Any  (str) *: {\n        'topo_id': <class 'int'>,\n        'vni': <class 'int'>,\n        'prod_type': <class 'str'>,\n        'ip_addr': <class 'str'>,\n        'eth_tag_id': <class 'int'>,\n        'pmsi_flags': <class 'int'>,\n        'flags': <class 'str'>,\n        'type': <class 'int'>,\n        'vni_label': <class 'int'>,\n        'tunnel_id': <class 'str'>,\n        'client_nfn': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_evpn_imet_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L55"}}, "show l2route evpn mac all": {"iosxr": {"class": "ShowL2routeEvpnMacAll", "doc": "Parser class for show l2route evpn mac all", "module_name": "show_l2route", "package": "genie.libs.parser", "schema": "{\n'topo_id': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        'producer': <class 'str'>,\n        'next_hop': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_evpn_mac_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2route.py#L102"}, "nxos": {"class": "ShowL2routeEvpnMac", "doc": "Parser for the following show commands:\n        show l2route evpn mac all\n        show l2route evpn mac evi <evi>\n    ", "module_name": "show_l2route", "package": "genie.libs.parser", "schema": "{\n'topology': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        'prod': <class 'str'>,\n        'flags': <class 'str'>,\n        'seq_no': <class 'str'>,\n        'next_hops': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_evpn_mac_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_l2route.py#L45"}}, "show l2route evpn mac evi {evi}": {"nxos": {"class": "ShowL2routeEvpnMac", "doc": "Parser for the following show commands:\n        show l2route evpn mac all\n        show l2route evpn mac evi <evi>\n    ", "module_name": "show_l2route", "package": "genie.libs.parser", "schema": "{\n'topology': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        'prod': <class 'str'>,\n        'flags': <class 'str'>,\n        'seq_no': <class 'str'>,\n        'next_hops': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_evpn_mac_evi_evi", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_l2route.py#L45"}}, "show l2route evpn mac evi {evi} mac {mac}": {"nxos": {"class": "ShowL2routeEvpnMacEvi", "doc": "Parser for show l2route evpn mac evi <WORD> mac <WORD>", "module_name": "show_l2route", "package": "genie.libs.parser", "schema": "{\n'topology': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        'prod': <class 'str'>,\n        'flags': <class 'str'>,\n        'seq_no': <class 'str'>,\n        'next_hops': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_evpn_mac_evi_evi_mac_mac", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_l2route.py#L123"}}, "show l2route evpn mac-ip all": {"iosxr": {"class": "ShowL2routeEvpnMacIpAll", "doc": "Parser class for show l2route evpn mac-ip all", "module_name": "show_l2route", "package": "genie.libs.parser", "schema": "{\n'topo_id': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        'ip_address': {\n          Any  (str) *: {\n            'producer': <class 'str'>,\n            'next_hop': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_evpn_mac-ip_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2route.py#L177"}, "nxos": {"class": "ShowL2routeEvpnMacIpAll", "doc": "Parser for show l2route evpn mac-ip all", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'topology': {\n  'topo_id': {\n    Any  (str) *: {\n      'mac_ip': {\n        Any  (str) *: {\n          'mac_addr': <class 'str'>,\n          'mac_ip_prod_type': <class 'str'>,\n          Optional  (str) mac_ip_flags: <class 'str'>,\n          Optional  (str) seq_num: <class 'int'>,\n          'next_hop1': <class 'str'>,\n          'host_ip': <class 'str'>,\n          Optional  (str) sent_to: <class 'str'>,\n          Optional  (str) soo: <class 'int'>,\n          Optional  (str) l3_info: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_evpn_mac-ip_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2432"}}, "show l2route evpn mac-ip evi {evi}": {"nxos": {"class": "ShowL2routeEvpnMacIpEvi", "doc": "Parser for show l2route evpn mac-ip evi <evi>", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'topology': {\n  'topo_id': {\n    Any  (str) *: {\n      'mac_ip': {\n        Any  (str) *: {\n          'mac_addr': <class 'str'>,\n          'mac_ip_prod_type': <class 'str'>,\n          Optional  (str) mac_ip_flags: <class 'str'>,\n          Optional  (str) seq_num: <class 'int'>,\n          'next_hop1': <class 'str'>,\n          'host_ip': <class 'str'>,\n          Optional  (str) sent_to: <class 'str'>,\n          Optional  (str) soo: <class 'int'>,\n          Optional  (str) l3_info: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_evpn_mac-ip_evi_evi", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L2446"}}, "show l2route fl all": {"nxos": {"class": "ShowL2routeFlAll", "doc": "parser for:\n        show l2route fl all", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'topology': {\n  'topo_id': {\n    Any  (str) *: {\n      Optional  (str) num_of_peer_id: <class 'int'>,\n      'peer_id': {\n        Any  (str) *: {\n          'topo_id': <class 'int'>,\n          'peer_id': <class 'int'>,\n          'flood_list': <class 'str'>,\n          'is_service_node': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_fl_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1673"}}, "show l2route mac all detail": {"nxos": {"class": "ShowL2routeMacAllDetail", "doc": "parser for:\n        show l2route mac all detail", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'topology': {\n  'topo_id': {\n    Any  (str) *: {\n      'mac': {\n        Any  (str) *: {\n          'mac_addr': <class 'str'>,\n          'prod_type': <class 'str'>,\n          'flags': <class 'str'>,\n          'seq_num': <class 'int'>,\n          'next_hop1': <class 'str'>,\n          'rte_res': <class 'str'>,\n          'fwd_state': <class 'str'>,\n          Optional  (str) peer_id: <class 'int'>,\n          Optional  (str) sent_to: <class 'str'>,\n          Optional  (str) soo: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_mac_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1313"}}, "show l2route mac-ip all detail": {"nxos": {"class": "ShowL2routeMacIpAllDetail", "doc": "parser for:\n        show l2route mac-ip all detail", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'topology': {\n  'topo_id': {\n    Any  (str) *: {\n      'mac_ip': {\n        Any  (str) *: {\n          'mac_addr': <class 'str'>,\n          'mac_ip_prod_type': <class 'str'>,\n          Optional  (str) mac_ip_flags: <class 'str'>,\n          Optional  (str) seq_num: <class 'int'>,\n          'next_hop1': <class 'str'>,\n          'host_ip': <class 'str'>,\n          Optional  (str) sent_to: <class 'str'>,\n          Optional  (str) soo: <class 'int'>,\n          Optional  (str) l3_info: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_mac-ip_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1432"}}, "show l2route summary": {"nxos": {"class": "ShowL2routeSummary", "doc": "parser for:\n        show l2route summary", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'summary': {\n  'total_memory': <class 'int'>,\n  'numof_converged_tables': <class 'int'>,\n  Optional  (str) table_name: {\n    Any  (str) *: {\n      'producer_name': {\n        Any  (str) *: {\n          'producer_name': <class 'str'>,\n          'id': <class 'int'>,\n          'objects': <class 'int'>,\n          'memory': <class 'int'>,\n          },\n        'total_obj': <class 'int'>,\n        'total_mem': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1562"}}, "show l2route topology": {"iosxr": {"class": "ShowL2routeTopology", "doc": "Parser class for show l2route topology ", "module_name": "show_l2route", "package": "genie.libs.parser", "schema": "{\n'topo_id': {\n  Any  (str) *: {\n    'topo_name': {\n      Any  (str) *: {\n        Optional  (str) topo_type: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_topology", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2route.py#L38"}}, "show l2route topology detail": {"nxos": {"class": "ShowL2routeTopologyDetail", "doc": "parser for:\n        show l2route topology detail", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'topology': {\n  'topo_id': {\n    Any  (str) *: {\n      'topo_name': {\n        Any  (str) *: {\n          'topo_name': <class 'str'>,\n          Optional  (str) topo_type: <class 'str'>,\n          Optional  (str) vni: <class 'int'>,\n          Optional  (str) encap_type: <class 'int'>,\n          Optional  (str) iod: <class 'int'>,\n          Optional  (str) if_hdl: <class 'int'>,\n          Optional  (str) vtep_ip: <class 'str'>,\n          Optional  (str) emulated_ip: <class 'str'>,\n          Optional  (str) emulated_ro_ip: <class 'str'>,\n          Optional  (str) tx_id: <class 'int'>,\n          Optional  (str) rcvd_flag: <class 'int'>,\n          Optional  (str) rmac: <class 'str'>,\n          Optional  (str) vrf_id: <class 'int'>,\n          Optional  (str) vmac: <class 'str'>,\n          Optional  (str) flags: <class 'str'>,\n          Optional  (str) sub_flags: <class 'str'>,\n          Optional  (str) prev_flags: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2route_topology_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1187"}}, "show l2vpn bridge-domain": {"iosxr": {"class": "ShowL2vpnBridgeDomain", "doc": "Parser for show l2vpn bridge-domain", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'bridge_group': {\n  Any  (str) *: {\n    'bridge_domain': {\n      Any  (str) *: {\n        'id': <class 'int'>,\n        'state': <class 'str'>,\n        Optional  (str) shg_id: <class 'int'>,\n        Optional  (str) mst_i: <class 'int'>,\n        Optional  (str) mac_aging_time: <class 'int'>,\n        Optional  (str) mac_limit: <class 'int'>,\n        Optional  (str) mac_limit_action: <class 'str'>,\n        Optional  (str) mac_limit_notification: <class 'str'>,\n        Optional  (str) filter_mac_address: <class 'int'>,\n        'ac': {\n          'num_ac': <class 'int'>,\n          'num_ac_up': <class 'int'>,\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'state': <class 'str'>,\n              Optional  (str) static_mac_address: <class 'int'>,\n              Optional  (str) bvi_mac_address: <class 'int'>,\n              Optional  (str) mst_i: <class 'int'>,\n              Optional  (str) mst_i_state: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) vfi: {\n          'num_vfi': <class 'int'>,\n          Any  (str) *: {\n            Optional  (str) state: <class 'str'>,\n            'neighbor': {\n              Any  (str) *: {\n                'pw_id': {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'static_mac_address': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        'pw': {\n          'num_pw': <class 'int'>,\n          'num_pw_up': <class 'int'>,\n          },\n        Optional  (str) pbb: {\n          'num_pbb': <class 'int'>,\n          'num_pbb_up': <class 'int'>,\n          },\n        Optional  (str) vni: {\n          'num_vni': <class 'int'>,\n          'num_vni_up': <class 'int'>,\n          },\n        Optional  (str) evpn: {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_bridge-domain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L427"}}, "show l2vpn bridge-domain brief": {"iosxr": {"class": "ShowL2vpnBridgeDomainBrief", "doc": "Parser class for 'show l2vpn bridge-domain brief'", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'bridge_group': {\n  Any  (str) *: {\n    'bridge_domain': {\n      Any  (str) *: {\n        'id': <class 'int'>,\n        'state': <class 'str'>,\n        Optional  (str) shg_id: <class 'int'>,\n        Optional  (str) mst_i: <class 'int'>,\n        Optional  (str) mac_aging_time: <class 'int'>,\n        Optional  (str) mac_limit: <class 'int'>,\n        Optional  (str) mac_limit_action: <class 'str'>,\n        Optional  (str) mac_limit_notification: <class 'str'>,\n        Optional  (str) filter_mac_address: <class 'int'>,\n        'ac': {\n          'num_ac': <class 'int'>,\n          'num_ac_up': <class 'int'>,\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'state': <class 'str'>,\n              Optional  (str) static_mac_address: <class 'int'>,\n              Optional  (str) bvi_mac_address: <class 'int'>,\n              Optional  (str) mst_i: <class 'int'>,\n              Optional  (str) mst_i_state: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) vfi: {\n          'num_vfi': <class 'int'>,\n          Any  (str) *: {\n            Optional  (str) state: <class 'str'>,\n            'neighbor': {\n              Any  (str) *: {\n                'pw_id': {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'static_mac_address': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        'pw': {\n          'num_pw': <class 'int'>,\n          'num_pw_up': <class 'int'>,\n          },\n        Optional  (str) pbb: {\n          'num_pbb': <class 'int'>,\n          'num_pbb_up': <class 'int'>,\n          },\n        Optional  (str) vni: {\n          'num_vni': <class 'int'>,\n          'num_vni_up': <class 'int'>,\n          },\n        Optional  (str) evpn: {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_bridge-domain_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L673"}}, "show l2vpn bridge-domain detail": {"iosxr": {"class": "ShowL2vpnBridgeDomainDetail", "doc": "Parser for show l2vpn bridge-domain detail", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\nOptional  (str) legend: <class 'str'>,\n'bridge_group': {\n  Any  (str) *: {\n    'bridge_domain': {\n      Any  (str) *: {\n        'id': <class 'int'>,\n        'state': <class 'str'>,\n        'shg_id': <class 'int'>,\n        Optional  (str) mode: <class 'str'>,\n        Optional  (str) mst_i: <class 'int'>,\n        Optional  (str) mac_learning: <class 'str'>,\n        Optional  (str) mac_withdraw: <class 'str'>,\n        Optional  (str) flooding: {\n          'broadcast_multicast': <class 'str'>,\n          'unknown_unicast': <class 'str'>,\n          },\n        Optional  (str) multicast_source: <class 'str'>,\n        Optional  (str) mac_aging_time: <class 'int'>,\n        Optional  (str) mac_aging_type: <class 'str'>,\n        Optional  (str) mac_limit: <class 'int'>,\n        Optional  (str) mac_limit_action: <class 'str'>,\n        Optional  (str) mac_limit_notification: <class 'str'>,\n        Optional  (str) mac_limit_reached: <class 'str'>,\n        Optional  (str) mac_port_down_flush: <class 'str'>,\n        Optional  (str) mac_withdraw_sent_on: <class 'str'>,\n        Optional  (str) mac_secure: <class 'str'>,\n        Optional  (str) mac_withdraw_relaying: <class 'str'>,\n        Optional  (str) mac_withdraw_for_access_pw: <class 'str'>,\n        Optional  (str) mac_secure_logging: <class 'str'>,\n        Optional  (str) dynamic_arp_inspection: <class 'str'>,\n        Optional  (str) dynamic_arp_logging: <class 'str'>,\n        Optional  (str) ip_source_logging: <class 'str'>,\n        Optional  (str) coupled_state: <class 'str'>,\n        Optional  (str) security: <class 'str'>,\n        Optional  (str) dhcp_v4_snooping: <class 'str'>,\n        Optional  (str) dhcp_v4_snooping_profile: <class 'str'>,\n        Optional  (str) igmp_snooping: <class 'str'>,\n        Optional  (str) igmp_snooping_profile: <class 'str'>,\n        Optional  (str) mld_snooping_profile: <class 'str'>,\n        Optional  (str) mac_limit_threshold: <class 'str'>,\n        Optional  (str) mid_cvpls_config_index: <class 'str'>,\n        Optional  (str) p2mp_pw: <class 'str'>,\n        Optional  (str) mtu: <class 'int'>,\n        Optional  (str) bridge_mtu: <class 'str'>,\n        Optional  (str) filter_mac_address: <class 'int'>,\n        Optional  (str) storm_control: <class 'str'>,\n        Optional  (str) ip_source_guard: <class 'str'>,\n        Optional  (str) create_time: <class 'str'>,\n        Optional  (str) split_horizon_group: <class 'str'>,\n        Optional  (str) vine_state: <class 'str'>,\n        Optional  (str) status_changed_since_creation: <class 'str'>,\n        'ac': {\n          'num_ac': <class 'int'>,\n          'num_ac_up': <class 'int'>,\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'state': <class 'str'>,\n              'type': <class 'str'>,\n              Optional  (str) vlan_num_ranges: <class 'str'>,\n              Optional  (str) mac_aging_type: <class 'str'>,\n              Optional  (str) mtu: <class 'int'>,\n              'xc_id': <class 'str'>,\n              Optional  (str) interworking: <class 'str'>,\n              Optional  (str) mst_i: <class 'int'>,\n              Optional  (str) mst_i_state: <class 'str'>,\n              Optional  (str) mac_learning: <class 'str'>,\n              Optional  (str) flooding: {\n                'broadcast_multicast': <class 'str'>,\n                'unknown_unicast': <class 'str'>,\n                },\n              Optional  (str) error: <class 'str'>,\n              Optional  (str) bvi_mac_address: <class 'list'>,\n              Optional  (str) virtual_mac_address: <class 'list'>,\n              Optional  (str) mac_aging_time: <class 'int'>,\n              Optional  (str) mac_limit: <class 'int'>,\n              Optional  (str) mac_limit_action: <class 'str'>,\n              Optional  (str) mac_limit_notification: <class 'str'>,\n              Optional  (str) mac_limit_reached: <class 'str'>,\n              Optional  (str) security: <class 'str'>,\n              Optional  (str) dhcp_v4_snooping: <class 'str'>,\n              Optional  (str) dhcp_v4_snooping_profile: <class 'str'>,\n              Optional  (str) igmp_snooping: <class 'str'>,\n              Optional  (str) igmp_snooping_profile: <class 'str'>,\n              Optional  (str) mld_snooping_profile: <class 'str'>,\n              Optional  (str) mac_limit_threshold: <class 'str'>,\n              Optional  (str) static_mac_address: <class 'list'>,\n              Optional  (str) split_horizon_group: <class 'str'>,\n              Optional  (str) statistics: {\n                'packet_totals': {\n                  'receive': <class 'int'>,\n                  'send': <class 'int'>,\n                  },\n                'byte_totals': {\n                  'receive': <class 'int'>,\n                  'send': <class 'int'>,\n                  },\n                Optional  (str) mac_move: <class 'str'>,\n                },\n              Optional  (str) vlan_ranges: <class 'list'>,\n              Optional  (str) rewrite_tags: <class 'str'>,\n              Optional  (str) storm_control_drop_counters: {\n                'packets': {\n                  'broadcast': <class 'str'>,\n                  'multicast': <class 'str'>,\n                  'unknown_unicast': <class 'str'>,\n                  },\n                'bytes': {\n                  'broadcast': <class 'str'>,\n                  'multicast': <class 'str'>,\n                  'unknown_unicast': <class 'str'>,\n                  },\n                },\n              Optional  (str) dynamic_arp_inspection_drop_counters: {\n                'packets': <class 'str'>,\n                'bytes': <class 'str'>,\n                },\n              Optional  (str) ip_source_guard_drop_counters: {\n                'packets': <class 'str'>,\n                'bytes': <class 'str'>,\n                },\n              Optional  (str) pd_system_data: {\n                Any  (str) *: Any  (str) *,\n                },\n              },\n            },\n          },\n        Optional  (str) vfi: {\n          'num_vfi': <class 'int'>,\n          Any  (str) *: {\n            Optional  (str) state: <class 'str'>,\n            'neighbor': {\n              Any  (str) *: {\n                'pw_id': {\n                  Any  (str) *: {\n                    'state': <class 'str'>,\n                    'pw_class': <class 'str'>,\n                    Optional  (str) xc_id: <class 'str'>,\n                    'encapsulation': <class 'str'>,\n                    'protocol': <class 'str'>,\n                    'pw_type': <class 'str'>,\n                    'control_word': <class 'str'>,\n                    'interworking': <class 'str'>,\n                    Optional  (str) pw_backup_disable_delay: <class 'int'>,\n                    'sequencing': <class 'str'>,\n                    'mpls': {\n                      Any  (str) *: {\n                        'local': <class 'str'>,\n                        'remote': <class 'str'>,\n                        Optional  (str) remote_type: <class 'list'>,\n                        Optional  (str) local_type: <class 'list'>,\n                        },\n                      },\n                    'create_time': <class 'str'>,\n                    'last_time_status_changed': <class 'str'>,\n                    Optional  (str) mac_withdraw_message: {\n                      'send': <class 'int'>,\n                      'receive': <class 'int'>,\n                      },\n                    Optional  (str) static_mac_address: <class 'list'>,\n                    Optional  (str) statistics: {\n                      'packet_totals': {\n                        'receive': <class 'int'>,\n                        'send': <class 'int'>,\n                        },\n                      'byte_totals': {\n                        'receive': <class 'int'>,\n                        'send': <class 'int'>,\n                        },\n                      Optional  (str) mac_move: <class 'str'>,\n                      },\n                    Optional  (str) dhcp_v4_snooping: <class 'str'>,\n                    Optional  (str) dhcp_v4_snooping_profile: <class 'str'>,\n                    Optional  (str) igmp_snooping: <class 'str'>,\n                    Optional  (str) igmp_snooping_profile: <class 'str'>,\n                    Optional  (str) mld_snooping_profile: <class 'str'>,\n                    Optional  (str) source_address: <class 'str'>,\n                    Optional  (str) forward_class: <class 'str'>,\n                    Optional  (str) storm_control_drop_counters: {\n                      'packets': {\n                        'broadcast': <class 'str'>,\n                        'multicast': <class 'str'>,\n                        'unknown_unicast': <class 'str'>,\n                        },\n                      'bytes': {\n                        'broadcast': <class 'str'>,\n                        'multicast': <class 'str'>,\n                        'unknown_unicast': <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) statistics: {\n              'drop': {\n                'illegal_vlan': <class 'int'>,\n                'illegal_length': <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) access_pw: {\n          Any  (str) *: {\n            'neighbor': {\n              Any  (str) *: {\n                'pw_id': {\n                  Any  (str) *: {\n                    'ac_id': <class 'str'>,\n                    'state': <class 'str'>,\n                    'xc_id': <class 'str'>,\n                    'encapsulation': <class 'str'>,\n                    'source_address': <class 'str'>,\n                    'encap_type': <class 'str'>,\n                    'control_word': <class 'str'>,\n                    'sequencing': <class 'str'>,\n                    'lsp': {\n                      'state': <class 'str'>,\n                      'evpn': {\n                        Any  (str) *: {\n                          'local': <class 'str'>,\n                          'remote': <class 'str'>,\n                          Optional  (str) remote_type: <class 'list'>,\n                          Optional  (str) local_type: <class 'list'>,\n                          },\n                        },\n                      },\n                    'create_time': <class 'str'>,\n                    'last_time_status_changed': <class 'str'>,\n                    Optional  (str) mac_withdraw_message: {\n                      'send': <class 'int'>,\n                      'receive': <class 'int'>,\n                      },\n                    Optional  (str) mac_learning: <class 'str'>,\n                    Optional  (str) flooding: {\n                      'broadcast_multicast': <class 'str'>,\n                      'unknown_unicast': <class 'str'>,\n                      },\n                    Optional  (str) error: <class 'str'>,\n                    Optional  (str) bvi_mac_address: <class 'list'>,\n                    Optional  (str) mac_aging_type: <class 'str'>,\n                    Optional  (str) mac_aging_time: <class 'int'>,\n                    Optional  (str) mac_limit: <class 'int'>,\n                    Optional  (str) mac_limit_action: <class 'str'>,\n                    Optional  (str) mac_limit_notification: <class 'str'>,\n                    Optional  (str) mac_limit_reached: <class 'str'>,\n                    Optional  (str) mac_secure_logging: <class 'str'>,\n                    Optional  (str) mac_secure: <class 'str'>,\n                    Optional  (str) mac_port_down_flush: <class 'str'>,\n                    Optional  (str) dhcp_v4_snooping: <class 'str'>,\n                    Optional  (str) dhcp_v4_snooping_profile: <class 'str'>,\n                    Optional  (str) igmp_snooping: <class 'str'>,\n                    Optional  (str) igmp_snooping_profile: <class 'str'>,\n                    Optional  (str) mld_snooping_profile: <class 'str'>,\n                    Optional  (str) mac_limit_threshold: <class 'str'>,\n                    Optional  (str) static_mac_address: <class 'list'>,\n                    Optional  (str) statistics: {\n                      'packet_totals': {\n                        'receive': <class 'int'>,\n                        'send': <class 'int'>,\n                        },\n                      'byte_totals': {\n                        'receive': <class 'int'>,\n                        'send': <class 'int'>,\n                        },\n                      Optional  (str) mac_move: <class 'str'>,\n                      },\n                    Optional  (str) dhcp_v4_snooping: <class 'str'>,\n                    Optional  (str) dhcp_v4_snooping_profile: <class 'str'>,\n                    Optional  (str) igmp_snooping: <class 'str'>,\n                    Optional  (str) igmp_snooping_profile: <class 'str'>,\n                    Optional  (str) mld_snooping_profile: <class 'str'>,\n                    Optional  (str) storm_control: <class 'str'>,\n                    Optional  (str) split_horizon_group: <class 'str'>,\n                    Optional  (str) forward_class: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        'pw': {\n          'num_pw': <class 'int'>,\n          'num_pw_up': <class 'int'>,\n          },\n        Optional  (str) pbb: {\n          'num_pbb': <class 'int'>,\n          'num_pbb_up': <class 'int'>,\n          },\n        Optional  (str) vni: {\n          'num_vni': <class 'int'>,\n          'num_vni_up': <class 'int'>,\n          },\n        Optional  (str) evpn: {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'evi': <class 'str'>,\n            'xc_id': <class 'str'>,\n            Optional  (str) statistics: {\n              'packet_totals': {\n                'receive': <class 'int'>,\n                'send': <class 'int'>,\n                },\n              'byte_totals': {\n                'receive': <class 'int'>,\n                'send': <class 'int'>,\n                },\n              Optional  (str) mac_move: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_bridge-domain_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L1104"}}, "show l2vpn bridge-domain summary": {"iosxr": {"class": "ShowL2vpnBridgeDomainSummary", "doc": "Parser for show l2vpn bridge-domain summary", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'number_of_groups': <class 'int'>,\n'bridge_domains': {\n  'total': <class 'int'>,\n  'up': <class 'int'>,\n  'shutdown': <class 'int'>,\n  },\n'ac': {\n  'total': <class 'int'>,\n  'up': <class 'int'>,\n  'down': <class 'int'>,\n  },\n'pw': {\n  'total': <class 'int'>,\n  'up': <class 'int'>,\n  'down': <class 'int'>,\n  },\n}", "uid": "show_l2vpn_bridge-domain_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L709"}}, "show l2vpn forwarding bridge-domain mac-address location {location}": {"iosxr": {"class": "ShowL2vpnForwardingBridgeDomainMacAddress", "doc": "Parser for:\n        show l2vpn forwarding bridge-domain mac-address location <location>\n        show l2vpn forwarding bridge-domain <bridge_domain> mac-address location <location>\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        'type': <class 'str'>,\n        'learned_from': <class 'str'>,\n        'lc_learned': <class 'str'>,\n        'resync_age': <class 'str'>,\n        'mapped_to': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_forwarding_bridge-domain_mac-address_location_location", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L132"}}, "show l2vpn forwarding bridge-domain {bridge_domain} mac-address location {location}": {"iosxr": {"class": "ShowL2vpnForwardingBridgeDomainMacAddress", "doc": "Parser for:\n        show l2vpn forwarding bridge-domain mac-address location <location>\n        show l2vpn forwarding bridge-domain <bridge_domain> mac-address location <location>\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  Any  (str) *: {\n    'mac_address': {\n      Any  (str) *: {\n        'type': <class 'str'>,\n        'learned_from': <class 'str'>,\n        'lc_learned': <class 'str'>,\n        'resync_age': <class 'str'>,\n        'mapped_to': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_forwarding_bridge-domain_bridge_domain_mac-address_location_location", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L132"}}, "show l2vpn forwarding protection main-interface location {location}": {"iosxr": {"class": "ShowL2vpnForwardingProtectionMainInterface", "doc": "Parser for:\n        show l2vpn forwarding protection main-interface location {location}\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'main_interface_id': {\n  Any  (str) *: {\n    'instance': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_forwarding_protection_main-interface_location_location", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L287"}}, "show l2vpn mac-learning {mac_type} all location {location}": {"iosxr": {"class": "ShowL2vpnMacLearning", "doc": "Parser class for show l2vpn mac-learning <mac_type> all location <location>", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'topo_id': {\n  Any  (str) *: {\n    'producer': {\n      Any  (str) *: {\n        'next_hop': {\n          Any  (str) *: {\n            'mac_address': {\n              Any  (str) *: {\n                Optional  (str) ip_address: <class 'list'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_mac-learning_mac_type_all_location_location", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_l2vpn.py#L47"}}, "show l2vpn service all": {"ios": {"class": "ShowL2vpnServiceAll", "doc": "Parser for show l2vpn service all\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'vpls_name': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) group: <class 'str'>,\n        'encapsulation': <class 'str'>,\n        'priority': <class 'int'>,\n        'state': <class 'str'>,\n        'state_in_l2vpn_service': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_service_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L42"}, "iosxe": {"class": "ShowL2vpnServiceAll", "doc": "Parser for show l2vpn service all\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'vpls_name': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) group: <class 'str'>,\n        'encapsulation': <class 'str'>,\n        'priority': <class 'int'>,\n        'state': <class 'str'>,\n        'state_in_l2vpn_service': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_service_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L1048"}}, "show l2vpn vfi": {"ios": {"class": "ShowL2vpnVfi", "doc": "Parser for show l2vpn vfi\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'vfi': {\n  Any  (str) *: {\n    'bd_vfi_name': <class 'str'>,\n    Optional  (str) bridge_group: <class 'str'>,\n    'state': <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    'signaling': <class 'str'>,\n    'vpn_id': <class 'int'>,\n    Optional  (str) ve_id: <class 'int'>,\n    Optional  (str) vpls_id: <class 'str'>,\n    Optional  (str) ve_range: <class 'int'>,\n    Optional  (str) rd: <class 'str'>,\n    Optional  (str) rt: <class 'list'>,\n    'bridge_domain': {\n      Any  (str) *: {\n        Optional  (str) pseudo_port_interface: <class 'str'>,\n        Optional  (str) attachment_circuits: {\n          Optional  (Any) Any  (str) *: {\n            'name': <class 'str'>,\n            },\n          },\n        'vfi': {\n          Any  (str) *: {\n            'pw_id': {\n              Any  (str) *: {\n                Optional  (str) local_label: <class 'int'>,\n                Optional  (str) ve_id: <class 'int'>,\n                Optional  (str) vc_id: <class 'int'>,\n                Optional  (str) remote_label: <class 'int'>,\n                Optional  (str) split_horizon: <class 'bool'>,\n                Optional  (str) discovered_router_id: <class 'str'>,\n                Optional  (str) next_hop: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_vfi", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_l2vpn.py#L33"}, "iosxe": {"class": "ShowL2vpnVfi", "doc": "Parser for show l2vpn vfi\n    ", "module_name": "show_l2vpn", "package": "genie.libs.parser", "schema": "{\n'vfi': {\n  Any  (str) *: {\n    'bd_vfi_name': <class 'str'>,\n    Optional  (str) bridge_group: <class 'str'>,\n    'state': <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    'signaling': <class 'str'>,\n    'vpn_id': <class 'int'>,\n    Optional  (str) ve_id: <class 'int'>,\n    Optional  (str) vpls_id: <class 'str'>,\n    Optional  (str) ve_range: <class 'int'>,\n    Optional  (str) rd: <class 'str'>,\n    Optional  (str) rt: <class 'list'>,\n    'bridge_domain': {\n      Any  (str) *: {\n        Optional  (str) pseudo_port_interface: <class 'str'>,\n        Optional  (str) attachment_circuits: {\n          Optional  (Any) Any  (str) *: {\n            'name': <class 'str'>,\n            },\n          },\n        'vfi': {\n          Any  (str) *: {\n            'pw_id': {\n              Any  (str) *: {\n                Optional  (str) local_label: <class 'int'>,\n                Optional  (str) ve_id: <class 'int'>,\n                Optional  (str) vc_id: <class 'int'>,\n                Optional  (str) remote_label: <class 'int'>,\n                Optional  (str) split_horizon: <class 'bool'>,\n                Optional  (str) discovered_router_id: <class 'str'>,\n                Optional  (str) next_hop: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_vfi", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_l2vpn.py#L834"}}, "show l2vpn xconnect": {"iosxr": {"class": "ShowL2vpnXconnect", "doc": "Parser for show l2vpn xconnect ", "module_name": "show_xconnect", "package": "genie.libs.parser", "schema": "{\n'groups': {\n  Any  (str) *: {\n    'name': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        'segment1': {\n          Any  (str) *: {\n            'status': <class 'str'>,\n            'segment2': {\n              Any  (str) *: {\n                'status': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_xconnect", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_xconnect.py#L1199"}}, "show l2vpn xconnect brief": {"iosxr": {"class": "ShowL2VpnXconnectBrief", "doc": "Parser for:\n        * show l2vpn xconnect brief\n    ", "module_name": "show_xconnect", "package": "genie.libs.parser", "schema": "{\nOptional  (str) total: {\n  'up': <class 'int'>,\n  'down': <class 'int'>,\n  'unr': <class 'int'>,\n  },\nOptional  (str) locally_switching: {\n  'like_to_like': {\n    Any  (str) *: {\n      'up': <class 'int'>,\n      'down': <class 'int'>,\n      'unr': <class 'int'>,\n      },\n    },\n  'total': {\n    'up': <class 'int'>,\n    'down': <class 'int'>,\n    'unr': <class 'int'>,\n    },\n  },\nOptional  (str) atom: {\n  'like_to_like': {\n    Any  (str) *: {\n      'up': <class 'int'>,\n      'down': <class 'int'>,\n      'unr': <class 'int'>,\n      },\n    },\n  'total': {\n    'up': <class 'int'>,\n    'down': <class 'int'>,\n    'unr': <class 'int'>,\n    },\n  },\n}", "uid": "show_l2vpn_xconnect_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_xconnect.py#L134"}}, "show l2vpn xconnect detail": {"iosxr": {"class": "ShowL2vpnXconnectDetail", "doc": "Parser for show l2vpn xconnect detail", "module_name": "show_xconnect", "package": "genie.libs.parser", "schema": "{\n'group': {\n  Any  (str) *: {\n    Optional  (str) mp2mp: {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'vpn_id': <class 'int'>,\n        'vpn_mtu': <class 'int'>,\n        'l2_encapsulation': <class 'str'>,\n        'auto_discovery': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'event_name': <class 'str'>,\n            'route_distinguisher': <class 'str'>,\n            },\n          },\n        'import_route_targets': <class 'list'>,\n        'export_route_targets': <class 'list'>,\n        'signaling_protocol': {\n          Any  (str) *: {\n            'ce_range': <class 'int'>,\n            },\n          },\n        },\n      },\n    'xc': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'interworking': <class 'str'>,\n        Optional  (str) local_ce_id: <class 'int'>,\n        Optional  (str) remote_ce_id: <class 'int'>,\n        Optional  (str) discovery_state: <class 'str'>,\n        Optional  (str) monitor_session: {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            },\n          },\n        Optional  (str) ac: {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) num_ranges: <class 'int'>,\n            Optional  (str) rewrite_tags: <class 'str'>,\n            Optional  (str) mtu: <class 'int'>,\n            Optional  (str) xc_id: <class 'str'>,\n            Optional  (str) interworking: <class 'str'>,\n            Optional  (str) msti: <class 'int'>,\n            Optional  (str) statistics: {\n              'packet_totals': {\n                Optional  (str) receive: <class 'int'>,\n                Optional  (str) send: <class 'int'>,\n                },\n              'byte_totals': {\n                Optional  (str) receive: <class 'int'>,\n                Optional  (str) send: <class 'int'>,\n                },\n              Optional  (str) drops: {\n                Optional  (str) illegal_vlan: <class 'int'>,\n                Optional  (str) illegal_length: <class 'int'>,\n                },\n              },\n            Optional  (str) vlan_ranges: <class 'list'>,\n            },\n          },\n        Optional  (str) pw: {\n          'neighbor': {\n            Any  (str) *: {\n              'id': {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  Optional  (str) pw_class: <class 'str'>,\n                  Optional  (str) xc_id: <class 'str'>,\n                  Optional  (str) encapsulation: <class 'str'>,\n                  Optional  (str) auto_discovered: <class 'str'>,\n                  Optional  (str) protocol: <class 'str'>,\n                  Optional  (str) source_address: <class 'str'>,\n                  Optional  (str) lsp: <class 'str'>,\n                  Optional  (str) type: <class 'str'>,\n                  Optional  (str) control_word: <class 'str'>,\n                  Optional  (str) interworking: <class 'str'>,\n                  Optional  (str) backup_disable_delay: <class 'int'>,\n                  Optional  (str) status_tlv: <class 'str'>,\n                  Optional  (str) sequencing: <class 'str'>,\n                  Optional  (str) mpls: {\n                    Any  (str) *: {\n                      'local': <class 'str'>,\n                      'remote': <class 'str'>,\n                      Optional  (str) local_type: <class 'list'>,\n                      Optional  (str) remote_type: <class 'list'>,\n                      },\n                    },\n                  Optional  (str) create_time: <class 'str'>,\n                  Optional  (str) last_time_status_changed: <class 'str'>,\n                  Optional  (str) statistics: {\n                    'packet_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    'byte_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) evpn: {\n          'neighbor': {\n            Any  (str) *: {\n              'id': {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  'ac_id': <class 'int'>,\n                  'xc_id': <class 'str'>,\n                  'encapsulation': <class 'str'>,\n                  'source_address': <class 'str'>,\n                  'encap_type': <class 'str'>,\n                  'control_word': <class 'str'>,\n                  'lsp': <class 'str'>,\n                  Optional  (str) status_tlv: <class 'str'>,\n                  Optional  (str) sequencing: <class 'str'>,\n                  'evpn': {\n                    Any  (str) *: {\n                      'local': <class 'str'>,\n                      'remote': <class 'str'>,\n                      Optional  (str) local_type: <class 'list'>,\n                      Optional  (str) remote_type: <class 'list'>,\n                      },\n                    },\n                  'create_time': <class 'str'>,\n                  Optional  (str) last_time_status_changed: <class 'str'>,\n                  Optional  (str) statistics: {\n                    'packet_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    'byte_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) backup_pw: {\n          'neighbor': {\n            Any  (str) *: {\n              'id': {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  'pw_class': <class 'str'>,\n                  'xc_id': <class 'str'>,\n                  'encapsulation': <class 'str'>,\n                  Optional  (str) auto_discovered: <class 'str'>,\n                  'protocol': <class 'str'>,\n                  Optional  (str) type: <class 'str'>,\n                  Optional  (str) control_word: <class 'str'>,\n                  Optional  (str) interworking: <class 'str'>,\n                  Optional  (str) backup_disable_delay: <class 'int'>,\n                  Optional  (str) sequencing: <class 'str'>,\n                  'mpls': {\n                    Any  (str) *: {\n                      'local': <class 'str'>,\n                      'remote': <class 'str'>,\n                      Optional  (str) local_type: <class 'list'>,\n                      Optional  (str) remote_type: <class 'list'>,\n                      },\n                    },\n                  Optional  (str) create_time: <class 'str'>,\n                  Optional  (str) last_time_status_changed: <class 'str'>,\n                  Optional  (str) statistics: {\n                    'packet_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    'byte_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_xconnect_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_xconnect.py#L435"}}, "show l2vpn xconnect mp2mp detail": {"iosxr": {"class": "ShowL2vpnXconnectMp2mpDetail", "doc": "Parser class for 'show l2vpn xconnect mp2mp detail' CLI.", "module_name": "show_xconnect", "package": "genie.libs.parser", "schema": "{\n'group': {\n  Any  (str) *: {\n    Optional  (str) mp2mp: {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'vpn_id': <class 'int'>,\n        'vpn_mtu': <class 'int'>,\n        'l2_encapsulation': <class 'str'>,\n        'auto_discovery': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'event_name': <class 'str'>,\n            'route_distinguisher': <class 'str'>,\n            },\n          },\n        'import_route_targets': <class 'list'>,\n        'export_route_targets': <class 'list'>,\n        'signaling_protocol': {\n          Any  (str) *: {\n            'ce_range': <class 'int'>,\n            },\n          },\n        },\n      },\n    'xc': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'interworking': <class 'str'>,\n        Optional  (str) local_ce_id: <class 'int'>,\n        Optional  (str) remote_ce_id: <class 'int'>,\n        Optional  (str) discovery_state: <class 'str'>,\n        Optional  (str) monitor_session: {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            },\n          },\n        Optional  (str) ac: {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) num_ranges: <class 'int'>,\n            Optional  (str) rewrite_tags: <class 'str'>,\n            Optional  (str) mtu: <class 'int'>,\n            Optional  (str) xc_id: <class 'str'>,\n            Optional  (str) interworking: <class 'str'>,\n            Optional  (str) msti: <class 'int'>,\n            Optional  (str) statistics: {\n              'packet_totals': {\n                Optional  (str) receive: <class 'int'>,\n                Optional  (str) send: <class 'int'>,\n                },\n              'byte_totals': {\n                Optional  (str) receive: <class 'int'>,\n                Optional  (str) send: <class 'int'>,\n                },\n              Optional  (str) drops: {\n                Optional  (str) illegal_vlan: <class 'int'>,\n                Optional  (str) illegal_length: <class 'int'>,\n                },\n              },\n            Optional  (str) vlan_ranges: <class 'list'>,\n            },\n          },\n        Optional  (str) pw: {\n          'neighbor': {\n            Any  (str) *: {\n              'id': {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  Optional  (str) pw_class: <class 'str'>,\n                  Optional  (str) xc_id: <class 'str'>,\n                  Optional  (str) encapsulation: <class 'str'>,\n                  Optional  (str) auto_discovered: <class 'str'>,\n                  Optional  (str) protocol: <class 'str'>,\n                  Optional  (str) source_address: <class 'str'>,\n                  Optional  (str) lsp: <class 'str'>,\n                  Optional  (str) type: <class 'str'>,\n                  Optional  (str) control_word: <class 'str'>,\n                  Optional  (str) interworking: <class 'str'>,\n                  Optional  (str) backup_disable_delay: <class 'int'>,\n                  Optional  (str) status_tlv: <class 'str'>,\n                  Optional  (str) sequencing: <class 'str'>,\n                  Optional  (str) mpls: {\n                    Any  (str) *: {\n                      'local': <class 'str'>,\n                      'remote': <class 'str'>,\n                      Optional  (str) local_type: <class 'list'>,\n                      Optional  (str) remote_type: <class 'list'>,\n                      },\n                    },\n                  Optional  (str) create_time: <class 'str'>,\n                  Optional  (str) last_time_status_changed: <class 'str'>,\n                  Optional  (str) statistics: {\n                    'packet_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    'byte_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) evpn: {\n          'neighbor': {\n            Any  (str) *: {\n              'id': {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  'ac_id': <class 'int'>,\n                  'xc_id': <class 'str'>,\n                  'encapsulation': <class 'str'>,\n                  'source_address': <class 'str'>,\n                  'encap_type': <class 'str'>,\n                  'control_word': <class 'str'>,\n                  'lsp': <class 'str'>,\n                  Optional  (str) status_tlv: <class 'str'>,\n                  Optional  (str) sequencing: <class 'str'>,\n                  'evpn': {\n                    Any  (str) *: {\n                      'local': <class 'str'>,\n                      'remote': <class 'str'>,\n                      Optional  (str) local_type: <class 'list'>,\n                      Optional  (str) remote_type: <class 'list'>,\n                      },\n                    },\n                  'create_time': <class 'str'>,\n                  Optional  (str) last_time_status_changed: <class 'str'>,\n                  Optional  (str) statistics: {\n                    'packet_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    'byte_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) backup_pw: {\n          'neighbor': {\n            Any  (str) *: {\n              'id': {\n                Any  (str) *: {\n                  'state': <class 'str'>,\n                  'pw_class': <class 'str'>,\n                  'xc_id': <class 'str'>,\n                  'encapsulation': <class 'str'>,\n                  Optional  (str) auto_discovered: <class 'str'>,\n                  'protocol': <class 'str'>,\n                  Optional  (str) type: <class 'str'>,\n                  Optional  (str) control_word: <class 'str'>,\n                  Optional  (str) interworking: <class 'str'>,\n                  Optional  (str) backup_disable_delay: <class 'int'>,\n                  Optional  (str) sequencing: <class 'str'>,\n                  'mpls': {\n                    Any  (str) *: {\n                      'local': <class 'str'>,\n                      'remote': <class 'str'>,\n                      Optional  (str) local_type: <class 'list'>,\n                      Optional  (str) remote_type: <class 'list'>,\n                      },\n                    },\n                  Optional  (str) create_time: <class 'str'>,\n                  Optional  (str) last_time_status_changed: <class 'str'>,\n                  Optional  (str) statistics: {\n                    'packet_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    'byte_totals': {\n                      Optional  (str) receive: <class 'int'>,\n                      Optional  (str) send: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_l2vpn_xconnect_mp2mp_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_xconnect.py#L1162"}}, "show l2vpn xconnect summary": {"iosxr": {"class": "ShowL2vpnXconnectSummary", "doc": "Parser for show l2vpn xconnect summary", "module_name": "show_xconnect", "package": "genie.libs.parser", "schema": "{\n'number_of_groups': {\n  'total': <class 'int'>,\n  },\n'number_of_xconnects': {\n  'total': <class 'int'>,\n  'up': <class 'int'>,\n  'down': <class 'int'>,\n  'unresolved': <class 'int'>,\n  'partially_programmed': <class 'int'>,\n  'ac_pw': <class 'int'>,\n  'ac_ac': <class 'int'>,\n  'pw_pw': <class 'int'>,\n  'monitor_session_pw': <class 'int'>,\n  },\n'number_of_admin_down_segments': {\n  'total': <class 'int'>,\n  },\n'number_of_mp2mp_xconnects': {\n  'total': <class 'int'>,\n  'up': <class 'int'>,\n  'down': <class 'int'>,\n  'advertised': <class 'int'>,\n  'non_advertised': <class 'int'>,\n  },\n'number_of_ce_connections': {\n  'total': <class 'int'>,\n  'advertised': <class 'int'>,\n  'non_advertised': <class 'int'>,\n  },\n'backup_pw': {\n  'configured': <class 'int'>,\n  'up': <class 'int'>,\n  'down': <class 'int'>,\n  'admin_down': <class 'int'>,\n  'unresolved': <class 'int'>,\n  'standby': <class 'int'>,\n  'standby_ready': <class 'int'>,\n  },\n'backup_interface': {\n  'configured': <class 'int'>,\n  'up': <class 'int'>,\n  'down': <class 'int'>,\n  'admin_down': <class 'int'>,\n  'unresolved': <class 'int'>,\n  'standby': <class 'int'>,\n  },\n}", "uid": "show_l2vpn_xconnect_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_xconnect.py#L1477"}}, "show lacp": {"iosxr": {"class": "ShowLacp", "doc": "parser for \n    show lacp\n    show lacp <inteface>\n    ", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'bundle_id': <class 'int'>,\n    'lacp_mode': <class 'str'>,\n    'port': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'bundle_id': <class 'int'>,\n        'rate': <class 'int'>,\n        'state': <class 'str'>,\n        'port_id': <class 'str'>,\n        'key': <class 'str'>,\n        'system_id': <class 'str'>,\n        'synchronization': <class 'str'>,\n        'aggregatable': <class 'bool'>,\n        'collecting': <class 'bool'>,\n        'distributing': <class 'bool'>,\n        'partner': {\n          'rate': <class 'int'>,\n          'state': <class 'str'>,\n          'port_id': <class 'str'>,\n          'key': <class 'str'>,\n          'system_id': <class 'str'>,\n          'synchronization': <class 'str'>,\n          'aggregatable': <class 'bool'>,\n          'collecting': <class 'bool'>,\n          'distributing': <class 'bool'>,\n          },\n        'receive': <class 'str'>,\n        'period': <class 'str'>,\n        'selection': <class 'str'>,\n        'mux': <class 'str'>,\n        'a_churn': <class 'str'>,\n        'p_churn': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lag.py#L645"}}, "show lacp counters": {"ios": {"class": "ShowLacpCounters", "doc": "Parser for :\n      show lacp counters", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'lacp_in_pkts': <class 'int'>,\n          'lacp_out_pkts': <class 'int'>,\n          'lacp_pkts': <class 'int'>,\n          Optional  (str) lacp_errors: <class 'int'>,\n          'marker_in_pkts': <class 'int'>,\n          'marker_out_pkts': <class 'int'>,\n          Optional  (str) marker_response_in_pkts: <class 'int'>,\n          Optional  (str) marker_response_out_pkts: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L55"}, "iosxe": {"class": "ShowLacpCounters", "doc": "Parser for :\n      show lacp counters", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'lacp_in_pkts': <class 'int'>,\n          'lacp_out_pkts': <class 'int'>,\n          'lacp_pkts': <class 'int'>,\n          Optional  (str) lacp_errors: <class 'int'>,\n          'marker_in_pkts': <class 'int'>,\n          'marker_out_pkts': <class 'int'>,\n          Optional  (str) marker_response_in_pkts: <class 'int'>,\n          Optional  (str) marker_response_out_pkts: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L117"}, "nxos": {"class": "ShowLacpCounters", "doc": "Parser for: show lacp counters", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'lacp_in_pkts': <class 'int'>,\n          'lacp_out_pkts': <class 'int'>,\n          'lacp_errors': <class 'int'>,\n          'marker_resp_in_pkts': <class 'int'>,\n          'marker_resp_out_pkts': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lag.py#L97"}}, "show lacp internal": {"ios": {"class": "ShowLacpInternal", "doc": "Parser for :\n      show lacp internal", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'oper_key': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'port_num': <class 'int'>,\n        'lacp_port_priority': <class 'int'>,\n        'flags': <class 'str'>,\n        Optional  (str) activity: <class 'str'>,\n        'state': <class 'str'>,\n        'bundled': <class 'bool'>,\n        'port_state': <class 'int'>,\n        Optional  (str) lacp_interval: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L64"}, "iosxe": {"class": "ShowLacpInternal", "doc": "Parser for :\n      show lacp internal", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'oper_key': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'port_num': <class 'int'>,\n        'lacp_port_priority': <class 'int'>,\n        'flags': <class 'str'>,\n        Optional  (str) activity: <class 'str'>,\n        'state': <class 'str'>,\n        'bundled': <class 'bool'>,\n        'port_state': <class 'int'>,\n        Optional  (str) lacp_interval: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L226"}}, "show lacp neighbor": {"ios": {"class": "ShowLacpNeighbor", "doc": "Parser for :\n      show lacp neighbor", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'activity': <class 'str'>,\n        'oper_key': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'port_num': <class 'int'>,\n        'partner_id': <class 'str'>,\n        'age': <class 'int'>,\n        'flags': <class 'str'>,\n        'lacp_port_priority': <class 'int'>,\n        Optional  (str) port_state: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L73"}, "iosxe": {"class": "ShowLacpNeighbor", "doc": "Parser for :\n      show lacp neighbor", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'activity': <class 'str'>,\n        'oper_key': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'port_num': <class 'int'>,\n        'partner_id': <class 'str'>,\n        'age': <class 'int'>,\n        'flags': <class 'str'>,\n        'lacp_port_priority': <class 'int'>,\n        Optional  (str) port_state: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L335"}, "nxos": {"class": "ShowLacpNeighbor", "doc": "parser for: show lacp neighbor", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'activity': <class 'str'>,\n        'oper_key': <class 'int'>,\n        'port_num': <class 'int'>,\n        'partner_id': <class 'str'>,\n        'age': <class 'int'>,\n        'interval': <class 'str'>,\n        'lacp_port_priority': <class 'int'>,\n        'port_state': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lag.py#L201"}}, "show lacp neighbor detail": {"ios": {"class": "ShowLacpNeighborDetail", "doc": "Parser for :\n        show lacp neighbor detail", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'system_id': <class 'str'>,\n        'port_num': <class 'int'>,\n        'age': <class 'int'>,\n        'flags': <class 'str'>,\n        'lacp_port_priority': <class 'int'>,\n        'oper_key': <class 'int'>,\n        'port_state': <class 'int'>,\n        'collecting': <class 'bool'>,\n        'distributing': <class 'bool'>,\n        'defaulted': <class 'bool'>,\n        'expired': <class 'bool'>,\n        Optional  (str) activity: <class 'str'>,\n        Optional  (str) timeout: <class 'str'>,\n        Optional  (str) aggregatable: <class 'bool'>,\n        Optional  (str) synchronization: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L128"}, "iosxe": {"class": "ShowLacpNeighborDetail", "doc": "Parser for :\n        show lacp neighbor detail", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'system_id': <class 'str'>,\n        'port_num': <class 'int'>,\n        'age': <class 'int'>,\n        'flags': <class 'str'>,\n        'lacp_port_priority': <class 'int'>,\n        'oper_key': <class 'int'>,\n        'port_state': <class 'int'>,\n        'collecting': <class 'bool'>,\n        'distributing': <class 'bool'>,\n        'defaulted': <class 'bool'>,\n        'expired': <class 'bool'>,\n        Optional  (str) activity: <class 'str'>,\n        Optional  (str) timeout: <class 'str'>,\n        Optional  (str) aggregatable: <class 'bool'>,\n        Optional  (str) synchronization: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L996"}}, "show lacp sys-id": {"ios": {"class": "ShowLacpSysId", "doc": "Parser for :\n       show lacp sys-id", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'system_id_mac': <class 'str'>,\n'system_priority': <class 'int'>,\n}", "uid": "show_lacp_sys-id", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L46"}, "iosxe": {"class": "ShowLacpSysId", "doc": "Parser for :\n       show lacp sys-id", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'system_id_mac': <class 'str'>,\n'system_priority': <class 'int'>,\n}", "uid": "show_lacp_sys-id", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L50"}}, "show lacp system-id": {"iosxr": {"class": "ShowLacpSystemId", "doc": "Parser for show lacp system-id", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'system_id_mac': <class 'str'>,\n'system_priority': <class 'int'>,\n}", "uid": "show_lacp_system-id", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lag.py#L31"}}, "show lacp system-identifier": {"nxos": {"class": "ShowLacpSystemIdentifier", "doc": "Parser for :\n       show lacp system-identifier", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'system_id_mac': <class 'str'>,\n'system_priority': <class 'int'>,\n}", "uid": "show_lacp_system-identifier", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lag.py#L37"}}, "show lacp {channel_group} counters": {"ios": {"class": "ShowLacpCounters", "doc": "Parser for :\n      show lacp counters", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'lacp_in_pkts': <class 'int'>,\n          'lacp_out_pkts': <class 'int'>,\n          'lacp_pkts': <class 'int'>,\n          Optional  (str) lacp_errors: <class 'int'>,\n          'marker_in_pkts': <class 'int'>,\n          'marker_out_pkts': <class 'int'>,\n          Optional  (str) marker_response_in_pkts: <class 'int'>,\n          Optional  (str) marker_response_out_pkts: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_channel_group_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L55"}, "iosxe": {"class": "ShowLacpCounters", "doc": "Parser for :\n      show lacp counters", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'lacp_in_pkts': <class 'int'>,\n          'lacp_out_pkts': <class 'int'>,\n          'lacp_pkts': <class 'int'>,\n          Optional  (str) lacp_errors: <class 'int'>,\n          'marker_in_pkts': <class 'int'>,\n          'marker_out_pkts': <class 'int'>,\n          Optional  (str) marker_response_in_pkts: <class 'int'>,\n          Optional  (str) marker_response_out_pkts: <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_channel_group_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L117"}}, "show lacp {channel_group} internal": {"ios": {"class": "ShowLacpInternal", "doc": "Parser for :\n      show lacp internal", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'oper_key': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'port_num': <class 'int'>,\n        'lacp_port_priority': <class 'int'>,\n        'flags': <class 'str'>,\n        Optional  (str) activity: <class 'str'>,\n        'state': <class 'str'>,\n        'bundled': <class 'bool'>,\n        'port_state': <class 'int'>,\n        Optional  (str) lacp_interval: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_channel_group_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L64"}, "iosxe": {"class": "ShowLacpInternal", "doc": "Parser for :\n      show lacp internal", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'oper_key': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'port_num': <class 'int'>,\n        'lacp_port_priority': <class 'int'>,\n        'flags': <class 'str'>,\n        Optional  (str) activity: <class 'str'>,\n        'state': <class 'str'>,\n        'bundled': <class 'bool'>,\n        'port_state': <class 'int'>,\n        Optional  (str) lacp_interval: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_channel_group_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L226"}}, "show lacp {channel_group} neighbor": {"ios": {"class": "ShowLacpNeighbor", "doc": "Parser for :\n      show lacp neighbor", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'activity': <class 'str'>,\n        'oper_key': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'port_num': <class 'int'>,\n        'partner_id': <class 'str'>,\n        'age': <class 'int'>,\n        'flags': <class 'str'>,\n        'lacp_port_priority': <class 'int'>,\n        Optional  (str) port_state: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_channel_group_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L73"}, "iosxe": {"class": "ShowLacpNeighbor", "doc": "Parser for :\n      show lacp neighbor", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'activity': <class 'str'>,\n        'oper_key': <class 'int'>,\n        'admin_key': <class 'int'>,\n        'port_num': <class 'int'>,\n        'partner_id': <class 'str'>,\n        'age': <class 'int'>,\n        'flags': <class 'str'>,\n        'lacp_port_priority': <class 'int'>,\n        Optional  (str) port_state: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_channel_group_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L335"}}, "show lacp {interface}": {"iosxr": {"class": "ShowLacp", "doc": "parser for \n    show lacp\n    show lacp <inteface>\n    ", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'bundle_id': <class 'int'>,\n    'lacp_mode': <class 'str'>,\n    'port': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'bundle_id': <class 'int'>,\n        'rate': <class 'int'>,\n        'state': <class 'str'>,\n        'port_id': <class 'str'>,\n        'key': <class 'str'>,\n        'system_id': <class 'str'>,\n        'synchronization': <class 'str'>,\n        'aggregatable': <class 'bool'>,\n        'collecting': <class 'bool'>,\n        'distributing': <class 'bool'>,\n        'partner': {\n          'rate': <class 'int'>,\n          'state': <class 'str'>,\n          'port_id': <class 'str'>,\n          'key': <class 'str'>,\n          'system_id': <class 'str'>,\n          'synchronization': <class 'str'>,\n          'aggregatable': <class 'bool'>,\n          'collecting': <class 'bool'>,\n          'distributing': <class 'bool'>,\n          },\n        'receive': <class 'str'>,\n        'period': <class 'str'>,\n        'selection': <class 'str'>,\n        'mux': <class 'str'>,\n        'a_churn': <class 'str'>,\n        'p_churn': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_lacp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lag.py#L645"}}, "show line": {"ios": {"class": "ShowLine", "doc": "Parser for show line", "module_name": "show_session", "package": "genie.libs.parser", "schema": "{\n'tty': {\n  Any  (str) *: {\n    'active': <class 'bool'>,\n    'type': <class 'str'>,\n    Optional  (str) tx: <class 'int'>,\n    Optional  (str) rx: <class 'int'>,\n    'a': <class 'str'>,\n    'modem': <class 'str'>,\n    'roty': <class 'str'>,\n    'acco': <class 'str'>,\n    'acci': <class 'str'>,\n    'uses': <class 'int'>,\n    'noise': <class 'int'>,\n    'overruns': <class 'str'>,\n    'int': <class 'str'>,\n    },\n  },\n}", "uid": "show_line", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_session.py#L13"}, "iosxe": {"class": "ShowLine", "doc": "Parser for show line", "module_name": "show_session", "package": "genie.libs.parser", "schema": "{\n'tty': {\n  Any  (str) *: {\n    'active': <class 'bool'>,\n    'type': <class 'str'>,\n    Optional  (str) tx: <class 'int'>,\n    Optional  (str) rx: <class 'int'>,\n    'a': <class 'str'>,\n    'modem': <class 'str'>,\n    'roty': <class 'str'>,\n    'acco': <class 'str'>,\n    'acci': <class 'str'>,\n    'uses': <class 'int'>,\n    'noise': <class 'int'>,\n    'overruns': <class 'str'>,\n    'int': <class 'str'>,\n    },\n  },\n}", "uid": "show_line", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_session.py#L36"}}, "show lisp all extranet {extranet} instance-id {instance_id}": {"ios": {"class": "ShowLispExtranet", "doc": " Parser for \"show lisp all extranet <extranet> instance-id <instance_id>\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        Optional  (str) map_server: {\n          Optional  (str) virtual_network_ids: {\n            'total_extranet_entries': <class 'int'>,\n            Any  (str) *: {\n              'vni': <class 'str'>,\n              'extranets': {\n                Any  (str) *: {\n                  'extranet': <class 'str'>,\n                  'home_instance_id': <class 'int'>,\n                  Optional  (str) provider: {\n                    Any  (str) *: {\n                      'eid_record': <class 'str'>,\n                      'bidirectional': <class 'bool'>,\n                      },\n                    },\n                  Optional  (str) subscriber: {\n                    Any  (str) *: {\n                      'eid_record': <class 'str'>,\n                      'bidirectional': <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_extranet_extranet_instance-id_instance_id", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L82"}, "iosxe": {"class": "ShowLispExtranet", "doc": " Parser for \"show lisp all extranet <extranet> instance-id <instance_id>\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        Optional  (str) map_server: {\n          Optional  (str) virtual_network_ids: {\n            'total_extranet_entries': <class 'int'>,\n            Any  (str) *: {\n              'vni': <class 'str'>,\n              'extranets': {\n                Any  (str) *: {\n                  'extranet': <class 'str'>,\n                  'home_instance_id': <class 'int'>,\n                  Optional  (str) provider: {\n                    Any  (str) *: {\n                      'eid_record': <class 'str'>,\n                      'bidirectional': <class 'bool'>,\n                      },\n                    },\n                  Optional  (str) subscriber: {\n                    Any  (str) *: {\n                      'eid_record': <class 'str'>,\n                      'bidirectional': <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_extranet_extranet_instance-id_instance_id", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L303"}}, "show lisp all instance-id {instance_id} dynamic-eid detail": {"ios": {"class": "ShowLispDynamicEidDetail", "doc": " Parser for \"show lisp all instance-id <instance_id> dynamic-eid detail\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        'etr': {\n          'local_eids': {\n            Any  (str) *: {\n              'dynamic_eids': {\n                Any  (str) *: {\n                  'dynamic_eid_name': <class 'str'>,\n                  'id': <class 'str'>,\n                  'rlocs': <class 'str'>,\n                  Optional  (str) registering_more_specific: <class 'bool'>,\n                  Optional  (str) loopback_address: <class 'str'>,\n                  Optional  (str) priority: <class 'int'>,\n                  Optional  (str) weight: <class 'int'>,\n                  Optional  (str) record_ttl: <class 'int'>,\n                  Optional  (str) site_based_multicast_map_notify_group: <class 'str'>,\n                  Optional  (str) proxy_reply: <class 'bool'>,\n                  Optional  (str) registration_interval: <class 'int'>,\n                  Optional  (str) global_map_server: <class 'bool'>,\n                  Optional  (str) num_of_roaming_dynamic_eid: <class 'int'>,\n                  Optional  (str) mapping_servers: {\n                    Any  (str) *: {\n                      Optional  (str) proxy_reply: <class 'bool'>,\n                      },\n                    },\n                  Optional  (str) last_dynamic_eid: {\n                    Any  (str) *: {\n                      'last_dynamic_eid_discovery_elaps_time': <class 'str'>,\n                      'eids': {\n                        Any  (str) *: {\n                          'interface': <class 'str'>,\n                          'uptime': <class 'str'>,\n                          'last_activity': <class 'str'>,\n                          'discovered_by': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) eid_address: {\n                    Optional  (str) address_type: <class 'str'>,\n                    Optional  (str) virtual_network_id: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_dynamic-eid_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L90"}, "iosxe": {"class": "ShowLispDynamicEidDetail", "doc": " Parser for \"show lisp all instance-id <instance_id> dynamic-eid detail\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        'etr': {\n          'local_eids': {\n            Any  (str) *: {\n              'dynamic_eids': {\n                Any  (str) *: {\n                  'dynamic_eid_name': <class 'str'>,\n                  'id': <class 'str'>,\n                  'rlocs': <class 'str'>,\n                  Optional  (str) registering_more_specific: <class 'bool'>,\n                  Optional  (str) loopback_address: <class 'str'>,\n                  Optional  (str) priority: <class 'int'>,\n                  Optional  (str) weight: <class 'int'>,\n                  Optional  (str) record_ttl: <class 'int'>,\n                  Optional  (str) site_based_multicast_map_notify_group: <class 'str'>,\n                  Optional  (str) proxy_reply: <class 'bool'>,\n                  Optional  (str) registration_interval: <class 'int'>,\n                  Optional  (str) global_map_server: <class 'bool'>,\n                  Optional  (str) num_of_roaming_dynamic_eid: <class 'int'>,\n                  Optional  (str) mapping_servers: {\n                    Any  (str) *: {\n                      Optional  (str) proxy_reply: <class 'bool'>,\n                      },\n                    },\n                  Optional  (str) last_dynamic_eid: {\n                    Any  (str) *: {\n                      'last_dynamic_eid_discovery_elaps_time': <class 'str'>,\n                      'eids': {\n                        Any  (str) *: {\n                          'interface': <class 'str'>,\n                          'uptime': <class 'str'>,\n                          'last_activity': <class 'str'>,\n                          'discovered_by': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) eid_address: {\n                    Optional  (str) address_type: <class 'str'>,\n                    Optional  (str) virtual_network_id: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_dynamic-eid_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L467"}}, "show lisp all instance-id {instance_id} service {service} rloc members": {"ios": {"class": "ShowLispServiceRlocMembers", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> rloc members\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) rloc: {\n              'total_entries': <class 'int'>,\n              'valid_entries': <class 'int'>,\n              'distribution': <class 'bool'>,\n              'members': {\n                Any  (str) *: {\n                  'origin': <class 'str'>,\n                  'valid': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_service_rloc_members", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L114"}, "iosxe": {"class": "ShowLispServiceRlocMembers", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> rloc members\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) rloc: {\n              'total_entries': <class 'int'>,\n              'valid_entries': <class 'int'>,\n              'distribution': <class 'bool'>,\n              'members': {\n                Any  (str) *: {\n                  'origin': <class 'str'>,\n                  'valid': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_service_rloc_members", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L1735"}}, "show lisp all instance-id {instance_id} service {service} smr": {"ios": {"class": "ShowLispServiceSmr", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> smr\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) smr: {\n              'vrf': <class 'str'>,\n              'entries': <class 'int'>,\n              'prefixes': {\n                Any  (str) *: {\n                  'producer': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_service_smr", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L122"}, "iosxe": {"class": "ShowLispServiceSmr", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> smr\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) smr: {\n              'vrf': <class 'str'>,\n              'entries': <class 'int'>,\n              'prefixes': {\n                Any  (str) *: {\n                  'producer': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_service_smr", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L1860"}}, "show lisp all instance-id {instance_id} {service}": {"ios": {"class": "ShowLispService", "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) lisp_router_id: {\n      'site_id': <class 'str'>,\n      'xtr_id': <class 'str'>,\n      },\n    Optional  (str) service: {\n      Any  (str) *: {\n        'service': <class 'str'>,\n        'delegated_database_tree': <class 'bool'>,\n        'locator_table': <class 'str'>,\n        'mobility_first_hop_router': <class 'bool'>,\n        'nat_traversal_router': <class 'bool'>,\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) eid_table: <class 'str'>,\n            Optional  (str) site_registration_limit: <class 'int'>,\n            Optional  (str) map_request_source: <class 'str'>,\n            'database': {\n              Optional  (str) dynamic_database_limit: <class 'int'>,\n              Optional  (str) dynamic_database_size: <class 'int'>,\n              Optional  (str) inactive_deconfig_away_size: <class 'int'>,\n              Optional  (str) route_import_database_limit: <class 'int'>,\n              Optional  (str) route_import_database_size: <class 'int'>,\n              Optional  (str) static_database_size: <class 'int'>,\n              Optional  (str) static_database_limit: <class 'int'>,\n              Optional  (str) total_database_mapping_size: <class 'int'>,\n              Optional  (str) dynamic_database_mapping_limit: <class 'int'>,\n              Optional  (str) import_site_db_size: <class 'int'>,\n              Optional  (str) import_site_db_limit: <class 'int'>,\n              Optional  (str) proxy_db_size: <class 'int'>,\n              },\n            Optional  (str) mapping_servers: {\n              Any  (str) *: {\n                'ms_address': <class 'str'>,\n                Optional  (str) uptime: <class 'str'>,\n                },\n              },\n            'itr': {\n              'local_rloc_last_resort': <class 'str'>,\n              Optional  (str) use_proxy_etr_rloc: <class 'str'>,\n              },\n            Optional  (str) map_cache: {\n              Optional  (str) imported_route_count: <class 'int'>,\n              Optional  (str) imported_route_limit: <class 'int'>,\n              Optional  (str) map_cache_size: <class 'int'>,\n              Optional  (str) persistent_map_cache: <class 'bool'>,\n              Optional  (str) static_mappings_configured: <class 'int'>,\n              },\n            },\n          },\n        'etr': {\n          'enabled': <class 'bool'>,\n          Optional  (str) encapsulation: <class 'str'>,\n          'proxy_etr_router': <class 'bool'>,\n          'accept_mapping_data': <class 'str'>,\n          'map_cache_ttl': <class 'str'>,\n          Optional  (str) use_petrs: {\n            Any  (str) *: {\n              'use_petr': <class 'str'>,\n              },\n            },\n          Optional  (str) mapping_servers: {\n            Any  (str) *: {\n              'ms_address': <class 'str'>,\n              Optional  (str) uptime: <class 'str'>,\n              },\n            },\n          },\n        'itr': {\n          'enabled': <class 'bool'>,\n          'proxy_itr_router': <class 'bool'>,\n          Optional  (str) proxy_itrs: {\n            Any  (str) *: {\n              'proxy_etr_address': <class 'str'>,\n              },\n            },\n          'solicit_map_request': <class 'str'>,\n          'max_smr_per_map_cache_entry': <class 'str'>,\n          'multiple_smr_suppression_time': <class 'int'>,\n          Optional  (str) map_resolvers: {\n            Any  (str) *: {\n              'map_resolver': <class 'str'>,\n              },\n            },\n          },\n        'locator_status_algorithms': {\n          'rloc_probe_algorithm': <class 'bool'>,\n          'rloc_probe_on_route_change': <class 'str'>,\n          'rloc_probe_on_member_change': <class 'bool'>,\n          'lsb_reports': <class 'str'>,\n          'ipv4_rloc_min_mask_len': <class 'int'>,\n          'ipv6_rloc_min_mask_len': <class 'int'>,\n          },\n        'map_cache': {\n          'map_cache_activity_check_period': <class 'int'>,\n          Optional  (str) map_cache_fib_updates: <class 'str'>,\n          'map_cache_limit': <class 'int'>,\n          },\n        'map_server': {\n          'enabled': <class 'bool'>,\n          },\n        'map_resolver': {\n          'enabled': <class 'bool'>,\n          },\n        Optional  (str) source_locator_configuration: {\n          'vlans': {\n            Any  (str) *: {\n              'address': <class 'str'>,\n              'interface': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L98"}, "iosxe": {"class": "ShowLispService", "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) lisp_router_id: {\n      'site_id': <class 'str'>,\n      'xtr_id': <class 'str'>,\n      },\n    Optional  (str) service: {\n      Any  (str) *: {\n        'service': <class 'str'>,\n        'delegated_database_tree': <class 'bool'>,\n        'locator_table': <class 'str'>,\n        'mobility_first_hop_router': <class 'bool'>,\n        'nat_traversal_router': <class 'bool'>,\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) eid_table: <class 'str'>,\n            Optional  (str) site_registration_limit: <class 'int'>,\n            Optional  (str) map_request_source: <class 'str'>,\n            'database': {\n              Optional  (str) dynamic_database_limit: <class 'int'>,\n              Optional  (str) dynamic_database_size: <class 'int'>,\n              Optional  (str) inactive_deconfig_away_size: <class 'int'>,\n              Optional  (str) route_import_database_limit: <class 'int'>,\n              Optional  (str) route_import_database_size: <class 'int'>,\n              Optional  (str) static_database_size: <class 'int'>,\n              Optional  (str) static_database_limit: <class 'int'>,\n              Optional  (str) total_database_mapping_size: <class 'int'>,\n              Optional  (str) dynamic_database_mapping_limit: <class 'int'>,\n              Optional  (str) import_site_db_size: <class 'int'>,\n              Optional  (str) import_site_db_limit: <class 'int'>,\n              Optional  (str) proxy_db_size: <class 'int'>,\n              },\n            Optional  (str) mapping_servers: {\n              Any  (str) *: {\n                'ms_address': <class 'str'>,\n                Optional  (str) uptime: <class 'str'>,\n                },\n              },\n            'itr': {\n              'local_rloc_last_resort': <class 'str'>,\n              Optional  (str) use_proxy_etr_rloc: <class 'str'>,\n              },\n            Optional  (str) map_cache: {\n              Optional  (str) imported_route_count: <class 'int'>,\n              Optional  (str) imported_route_limit: <class 'int'>,\n              Optional  (str) map_cache_size: <class 'int'>,\n              Optional  (str) persistent_map_cache: <class 'bool'>,\n              Optional  (str) static_mappings_configured: <class 'int'>,\n              },\n            },\n          },\n        'etr': {\n          'enabled': <class 'bool'>,\n          Optional  (str) encapsulation: <class 'str'>,\n          'proxy_etr_router': <class 'bool'>,\n          'accept_mapping_data': <class 'str'>,\n          'map_cache_ttl': <class 'str'>,\n          Optional  (str) use_petrs: {\n            Any  (str) *: {\n              'use_petr': <class 'str'>,\n              },\n            },\n          Optional  (str) mapping_servers: {\n            Any  (str) *: {\n              'ms_address': <class 'str'>,\n              Optional  (str) uptime: <class 'str'>,\n              },\n            },\n          },\n        'itr': {\n          'enabled': <class 'bool'>,\n          'proxy_itr_router': <class 'bool'>,\n          Optional  (str) proxy_itrs: {\n            Any  (str) *: {\n              'proxy_etr_address': <class 'str'>,\n              },\n            },\n          'solicit_map_request': <class 'str'>,\n          'max_smr_per_map_cache_entry': <class 'str'>,\n          'multiple_smr_suppression_time': <class 'int'>,\n          Optional  (str) map_resolvers: {\n            Any  (str) *: {\n              'map_resolver': <class 'str'>,\n              },\n            },\n          },\n        'locator_status_algorithms': {\n          'rloc_probe_algorithm': <class 'bool'>,\n          'rloc_probe_on_route_change': <class 'str'>,\n          'rloc_probe_on_member_change': <class 'bool'>,\n          'lsb_reports': <class 'str'>,\n          'ipv4_rloc_min_mask_len': <class 'int'>,\n          'ipv6_rloc_min_mask_len': <class 'int'>,\n          },\n        'map_cache': {\n          'map_cache_activity_check_period': <class 'int'>,\n          Optional  (str) map_cache_fib_updates: <class 'str'>,\n          'map_cache_limit': <class 'int'>,\n          },\n        'map_server': {\n          'enabled': <class 'bool'>,\n          },\n        'map_resolver': {\n          'enabled': <class 'bool'>,\n          },\n        Optional  (str) source_locator_configuration: {\n          'vlans': {\n            Any  (str) *: {\n              'address': <class 'str'>,\n              'interface': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L790"}}, "show lisp all instance-id {instance_id} {service} database": {"ios": {"class": "ShowLispServiceDatabase", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> dabatase\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    'locator_sets': {\n      Any  (str) *: {\n        'locator_set_name': <class 'str'>,\n        },\n      },\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        'etr': {\n          'local_eids': {\n            Any  (str) *: {\n              'vni': <class 'str'>,\n              'total_eid_entries': <class 'int'>,\n              'no_route_eid_entries': <class 'int'>,\n              'inactive_eid_entries': <class 'int'>,\n              Optional  (str) dynamic_eids: {\n                Any  (str) *: {\n                  'id': <class 'str'>,\n                  Optional  (str) dynamic_eid: <class 'str'>,\n                  'eid_address': {\n                    'address_type': <class 'str'>,\n                    'vrf': <class 'str'>,\n                    },\n                  'rlocs': <class 'str'>,\n                  'loopback_address': <class 'str'>,\n                  'priority': <class 'int'>,\n                  'weight': <class 'int'>,\n                  'source': <class 'str'>,\n                  'state': <class 'str'>,\n                  },\n                },\n              Optional  (str) eids: {\n                Any  (str) *: {\n                  'id': <class 'str'>,\n                  'eid_address': {\n                    'address_type': <class 'str'>,\n                    'vrf': <class 'str'>,\n                    },\n                  'rlocs': <class 'str'>,\n                  'loopback_address': <class 'str'>,\n                  'priority': <class 'int'>,\n                  'weight': <class 'int'>,\n                  'source': <class 'str'>,\n                  'state': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L138"}, "iosxe": {"class": "ShowLispServiceDatabase", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> dabatase\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    'locator_sets': {\n      Any  (str) *: {\n        'locator_set_name': <class 'str'>,\n        },\n      },\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        'etr': {\n          'local_eids': {\n            Any  (str) *: {\n              'vni': <class 'str'>,\n              'total_eid_entries': <class 'int'>,\n              'no_route_eid_entries': <class 'int'>,\n              'inactive_eid_entries': <class 'int'>,\n              Optional  (str) dynamic_eids: {\n                Any  (str) *: {\n                  'id': <class 'str'>,\n                  Optional  (str) dynamic_eid: <class 'str'>,\n                  'eid_address': {\n                    'address_type': <class 'str'>,\n                    'vrf': <class 'str'>,\n                    },\n                  'rlocs': <class 'str'>,\n                  'loopback_address': <class 'str'>,\n                  'priority': <class 'int'>,\n                  'weight': <class 'int'>,\n                  'source': <class 'str'>,\n                  'state': <class 'str'>,\n                  },\n                },\n              Optional  (str) eids: {\n                Any  (str) *: {\n                  'id': <class 'str'>,\n                  'eid_address': {\n                    'address_type': <class 'str'>,\n                    'vrf': <class 'str'>,\n                    },\n                  'rlocs': <class 'str'>,\n                  'loopback_address': <class 'str'>,\n                  'priority': <class 'int'>,\n                  'weight': <class 'int'>,\n                  'source': <class 'str'>,\n                  'state': <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L2242"}}, "show lisp all instance-id {instance_id} {service} map-cache": {"ios": {"class": "ShowLispServiceMapCache", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> map-cache\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Any  (str) *: {\n        'service': <class 'str'>,\n        'itr': {\n          'map_cache': {\n            Any  (str) *: {\n              'vni': <class 'str'>,\n              'entries': <class 'int'>,\n              'mappings': {\n                Any  (str) *: {\n                  'id': <class 'str'>,\n                  'creation_time': <class 'str'>,\n                  'time_to_live': <class 'str'>,\n                  'via': <class 'str'>,\n                  'eid': {\n                    'address_type': <class 'str'>,\n                    'vrf': <class 'str'>,\n                    Optional  (str) ipv4: {\n                      'ipv4': <class 'str'>,\n                      },\n                    Optional  (str) ipv4_prefix: {\n                      'ipv4_prefix': <class 'str'>,\n                      },\n                    Optional  (str) ipv6: {\n                      'ipv6': <class 'str'>,\n                      },\n                    Optional  (str) ipv6_prefix: {\n                      'ipv6_prefix': <class 'str'>,\n                      },\n                    },\n                  Optional  (str) negative_mapping: {\n                    'map_reply_action': <class 'str'>,\n                    },\n                  Optional  (str) positive_mapping: {\n                    'rlocs': {\n                      Any  (str) *: {\n                        'id': <class 'str'>,\n                        'uptime': <class 'str'>,\n                        'state': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'weight': <class 'int'>,\n                        Optional  (str) encap_iid: <class 'str'>,\n                        'locator_address': {\n                          'address_type': <class 'str'>,\n                          'virtual_network_id': <class 'str'>,\n                          Optional  (str) ipv4: {\n                            'ipv4': <class 'str'>,\n                            },\n                          Optional  (str) ipv4_prefix: {\n                            'ipv4_prefix': <class 'str'>,\n                            },\n                          Optional  (str) ipv6: {\n                            'ipv6': <class 'str'>,\n                            },\n                          Optional  (str) ipv6_prefix: {\n                            'ipv6_prefix': <class 'str'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_map-cache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L106"}, "iosxe": {"class": "ShowLispServiceMapCache", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> map-cache\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Any  (str) *: {\n        'service': <class 'str'>,\n        'itr': {\n          'map_cache': {\n            Any  (str) *: {\n              'vni': <class 'str'>,\n              'entries': <class 'int'>,\n              'mappings': {\n                Any  (str) *: {\n                  'id': <class 'str'>,\n                  'creation_time': <class 'str'>,\n                  'time_to_live': <class 'str'>,\n                  'via': <class 'str'>,\n                  'eid': {\n                    'address_type': <class 'str'>,\n                    'vrf': <class 'str'>,\n                    Optional  (str) ipv4: {\n                      'ipv4': <class 'str'>,\n                      },\n                    Optional  (str) ipv4_prefix: {\n                      'ipv4_prefix': <class 'str'>,\n                      },\n                    Optional  (str) ipv6: {\n                      'ipv6': <class 'str'>,\n                      },\n                    Optional  (str) ipv6_prefix: {\n                      'ipv6_prefix': <class 'str'>,\n                      },\n                    },\n                  Optional  (str) negative_mapping: {\n                    'map_reply_action': <class 'str'>,\n                    },\n                  Optional  (str) positive_mapping: {\n                    'rlocs': {\n                      Any  (str) *: {\n                        'id': <class 'str'>,\n                        'uptime': <class 'str'>,\n                        'state': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'weight': <class 'int'>,\n                        Optional  (str) encap_iid: <class 'str'>,\n                        'locator_address': {\n                          'address_type': <class 'str'>,\n                          'virtual_network_id': <class 'str'>,\n                          Optional  (str) ipv4: {\n                            'ipv4': <class 'str'>,\n                            },\n                          Optional  (str) ipv4_prefix: {\n                            'ipv4_prefix': <class 'str'>,\n                            },\n                          Optional  (str) ipv6: {\n                            'ipv6': <class 'str'>,\n                            },\n                          Optional  (str) ipv6_prefix: {\n                            'ipv6_prefix': <class 'str'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_map-cache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L1537"}}, "show lisp all instance-id {instance_id} {service} server detail internal": {"ios": {"class": "ShowLispServiceServerDetailInternal", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server detail internal\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        'map_server': {\n          'sites': {\n            Any  (str) *: {\n              'site_id': <class 'str'>,\n              'allowed_configured_locators': <class 'str'>,\n              },\n            },\n          Optional  (str) virtual_network_ids: {\n            Any  (str) *: {\n              'vni': <class 'str'>,\n              'mappings': {\n                Any  (str) *: {\n                  'eid_id': <class 'str'>,\n                  'eid_address': {\n                    'address_type': <class 'str'>,\n                    'virtual_network_id': <class 'str'>,\n                    Optional  (str) ipv4: {\n                      'ipv4': <class 'str'>,\n                      },\n                    Optional  (str) ipv6: {\n                      'ipv6': <class 'str'>,\n                      },\n                    Optional  (str) ipv4_prefix: {\n                      'ipv4_prefix': <class 'str'>,\n                      },\n                    Optional  (str) ipv6_prefix: {\n                      'ipv6_prefix': <class 'str'>,\n                      },\n                    },\n                  'site_id': <class 'str'>,\n                  'first_registered': <class 'str'>,\n                  'last_registered': <class 'str'>,\n                  'routing_table_tag': <class 'int'>,\n                  'origin': <class 'str'>,\n                  Optional  (str) more_specifics_accepted: <class 'bool'>,\n                  'merge_active': <class 'bool'>,\n                  'proxy_reply': <class 'bool'>,\n                  'ttl': <class 'str'>,\n                  'state': <class 'str'>,\n                  'registration_errors': {\n                    'authentication_failures': <class 'int'>,\n                    'allowed_locators_mismatch': <class 'int'>,\n                    },\n                  Optional  (str) mapping_records: {\n                    Any  (str) *: {\n                      'xtr_id': <class 'str'>,\n                      'site_id': <class 'str'>,\n                      'etr': <class 'str'>,\n                      'eid': {\n                        'address_type': <class 'str'>,\n                        'virtual_network_id': <class 'str'>,\n                        Optional  (str) ipv4: {\n                          'ipv4': <class 'str'>,\n                          },\n                        Optional  (str) ipv6: {\n                          'ipv6': <class 'str'>,\n                          },\n                        Optional  (str) ipv4_prefix: {\n                          'ipv4_prefix': <class 'str'>,\n                          },\n                        Optional  (str) ipv6_prefix: {\n                          'ipv6_prefix': <class 'str'>,\n                          },\n                        },\n                      'ttl': <class 'str'>,\n                      'time_to_live': <class 'int'>,\n                      'creation_time': <class 'str'>,\n                      'merge': <class 'bool'>,\n                      'proxy_reply': <class 'bool'>,\n                      'map_notify': <class 'bool'>,\n                      'hash_function': <class 'str'>,\n                      'nonce': <class 'str'>,\n                      'state': <class 'str'>,\n                      'security_capability': <class 'bool'>,\n                      'sourced_by': <class 'str'>,\n                      'locator': {\n                        Any  (str) *: {\n                          'local': <class 'bool'>,\n                          'state': <class 'str'>,\n                          'priority': <class 'int'>,\n                          'weight': <class 'int'>,\n                          'scope': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_server_detail_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L154"}, "iosxe": {"class": "ShowLispServiceServerDetailInternal", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server detail internal\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    Optional  (str) service: {\n      Any  (str) *: {\n        'map_server': {\n          'sites': {\n            Any  (str) *: {\n              'site_id': <class 'str'>,\n              'allowed_configured_locators': <class 'str'>,\n              },\n            },\n          Optional  (str) virtual_network_ids: {\n            Any  (str) *: {\n              'vni': <class 'str'>,\n              'mappings': {\n                Any  (str) *: {\n                  'eid_id': <class 'str'>,\n                  'eid_address': {\n                    'address_type': <class 'str'>,\n                    'virtual_network_id': <class 'str'>,\n                    Optional  (str) ipv4: {\n                      'ipv4': <class 'str'>,\n                      },\n                    Optional  (str) ipv6: {\n                      'ipv6': <class 'str'>,\n                      },\n                    Optional  (str) ipv4_prefix: {\n                      'ipv4_prefix': <class 'str'>,\n                      },\n                    Optional  (str) ipv6_prefix: {\n                      'ipv6_prefix': <class 'str'>,\n                      },\n                    },\n                  'site_id': <class 'str'>,\n                  'first_registered': <class 'str'>,\n                  'last_registered': <class 'str'>,\n                  'routing_table_tag': <class 'int'>,\n                  'origin': <class 'str'>,\n                  Optional  (str) more_specifics_accepted: <class 'bool'>,\n                  'merge_active': <class 'bool'>,\n                  'proxy_reply': <class 'bool'>,\n                  'ttl': <class 'str'>,\n                  'state': <class 'str'>,\n                  'registration_errors': {\n                    'authentication_failures': <class 'int'>,\n                    'allowed_locators_mismatch': <class 'int'>,\n                    },\n                  Optional  (str) mapping_records: {\n                    Any  (str) *: {\n                      'xtr_id': <class 'str'>,\n                      'site_id': <class 'str'>,\n                      'etr': <class 'str'>,\n                      'eid': {\n                        'address_type': <class 'str'>,\n                        'virtual_network_id': <class 'str'>,\n                        Optional  (str) ipv4: {\n                          'ipv4': <class 'str'>,\n                          },\n                        Optional  (str) ipv6: {\n                          'ipv6': <class 'str'>,\n                          },\n                        Optional  (str) ipv4_prefix: {\n                          'ipv4_prefix': <class 'str'>,\n                          },\n                        Optional  (str) ipv6_prefix: {\n                          'ipv6_prefix': <class 'str'>,\n                          },\n                        },\n                      'ttl': <class 'str'>,\n                      'time_to_live': <class 'int'>,\n                      'creation_time': <class 'str'>,\n                      'merge': <class 'bool'>,\n                      'proxy_reply': <class 'bool'>,\n                      'map_notify': <class 'bool'>,\n                      'hash_function': <class 'str'>,\n                      'nonce': <class 'str'>,\n                      'state': <class 'str'>,\n                      'security_capability': <class 'bool'>,\n                      'sourced_by': <class 'str'>,\n                      'locator': {\n                        Any  (str) *: {\n                          'local': <class 'bool'>,\n                          'state': <class 'str'>,\n                          'priority': <class 'int'>,\n                          'weight': <class 'int'>,\n                          'scope': <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_server_detail_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L2692"}}, "show lisp all instance-id {instance_id} {service} server summary": {"ios": {"class": "ShowLispServiceServerSummary", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server summary\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    'service': {\n      Any  (str) *: {\n        'instance_id': {\n          Any  (str) *: {\n            'map_server': {\n              Optional  (str) sites: {\n                Any  (str) *: {\n                  'site_id': <class 'str'>,\n                  'configured': <class 'int'>,\n                  'registered': <class 'int'>,\n                  'inconsistent': <class 'int'>,\n                  },\n                },\n              'summary': {\n                'number_configured_sites': <class 'int'>,\n                'number_registered_sites': <class 'int'>,\n                Optional  (str) af_datum: {\n                  Any  (str) *: {\n                    'address_type': <class 'str'>,\n                    Optional  (str) number_configured_eids: <class 'int'>,\n                    Optional  (str) number_registered_eids: <class 'int'>,\n                    },\n                  },\n                'sites_with_inconsistent_registrations': <class 'int'>,\n                Optional  (str) site_registration_limit: <class 'int'>,\n                Optional  (str) site_registration_count: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_server_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L146"}, "iosxe": {"class": "ShowLispServiceServerSummary", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> server summary\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    'service': {\n      Any  (str) *: {\n        'instance_id': {\n          Any  (str) *: {\n            'map_server': {\n              Optional  (str) sites: {\n                Any  (str) *: {\n                  'site_id': <class 'str'>,\n                  'configured': <class 'int'>,\n                  'registered': <class 'int'>,\n                  'inconsistent': <class 'int'>,\n                  },\n                },\n              'summary': {\n                'number_configured_sites': <class 'int'>,\n                'number_registered_sites': <class 'int'>,\n                Optional  (str) af_datum: {\n                  Any  (str) *: {\n                    'address_type': <class 'str'>,\n                    Optional  (str) number_configured_eids: <class 'int'>,\n                    Optional  (str) number_registered_eids: <class 'int'>,\n                    },\n                  },\n                'sites_with_inconsistent_registrations': <class 'int'>,\n                Optional  (str) site_registration_limit: <class 'int'>,\n                Optional  (str) site_registration_count: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_server_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L2429"}}, "show lisp all instance-id {instance_id} {service} statistics": {"ios": {"class": "ShowLispServiceStatistics", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> statistics\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'service': {\n      Any  (str) *: {\n        'statistics': {\n          Any  (str) *: {\n            'last_cleared': <class 'str'>,\n            Any  (str) *: Any  (str) *,\n            Optional  (str) map_resolvers: {\n              Any  (str) *: {\n                'last_reply': <class 'str'>,\n                'metric': <class 'str'>,\n                'reqs_sent': <class 'int'>,\n                'positive': <class 'int'>,\n                'negative': <class 'int'>,\n                'no_reply': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L162"}, "iosxe": {"class": "ShowLispServiceStatistics", "doc": "Parser for \"show lisp all instance-id <instance_id> <service> statistics\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'service': {\n      Any  (str) *: {\n        'statistics': {\n          Any  (str) *: {\n            'last_cleared': <class 'str'>,\n            Any  (str) *: Any  (str) *,\n            Optional  (str) map_resolvers: {\n              Any  (str) *: {\n                'last_reply': <class 'str'>,\n                'metric': <class 'str'>,\n                'reqs_sent': <class 'int'>,\n                'positive': <class 'int'>,\n                'negative': <class 'int'>,\n                'no_reply': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_instance-id_instance_id_service_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L3065"}}, "show lisp all service {service}": {"ios": {"class": "ShowLispService", "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) lisp_router_id: {\n      'site_id': <class 'str'>,\n      'xtr_id': <class 'str'>,\n      },\n    Optional  (str) service: {\n      Any  (str) *: {\n        'service': <class 'str'>,\n        'delegated_database_tree': <class 'bool'>,\n        'locator_table': <class 'str'>,\n        'mobility_first_hop_router': <class 'bool'>,\n        'nat_traversal_router': <class 'bool'>,\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) eid_table: <class 'str'>,\n            Optional  (str) site_registration_limit: <class 'int'>,\n            Optional  (str) map_request_source: <class 'str'>,\n            'database': {\n              Optional  (str) dynamic_database_limit: <class 'int'>,\n              Optional  (str) dynamic_database_size: <class 'int'>,\n              Optional  (str) inactive_deconfig_away_size: <class 'int'>,\n              Optional  (str) route_import_database_limit: <class 'int'>,\n              Optional  (str) route_import_database_size: <class 'int'>,\n              Optional  (str) static_database_size: <class 'int'>,\n              Optional  (str) static_database_limit: <class 'int'>,\n              Optional  (str) total_database_mapping_size: <class 'int'>,\n              Optional  (str) dynamic_database_mapping_limit: <class 'int'>,\n              Optional  (str) import_site_db_size: <class 'int'>,\n              Optional  (str) import_site_db_limit: <class 'int'>,\n              Optional  (str) proxy_db_size: <class 'int'>,\n              },\n            Optional  (str) mapping_servers: {\n              Any  (str) *: {\n                'ms_address': <class 'str'>,\n                Optional  (str) uptime: <class 'str'>,\n                },\n              },\n            'itr': {\n              'local_rloc_last_resort': <class 'str'>,\n              Optional  (str) use_proxy_etr_rloc: <class 'str'>,\n              },\n            Optional  (str) map_cache: {\n              Optional  (str) imported_route_count: <class 'int'>,\n              Optional  (str) imported_route_limit: <class 'int'>,\n              Optional  (str) map_cache_size: <class 'int'>,\n              Optional  (str) persistent_map_cache: <class 'bool'>,\n              Optional  (str) static_mappings_configured: <class 'int'>,\n              },\n            },\n          },\n        'etr': {\n          'enabled': <class 'bool'>,\n          Optional  (str) encapsulation: <class 'str'>,\n          'proxy_etr_router': <class 'bool'>,\n          'accept_mapping_data': <class 'str'>,\n          'map_cache_ttl': <class 'str'>,\n          Optional  (str) use_petrs: {\n            Any  (str) *: {\n              'use_petr': <class 'str'>,\n              },\n            },\n          Optional  (str) mapping_servers: {\n            Any  (str) *: {\n              'ms_address': <class 'str'>,\n              Optional  (str) uptime: <class 'str'>,\n              },\n            },\n          },\n        'itr': {\n          'enabled': <class 'bool'>,\n          'proxy_itr_router': <class 'bool'>,\n          Optional  (str) proxy_itrs: {\n            Any  (str) *: {\n              'proxy_etr_address': <class 'str'>,\n              },\n            },\n          'solicit_map_request': <class 'str'>,\n          'max_smr_per_map_cache_entry': <class 'str'>,\n          'multiple_smr_suppression_time': <class 'int'>,\n          Optional  (str) map_resolvers: {\n            Any  (str) *: {\n              'map_resolver': <class 'str'>,\n              },\n            },\n          },\n        'locator_status_algorithms': {\n          'rloc_probe_algorithm': <class 'bool'>,\n          'rloc_probe_on_route_change': <class 'str'>,\n          'rloc_probe_on_member_change': <class 'bool'>,\n          'lsb_reports': <class 'str'>,\n          'ipv4_rloc_min_mask_len': <class 'int'>,\n          'ipv6_rloc_min_mask_len': <class 'int'>,\n          },\n        'map_cache': {\n          'map_cache_activity_check_period': <class 'int'>,\n          Optional  (str) map_cache_fib_updates: <class 'str'>,\n          'map_cache_limit': <class 'int'>,\n          },\n        'map_server': {\n          'enabled': <class 'bool'>,\n          },\n        'map_resolver': {\n          'enabled': <class 'bool'>,\n          },\n        Optional  (str) source_locator_configuration: {\n          'vlans': {\n            Any  (str) *: {\n              'address': <class 'str'>,\n              'interface': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_service_service", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L98"}, "iosxe": {"class": "ShowLispService", "doc": "Parser for \"show lisp all instance-id <instance_id> <service>\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) lisp_router_id: {\n      'site_id': <class 'str'>,\n      'xtr_id': <class 'str'>,\n      },\n    Optional  (str) service: {\n      Any  (str) *: {\n        'service': <class 'str'>,\n        'delegated_database_tree': <class 'bool'>,\n        'locator_table': <class 'str'>,\n        'mobility_first_hop_router': <class 'bool'>,\n        'nat_traversal_router': <class 'bool'>,\n        'instance_id': {\n          Any  (str) *: {\n            Optional  (str) eid_table: <class 'str'>,\n            Optional  (str) site_registration_limit: <class 'int'>,\n            Optional  (str) map_request_source: <class 'str'>,\n            'database': {\n              Optional  (str) dynamic_database_limit: <class 'int'>,\n              Optional  (str) dynamic_database_size: <class 'int'>,\n              Optional  (str) inactive_deconfig_away_size: <class 'int'>,\n              Optional  (str) route_import_database_limit: <class 'int'>,\n              Optional  (str) route_import_database_size: <class 'int'>,\n              Optional  (str) static_database_size: <class 'int'>,\n              Optional  (str) static_database_limit: <class 'int'>,\n              Optional  (str) total_database_mapping_size: <class 'int'>,\n              Optional  (str) dynamic_database_mapping_limit: <class 'int'>,\n              Optional  (str) import_site_db_size: <class 'int'>,\n              Optional  (str) import_site_db_limit: <class 'int'>,\n              Optional  (str) proxy_db_size: <class 'int'>,\n              },\n            Optional  (str) mapping_servers: {\n              Any  (str) *: {\n                'ms_address': <class 'str'>,\n                Optional  (str) uptime: <class 'str'>,\n                },\n              },\n            'itr': {\n              'local_rloc_last_resort': <class 'str'>,\n              Optional  (str) use_proxy_etr_rloc: <class 'str'>,\n              },\n            Optional  (str) map_cache: {\n              Optional  (str) imported_route_count: <class 'int'>,\n              Optional  (str) imported_route_limit: <class 'int'>,\n              Optional  (str) map_cache_size: <class 'int'>,\n              Optional  (str) persistent_map_cache: <class 'bool'>,\n              Optional  (str) static_mappings_configured: <class 'int'>,\n              },\n            },\n          },\n        'etr': {\n          'enabled': <class 'bool'>,\n          Optional  (str) encapsulation: <class 'str'>,\n          'proxy_etr_router': <class 'bool'>,\n          'accept_mapping_data': <class 'str'>,\n          'map_cache_ttl': <class 'str'>,\n          Optional  (str) use_petrs: {\n            Any  (str) *: {\n              'use_petr': <class 'str'>,\n              },\n            },\n          Optional  (str) mapping_servers: {\n            Any  (str) *: {\n              'ms_address': <class 'str'>,\n              Optional  (str) uptime: <class 'str'>,\n              },\n            },\n          },\n        'itr': {\n          'enabled': <class 'bool'>,\n          'proxy_itr_router': <class 'bool'>,\n          Optional  (str) proxy_itrs: {\n            Any  (str) *: {\n              'proxy_etr_address': <class 'str'>,\n              },\n            },\n          'solicit_map_request': <class 'str'>,\n          'max_smr_per_map_cache_entry': <class 'str'>,\n          'multiple_smr_suppression_time': <class 'int'>,\n          Optional  (str) map_resolvers: {\n            Any  (str) *: {\n              'map_resolver': <class 'str'>,\n              },\n            },\n          },\n        'locator_status_algorithms': {\n          'rloc_probe_algorithm': <class 'bool'>,\n          'rloc_probe_on_route_change': <class 'str'>,\n          'rloc_probe_on_member_change': <class 'bool'>,\n          'lsb_reports': <class 'str'>,\n          'ipv4_rloc_min_mask_len': <class 'int'>,\n          'ipv6_rloc_min_mask_len': <class 'int'>,\n          },\n        'map_cache': {\n          'map_cache_activity_check_period': <class 'int'>,\n          Optional  (str) map_cache_fib_updates: <class 'str'>,\n          'map_cache_limit': <class 'int'>,\n          },\n        'map_server': {\n          'enabled': <class 'bool'>,\n          },\n        'map_resolver': {\n          'enabled': <class 'bool'>,\n          },\n        Optional  (str) source_locator_configuration: {\n          'vlans': {\n            Any  (str) *: {\n              'address': <class 'str'>,\n              'interface': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_service_service", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L790"}}, "show lisp all service {service} summary": {"ios": {"class": "ShowLispServiceSummary", "doc": "Parser for \"show lisp all service <service> summary\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) virtual_network_ids: {\n          Any  (str) *: {\n            Optional  (str) vrf: <class 'str'>,\n            'interface': <class 'str'>,\n            'db_size': <class 'int'>,\n            'db_no_route': <class 'int'>,\n            'cache_size': <class 'int'>,\n            'incomplete': <class 'str'>,\n            'cache_idle': <class 'str'>,\n            'lisp_role': {\n              Any  (str) *: {\n                'lisp_role_type': <class 'str'>,\n                },\n              },\n            },\n          },\n        'etr': {\n          'summary': {\n            'instance_count': <class 'int'>,\n            'total_eid_tables': <class 'int'>,\n            'total_db_entries': <class 'int'>,\n            'total_map_cache_entries': <class 'int'>,\n            'total_db_entries_inactive': <class 'int'>,\n            'eid_tables_inconsistent_locators': <class 'int'>,\n            'eid_tables_incomplete_map_cache_entries': <class 'int'>,\n            'eid_tables_pending_map_cache_update_to_fib': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_service_service_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L130"}, "iosxe": {"class": "ShowLispServiceSummary", "doc": "Parser for \"show lisp all service <service> summary\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'lisp_router_instances': {\n  Any  (str) *: {\n    'lisp_router_instance_id': <class 'int'>,\n    Optional  (str) service: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) virtual_network_ids: {\n          Any  (str) *: {\n            Optional  (str) vrf: <class 'str'>,\n            'interface': <class 'str'>,\n            'db_size': <class 'int'>,\n            'db_no_route': <class 'int'>,\n            'cache_size': <class 'int'>,\n            'incomplete': <class 'str'>,\n            'cache_idle': <class 'str'>,\n            'lisp_role': {\n              Any  (str) *: {\n                'lisp_role_type': <class 'str'>,\n                },\n              },\n            },\n          },\n        'etr': {\n          'summary': {\n            'instance_count': <class 'int'>,\n            'total_eid_tables': <class 'int'>,\n            'total_db_entries': <class 'int'>,\n            'total_map_cache_entries': <class 'int'>,\n            'total_db_entries_inactive': <class 'int'>,\n            'eid_tables_inconsistent_locators': <class 'int'>,\n            'eid_tables_incomplete_map_cache_entries': <class 'int'>,\n            'eid_tables_pending_map_cache_update_to_fib': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_all_service_service_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L1997"}}, "show lisp platform": {"ios": {"class": "ShowLispPlatform", "doc": " Parser for \"show lisp platform\" ", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'parallel_lisp_instance_limit': <class 'int'>,\n'rloc_forwarding_support': {\n  'local': {\n    'ipv4': <class 'str'>,\n    'ipv6': <class 'str'>,\n    'mac': <class 'str'>,\n    },\n  'remote': {\n    'ipv4': <class 'str'>,\n    'ipv6': <class 'str'>,\n    'mac': <class 'str'>,\n    },\n  },\n'latest_supported_config_style': <class 'str'>,\n'current_config_style': <class 'str'>,\n}", "uid": "show_lisp_platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L74"}, "iosxe": {"class": "ShowLispPlatform", "doc": " Parser for \"show lisp platform\" ", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'parallel_lisp_instance_limit': <class 'int'>,\n'rloc_forwarding_support': {\n  'local': {\n    'ipv4': <class 'str'>,\n    'ipv6': <class 'str'>,\n    'mac': <class 'str'>,\n    },\n  'remote': {\n    'ipv4': <class 'str'>,\n    'ipv6': <class 'str'>,\n    'mac': <class 'str'>,\n    },\n  },\n'latest_supported_config_style': <class 'str'>,\n'current_config_style': <class 'str'>,\n}", "uid": "show_lisp_platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L166"}}, "show lisp session": {"ios": {"class": "ShowLispSession", "doc": " Parser for show lisp session", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sessions': {\n      'total': <class 'int'>,\n      'established': <class 'int'>,\n      'peers': {\n        Any  (str) *: {\n          'state': <class 'str'>,\n          'time': <class 'str'>,\n          'total_in': <class 'int'>,\n          'total_out': <class 'int'>,\n          'users': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_session", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lisp.py#L66"}, "iosxe": {"class": "ShowLispSession", "doc": " Parser for \"show lisp session\"", "module_name": "show_lisp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sessions': {\n      'total': <class 'int'>,\n      'established': <class 'int'>,\n      'peers': {\n        Any  (str) *: {\n          'state': <class 'str'>,\n          'time': <class 'str'>,\n          'total_in': <class 'int'>,\n          'total_out': <class 'int'>,\n          'users': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lisp_session", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lisp.py#L80"}}, "show lldp": {"ios": {"class": "ShowLldp", "doc": "Parser for show lldp", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'status': <class 'str'>,\n'enabled': <class 'bool'>,\n'hello_timer': <class 'int'>,\n'hold_timer': <class 'int'>,\n'reinit_timer': <class 'int'>,\n}", "uid": "show_lldp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L17"}, "iosxe": {"class": "ShowLldp", "doc": "Parser for show lldp", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'status': <class 'str'>,\n'enabled': <class 'bool'>,\n'hello_timer': <class 'int'>,\n'hold_timer': <class 'int'>,\n'reinit_timer': <class 'int'>,\n}", "uid": "show_lldp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L37"}, "iosxr": {"class": "ShowLldp", "doc": "Parser for show lldp", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'status': <class 'str'>,\n'enabled': <class 'bool'>,\n'hello_timer': <class 'int'>,\n'hold_timer': <class 'int'>,\n'reinit_delay': <class 'int'>,\n}", "uid": "show_lldp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lldp.py#L30"}}, "show lldp all": {"nxos": {"class": "ShowLldpAll", "doc": "parser for show lldp all", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'enabled': <class 'bool'>,\n    'tx': <class 'bool'>,\n    'rx': <class 'bool'>,\n    'dcbx': <class 'bool'>,\n    },\n  },\n}", "uid": "show_lldp_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lldp.py#L36"}}, "show lldp entry *": {"ios": {"class": "ShowLldpEntry", "doc": "Parser for show lldp entry [<WORD>|*]", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'if_name': <class 'str'>,\n    'port_id': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'chassis_id': <class 'str'>,\n            'port_id': <class 'str'>,\n            'neighbor_id': <class 'str'>,\n            Optional  (str) port_description: <class 'str'>,\n            Optional  (str) system_description: <class 'str'>,\n            Optional  (str) system_name: <class 'str'>,\n            'time_remaining': <class 'int'>,\n            Optional  (str) capabilities: {\n              Any  (str) *: {\n                Optional  (str) system: <class 'bool'>,\n                Optional  (str) enabled: <class 'bool'>,\n                'name': <class 'str'>,\n                },\n              },\n            Optional  (str) management_address: <class 'str'>,\n            Optional  (str) auto_negotiation: <class 'str'>,\n            Optional  (str) physical_media_capabilities: <class 'list'>,\n            Optional  (str) unit_type: <class 'int'>,\n            Optional  (str) vlan_id: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) med_information: {\n  'f/w_revision': <class 'str'>,\n  Optional  (str) h/w_revision: <class 'str'>,\n  Optional  (str) s/w_revision: <class 'str'>,\n  'manufacturer': <class 'str'>,\n  'model': <class 'str'>,\n  'capabilities': <class 'list'>,\n  'device_type': <class 'str'>,\n  'network_policy': {\n    Any  (str) *: {\n      'vlan': <class 'int'>,\n      'tagged': <class 'bool'>,\n      'layer_2_priority': <class 'int'>,\n      'dscp': <class 'int'>,\n      },\n    },\n  Optional  (str) serial_number: <class 'str'>,\n  'power_source': <class 'str'>,\n  'power_priority': <class 'str'>,\n  'wattage': <class 'float'>,\n  'location': <class 'str'>,\n  },\n}", "uid": "show_lldp_entry_*", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L21"}, "iosxe": {"class": "ShowLldpEntry", "doc": "Parser for show lldp entry {* | word}", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'if_name': <class 'str'>,\n    'port_id': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'chassis_id': <class 'str'>,\n            'port_id': <class 'str'>,\n            'neighbor_id': <class 'str'>,\n            Optional  (str) port_description: <class 'str'>,\n            Optional  (str) system_description: <class 'str'>,\n            Optional  (str) system_name: <class 'str'>,\n            'time_remaining': <class 'int'>,\n            Optional  (str) capabilities: {\n              Any  (str) *: {\n                Optional  (str) system: <class 'bool'>,\n                Optional  (str) enabled: <class 'bool'>,\n                'name': <class 'str'>,\n                },\n              },\n            Optional  (str) management_address: <class 'str'>,\n            Optional  (str) auto_negotiation: <class 'str'>,\n            Optional  (str) physical_media_capabilities: <class 'list'>,\n            Optional  (str) unit_type: <class 'int'>,\n            Optional  (str) vlan_id: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) med_information: {\n  'f/w_revision': <class 'str'>,\n  Optional  (str) h/w_revision: <class 'str'>,\n  Optional  (str) s/w_revision: <class 'str'>,\n  'manufacturer': <class 'str'>,\n  'model': <class 'str'>,\n  'capabilities': <class 'list'>,\n  'device_type': <class 'str'>,\n  'network_policy': {\n    Any  (str) *: {\n      'vlan': <class 'int'>,\n      'tagged': <class 'bool'>,\n      'layer_2_priority': <class 'int'>,\n      'dscp': <class 'int'>,\n      },\n    },\n  Optional  (str) serial_number: <class 'str'>,\n  'power_source': <class 'str'>,\n  'power_priority': <class 'str'>,\n  'wattage': <class 'float'>,\n  'location': <class 'str'>,\n  },\n}", "uid": "show_lldp_entry_*", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L145"}, "iosxr": {"class": "ShowLldpEntry", "doc": "Parser for show lldp entry *", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'port_id': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'chassis_id': <class 'str'>,\n            'port_description': <class 'str'>,\n            'system_name': <class 'str'>,\n            'system_description': <class 'str'>,\n            'time_remaining': <class 'int'>,\n            'neighbor_id': <class 'str'>,\n            'hold_time': <class 'int'>,\n            'capabilities': {\n              Any  (str) *: {\n                Optional  (str) system: <class 'bool'>,\n                Optional  (str) enabled: <class 'bool'>,\n                },\n              },\n            Optional  (str) management_address: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lldp_entry_*", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lldp.py#L107"}}, "show lldp entry {entry}": {"ios": {"class": "ShowLldpEntry", "doc": "Parser for show lldp entry [<WORD>|*]", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'if_name': <class 'str'>,\n    'port_id': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'chassis_id': <class 'str'>,\n            'port_id': <class 'str'>,\n            'neighbor_id': <class 'str'>,\n            Optional  (str) port_description: <class 'str'>,\n            Optional  (str) system_description: <class 'str'>,\n            Optional  (str) system_name: <class 'str'>,\n            'time_remaining': <class 'int'>,\n            Optional  (str) capabilities: {\n              Any  (str) *: {\n                Optional  (str) system: <class 'bool'>,\n                Optional  (str) enabled: <class 'bool'>,\n                'name': <class 'str'>,\n                },\n              },\n            Optional  (str) management_address: <class 'str'>,\n            Optional  (str) auto_negotiation: <class 'str'>,\n            Optional  (str) physical_media_capabilities: <class 'list'>,\n            Optional  (str) unit_type: <class 'int'>,\n            Optional  (str) vlan_id: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) med_information: {\n  'f/w_revision': <class 'str'>,\n  Optional  (str) h/w_revision: <class 'str'>,\n  Optional  (str) s/w_revision: <class 'str'>,\n  'manufacturer': <class 'str'>,\n  'model': <class 'str'>,\n  'capabilities': <class 'list'>,\n  'device_type': <class 'str'>,\n  'network_policy': {\n    Any  (str) *: {\n      'vlan': <class 'int'>,\n      'tagged': <class 'bool'>,\n      'layer_2_priority': <class 'int'>,\n      'dscp': <class 'int'>,\n      },\n    },\n  Optional  (str) serial_number: <class 'str'>,\n  'power_source': <class 'str'>,\n  'power_priority': <class 'str'>,\n  'wattage': <class 'float'>,\n  'location': <class 'str'>,\n  },\n}", "uid": "show_lldp_entry_entry", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L21"}, "iosxe": {"class": "ShowLldpEntry", "doc": "Parser for show lldp entry {* | word}", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'if_name': <class 'str'>,\n    'port_id': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'chassis_id': <class 'str'>,\n            'port_id': <class 'str'>,\n            'neighbor_id': <class 'str'>,\n            Optional  (str) port_description: <class 'str'>,\n            Optional  (str) system_description: <class 'str'>,\n            Optional  (str) system_name: <class 'str'>,\n            'time_remaining': <class 'int'>,\n            Optional  (str) capabilities: {\n              Any  (str) *: {\n                Optional  (str) system: <class 'bool'>,\n                Optional  (str) enabled: <class 'bool'>,\n                'name': <class 'str'>,\n                },\n              },\n            Optional  (str) management_address: <class 'str'>,\n            Optional  (str) auto_negotiation: <class 'str'>,\n            Optional  (str) physical_media_capabilities: <class 'list'>,\n            Optional  (str) unit_type: <class 'int'>,\n            Optional  (str) vlan_id: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) med_information: {\n  'f/w_revision': <class 'str'>,\n  Optional  (str) h/w_revision: <class 'str'>,\n  Optional  (str) s/w_revision: <class 'str'>,\n  'manufacturer': <class 'str'>,\n  'model': <class 'str'>,\n  'capabilities': <class 'list'>,\n  'device_type': <class 'str'>,\n  'network_policy': {\n    Any  (str) *: {\n      'vlan': <class 'int'>,\n      'tagged': <class 'bool'>,\n      'layer_2_priority': <class 'int'>,\n      'dscp': <class 'int'>,\n      },\n    },\n  Optional  (str) serial_number: <class 'str'>,\n  'power_source': <class 'str'>,\n  'power_priority': <class 'str'>,\n  'wattage': <class 'float'>,\n  'location': <class 'str'>,\n  },\n}", "uid": "show_lldp_entry_entry", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L145"}}, "show lldp interface": {"ios": {"class": "ShowLldpInterface", "doc": "Parser for show lldp interface [<WORD>]", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'tx': <class 'str'>,\n    'rx': <class 'str'>,\n    'tx_state': <class 'str'>,\n    'rx_state': <class 'str'>,\n    },\n  },\n}", "uid": "show_lldp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L33"}, "iosxe": {"class": "ShowLldpInterface", "doc": "Parser for show lldp interface [<WORD>]", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'tx': <class 'str'>,\n    'rx': <class 'str'>,\n    'tx_state': <class 'str'>,\n    'rx_state': <class 'str'>,\n    },\n  },\n}", "uid": "show_lldp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L589"}, "iosxr": {"class": "ShowLldpInterface", "doc": "Parser for show lldp interface", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'tx': <class 'str'>,\n    'rx': <class 'str'>,\n    'tx_state': <class 'str'>,\n    'rx_state': <class 'str'>,\n    },\n  },\n}", "uid": "show_lldp_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lldp.py#L408"}}, "show lldp interface {interface}": {"ios": {"class": "ShowLldpInterface", "doc": "Parser for show lldp interface [<WORD>]", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'tx': <class 'str'>,\n    'rx': <class 'str'>,\n    'tx_state': <class 'str'>,\n    'rx_state': <class 'str'>,\n    },\n  },\n}", "uid": "show_lldp_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L33"}, "iosxe": {"class": "ShowLldpInterface", "doc": "Parser for show lldp interface [<WORD>]", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'tx': <class 'str'>,\n    'rx': <class 'str'>,\n    'tx_state': <class 'str'>,\n    'rx_state': <class 'str'>,\n    },\n  },\n}", "uid": "show_lldp_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L589"}}, "show lldp neighbors": {"iosxe": {"class": "ShowLldpNeighbors", "doc": "\n    Parser for show lldp neighbors\n    ", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\n'interfaces': {\n  Any  (str) *: {\n    'port_id': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'hold_time': <class 'int'>,\n            Optional  (str) capabilities: <class 'list'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lldp_neighbors", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L657"}}, "show lldp neighbors detail": {"ios": {"class": "ShowLldpNeighborsDetail", "doc": "Parser for show lldp neighbors detail", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'if_name': <class 'str'>,\n    'port_id': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'chassis_id': <class 'str'>,\n            'port_id': <class 'str'>,\n            'neighbor_id': <class 'str'>,\n            Optional  (str) port_description: <class 'str'>,\n            Optional  (str) system_description: <class 'str'>,\n            Optional  (str) system_name: <class 'str'>,\n            'time_remaining': <class 'int'>,\n            Optional  (str) capabilities: {\n              Any  (str) *: {\n                Optional  (str) system: <class 'bool'>,\n                Optional  (str) enabled: <class 'bool'>,\n                'name': <class 'str'>,\n                },\n              },\n            Optional  (str) management_address: <class 'str'>,\n            Optional  (str) auto_negotiation: <class 'str'>,\n            Optional  (str) physical_media_capabilities: <class 'list'>,\n            Optional  (str) unit_type: <class 'int'>,\n            Optional  (str) vlan_id: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) med_information: {\n  'f/w_revision': <class 'str'>,\n  Optional  (str) h/w_revision: <class 'str'>,\n  Optional  (str) s/w_revision: <class 'str'>,\n  'manufacturer': <class 'str'>,\n  'model': <class 'str'>,\n  'capabilities': <class 'list'>,\n  'device_type': <class 'str'>,\n  'network_policy': {\n    Any  (str) *: {\n      'vlan': <class 'int'>,\n      'tagged': <class 'bool'>,\n      'layer_2_priority': <class 'int'>,\n      'dscp': <class 'int'>,\n      },\n    },\n  Optional  (str) serial_number: <class 'str'>,\n  'power_source': <class 'str'>,\n  'power_priority': <class 'str'>,\n  'wattage': <class 'float'>,\n  'location': <class 'str'>,\n  },\n}", "uid": "show_lldp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L25"}, "iosxe": {"class": "ShowLldpNeighborsDetail", "doc": "Parser for show lldp neighbors detail", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'if_name': <class 'str'>,\n    'port_id': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'chassis_id': <class 'str'>,\n            'port_id': <class 'str'>,\n            'neighbor_id': <class 'str'>,\n            Optional  (str) port_description: <class 'str'>,\n            Optional  (str) system_description: <class 'str'>,\n            Optional  (str) system_name: <class 'str'>,\n            'time_remaining': <class 'int'>,\n            Optional  (str) capabilities: {\n              Any  (str) *: {\n                Optional  (str) system: <class 'bool'>,\n                Optional  (str) enabled: <class 'bool'>,\n                'name': <class 'str'>,\n                },\n              },\n            Optional  (str) management_address: <class 'str'>,\n            Optional  (str) auto_negotiation: <class 'str'>,\n            Optional  (str) physical_media_capabilities: <class 'list'>,\n            Optional  (str) unit_type: <class 'int'>,\n            Optional  (str) vlan_id: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) med_information: {\n  'f/w_revision': <class 'str'>,\n  Optional  (str) h/w_revision: <class 'str'>,\n  Optional  (str) s/w_revision: <class 'str'>,\n  'manufacturer': <class 'str'>,\n  'model': <class 'str'>,\n  'capabilities': <class 'list'>,\n  'device_type': <class 'str'>,\n  'network_policy': {\n    Any  (str) *: {\n      'vlan': <class 'int'>,\n      'tagged': <class 'bool'>,\n      'layer_2_priority': <class 'int'>,\n      'dscp': <class 'int'>,\n      },\n    },\n  Optional  (str) serial_number: <class 'str'>,\n  'power_source': <class 'str'>,\n  'power_priority': <class 'str'>,\n  'wattage': <class 'float'>,\n  'location': <class 'str'>,\n  },\n}", "uid": "show_lldp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L497"}, "iosxr": {"class": "ShowLldpNeighborsDetail", "doc": "Parser for show lldp neighbors detail", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\nOptional  (str) interfaces: {\n  Any  (str) *: {\n    'port_id': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'chassis_id': <class 'str'>,\n            'port_description': <class 'str'>,\n            'system_name': <class 'str'>,\n            'system_description': <class 'str'>,\n            'time_remaining': <class 'int'>,\n            'neighbor_id': <class 'str'>,\n            'hold_time': <class 'int'>,\n            'capabilities': {\n              Any  (str) *: {\n                Optional  (str) system: <class 'bool'>,\n                Optional  (str) enabled: <class 'bool'>,\n                },\n              },\n            Optional  (str) management_address: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lldp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lldp.py#L312"}, "nxos": {"class": "ShowLldpNeighborsDetail", "doc": "parser for lldp show neighbors detail", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'total_entries': <class 'int'>,\n'interfaces': {\n  Any  (str) *: {\n    'port_id': {\n      Any  (str) *: {\n        'neighbors': {\n          Any  (str) *: {\n            'chassis_id': <class 'str'>,\n            Optional  (str) port_description: <class 'str'>,\n            'system_name': <class 'str'>,\n            'system_description': <class 'str'>,\n            'time_remaining': <class 'int'>,\n            Optional  (str) capabilities: {\n              Any  (str) *: {\n                'name': <class 'str'>,\n                Optional  (str) system: <class 'bool'>,\n                Optional  (str) enabled: <class 'bool'>,\n                },\n              },\n            'management_address_v4': <class 'str'>,\n            Optional  (str) management_address_v6: <class 'str'>,\n            Optional  (str) system_capabilities: <class 'str'>,\n            Optional  (str) enabled_capabilities: <class 'str'>,\n            'vlan_id': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_lldp_neighbors_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lldp.py#L208"}}, "show lldp timers": {"nxos": {"class": "ShowLldpTimers", "doc": "parser for show lldp timers", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'hold_timer': <class 'int'>,\n'reinit_timer': <class 'int'>,\n'hello_timer': <class 'int'>,\n}", "uid": "show_lldp_timers", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lldp.py#L90"}}, "show lldp tlv-select": {"nxos": {"class": "ShowLldpTlvSelect", "doc": "parser for show lldp tlv-select", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'suppress_tlv_advertisement': {\n  Any  (str) *: <class 'bool'>,\n  },\n}", "uid": "show_lldp_tlv-select", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lldp.py#L143"}}, "show lldp traffic": {"ios": {"class": "ShowLldpTraffic", "doc": "Parser for show lldp traffic", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'frame_in': <class 'int'>,\n'frame_out': <class 'int'>,\n'frame_error_in': <class 'int'>,\n'frame_discard': <class 'int'>,\n'tlv_discard': <class 'int'>,\n'tlv_unknown': <class 'int'>,\n'entries_aged_out': <class 'int'>,\n}", "uid": "show_lldp_traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lldp.py#L29"}, "iosxe": {"class": "ShowLldpTraffic", "doc": "Parser for show lldp traffic", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'frame_in': <class 'int'>,\n'frame_out': <class 'int'>,\n'frame_error_in': <class 'int'>,\n'frame_discard': <class 'int'>,\n'tlv_discard': <class 'int'>,\n'tlv_unknown': <class 'int'>,\n'entries_aged_out': <class 'int'>,\n}", "uid": "show_lldp_traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lldp.py#L523"}, "iosxr": {"class": "ShowLldpTraffic", "doc": "Parser for show lldp traffic", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'counters': {\n  'frame_in': <class 'int'>,\n  'frame_out': <class 'int'>,\n  'frame_error_in': <class 'int'>,\n  'frame_discard': <class 'int'>,\n  'tlv_discard': <class 'int'>,\n  'tlv_unknown': <class 'int'>,\n  'entries_aged_out': <class 'int'>,\n  },\n}", "uid": "show_lldp_traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_lldp.py#L333"}, "nxos": {"class": "ShowLldpTraffic", "doc": "parser ofr show lldp traffic", "module_name": "show_lldp", "package": "genie.libs.parser", "schema": "{\n'counters': {\n  'total_frames_received': <class 'int'>,\n  'total_frames_transmitted': <class 'int'>,\n  'total_frames_received_in_error': <class 'int'>,\n  'total_frames_discarded': <class 'int'>,\n  'total_unrecognized_tlvs': <class 'int'>,\n  'total_entries_aged': <class 'int'>,\n  },\n}", "uid": "show_lldp_traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lldp.py#L466"}}, "show logging": {"iosxe": {"class": "ShowLogging", "doc": "Parser for:\n        * 'show logging'\n        * 'show logging | include {include}'\n    ", "module_name": "show_logging", "package": "genie.libs.parser", "schema": "{\n'logs': <class 'list'>,\n}", "uid": "show_logging", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_logging.py#L36"}}, "show logging logfile": {"nxos": {"class": "ShowLoggingLogfile", "doc": "Schema for:\n        * 'show logging logfile'\n        * 'show logging logfile | include {include}'\n    ", "module_name": "show_logging", "package": "genie.libs.parser", "schema": "{\n'logs': <class 'list'>,\n}", "uid": "show_logging_logfile", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_logging.py#L38"}}, "show logging logfile | include {include}": {"nxos": {"class": "ShowLoggingLogfile", "doc": "Schema for:\n        * 'show logging logfile'\n        * 'show logging logfile | include {include}'\n    ", "module_name": "show_logging", "package": "genie.libs.parser", "schema": "{\n'logs': <class 'list'>,\n}", "uid": "show_logging_logfile___include_include", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_logging.py#L38"}}, "show logging | include {include}": {"iosxe": {"class": "ShowLogging", "doc": "Parser for:\n        * 'show logging'\n        * 'show logging | include {include}'\n    ", "module_name": "show_logging", "package": "genie.libs.parser", "schema": "{\n'logs': <class 'list'>,\n}", "uid": "show_logging___include_include", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_logging.py#L36"}}, "show mac address-table": {"ios": {"class": "ShowMacAddressTable", "doc": "Parser for show mac address-table", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': Or (<class 'int'>, <class 'str'>),\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'entry_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'entry_type': <class 'str'>,\n              Optional  (str) entry: <class 'str'>,\n              Optional  (str) learn: <class 'str'>,\n              Optional  (str) age: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) total_mac_addresses: <class 'int'>,\n}", "uid": "show_mac_address-table", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_fdb.py#L21"}, "iosxe": {"class": "ShowMacAddressTable", "doc": "Parser for show mac address-table", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': Or (<class 'int'>, <class 'str'>),\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'entry_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'entry_type': <class 'str'>,\n              Optional  (str) entry: <class 'str'>,\n              Optional  (str) learn: <class 'str'>,\n              Optional  (str) age: <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) total_mac_addresses: <class 'int'>,\n}", "uid": "show_mac_address-table", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_fdb.py#L55"}, "nxos": {"class": "ShowMacAddressTable", "doc": "Parser for show mac address-table", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mac_address-table", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L159"}}, "show mac address-table address {address}": {"nxos": {"class": "ShowMacAddressTable", "doc": "Parser for show mac address-table", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mac_address-table_address_address", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L159"}}, "show mac address-table address {address} interface {interface}": {"nxos": {"class": "ShowMacAddressTable", "doc": "Parser for show mac address-table", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mac_address-table_address_address_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L159"}}, "show mac address-table address {address} interface {interface} vlan {vlan}": {"nxos": {"class": "ShowMacAddressTable", "doc": "Parser for show mac address-table", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mac_address-table_address_address_interface_interface_vlan_vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L159"}}, "show mac address-table address {address} vlan {vlan}": {"nxos": {"class": "ShowMacAddressTable", "doc": "Parser for show mac address-table", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mac_address-table_address_address_vlan_vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L159"}}, "show mac address-table aging-time": {"ios": {"class": "ShowMacAddressTableAgingTime", "doc": "Parser for show mac address-table aging-time", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_aging_time': <class 'int'>,\nOptional  (str) vlans: {\n  Any  (str) *: {\n    'mac_aging_time': <class 'int'>,\n    'vlan': Or (<class 'int'>, <class 'str'>),\n    },\n  },\n}", "uid": "show_mac_address-table_aging-time", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_fdb.py#L26"}, "iosxe": {"class": "ShowMacAddressTableAgingTime", "doc": "Parser for show mac address-table aging-time", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_aging_time': <class 'int'>,\nOptional  (str) vlans: {\n  Any  (str) *: {\n    'mac_aging_time': <class 'int'>,\n    'vlan': Or (<class 'int'>, <class 'str'>),\n    },\n  },\n}", "uid": "show_mac_address-table_aging-time", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_fdb.py#L214"}, "nxos": {"class": "ShowMacAddressTableAgingTime", "doc": "Parser for show mac address-table aging-time", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_aging_time': <class 'int'>,\n}", "uid": "show_mac_address-table_aging-time", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L215"}}, "show mac address-table interface {interface}": {"nxos": {"class": "ShowMacAddressTable", "doc": "Parser for show mac address-table", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mac_address-table_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L159"}}, "show mac address-table interface {interface} vlan {vlan}": {"nxos": {"class": "ShowMacAddressTable", "doc": "Parser for show mac address-table", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mac_address-table_interface_interface_vlan_vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L159"}}, "show mac address-table learning": {"ios": {"class": "ShowMacAddressTableLearning", "doc": "Parser for show mac address-table learning", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    'mac_learning': <class 'bool'>,\n    'vlan': Or (<class 'int'>, <class 'str'>),\n    },\n  },\n}", "uid": "show_mac_address-table_learning", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_fdb.py#L31"}, "iosxe": {"class": "ShowMacAddressTableLearning", "doc": "Parser for show mac address-table learning", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    'mac_learning': <class 'bool'>,\n    'vlan': Or (<class 'int'>, <class 'str'>),\n    },\n  },\n}", "uid": "show_mac_address-table_learning", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_fdb.py#L271"}}, "show mac address-table limit": {"nxos": {"class": "ShowMacAddressTableLimit", "doc": "Parser for show mac address-table limit", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'configured_system_limit': <class 'int'>,\n'current_system_count': <class 'int'>,\n'configured_system_action': <class 'str'>,\n'currently_system_is': <class 'str'>,\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'conf_limit': <class 'int'>,\n      'curr_count': <class 'int'>,\n      'cfg_action': <class 'str'>,\n      'currently': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_mac_address-table_limit", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L269"}}, "show mac address-table local vni {vni}": {"nxos": {"class": "ShowMacAddressTableVni", "doc": "Parser for:\n        'show mac address-table vni <WORD> | grep <WORD>'\n        'show mac address-table local vni <WORD>'", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mac_address-table_local_vni_vni", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L130"}}, "show mac address-table vlan {vlan}": {"nxos": {"class": "ShowMacAddressTable", "doc": "Parser for show mac address-table", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mac_address-table_vlan_vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L159"}}, "show mac address-table vni {vni} | grep {interface}": {"nxos": {"class": "ShowMacAddressTableVni", "doc": "Parser for:\n        'show mac address-table vni <WORD> | grep <WORD>'\n        'show mac address-table local vni <WORD>'", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mac_address-table_vni_vni___grep_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L130"}}, "show memory statistics": {"ios": {"class": "ShowMemoryStatistics", "doc": "Parser for show memory statistics", "module_name": "show_memory", "package": "genie.libs.parser", "schema": "{\nOptional  (str) tracekey: <class 'str'>,\n'name': {\n  Any  (str) *: {\n    'head': <class 'str'>,\n    'total': <class 'int'>,\n    'used': <class 'int'>,\n    'free': <class 'int'>,\n    'lowest': <class 'int'>,\n    'largest': <class 'int'>,\n    },\n  },\n}", "uid": "show_memory_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_memory.py#L7"}, "iosxe": {"class": "ShowMemoryStatistics", "doc": "Parser for show memory statistics", "module_name": "show_memory", "package": "genie.libs.parser", "schema": "{\nOptional  (str) tracekey: <class 'str'>,\n'name': {\n  Any  (str) *: {\n    'head': <class 'str'>,\n    'total': <class 'int'>,\n    'used': <class 'int'>,\n    'free': <class 'int'>,\n    'lowest': <class 'int'>,\n    'largest': <class 'int'>,\n    },\n  },\n}", "uid": "show_memory_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_memory.py#L35"}}, "show mld groups detail": {"iosxr": {"class": "ShowMldGroupsDetail", "doc": "\n    Parser for:\n    show mld groups detail\n    show mld vrf {vrf} groups detail\n    ", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'router_mode': <class 'str'>,\n            'host_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) suppress: <class 'int'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                Optional  (str) expire: <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mld_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mld.py#L523"}}, "show mld groups {group} detail": {"iosxr": {"class": "ShowMldGroupsGroupDetail", "doc": " \n    Parser for:\n    show mld groups {group} detail\n    ", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'router_mode': <class 'str'>,\n            'host_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) suppress: <class 'int'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                Optional  (str) expire: <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mld_groups_group_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mld.py#L704"}}, "show mld interface": {"iosxr": {"class": "ShowMldInterface", "doc": "\n    Parser for:\n    show mld interface\n    show mld vrf {vrf} interface\n    ", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) max_groups: <class 'int'>,\n    Optional  (str) active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        'oper_status': <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) internet_address: <class 'str'>,\n        'enable': <class 'bool'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'joins': <class 'int'>,\n          'leaves': <class 'int'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_query_sent: <class 'str'>,\n        Optional  (str) time_elapsed_since_igmp_router_enabled: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_report_received: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mld_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mld.py#L281"}}, "show mld summary internal": {"iosxr": {"class": "ShowMldSummaryInternal", "doc": "\n    Parser for:\n    show mld summary internal\n    show mld vrf {vrf} summary internal\n    ", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) robustness_value: <class 'int'>,\n    Optional  (str) num_groups_x_intf: <class 'int'>,\n    Optional  (str) max_num_groups_x_intfs: <class 'int'>,\n    Optional  (str) supported_intf: <class 'int'>,\n    Optional  (str) unsupported_intf: <class 'int'>,\n    Optional  (str) enabled_intf: <class 'int'>,\n    Optional  (str) disabled_intf: <class 'int'>,\n    Optional  (str) mte_tuple_count: <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'num_groups': <class 'int'>,\n        'max_groups': <class 'int'>,\n        'on': <class 'bool'>,\n        'parent': <class 'str'>,\n        'last_query': <class 'str'>,\n        'last_report': <class 'str'>,\n        'igmp_r_uptime': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mld_summary_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mld.py#L73"}}, "show mld vrf {vrf} groups detail": {"iosxr": {"class": "ShowMldGroupsDetail", "doc": "\n    Parser for:\n    show mld groups detail\n    show mld vrf {vrf} groups detail\n    ", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) join_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        Optional  (str) static_group: {\n          Any  (str) *: {\n            'group': <class 'str'>,\n            'source': <class 'str'>,\n            },\n          },\n        'group': {\n          Any  (str) *: {\n            'up_time': <class 'str'>,\n            'router_mode': <class 'str'>,\n            'host_mode': <class 'str'>,\n            'last_reporter': <class 'str'>,\n            Optional  (str) suppress: <class 'int'>,\n            Optional  (str) expire: <class 'str'>,\n            Optional  (str) source: {\n              Any  (str) *: {\n                Optional  (str) expire: <class 'str'>,\n                'forward': <class 'bool'>,\n                Optional  (str) flags: <class 'str'>,\n                'up_time': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mld_vrf_vrf_groups_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mld.py#L523"}}, "show mld vrf {vrf} interface": {"iosxr": {"class": "ShowMldInterface", "doc": "\n    Parser for:\n    show mld interface\n    show mld vrf {vrf} interface\n    ", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) max_groups: <class 'int'>,\n    Optional  (str) active_groups: <class 'int'>,\n    'interface': {\n      Any  (str) *: {\n        'oper_status': <class 'str'>,\n        'interface_status': <class 'str'>,\n        Optional  (str) internet_address: <class 'str'>,\n        'enable': <class 'bool'>,\n        Optional  (str) version: <class 'int'>,\n        Optional  (str) query_interval: <class 'int'>,\n        Optional  (str) querier_timeout: <class 'int'>,\n        Optional  (str) query_max_response_time: <class 'int'>,\n        Optional  (str) last_member_query_interval: <class 'int'>,\n        Optional  (str) max_groups: <class 'int'>,\n        Optional  (str) active_groups: <class 'int'>,\n        Optional  (str) counters: {\n          'joins': <class 'int'>,\n          'leaves': <class 'int'>,\n          },\n        Optional  (str) querier: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_query_sent: <class 'str'>,\n        Optional  (str) time_elapsed_since_igmp_router_enabled: <class 'str'>,\n        Optional  (str) time_elapsed_since_last_report_received: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mld_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mld.py#L281"}}, "show mld vrf {vrf} summary internal": {"iosxr": {"class": "ShowMldSummaryInternal", "doc": "\n    Parser for:\n    show mld summary internal\n    show mld vrf {vrf} summary internal\n    ", "module_name": "show_mld", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) robustness_value: <class 'int'>,\n    Optional  (str) num_groups_x_intf: <class 'int'>,\n    Optional  (str) max_num_groups_x_intfs: <class 'int'>,\n    Optional  (str) supported_intf: <class 'int'>,\n    Optional  (str) unsupported_intf: <class 'int'>,\n    Optional  (str) enabled_intf: <class 'int'>,\n    Optional  (str) disabled_intf: <class 'int'>,\n    Optional  (str) mte_tuple_count: <class 'int'>,\n    Optional  (str) interface: {\n      Any  (str) *: {\n        'num_groups': <class 'int'>,\n        'max_groups': <class 'int'>,\n        'on': <class 'bool'>,\n        'parent': <class 'str'>,\n        'last_query': <class 'str'>,\n        'last_report': <class 'str'>,\n        'igmp_r_uptime': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mld_vrf_vrf_summary_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mld.py#L73"}}, "show module": {"ios": {"c7600": {"class": "ShowModule", "doc": "\n    Parser for command:\n        * show module\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'slot': {\n  Any  (str) *: {\n    Optional  (str) rp: {\n      'ports': <class 'int'>,\n      'card_type': <class 'str'>,\n      'model': <class 'str'>,\n      'serial_number': <class 'str'>,\n      'mac_address_from': <class 'str'>,\n      'mac_address_to': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      Optional  (str) fw_ver: <class 'str'>,\n      Optional  (str) sw_ver: <class 'str'>,\n      'status': <class 'str'>,\n      Optional  (str) online_diag_status: <class 'str'>,\n      Optional  (str) subslot: {\n        Any  (str) *: {\n          'hw_ver': <class 'str'>,\n          'status': <class 'str'>,\n          'serial_number': <class 'str'>,\n          'model': <class 'str'>,\n          },\n        },\n      },\n    Optional  (str) lc: {\n      'ports': <class 'int'>,\n      'card_type': <class 'str'>,\n      'model': <class 'str'>,\n      'serial_number': <class 'str'>,\n      'mac_address_from': <class 'str'>,\n      'mac_address_to': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      Optional  (str) fw_ver: <class 'str'>,\n      Optional  (str) sw_ver: <class 'str'>,\n      'status': <class 'str'>,\n      Optional  (str) online_diag_status: <class 'str'>,\n      Optional  (str) subslot: {\n        Any  (str) *: {\n          'hw_ver': <class 'str'>,\n          'status': <class 'str'>,\n          'serial_number': <class 'str'>,\n          'model': <class 'str'>,\n          },\n        },\n      },\n    Optional  (str) other: {\n      'ports': <class 'int'>,\n      'card_type': <class 'str'>,\n      'model': <class 'str'>,\n      'serial_number': <class 'str'>,\n      'mac_address_from': <class 'str'>,\n      'mac_address_to': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      Optional  (str) fw_ver: <class 'str'>,\n      Optional  (str) sw_ver: <class 'str'>,\n      'status': <class 'str'>,\n      Optional  (str) subslot: {\n        Any  (str) *: {\n          'hw_ver': <class 'str'>,\n          'status': <class 'str'>,\n          'serial_number': <class 'str'>,\n          'model': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_module", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py#L43"}, "cat6k": {"class": "ShowModule", "doc": " Parser for commands: \n        * show module \n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'slot': {\n  Any  (str) *: {\n    Optional  (str) rp: {\n      'ports': <class 'int'>,\n      'card_type': <class 'str'>,\n      'model': <class 'str'>,\n      'serial_number': <class 'str'>,\n      'mac_address_from': <class 'str'>,\n      'mac_address_to': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      Optional  (str) fw_ver: <class 'str'>,\n      Optional  (str) sw_ver: <class 'str'>,\n      'status': <class 'str'>,\n      Optional  (str) online_diag_status: <class 'str'>,\n      Optional  (str) subslot: {\n        Any  (str) *: {\n          'hw_ver': <class 'str'>,\n          'status': <class 'str'>,\n          'serial_number': <class 'str'>,\n          'model': <class 'str'>,\n          },\n        },\n      },\n    Optional  (str) lc: {\n      'ports': <class 'int'>,\n      'card_type': <class 'str'>,\n      'model': <class 'str'>,\n      'serial_number': <class 'str'>,\n      'mac_address_from': <class 'str'>,\n      'mac_address_to': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      Optional  (str) fw_ver: <class 'str'>,\n      Optional  (str) sw_ver: <class 'str'>,\n      'status': <class 'str'>,\n      Optional  (str) online_diag_status: <class 'str'>,\n      Optional  (str) subslot: {\n        Any  (str) *: {\n          'hw_ver': <class 'str'>,\n          'status': <class 'str'>,\n          'serial_number': <class 'str'>,\n          'model': <class 'str'>,\n          },\n        },\n      },\n    Optional  (str) other: {\n      'ports': <class 'int'>,\n      'card_type': <class 'str'>,\n      'model': <class 'str'>,\n      'serial_number': <class 'str'>,\n      'mac_address_from': <class 'str'>,\n      'mac_address_to': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      Optional  (str) fw_ver: <class 'str'>,\n      Optional  (str) sw_ver: <class 'str'>,\n      'status': <class 'str'>,\n      Optional  (str) subslot: {\n        Any  (str) *: {\n          'hw_ver': <class 'str'>,\n          'status': <class 'str'>,\n          'serial_number': <class 'str'>,\n          'model': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_module", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py#L956"}, "class": "ShowModule", "doc": "Parser for show module", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'switch': {\n  Any  (str) *: {\n    'port': <class 'str'>,\n    'model': <class 'str'>,\n    'serial_number': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'hw_ver': <class 'str'>,\n    'sw_ver': <class 'str'>,\n    },\n  },\n}", "uid": "show_module", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L584"}, "iosxe": {"cat4k": {"class": "ShowModule", "doc": "Parser for show module", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'chassis_type': <class 'str'>,\n'power_consumed': <class 'str'>,\n'mod': {\n  Any  (str) *: {\n    'port': <class 'int'>,\n    'card_type': <class 'str'>,\n    'model': <class 'str'>,\n    'serial_number': <class 'str'>,\n    'mac_address_from': <class 'str'>,\n    'mac_address_to': <class 'str'>,\n    'hw_ver': <class 'str'>,\n    Optional  (str) fw_ver: <class 'str'>,\n    Optional  (str) sw_ver: <class 'str'>,\n    'status': <class 'str'>,\n    Optional  (str) redundancy_role: <class 'str'>,\n    Optional  (str) operating_mode: <class 'str'>,\n    Optional  (str) redundancy_status: <class 'str'>,\n    },\n  },\n'system_failures': {\n  'power_supply': <class 'str'>,\n  },\n}", "uid": "show_module", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/cat4k/show_platform.py#L38"}, "class": "ShowModule", "doc": "Parser for show module", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'switch': {\n  Any  (str) *: {\n    'port': <class 'str'>,\n    'model': <class 'str'>,\n    'serial_number': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'hw_ver': <class 'str'>,\n    'sw_ver': <class 'str'>,\n    },\n  },\n}", "uid": "show_module", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2882"}, "nxos": {"class": "ShowModule", "doc": "Parser for show module", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'slot': {\n  'rp': {\n    Any  (str) *: {\n      Any  (str) *: {\n        'ports': <class 'str'>,\n        Optional  (str) model: <class 'str'>,\n        'status': <class 'str'>,\n        Optional  (str) software: <class 'str'>,\n        Optional  (str) hardware: <class 'str'>,\n        Optional  (str) mac_address: <class 'str'>,\n        Optional  (str) serial_number: <class 'str'>,\n        Optional  (str) online_diag_status: <class 'str'>,\n        Optional  (str) slot/world_wide_name: <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) lc: {\n    Optional  (Any) Any  (str) *: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) ports: <class 'str'>,\n        Optional  (str) model: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) software: <class 'str'>,\n        Optional  (str) hardware: <class 'str'>,\n        Optional  (str) mac_address: <class 'str'>,\n        Optional  (str) serial_number: <class 'str'>,\n        Optional  (str) online_diag_status: <class 'str'>,\n        Optional  (str) slot/world_wide_name: <class 'str'>,\n        },\n      },\n    },\n  },\nOptional  (str) xbar: {\n  Optional  (Any) Any  (str) *: {\n    Optional  (str) ports: <class 'str'>,\n    Optional  (str) module_type: <class 'str'>,\n    Optional  (str) model: <class 'str'>,\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) software: <class 'str'>,\n    Optional  (str) hardware: <class 'str'>,\n    Optional  (str) mac_address: <class 'str'>,\n    Optional  (str) serial_number: <class 'str'>,\n    },\n  },\n}", "uid": "show_module", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L900"}}, "show monitor": {"iosxe": {"class": "ShowMonitor", "doc": " Parser for\n      \"show monitor\"\n      \"show monitor session {session}\"\n      \"show monitor session all\"\n    ", "module_name": "show_monitor", "package": "genie.libs.parser", "schema": "{\n'session': {\n  Any  (str) *: {\n    'type': <class 'str'>,\n    'status': <class 'str'>,\n    Optional  (str) source_ports: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) source_subinterfaces: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) source_vlans: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) filter_access_group: <class 'int'>,\n    Optional  (str) destination_ports: <class 'str'>,\n    Optional  (str) destination_ip_address: <class 'str'>,\n    Optional  (str) destination_erspan_id: <class 'str'>,\n    Optional  (str) origin_ip_address: <class 'str'>,\n    Optional  (str) source_erspan_id: <class 'str'>,\n    Optional  (str) source_ip_address: <class 'str'>,\n    Optional  (str) source_rspan_vlan: <class 'int'>,\n    Optional  (str) dest_rspan_vlan: <class 'int'>,\n    Optional  (str) mtu: <class 'int'>,\n    },\n  },\n}", "uid": "show_monitor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_monitor.py#L64"}}, "show monitor capture": {"iosxe": {"class": "ShowMonitorCapture", "doc": " Parser for\n      \"show monitor capture\"\n    ", "module_name": "show_monitor", "package": "genie.libs.parser", "schema": "{\n'status_information': {\n  Any  (str) *: {\n    'target_type': {\n      'interface': <class 'str'>,\n      'direction': <class 'str'>,\n      'status': <class 'str'>,\n      },\n    'filter_details': {\n      'filter_details_type': <class 'str'>,\n      Optional  (str) source_ip: <class 'str'>,\n      Optional  (str) destination_ip: <class 'str'>,\n      Optional  (str) protocol: <class 'str'>,\n      },\n    'buffer_details': {\n      'buffer_type': <class 'str'>,\n      Optional  (str) buffer_size: <class 'int'>,\n      },\n    Optional  (str) file_details: {\n      Optional  (str) file_name: <class 'str'>,\n      Optional  (str) file_size: <class 'int'>,\n      Optional  (str) file_number: <class 'int'>,\n      Optional  (str) size_of_buffer: <class 'int'>,\n      },\n    'limit_details': {\n      'packets_number': <class 'int'>,\n      'packets_capture_duaration': <class 'int'>,\n      'packets_size': <class 'int'>,\n      Optional  (str) maximum_packets_number: <class 'int'>,\n      Optional  (str) packets_per_second: <class 'int'>,\n      'packet_sampling_rate': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_monitor_capture", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_monitor.py#L324"}}, "show monitor session all": {"iosxe": {"class": "ShowMonitor", "doc": " Parser for\n      \"show monitor\"\n      \"show monitor session {session}\"\n      \"show monitor session all\"\n    ", "module_name": "show_monitor", "package": "genie.libs.parser", "schema": "{\n'session': {\n  Any  (str) *: {\n    'type': <class 'str'>,\n    'status': <class 'str'>,\n    Optional  (str) source_ports: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) source_subinterfaces: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) source_vlans: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) filter_access_group: <class 'int'>,\n    Optional  (str) destination_ports: <class 'str'>,\n    Optional  (str) destination_ip_address: <class 'str'>,\n    Optional  (str) destination_erspan_id: <class 'str'>,\n    Optional  (str) origin_ip_address: <class 'str'>,\n    Optional  (str) source_erspan_id: <class 'str'>,\n    Optional  (str) source_ip_address: <class 'str'>,\n    Optional  (str) source_rspan_vlan: <class 'int'>,\n    Optional  (str) dest_rspan_vlan: <class 'int'>,\n    Optional  (str) mtu: <class 'int'>,\n    },\n  },\n}", "uid": "show_monitor_session_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_monitor.py#L64"}}, "show monitor session {session}": {"iosxe": {"class": "ShowMonitor", "doc": " Parser for\n      \"show monitor\"\n      \"show monitor session {session}\"\n      \"show monitor session all\"\n    ", "module_name": "show_monitor", "package": "genie.libs.parser", "schema": "{\n'session': {\n  Any  (str) *: {\n    'type': <class 'str'>,\n    'status': <class 'str'>,\n    Optional  (str) source_ports: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) source_subinterfaces: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) source_vlans: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) filter_access_group: <class 'int'>,\n    Optional  (str) destination_ports: <class 'str'>,\n    Optional  (str) destination_ip_address: <class 'str'>,\n    Optional  (str) destination_erspan_id: <class 'str'>,\n    Optional  (str) origin_ip_address: <class 'str'>,\n    Optional  (str) source_erspan_id: <class 'str'>,\n    Optional  (str) source_ip_address: <class 'str'>,\n    Optional  (str) source_rspan_vlan: <class 'int'>,\n    Optional  (str) dest_rspan_vlan: <class 'int'>,\n    Optional  (str) mtu: <class 'int'>,\n    },\n  },\n}", "uid": "show_monitor_session_session", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_monitor.py#L64"}}, "show mpls forwarding": {"iosxr": {"class": "ShowMplsForwarding", "doc": null, "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'local_label': {\n  Any  (str) *: {\n    'outgoing_label': {\n      Any  (str) *: {\n        'prefix_or_id': {\n          Any  (str) *: {\n            'outgoing_interface': {\n              Any  (str) *: {\n                Optional  (str) next_hop: <class 'str'>,\n                'bytes_switched': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L1194"}}, "show mpls forwarding vrf {vrf}": {"iosxr": {"class": "ShowMplsForwardingVrf", "doc": null, "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label': {\n          Any  (str) *: {\n            'prefix_or_id': {\n              Any  (str) *: {\n                'outgoing_interface': {\n                  Any  (str) *: {\n                    Optional  (str) next_hop: <class 'str'>,\n                    'bytes_switched': <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L1042"}}, "show mpls forwarding-table": {"ios": {"class": "ShowMplsForwardingTable", "doc": "Parser for\n        show mpls forwarding-table\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf>\n        show mpls forwarding-table vrf <vrf> detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) merged: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) macstr: <class 'str'>,\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) load_sharing: {\n                      'method': <class 'str'>,\n                      Optional  (str) slots: <class 'list'>,\n                      },\n                    Optional  (str) broadcast: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding-table", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L120"}, "iosxe": {"class": "ShowMplsForwardingTable", "doc": "Parser for\n        show mpls forwarding-table\n        show mpls forwarding-table {prefix}\n        show mpls forwarding-table vrf {vrf}", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) merged: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) macstr: <class 'str'>,\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) load_sharing: {\n                      'method': <class 'str'>,\n                      Optional  (str) slots: <class 'list'>,\n                      },\n                    Optional  (str) broadcast: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding-table", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1653"}}, "show mpls forwarding-table detail": {"iosxe": {"class": "ShowMplsForwardingTableDetail", "doc": "Parser for\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf> detail\n        show mpls forwarding-table labels {label} detail\n        show mpls forwarding-table {route} detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) merged: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) macstr: <class 'str'>,\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) load_sharing: {\n                      'method': <class 'str'>,\n                      Optional  (str) slots: <class 'list'>,\n                      },\n                    Optional  (str) broadcast: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding-table_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1896"}}, "show mpls forwarding-table labels {label} detail": {"iosxe": {"class": "ShowMplsForwardingTableDetail", "doc": "Parser for\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf> detail\n        show mpls forwarding-table labels {label} detail\n        show mpls forwarding-table {route} detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) merged: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) macstr: <class 'str'>,\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) load_sharing: {\n                      'method': <class 'str'>,\n                      Optional  (str) slots: <class 'list'>,\n                      },\n                    Optional  (str) broadcast: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding-table_labels_label_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1896"}}, "show mpls forwarding-table vrf {vrf}": {"ios": {"class": "ShowMplsForwardingTable", "doc": "Parser for\n        show mpls forwarding-table\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf>\n        show mpls forwarding-table vrf <vrf> detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) merged: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) macstr: <class 'str'>,\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) load_sharing: {\n                      'method': <class 'str'>,\n                      Optional  (str) slots: <class 'list'>,\n                      },\n                    Optional  (str) broadcast: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding-table_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L120"}, "iosxe": {"class": "ShowMplsForwardingTable", "doc": "Parser for\n        show mpls forwarding-table\n        show mpls forwarding-table {prefix}\n        show mpls forwarding-table vrf {vrf}", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) merged: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) macstr: <class 'str'>,\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) load_sharing: {\n                      'method': <class 'str'>,\n                      Optional  (str) slots: <class 'list'>,\n                      },\n                    Optional  (str) broadcast: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding-table_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1653"}}, "show mpls forwarding-table vrf {vrf} detail": {"iosxe": {"class": "ShowMplsForwardingTableDetail", "doc": "Parser for\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf> detail\n        show mpls forwarding-table labels {label} detail\n        show mpls forwarding-table {route} detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) merged: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) macstr: <class 'str'>,\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) load_sharing: {\n                      'method': <class 'str'>,\n                      Optional  (str) slots: <class 'list'>,\n                      },\n                    Optional  (str) broadcast: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding-table_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1896"}}, "show mpls forwarding-table {prefix}": {"ios": {"class": "ShowMplsForwardingTable", "doc": "Parser for\n        show mpls forwarding-table\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf>\n        show mpls forwarding-table vrf <vrf> detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) merged: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) macstr: <class 'str'>,\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) load_sharing: {\n                      'method': <class 'str'>,\n                      Optional  (str) slots: <class 'list'>,\n                      },\n                    Optional  (str) broadcast: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding-table_prefix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L120"}, "iosxe": {"class": "ShowMplsForwardingTable", "doc": "Parser for\n        show mpls forwarding-table\n        show mpls forwarding-table {prefix}\n        show mpls forwarding-table vrf {vrf}", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) merged: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) macstr: <class 'str'>,\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) load_sharing: {\n                      'method': <class 'str'>,\n                      Optional  (str) slots: <class 'list'>,\n                      },\n                    Optional  (str) broadcast: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding-table_prefix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1653"}}, "show mpls forwarding-table {route} detail": {"iosxe": {"class": "ShowMplsForwardingTableDetail", "doc": "Parser for\n        show mpls forwarding-table detail\n        show mpls forwarding-table vrf <vrf> detail\n        show mpls forwarding-table labels {label} detail\n        show mpls forwarding-table {route} detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'local_label': {\n      Any  (str) *: {\n        'outgoing_label_or_vc': {\n          Any  (str) *: {\n            'prefix_or_tunnel_id': {\n              Any  (str) *: {\n                Optional  (str) outgoing_interface: {\n                  Any  (str) *: {\n                    'bytes_label_switched': <class 'int'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) tsp_tunnel: <class 'bool'>,\n                    Optional  (str) merged: <class 'bool'>,\n                    Optional  (str) mac: <class 'int'>,\n                    Optional  (str) macstr: <class 'str'>,\n                    Optional  (str) lstack: <class 'str'>,\n                    Optional  (str) via: <class 'str'>,\n                    Optional  (str) encaps: <class 'int'>,\n                    Optional  (str) mru: <class 'int'>,\n                    Optional  (str) label_stack: <class 'str'>,\n                    Optional  (str) vpn_route: <class 'str'>,\n                    Optional  (str) output_feature_configured: <class 'bool'>,\n                    Optional  (str) load_sharing: {\n                      'method': <class 'str'>,\n                      Optional  (str) slots: <class 'list'>,\n                      },\n                    Optional  (str) broadcast: <class 'bool'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_forwarding-table_route_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1896"}}, "show mpls interfaces": {"ios": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L129"}, "iosxe": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1964"}, "iosxr": {"class": "ShowMplsInterfaces", "doc": null, "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ldp': <class 'str'>,\n    'tunnel': <class 'str'>,\n    'static': <class 'str'>,\n    'enabled': <class 'str'>,\n    },\n  },\n}", "uid": "show_mpls_interfaces", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L962"}}, "show mpls interfaces detail": {"ios": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L129"}, "iosxe": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1964"}}, "show mpls interfaces vrf {vrf} ": {"ios": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces_vrf_vrf_", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L129"}, "iosxe": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces_vrf_vrf_", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1964"}}, "show mpls interfaces {all}": {"ios": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L129"}, "iosxe": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1964"}}, "show mpls interfaces {interface}": {"ios": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L129"}, "iosxe": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1964"}, "iosxr": {"class": "ShowMplsInterfaces", "doc": null, "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'ldp': <class 'str'>,\n    'tunnel': <class 'str'>,\n    'static': <class 'str'>,\n    'enabled': <class 'str'>,\n    },\n  },\n}", "uid": "show_mpls_interfaces_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L962"}}, "show mpls interfaces {interface} detail": {"ios": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L129"}, "iosxe": {"class": "ShowMplsInterface", "doc": "Parser for\n        show mpls interfaces\n        show mpls interfaces all\n        show mpls interfaces vrf <vrf>\n        show mpls interfaces <interface>\n        show mpls interfaces <interface> detail\n        show mpls interfaces detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        Optional  (str) ip: <class 'str'>,\n        Optional  (str) tunnel: <class 'str'>,\n        Optional  (str) bgp: <class 'str'>,\n        Optional  (str) static: <class 'str'>,\n        Optional  (str) operational: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) session: <class 'str'>,\n        Optional  (str) ip_labeling_enabled: {\n          Any  (str) *: {\n            'ldp': <class 'bool'>,\n            Optional  (str) interface_config: <class 'bool'>,\n            },\n          },\n        Optional  (str) lsp_tunnel_labeling_enabled: <class 'bool'>,\n        Optional  (str) lp_frr_labeling_enabled: <class 'bool'>,\n        Optional  (str) bgp_labeling_enabled: <class 'bool'>,\n        Optional  (str) mpls_operational: <class 'bool'>,\n        Optional  (str) mtu: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_interfaces_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1964"}}, "show mpls l2transport vc": {"ios": {"class": "ShowMplsL2TransportVC", "doc": "\n    Parser for show mpls l2transport vc\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) destination_address: {\n      Any  (str) *: {\n        'vc_id': {\n          Any  (str) *: {\n            Optional  (str) local_circuit: <class 'str'>,\n            'vc_status': <class 'str'>,\n            },\n          },\n        Optional  (str) tunnel_label: <class 'str'>,\n        Optional  (str) next_hop: <class 'str'>,\n        Optional  (str) output_interface: <class 'str'>,\n        Optional  (str) imposed_label_stack: <class 'str'>,\n        Optional  (str) default_path: <class 'str'>,\n        Optional  (str) preferred_path: <class 'str'>,\n        },\n      },\n    Optional  (str) line_protocol_status: <class 'str'>,\n    Optional  (str) ethernet_vlan: {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    Optional  (str) protocol_status: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) create_time: <class 'str'>,\n    Optional  (str) last_status_change_time: <class 'str'>,\n    Optional  (str) signaling_protocol: {\n      Any  (str) *: {\n        'mpls_vc_labels': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        'group_id': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        'mtu': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        Optional  (str) mac_withdraw: {\n          'sent': <class 'int'>,\n          'received': <class 'int'>,\n          },\n        Optional  (str) remote_interface_description: <class 'str'>,\n        Optional  (str) peer_id: <class 'str'>,\n        Optional  (str) peer_state: <class 'str'>,\n        Optional  (str) id: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) targeted_hello_ip: <class 'str'>,\n        },\n      },\n    Optional  (str) sequencing: {\n      'received': <class 'str'>,\n      'sent': <class 'str'>,\n      },\n    Optional  (str) statistics: {\n      Optional  (str) packets: {\n        'received': <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        'received': <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      Optional  (str) packets_drop: {\n        'received': <class 'int'>,\n        Optional  (str) seq_error: <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      },\n    Optional  (str) last_label_fsm_state_change_time: <class 'str'>,\n    Optional  (str) graceful_restart: <class 'str'>,\n    Optional  (str) non_stop_routing: <class 'str'>,\n    Optional  (str) status_tlv_support: <class 'str'>,\n    Optional  (str) ldp_route_enabled: <class 'str'>,\n    Optional  (str) last_status_name: {\n      Any  (str) *: {\n        Optional  (str) received: <class 'str'>,\n        Optional  (str) sent: <class 'str'>,\n        },\n      },\n    Optional  (str) label_state_machine: <class 'str'>,\n    },\n  },\n}", "uid": "show_mpls_l2transport_vc", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L152"}, "iosxe": {"class": "ShowMplsL2TransportVC", "doc": "\n    Parser for show mpls l2transport vc\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) destination_address: {\n      Any  (str) *: {\n        'vc_id': {\n          Any  (str) *: {\n            Optional  (str) local_circuit: <class 'str'>,\n            'vc_status': <class 'str'>,\n            },\n          },\n        Optional  (str) tunnel_label: <class 'str'>,\n        Optional  (str) next_hop: <class 'str'>,\n        Optional  (str) output_interface: <class 'str'>,\n        Optional  (str) imposed_label_stack: <class 'str'>,\n        Optional  (str) default_path: <class 'str'>,\n        Optional  (str) preferred_path: <class 'str'>,\n        },\n      },\n    Optional  (str) line_protocol_status: <class 'str'>,\n    Optional  (str) ethernet_vlan: {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    Optional  (str) protocol_status: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) create_time: <class 'str'>,\n    Optional  (str) last_status_change_time: <class 'str'>,\n    Optional  (str) signaling_protocol: {\n      Any  (str) *: {\n        'mpls_vc_labels': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        'group_id': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        'mtu': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        Optional  (str) mac_withdraw: {\n          'sent': <class 'int'>,\n          'received': <class 'int'>,\n          },\n        Optional  (str) remote_interface_description: <class 'str'>,\n        Optional  (str) peer_id: <class 'str'>,\n        Optional  (str) peer_state: <class 'str'>,\n        Optional  (str) id: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) targeted_hello_ip: <class 'str'>,\n        },\n      },\n    Optional  (str) sequencing: {\n      'received': <class 'str'>,\n      'sent': <class 'str'>,\n      },\n    Optional  (str) statistics: {\n      Optional  (str) packets: {\n        'received': <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        'received': <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      Optional  (str) packets_drop: {\n        'received': <class 'int'>,\n        Optional  (str) seq_error: <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      },\n    Optional  (str) last_label_fsm_state_change_time: <class 'str'>,\n    Optional  (str) graceful_restart: <class 'str'>,\n    Optional  (str) non_stop_routing: <class 'str'>,\n    Optional  (str) status_tlv_support: <class 'str'>,\n    Optional  (str) ldp_route_enabled: <class 'str'>,\n    Optional  (str) last_status_name: {\n      Any  (str) *: {\n        Optional  (str) received: <class 'str'>,\n        Optional  (str) sent: <class 'str'>,\n        },\n      },\n    Optional  (str) label_state_machine: <class 'str'>,\n    },\n  },\n}", "uid": "show_mpls_l2transport_vc", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L2657"}}, "show mpls l2transport vc detail": {"ios": {"class": "ShowMplsL2TransportDetail", "doc": "\n    Parser for show mpls l2transport vc detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) destination_address: {\n      Any  (str) *: {\n        'vc_id': {\n          Any  (str) *: {\n            Optional  (str) local_circuit: <class 'str'>,\n            'vc_status': <class 'str'>,\n            },\n          },\n        Optional  (str) tunnel_label: <class 'str'>,\n        Optional  (str) next_hop: <class 'str'>,\n        Optional  (str) output_interface: <class 'str'>,\n        Optional  (str) imposed_label_stack: <class 'str'>,\n        Optional  (str) default_path: <class 'str'>,\n        Optional  (str) preferred_path: <class 'str'>,\n        },\n      },\n    Optional  (str) line_protocol_status: <class 'str'>,\n    Optional  (str) ethernet_vlan: {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    Optional  (str) protocol_status: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) create_time: <class 'str'>,\n    Optional  (str) last_status_change_time: <class 'str'>,\n    Optional  (str) signaling_protocol: {\n      Any  (str) *: {\n        'mpls_vc_labels': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        'group_id': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        'mtu': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        Optional  (str) mac_withdraw: {\n          'sent': <class 'int'>,\n          'received': <class 'int'>,\n          },\n        Optional  (str) remote_interface_description: <class 'str'>,\n        Optional  (str) peer_id: <class 'str'>,\n        Optional  (str) peer_state: <class 'str'>,\n        Optional  (str) id: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) targeted_hello_ip: <class 'str'>,\n        },\n      },\n    Optional  (str) sequencing: {\n      'received': <class 'str'>,\n      'sent': <class 'str'>,\n      },\n    Optional  (str) statistics: {\n      Optional  (str) packets: {\n        'received': <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        'received': <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      Optional  (str) packets_drop: {\n        'received': <class 'int'>,\n        Optional  (str) seq_error: <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      },\n    Optional  (str) last_label_fsm_state_change_time: <class 'str'>,\n    Optional  (str) graceful_restart: <class 'str'>,\n    Optional  (str) non_stop_routing: <class 'str'>,\n    Optional  (str) status_tlv_support: <class 'str'>,\n    Optional  (str) ldp_route_enabled: <class 'str'>,\n    Optional  (str) last_status_name: {\n      Any  (str) *: {\n        Optional  (str) received: <class 'str'>,\n        Optional  (str) sent: <class 'str'>,\n        },\n      },\n    Optional  (str) label_state_machine: <class 'str'>,\n    },\n  },\n}", "uid": "show_mpls_l2transport_vc_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L143"}, "iosxe": {"class": "ShowMplsL2TransportDetail", "doc": "\n    Parser for show mpls l2transport vc detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) destination_address: {\n      Any  (str) *: {\n        'vc_id': {\n          Any  (str) *: {\n            Optional  (str) local_circuit: <class 'str'>,\n            'vc_status': <class 'str'>,\n            },\n          },\n        Optional  (str) tunnel_label: <class 'str'>,\n        Optional  (str) next_hop: <class 'str'>,\n        Optional  (str) output_interface: <class 'str'>,\n        Optional  (str) imposed_label_stack: <class 'str'>,\n        Optional  (str) default_path: <class 'str'>,\n        Optional  (str) preferred_path: <class 'str'>,\n        },\n      },\n    Optional  (str) line_protocol_status: <class 'str'>,\n    Optional  (str) ethernet_vlan: {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        },\n      },\n    Optional  (str) protocol_status: {\n      Any  (str) *: <class 'str'>,\n      },\n    Optional  (str) create_time: <class 'str'>,\n    Optional  (str) last_status_change_time: <class 'str'>,\n    Optional  (str) signaling_protocol: {\n      Any  (str) *: {\n        'mpls_vc_labels': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        'group_id': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        'mtu': {\n          'local': <class 'str'>,\n          'remote': <class 'str'>,\n          },\n        Optional  (str) mac_withdraw: {\n          'sent': <class 'int'>,\n          'received': <class 'int'>,\n          },\n        Optional  (str) remote_interface_description: <class 'str'>,\n        Optional  (str) peer_id: <class 'str'>,\n        Optional  (str) peer_state: <class 'str'>,\n        Optional  (str) id: <class 'str'>,\n        Optional  (str) status: <class 'str'>,\n        Optional  (str) targeted_hello_ip: <class 'str'>,\n        },\n      },\n    Optional  (str) sequencing: {\n      'received': <class 'str'>,\n      'sent': <class 'str'>,\n      },\n    Optional  (str) statistics: {\n      Optional  (str) packets: {\n        'received': <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        'received': <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      Optional  (str) packets_drop: {\n        'received': <class 'int'>,\n        Optional  (str) seq_error: <class 'int'>,\n        'sent': <class 'int'>,\n        },\n      },\n    Optional  (str) last_label_fsm_state_change_time: <class 'str'>,\n    Optional  (str) graceful_restart: <class 'str'>,\n    Optional  (str) non_stop_routing: <class 'str'>,\n    Optional  (str) status_tlv_support: <class 'str'>,\n    Optional  (str) ldp_route_enabled: <class 'str'>,\n    Optional  (str) last_status_name: {\n      Any  (str) *: {\n        Optional  (str) received: <class 'str'>,\n        Optional  (str) sent: <class 'str'>,\n        },\n      },\n    Optional  (str) label_state_machine: <class 'str'>,\n    },\n  },\n}", "uid": "show_mpls_l2transport_vc_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L2252"}}, "show mpls label range": {"iosxr": {"class": "ShowMplsLabelRange", "doc": "Parser for show mpls label range", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'range_for_dynamic_labels': {\n  'min_range': <class 'int'>,\n  'max_range': <class 'int'>,\n  },\n}", "uid": "show_mpls_label_range", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L42"}}, "show mpls label table detail": {"iosxr": {"class": "ShowMplsLabelTableDetail", "doc": "\n    Parser for show mpls label table detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'table': {\n  Any  (str) *: {\n    'label': {\n      Any  (str) *: {\n        'owner': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'rewrite': <class 'str'>,\n            },\n          },\n        Optional  (str) label_type: {\n          Any  (str) *: {\n            Optional  (str) vers: <class 'int'>,\n            Optional  (str) start_label: <class 'int'>,\n            Optional  (str) size: <class 'int'>,\n            Optional  (str) app_notify: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) interface: <class 'str'>,\n            Optional  (str) nh: <class 'str'>,\n            Optional  (str) default: <class 'bool'>,\n            Optional  (str) prefix: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_label_table_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L814"}}, "show mpls label table private": {"iosxr": {"class": "ShowMplsLabelTablePrivate", "doc": "\n    Parser for show mpls label table private\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'table': {\n  Any  (str) *: {\n    'label': {\n      Any  (str) *: {\n        'owner': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'rewrite': <class 'str'>,\n            },\n          },\n        Optional  (str) label_type: {\n          Any  (str) *: {\n            Optional  (str) vers: <class 'int'>,\n            Optional  (str) start_label: <class 'int'>,\n            Optional  (str) size: <class 'int'>,\n            Optional  (str) app_notify: <class 'int'>,\n            Optional  (str) index: <class 'int'>,\n            Optional  (str) type: <class 'int'>,\n            Optional  (str) interface: <class 'str'>,\n            Optional  (str) nh: <class 'str'>,\n            Optional  (str) default: <class 'bool'>,\n            Optional  (str) prefix: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_label_table_private", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L928"}}, "show mpls ldp bindings": {"ios": {"class": "ShowMplsLdpBindings", "doc": "Parser for \n        show mpls ldp bindings\n        show mpls ldp bindings vrf <vrf>\n        show mpls ldp bindings all\n        show mpls ldp bindings all detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        'rev': <class 'str'>,\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) no_route: <class 'bool'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_bindings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L80"}, "iosxe": {"class": "ShowMplsLdpBindings", "doc": "\n       Parser for show mpls ldp bindings\n                  show mpls ldp bindings vrf <vrf>\n                  show mpls ldp bindings all\n                  show mpls ldp bindings all detail\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        'rev': <class 'str'>,\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) no_route: <class 'bool'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_bindings", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L906"}}, "show mpls ldp bindings vrf {vrf}": {"ios": {"class": "ShowMplsLdpBindings", "doc": "Parser for \n        show mpls ldp bindings\n        show mpls ldp bindings vrf <vrf>\n        show mpls ldp bindings all\n        show mpls ldp bindings all detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        'rev': <class 'str'>,\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) no_route: <class 'bool'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_bindings_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L80"}, "iosxe": {"class": "ShowMplsLdpBindings", "doc": "\n       Parser for show mpls ldp bindings\n                  show mpls ldp bindings vrf <vrf>\n                  show mpls ldp bindings all\n                  show mpls ldp bindings all detail\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        'rev': <class 'str'>,\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) no_route: <class 'bool'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_bindings_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L906"}}, "show mpls ldp bindings {all}": {"ios": {"class": "ShowMplsLdpBindings", "doc": "Parser for \n        show mpls ldp bindings\n        show mpls ldp bindings vrf <vrf>\n        show mpls ldp bindings all\n        show mpls ldp bindings all detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        'rev': <class 'str'>,\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) no_route: <class 'bool'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_bindings_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L80"}, "iosxe": {"class": "ShowMplsLdpBindings", "doc": "\n       Parser for show mpls ldp bindings\n                  show mpls ldp bindings vrf <vrf>\n                  show mpls ldp bindings all\n                  show mpls ldp bindings all detail\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        'rev': <class 'str'>,\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) no_route: <class 'bool'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_bindings_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L906"}}, "show mpls ldp bindings {all} {detail}": {"ios": {"class": "ShowMplsLdpBindings", "doc": "Parser for \n        show mpls ldp bindings\n        show mpls ldp bindings vrf <vrf>\n        show mpls ldp bindings all\n        show mpls ldp bindings all detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        'rev': <class 'str'>,\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) no_route: <class 'bool'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_bindings_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L80"}, "iosxe": {"class": "ShowMplsLdpBindings", "doc": "\n       Parser for show mpls ldp bindings\n                  show mpls ldp bindings vrf <vrf>\n                  show mpls ldp bindings all\n                  show mpls ldp bindings all detail\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'lib_entry': {\n      Any  (str) *: {\n        'rev': <class 'str'>,\n        Optional  (str) checkpoint: <class 'str'>,\n        Optional  (str) no_route: <class 'bool'>,\n        Optional  (str) label_binding: {\n          'label': {\n            Any  (str) *: {\n              Optional  (str) owner: <class 'str'>,\n              Optional  (str) advertised_to: <class 'list'>,\n              },\n            },\n          },\n        Optional  (str) remote_binding: {\n          'label': {\n            Any  (str) *: {\n              'lsr_id': {\n                Any  (str) *: {\n                  'label_space_id': {\n                    Any  (str) *: {\n                      Optional  (str) checkpointed: <class 'bool'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_bindings_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L906"}}, "show mpls ldp capabilities": {"ios": {"class": "ShowMplsLdpCapabilities", "doc": "Parser for \n        show mpls ldp capabilities\n        show mpls ldp capabilities all\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'ldp_capabilities': {\n  Optional  (str) iccp_type: <class 'str'>,\n  Optional  (str) maj_version: <class 'int'>,\n  Optional  (str) min_version: <class 'int'>,\n  Optional  (str) dynamic_anouncement: <class 'str'>,\n  Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n  Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n  Optional  (str) typed_wildcard: <class 'str'>,\n  },\n}", "uid": "show_mpls_ldp_capabilities", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L90"}, "iosxe": {"class": "ShowMplsLdpCapabilities", "doc": "\n       Parser for show mpls ldp capabilities\n                  show mpls ldp capabilities all\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'ldp_capabilities': {\n  Optional  (str) iccp_type: <class 'str'>,\n  Optional  (str) maj_version: <class 'int'>,\n  Optional  (str) min_version: <class 'int'>,\n  Optional  (str) dynamic_anouncement: <class 'str'>,\n  Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n  Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n  Optional  (str) typed_wildcard: <class 'str'>,\n  },\n}", "uid": "show_mpls_ldp_capabilities", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1049"}}, "show mpls ldp capabilities {all}": {"ios": {"class": "ShowMplsLdpCapabilities", "doc": "Parser for \n        show mpls ldp capabilities\n        show mpls ldp capabilities all\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'ldp_capabilities': {\n  Optional  (str) iccp_type: <class 'str'>,\n  Optional  (str) maj_version: <class 'int'>,\n  Optional  (str) min_version: <class 'int'>,\n  Optional  (str) dynamic_anouncement: <class 'str'>,\n  Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n  Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n  Optional  (str) typed_wildcard: <class 'str'>,\n  },\n}", "uid": "show_mpls_ldp_capabilities_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L90"}, "iosxe": {"class": "ShowMplsLdpCapabilities", "doc": "\n       Parser for show mpls ldp capabilities\n                  show mpls ldp capabilities all\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'ldp_capabilities': {\n  Optional  (str) iccp_type: <class 'str'>,\n  Optional  (str) maj_version: <class 'int'>,\n  Optional  (str) min_version: <class 'int'>,\n  Optional  (str) dynamic_anouncement: <class 'str'>,\n  Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n  Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n  Optional  (str) typed_wildcard: <class 'str'>,\n  },\n}", "uid": "show_mpls_ldp_capabilities_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1049"}}, "show mpls ldp discovery": {"ios": {"class": "ShowMplsLdpDiscovery", "doc": "Parser for \n        show mpls ldp discovery\n        show mpls ldp discovery all\n        show mpls ldp discovery all detail\n        show mpls ldp discovery detail\n        show mpls ldp discovery vrf <vrf>\n        show mpls ldp discovery vrf <vrf> detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L98"}, "iosxe": {"class": "ShowMplsLdpDiscovery", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1193"}}, "show mpls ldp discovery vrf {vrf}": {"ios": {"class": "ShowMplsLdpDiscovery", "doc": "Parser for \n        show mpls ldp discovery\n        show mpls ldp discovery all\n        show mpls ldp discovery all detail\n        show mpls ldp discovery detail\n        show mpls ldp discovery vrf <vrf>\n        show mpls ldp discovery vrf <vrf> detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L98"}, "iosxe": {"class": "ShowMplsLdpDiscovery", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1193"}}, "show mpls ldp discovery vrf {vrf} {detail}": {"ios": {"class": "ShowMplsLdpDiscovery", "doc": "Parser for \n        show mpls ldp discovery\n        show mpls ldp discovery all\n        show mpls ldp discovery all detail\n        show mpls ldp discovery detail\n        show mpls ldp discovery vrf <vrf>\n        show mpls ldp discovery vrf <vrf> detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L98"}, "iosxe": {"class": "ShowMplsLdpDiscovery", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1193"}}, "show mpls ldp discovery {all}": {"ios": {"class": "ShowMplsLdpDiscovery", "doc": "Parser for \n        show mpls ldp discovery\n        show mpls ldp discovery all\n        show mpls ldp discovery all detail\n        show mpls ldp discovery detail\n        show mpls ldp discovery vrf <vrf>\n        show mpls ldp discovery vrf <vrf> detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L98"}, "iosxe": {"class": "ShowMplsLdpDiscovery", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1193"}}, "show mpls ldp discovery {all} {detail}": {"ios": {"class": "ShowMplsLdpDiscovery", "doc": "Parser for \n        show mpls ldp discovery\n        show mpls ldp discovery all\n        show mpls ldp discovery all detail\n        show mpls ldp discovery detail\n        show mpls ldp discovery vrf <vrf>\n        show mpls ldp discovery vrf <vrf> detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L98"}, "iosxe": {"class": "ShowMplsLdpDiscovery", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1193"}}, "show mpls ldp discovery {detail}": {"ios": {"class": "ShowMplsLdpDiscovery", "doc": "Parser for \n        show mpls ldp discovery\n        show mpls ldp discovery all\n        show mpls ldp discovery all detail\n        show mpls ldp discovery detail\n        show mpls ldp discovery vrf <vrf>\n        show mpls ldp discovery vrf <vrf> detail\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L98"}, "iosxe": {"class": "ShowMplsLdpDiscovery", "doc": "\n        Parser for show mpls ldp discovery\n                   show mpls ldp discovery all\n                   show mpls ldp discovery all detail\n                   show mpls ldp discovery detail\n                   show mpls ldp discovery vrf <vrf>\n                   show mpls ldp discovery vrf <vrf> detail\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) local_ldp_identifier: {\n      Any  (str) *: {\n        Optional  (str) discovery_sources: {\n          'interfaces': {\n            Any  (str) *: {\n              Optional  (str) enabled: <class 'str'>,\n              Optional  (str) hello_interval_ms: <class 'int'>,\n              Optional  (str) transport_ip_addr: <class 'str'>,\n              'session': <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              Any  (str) *: {\n                Any  (str) *: {\n                  Optional  (str) transport_ip_address: <class 'str'>,\n                  Optional  (str) source_ip_address: <class 'str'>,\n                  Optional  (str) holdtime_sec: <class 'int'>,\n                  Optional  (str) proposed_local: <class 'int'>,\n                  Optional  (str) proposed_peer: <class 'int'>,\n                  Optional  (str) reachable_via: <class 'str'>,\n                  Optional  (str) password: <class 'str'>,\n                  Optional  (str) clients: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) targeted_hellos: {\n          Any  (str) *: {\n            Any  (str) *: {\n              'session': <class 'str'>,\n              Optional  (str) ldp_id: <class 'str'>,\n              Optional  (str) tdp_id: <class 'str'>,\n              Optional  (str) xmit: <class 'bool'>,\n              Optional  (str) recv: <class 'bool'>,\n              'active': <class 'bool'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_discovery_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1193"}}, "show mpls ldp igp sync": {"ios": {"class": "ShowMplsLdpIgpSync", "doc": "Parser for \n        show mpls ldp igp sync\n        show mpls ldp igp sync all\n        show mpls ldp igp sync interface <interface>\n        show mpls ldp igp sync vrf <vrf>\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) sync: {\n          'status': {\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            'peer_reachable': <class 'bool'>,\n            },\n          Optional  (str) delay_time: <class 'int'>,\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_igp_sync", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L110"}, "iosxe": {"class": "ShowMplsLdpIgpSync", "doc": "\n        Parser for show mpls ldp igp sync\n                   show mpls ldp igp sync all\n                   show mpls ldp igp sync interface <interface>\n                   show mpls ldp igp sync vrf <vrf>\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) sync: {\n          'status': {\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            'peer_reachable': <class 'bool'>,\n            },\n          Optional  (str) delay_time: <class 'int'>,\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_igp_sync", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1459"}}, "show mpls ldp igp sync interface {interface}": {"ios": {"class": "ShowMplsLdpIgpSync", "doc": "Parser for \n        show mpls ldp igp sync\n        show mpls ldp igp sync all\n        show mpls ldp igp sync interface <interface>\n        show mpls ldp igp sync vrf <vrf>\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) sync: {\n          'status': {\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            'peer_reachable': <class 'bool'>,\n            },\n          Optional  (str) delay_time: <class 'int'>,\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_igp_sync_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L110"}, "iosxe": {"class": "ShowMplsLdpIgpSync", "doc": "\n        Parser for show mpls ldp igp sync\n                   show mpls ldp igp sync all\n                   show mpls ldp igp sync interface <interface>\n                   show mpls ldp igp sync vrf <vrf>\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) sync: {\n          'status': {\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            'peer_reachable': <class 'bool'>,\n            },\n          Optional  (str) delay_time: <class 'int'>,\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_igp_sync_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1459"}}, "show mpls ldp igp sync vrf {vrf}": {"ios": {"class": "ShowMplsLdpIgpSync", "doc": "Parser for \n        show mpls ldp igp sync\n        show mpls ldp igp sync all\n        show mpls ldp igp sync interface <interface>\n        show mpls ldp igp sync vrf <vrf>\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) sync: {\n          'status': {\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            'peer_reachable': <class 'bool'>,\n            },\n          Optional  (str) delay_time: <class 'int'>,\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_igp_sync_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L110"}, "iosxe": {"class": "ShowMplsLdpIgpSync", "doc": "\n        Parser for show mpls ldp igp sync\n                   show mpls ldp igp sync all\n                   show mpls ldp igp sync interface <interface>\n                   show mpls ldp igp sync vrf <vrf>\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) sync: {\n          'status': {\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            'peer_reachable': <class 'bool'>,\n            },\n          Optional  (str) delay_time: <class 'int'>,\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_igp_sync_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1459"}}, "show mpls ldp igp sync {all}": {"ios": {"class": "ShowMplsLdpIgpSync", "doc": "Parser for \n        show mpls ldp igp sync\n        show mpls ldp igp sync all\n        show mpls ldp igp sync interface <interface>\n        show mpls ldp igp sync vrf <vrf>\n    ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) sync: {\n          'status': {\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            'peer_reachable': <class 'bool'>,\n            },\n          Optional  (str) delay_time: <class 'int'>,\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_igp_sync_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L110"}, "iosxe": {"class": "ShowMplsLdpIgpSync", "doc": "\n        Parser for show mpls ldp igp sync\n                   show mpls ldp igp sync all\n                   show mpls ldp igp sync interface <interface>\n                   show mpls ldp igp sync vrf <vrf>\n       ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interface': {\n      Any  (str) *: {\n        'ldp': {\n          'configured': <class 'bool'>,\n          'igp_synchronization_enabled': <class 'bool'>,\n          },\n        Optional  (str) sync: {\n          'status': {\n            Optional  (str) enabled: <class 'bool'>,\n            'sync_achieved': <class 'bool'>,\n            'peer_reachable': <class 'bool'>,\n            },\n          Optional  (str) delay_time: <class 'int'>,\n          Optional  (str) left_time: <class 'int'>,\n          },\n        Optional  (str) igp: {\n          'holddown_time': <class 'str'>,\n          'enabled': <class 'str'>,\n          },\n        Optional  (str) peer_ldp_ident: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_igp_sync_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L1459"}}, "show mpls ldp neighbor": {"ios": {"class": "ShowMplsLdpNeighbor", "doc": "Parser for \n        show mpls ldp neighbor,\n        show mpls ldp neighbor vrf <vrf>", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'local_ldp_ident': <class 'str'>,\n            'tcp_connection': <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) uptime: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) ldp_discovery_sources: {\n              'interface': {\n                Any  (str) *: {\n                  Optional  (str) ip_address: {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) address_bound: <class 'list'>,\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L66"}, "iosxe": {"class": "ShowMplsLdpNeighbor", "doc": "Parser for show mpls ldp neighbor,\n                  show mpls ldp neighbor vrf <vrf>", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'local_ldp_ident': <class 'str'>,\n            'tcp_connection': <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) uptime: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) ldp_discovery_sources: {\n              'interface': {\n                Any  (str) *: {\n                  Optional  (str) ip_address: {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) address_bound: <class 'list'>,\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L586"}, "iosxr": {"class": "ShowMplsLdpNeighbor", "doc": "Parser for\n     show mpls ldp neighbor\n     show mpls ldp neighbor {interface}\n      ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'tcp_connection': <class 'str'>,\n            Optional  (str) local_ldp_ident: <class 'str'>,\n            Optional  (str) graceful_restart: <class 'str'>,\n            Optional  (str) session_holdtime: <class 'int'>,\n            Optional  (str) session_holdtime_ms: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'neighbor': <class 'str'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'uptime': <class 'str'>,\n            Optional  (str) uid: <class 'int'>,\n            Optional  (str) peer_id: <class 'int'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                'ldp_discovery_sources': {\n                  Optional  (str) interface: {\n                    Any  (str) *: {\n                      Optional  (str) ip_address: {\n                        Any  (str) *: {\n                          Optional  (str) holdtime_ms: <class 'int'>,\n                          Optional  (str) hello_interval_ms: <class 'int'>,\n                          Optional  (str) holdtime: <class 'int'>,\n                          Optional  (str) hello_interval: <class 'int'>,\n                          Optional  (str) holdtime_str: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) targeted_hello: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) active: <class 'bool'>,\n                        Optional  (str) holdtime_ms: <class 'int'>,\n                        Optional  (str) hello_interval_ms: <class 'int'>,\n                        Optional  (str) holdtime: <class 'int'>,\n                        Optional  (str) hello_interval: <class 'int'>,\n                        Optional  (str) holdtime_str: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) address_bound: <class 'list'>,\n                },\n              },\n            Optional  (str) peer_holdtime: <class 'int'>,\n            Optional  (str) ka_interval: <class 'int'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) clients: <class 'str'>,\n            Optional  (str) inbound_label_filtering: <class 'str'>,\n            Optional  (str) session_protection: {\n              'session_state': <class 'str'>,\n              Optional  (str) duration_int: <class 'int'>,\n              Optional  (str) duration_str: <class 'str'>,\n              },\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              Optional  (str) sent: {\n                Any  (str) *: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Any  (str) *: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L168"}}, "show mpls ldp neighbor brief": {"iosxr": {"class": "ShowMplsLdpNeighborBrief", "doc": "Parser for show mpls ldp neighbor brief", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'gr': <class 'str'>,\n    Optional  (str) nsr: <class 'str'>,\n    'up_time': <class 'str'>,\n    Optional  (str) discovery: {\n      Optional  (str) discovery: <class 'int'>,\n      Optional  (str) ipv4: <class 'int'>,\n      Optional  (str) ipv6: <class 'int'>,\n      },\n    Optional  (str) addresses: {\n      Optional  (str) address: <class 'int'>,\n      Optional  (str) ipv4: <class 'int'>,\n      Optional  (str) ipv6: <class 'int'>,\n      },\n    Optional  (str) labels: {\n      Optional  (str) ipv4: <class 'int'>,\n      Optional  (str) ipv6: <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L646"}}, "show mpls ldp neighbor detail": {"ios": {"class": "ShowMplsLdpNeighborDetail", "doc": "Parser for \n        show mpls ldp neighbor detail,\n        show mpls ldp neighbor vrf <vrf> detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'local_ldp_ident': <class 'str'>,\n            'tcp_connection': <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) uptime: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) ldp_discovery_sources: {\n              'interface': {\n                Any  (str) *: {\n                  Optional  (str) ip_address: {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) address_bound: <class 'list'>,\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L73"}, "iosxe": {"class": "ShowMplsLdpNeighborDetail", "doc": "Parser for show mpls ldp neighbor detail,\n                  show mpls ldp neighbor vrf <vrf> detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'local_ldp_ident': <class 'str'>,\n            'tcp_connection': <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) uptime: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) ldp_discovery_sources: {\n              'interface': {\n                Any  (str) *: {\n                  Optional  (str) ip_address: {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) address_bound: <class 'list'>,\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L844"}, "iosxr": {"class": "ShowMplsLdpNeighborDetail", "doc": "Parser for show mpls ldp neighbor detail,\n                  show mpls ldp neighbor {interface} detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'tcp_connection': <class 'str'>,\n            Optional  (str) local_ldp_ident: <class 'str'>,\n            Optional  (str) graceful_restart: <class 'str'>,\n            Optional  (str) session_holdtime: <class 'int'>,\n            Optional  (str) session_holdtime_ms: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'neighbor': <class 'str'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'uptime': <class 'str'>,\n            Optional  (str) uid: <class 'int'>,\n            Optional  (str) peer_id: <class 'int'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                'ldp_discovery_sources': {\n                  Optional  (str) interface: {\n                    Any  (str) *: {\n                      Optional  (str) ip_address: {\n                        Any  (str) *: {\n                          Optional  (str) holdtime_ms: <class 'int'>,\n                          Optional  (str) hello_interval_ms: <class 'int'>,\n                          Optional  (str) holdtime: <class 'int'>,\n                          Optional  (str) hello_interval: <class 'int'>,\n                          Optional  (str) holdtime_str: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) targeted_hello: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) active: <class 'bool'>,\n                        Optional  (str) holdtime_ms: <class 'int'>,\n                        Optional  (str) hello_interval_ms: <class 'int'>,\n                        Optional  (str) holdtime: <class 'int'>,\n                        Optional  (str) hello_interval: <class 'int'>,\n                        Optional  (str) holdtime_str: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) address_bound: <class 'list'>,\n                },\n              },\n            Optional  (str) peer_holdtime: <class 'int'>,\n            Optional  (str) ka_interval: <class 'int'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) clients: <class 'str'>,\n            Optional  (str) inbound_label_filtering: <class 'str'>,\n            Optional  (str) session_protection: {\n              'session_state': <class 'str'>,\n              Optional  (str) duration_int: <class 'int'>,\n              Optional  (str) duration_str: <class 'str'>,\n              },\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              Optional  (str) sent: {\n                Any  (str) *: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Any  (str) *: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L588"}}, "show mpls ldp neighbor vrf {vrf}": {"ios": {"class": "ShowMplsLdpNeighbor", "doc": "Parser for \n        show mpls ldp neighbor,\n        show mpls ldp neighbor vrf <vrf>", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'local_ldp_ident': <class 'str'>,\n            'tcp_connection': <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) uptime: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) ldp_discovery_sources: {\n              'interface': {\n                Any  (str) *: {\n                  Optional  (str) ip_address: {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) address_bound: <class 'list'>,\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L66"}, "iosxe": {"class": "ShowMplsLdpNeighbor", "doc": "Parser for show mpls ldp neighbor,\n                  show mpls ldp neighbor vrf <vrf>", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'local_ldp_ident': <class 'str'>,\n            'tcp_connection': <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) uptime: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) ldp_discovery_sources: {\n              'interface': {\n                Any  (str) *: {\n                  Optional  (str) ip_address: {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) address_bound: <class 'list'>,\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L586"}}, "show mpls ldp neighbor vrf {vrf} detail": {"ios": {"class": "ShowMplsLdpNeighborDetail", "doc": "Parser for \n        show mpls ldp neighbor detail,\n        show mpls ldp neighbor vrf <vrf> detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'local_ldp_ident': <class 'str'>,\n            'tcp_connection': <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) uptime: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) ldp_discovery_sources: {\n              'interface': {\n                Any  (str) *: {\n                  Optional  (str) ip_address: {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) address_bound: <class 'list'>,\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L73"}, "iosxe": {"class": "ShowMplsLdpNeighborDetail", "doc": "Parser for show mpls ldp neighbor detail,\n                  show mpls ldp neighbor vrf <vrf> detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'local_ldp_ident': <class 'str'>,\n            'tcp_connection': <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'downstream': <class 'bool'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            Optional  (str) uptime: <class 'str'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) ldp_discovery_sources: {\n              'interface': {\n                Any  (str) *: {\n                  Optional  (str) ip_address: {\n                    Any  (str) *: {\n                      Optional  (str) holdtime_ms: <class 'int'>,\n                      Optional  (str) hello_interval_ms: <class 'int'>,\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) address_bound: <class 'list'>,\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              'sent': {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Optional  (str) ICCP: {\n                  'type': <class 'str'>,\n                  'maj_ver': <class 'int'>,\n                  'min_ver': <class 'int'>,\n                  },\n                Optional  (str) dynamic_anouncement: <class 'str'>,\n                Optional  (str) mldp_point_to_multipoint: <class 'str'>,\n                Optional  (str) mldp_multipoint_to_multipoint: <class 'str'>,\n                Optional  (str) typed_wildcard: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L844"}}, "show mpls ldp neighbor {interface}": {"iosxr": {"class": "ShowMplsLdpNeighbor", "doc": "Parser for\n     show mpls ldp neighbor\n     show mpls ldp neighbor {interface}\n      ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'tcp_connection': <class 'str'>,\n            Optional  (str) local_ldp_ident: <class 'str'>,\n            Optional  (str) graceful_restart: <class 'str'>,\n            Optional  (str) session_holdtime: <class 'int'>,\n            Optional  (str) session_holdtime_ms: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'neighbor': <class 'str'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'uptime': <class 'str'>,\n            Optional  (str) uid: <class 'int'>,\n            Optional  (str) peer_id: <class 'int'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                'ldp_discovery_sources': {\n                  Optional  (str) interface: {\n                    Any  (str) *: {\n                      Optional  (str) ip_address: {\n                        Any  (str) *: {\n                          Optional  (str) holdtime_ms: <class 'int'>,\n                          Optional  (str) hello_interval_ms: <class 'int'>,\n                          Optional  (str) holdtime: <class 'int'>,\n                          Optional  (str) hello_interval: <class 'int'>,\n                          Optional  (str) holdtime_str: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) targeted_hello: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) active: <class 'bool'>,\n                        Optional  (str) holdtime_ms: <class 'int'>,\n                        Optional  (str) hello_interval_ms: <class 'int'>,\n                        Optional  (str) holdtime: <class 'int'>,\n                        Optional  (str) hello_interval: <class 'int'>,\n                        Optional  (str) holdtime_str: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) address_bound: <class 'list'>,\n                },\n              },\n            Optional  (str) peer_holdtime: <class 'int'>,\n            Optional  (str) ka_interval: <class 'int'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) clients: <class 'str'>,\n            Optional  (str) inbound_label_filtering: <class 'str'>,\n            Optional  (str) session_protection: {\n              'session_state': <class 'str'>,\n              Optional  (str) duration_int: <class 'int'>,\n              Optional  (str) duration_str: <class 'str'>,\n              },\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              Optional  (str) sent: {\n                Any  (str) *: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Any  (str) *: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L168"}}, "show mpls ldp neighbor {interface} detail": {"iosxr": {"class": "ShowMplsLdpNeighborDetail", "doc": "Parser for show mpls ldp neighbor detail,\n                  show mpls ldp neighbor {interface} detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'tcp_connection': <class 'str'>,\n            Optional  (str) local_ldp_ident: <class 'str'>,\n            Optional  (str) graceful_restart: <class 'str'>,\n            Optional  (str) session_holdtime: <class 'int'>,\n            Optional  (str) session_holdtime_ms: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'neighbor': <class 'str'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'uptime': <class 'str'>,\n            Optional  (str) uid: <class 'int'>,\n            Optional  (str) peer_id: <class 'int'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                'ldp_discovery_sources': {\n                  Optional  (str) interface: {\n                    Any  (str) *: {\n                      Optional  (str) ip_address: {\n                        Any  (str) *: {\n                          Optional  (str) holdtime_ms: <class 'int'>,\n                          Optional  (str) hello_interval_ms: <class 'int'>,\n                          Optional  (str) holdtime: <class 'int'>,\n                          Optional  (str) hello_interval: <class 'int'>,\n                          Optional  (str) holdtime_str: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) targeted_hello: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) active: <class 'bool'>,\n                        Optional  (str) holdtime_ms: <class 'int'>,\n                        Optional  (str) hello_interval_ms: <class 'int'>,\n                        Optional  (str) holdtime: <class 'int'>,\n                        Optional  (str) hello_interval: <class 'int'>,\n                        Optional  (str) holdtime_str: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) address_bound: <class 'list'>,\n                },\n              },\n            Optional  (str) peer_holdtime: <class 'int'>,\n            Optional  (str) ka_interval: <class 'int'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) clients: <class 'str'>,\n            Optional  (str) inbound_label_filtering: <class 'str'>,\n            Optional  (str) session_protection: {\n              'session_state': <class 'str'>,\n              Optional  (str) duration_int: <class 'int'>,\n              Optional  (str) duration_str: <class 'str'>,\n              },\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              Optional  (str) sent: {\n                Any  (str) *: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Any  (str) *: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_neighbor_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L588"}}, "show mpls ldp nsr statistics": {"ios": {"class": "ShowMplsLdpNsrStatistics", "doc": "Parser for show mpls ldp nsr statistics", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'statistics': {\n  Optional  (str) peer: {\n    Any  (str) *: {\n      'local_space_id': {\n        Any  (str) *: {\n          'in_label_request_records': {\n            'created': <class 'int'>,\n            'freed': <class 'int'>,\n            },\n          'in_label_withdraw_records': {\n            'created': <class 'int'>,\n            'freed': <class 'int'>,\n            },\n          'local_address_withdraw': {\n            'set': <class 'int'>,\n            'cleared': <class 'int'>,\n            },\n          'transmit_contexts': {\n            'enqueued': <class 'int'>,\n            'dequeued': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  'total_in_label_request_records': {\n    'created': <class 'int'>,\n    'freed': <class 'int'>,\n    },\n  'total_in_label_withdraw_records': {\n    'created': <class 'int'>,\n    'freed': <class 'int'>,\n    },\n  'total_local_address_withdraw_records': {\n    'created': <class 'int'>,\n    'freed': <class 'int'>,\n    },\n  'label_request_acks': {\n    'number_of_chkpt_messages': {\n      'sent': <class 'int'>,\n      'in_queue': <class 'int'>,\n      'in_state_none': <class 'int'>,\n      'in_state_send': <class 'int'>,\n      'in_state_wait': <class 'int'>,\n      },\n    },\n  'label_withdraw_acks': {\n    'number_of_chkpt_messages': {\n      'sent': <class 'int'>,\n      'in_queue': <class 'int'>,\n      'in_state_none': <class 'int'>,\n      'in_state_send': <class 'int'>,\n      'in_state_wait': <class 'int'>,\n      },\n    },\n  'address_withdraw_acks': {\n    'number_of_chkpt_messages': {\n      'sent': <class 'int'>,\n      'in_queue': <class 'int'>,\n      'in_state_none': <class 'int'>,\n      'in_state_send': <class 'int'>,\n      'in_state_wait': <class 'int'>,\n      },\n    },\n  'session_sync': {\n    Any  (str) *: <class 'int'>,\n    },\n  },\n}", "uid": "show_mpls_ldp_nsr_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L61"}, "iosxe": {"class": "ShowMplsLdpNsrStatistics", "doc": "Parser for show mpls ldp nsr statistics", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'statistics': {\n  Optional  (str) peer: {\n    Any  (str) *: {\n      'local_space_id': {\n        Any  (str) *: {\n          'in_label_request_records': {\n            'created': <class 'int'>,\n            'freed': <class 'int'>,\n            },\n          'in_label_withdraw_records': {\n            'created': <class 'int'>,\n            'freed': <class 'int'>,\n            },\n          'local_address_withdraw': {\n            'set': <class 'int'>,\n            'cleared': <class 'int'>,\n            },\n          'transmit_contexts': {\n            'enqueued': <class 'int'>,\n            'dequeued': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  'total_in_label_request_records': {\n    'created': <class 'int'>,\n    'freed': <class 'int'>,\n    },\n  'total_in_label_withdraw_records': {\n    'created': <class 'int'>,\n    'freed': <class 'int'>,\n    },\n  'total_local_address_withdraw_records': {\n    'created': <class 'int'>,\n    'freed': <class 'int'>,\n    },\n  'label_request_acks': {\n    'number_of_chkpt_messages': {\n      'sent': <class 'int'>,\n      'in_queue': <class 'int'>,\n      'in_state_none': <class 'int'>,\n      'in_state_send': <class 'int'>,\n      'in_state_wait': <class 'int'>,\n      },\n    },\n  'label_withdraw_acks': {\n    'number_of_chkpt_messages': {\n      'sent': <class 'int'>,\n      'in_queue': <class 'int'>,\n      'in_state_none': <class 'int'>,\n      'in_state_send': <class 'int'>,\n      'in_state_wait': <class 'int'>,\n      },\n    },\n  'address_withdraw_acks': {\n    'number_of_chkpt_messages': {\n      'sent': <class 'int'>,\n      'in_queue': <class 'int'>,\n      'in_state_none': <class 'int'>,\n      'in_state_send': <class 'int'>,\n      'in_state_wait': <class 'int'>,\n      },\n    },\n  'session_sync': {\n    Any  (str) *: <class 'int'>,\n    },\n  },\n}", "uid": "show_mpls_ldp_nsr_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L298"}}, "show mpls ldp parameters": {"ios": {"class": "ShowMplsLdpParameters", "doc": "Parser for show mpls ldp parameters", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\nOptional  (str) ldp_featureset_manager: {\n  Any  (str) *: {\n    'ldp_features': <class 'list'>,\n    },\n  },\n'ldp_backoff': {\n  'initial': <class 'int'>,\n  'maximum': <class 'int'>,\n  },\nOptional  (str) ldp_loop_detection: <class 'str'>,\nOptional  (str) ldp_nsr: <class 'str'>,\n'version': <class 'int'>,\n'session_hold_time': <class 'int'>,\n'keep_alive_interval': <class 'int'>,\nOptional  (str) ldp_for_targeted_sessions: <class 'bool'>,\n'discovery_targeted_hello': {\n  'holdtime': <class 'int'>,\n  'interval': <class 'int'>,\n  },\n'discovery_hello': {\n  'holdtime': <class 'int'>,\n  'interval': <class 'int'>,\n  },\nOptional  (str) downstream_on_demand_max_hop_count: <class 'int'>,\n}", "uid": "show_mpls_ldp_parameters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_mpls.py#L56"}, "iosxe": {"class": "ShowMplsLdpParameters", "doc": "Parser for show mpls ldp parameters", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\nOptional  (str) ldp_featureset_manager: {\n  Any  (str) *: {\n    'ldp_features': <class 'list'>,\n    },\n  },\n'ldp_backoff': {\n  'initial': <class 'int'>,\n  'maximum': <class 'int'>,\n  },\nOptional  (str) ldp_loop_detection: <class 'str'>,\nOptional  (str) ldp_nsr: <class 'str'>,\n'version': <class 'int'>,\n'session_hold_time': <class 'int'>,\n'keep_alive_interval': <class 'int'>,\nOptional  (str) ldp_for_targeted_sessions: <class 'bool'>,\n'discovery_targeted_hello': {\n  'holdtime': <class 'int'>,\n  'interval': <class 'int'>,\n  },\n'discovery_hello': {\n  'holdtime': <class 'int'>,\n  'interval': <class 'int'>,\n  },\nOptional  (str) downstream_on_demand_max_hop_count: <class 'int'>,\n}", "uid": "show_mpls_ldp_parameters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_mpls.py#L75"}}, "show mpls ldp vrf {vrf} neighbor": {"iosxr": {"class": "ShowMplsLdpNeighbor", "doc": "Parser for\n     show mpls ldp neighbor\n     show mpls ldp neighbor {interface}\n      ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'tcp_connection': <class 'str'>,\n            Optional  (str) local_ldp_ident: <class 'str'>,\n            Optional  (str) graceful_restart: <class 'str'>,\n            Optional  (str) session_holdtime: <class 'int'>,\n            Optional  (str) session_holdtime_ms: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'neighbor': <class 'str'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'uptime': <class 'str'>,\n            Optional  (str) uid: <class 'int'>,\n            Optional  (str) peer_id: <class 'int'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                'ldp_discovery_sources': {\n                  Optional  (str) interface: {\n                    Any  (str) *: {\n                      Optional  (str) ip_address: {\n                        Any  (str) *: {\n                          Optional  (str) holdtime_ms: <class 'int'>,\n                          Optional  (str) hello_interval_ms: <class 'int'>,\n                          Optional  (str) holdtime: <class 'int'>,\n                          Optional  (str) hello_interval: <class 'int'>,\n                          Optional  (str) holdtime_str: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) targeted_hello: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) active: <class 'bool'>,\n                        Optional  (str) holdtime_ms: <class 'int'>,\n                        Optional  (str) hello_interval_ms: <class 'int'>,\n                        Optional  (str) holdtime: <class 'int'>,\n                        Optional  (str) hello_interval: <class 'int'>,\n                        Optional  (str) holdtime_str: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) address_bound: <class 'list'>,\n                },\n              },\n            Optional  (str) peer_holdtime: <class 'int'>,\n            Optional  (str) ka_interval: <class 'int'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) clients: <class 'str'>,\n            Optional  (str) inbound_label_filtering: <class 'str'>,\n            Optional  (str) session_protection: {\n              'session_state': <class 'str'>,\n              Optional  (str) duration_int: <class 'int'>,\n              Optional  (str) duration_str: <class 'str'>,\n              },\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              Optional  (str) sent: {\n                Any  (str) *: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Any  (str) *: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_vrf_vrf_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L168"}}, "show mpls ldp vrf {vrf} neighbor  detail": {"iosxr": {"class": "ShowMplsLdpNeighborDetail", "doc": "Parser for show mpls ldp neighbor detail,\n                  show mpls ldp neighbor {interface} detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'tcp_connection': <class 'str'>,\n            Optional  (str) local_ldp_ident: <class 'str'>,\n            Optional  (str) graceful_restart: <class 'str'>,\n            Optional  (str) session_holdtime: <class 'int'>,\n            Optional  (str) session_holdtime_ms: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'neighbor': <class 'str'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'uptime': <class 'str'>,\n            Optional  (str) uid: <class 'int'>,\n            Optional  (str) peer_id: <class 'int'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                'ldp_discovery_sources': {\n                  Optional  (str) interface: {\n                    Any  (str) *: {\n                      Optional  (str) ip_address: {\n                        Any  (str) *: {\n                          Optional  (str) holdtime_ms: <class 'int'>,\n                          Optional  (str) hello_interval_ms: <class 'int'>,\n                          Optional  (str) holdtime: <class 'int'>,\n                          Optional  (str) hello_interval: <class 'int'>,\n                          Optional  (str) holdtime_str: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) targeted_hello: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) active: <class 'bool'>,\n                        Optional  (str) holdtime_ms: <class 'int'>,\n                        Optional  (str) hello_interval_ms: <class 'int'>,\n                        Optional  (str) holdtime: <class 'int'>,\n                        Optional  (str) hello_interval: <class 'int'>,\n                        Optional  (str) holdtime_str: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) address_bound: <class 'list'>,\n                },\n              },\n            Optional  (str) peer_holdtime: <class 'int'>,\n            Optional  (str) ka_interval: <class 'int'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) clients: <class 'str'>,\n            Optional  (str) inbound_label_filtering: <class 'str'>,\n            Optional  (str) session_protection: {\n              'session_state': <class 'str'>,\n              Optional  (str) duration_int: <class 'int'>,\n              Optional  (str) duration_str: <class 'str'>,\n              },\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              Optional  (str) sent: {\n                Any  (str) *: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Any  (str) *: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_vrf_vrf_neighbor__detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L588"}}, "show mpls ldp vrf {vrf} neighbor {interface}": {"iosxr": {"class": "ShowMplsLdpNeighbor", "doc": "Parser for\n     show mpls ldp neighbor\n     show mpls ldp neighbor {interface}\n      ", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'tcp_connection': <class 'str'>,\n            Optional  (str) local_ldp_ident: <class 'str'>,\n            Optional  (str) graceful_restart: <class 'str'>,\n            Optional  (str) session_holdtime: <class 'int'>,\n            Optional  (str) session_holdtime_ms: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'neighbor': <class 'str'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'uptime': <class 'str'>,\n            Optional  (str) uid: <class 'int'>,\n            Optional  (str) peer_id: <class 'int'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                'ldp_discovery_sources': {\n                  Optional  (str) interface: {\n                    Any  (str) *: {\n                      Optional  (str) ip_address: {\n                        Any  (str) *: {\n                          Optional  (str) holdtime_ms: <class 'int'>,\n                          Optional  (str) hello_interval_ms: <class 'int'>,\n                          Optional  (str) holdtime: <class 'int'>,\n                          Optional  (str) hello_interval: <class 'int'>,\n                          Optional  (str) holdtime_str: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) targeted_hello: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) active: <class 'bool'>,\n                        Optional  (str) holdtime_ms: <class 'int'>,\n                        Optional  (str) hello_interval_ms: <class 'int'>,\n                        Optional  (str) holdtime: <class 'int'>,\n                        Optional  (str) hello_interval: <class 'int'>,\n                        Optional  (str) holdtime_str: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) address_bound: <class 'list'>,\n                },\n              },\n            Optional  (str) peer_holdtime: <class 'int'>,\n            Optional  (str) ka_interval: <class 'int'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) clients: <class 'str'>,\n            Optional  (str) inbound_label_filtering: <class 'str'>,\n            Optional  (str) session_protection: {\n              'session_state': <class 'str'>,\n              Optional  (str) duration_int: <class 'int'>,\n              Optional  (str) duration_str: <class 'str'>,\n              },\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              Optional  (str) sent: {\n                Any  (str) *: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Any  (str) *: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_vrf_vrf_neighbor_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L168"}}, "show mpls ldp vrf {vrf} {interface} detail": {"iosxr": {"class": "ShowMplsLdpNeighborDetail", "doc": "Parser for show mpls ldp neighbor detail,\n                  show mpls ldp neighbor {interface} detail", "module_name": "show_mpls", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peers': {\n      Any  (str) *: {\n        'label_space_id': {\n          Any  (str) *: {\n            'tcp_connection': <class 'str'>,\n            Optional  (str) local_ldp_ident: <class 'str'>,\n            Optional  (str) graceful_restart: <class 'str'>,\n            Optional  (str) session_holdtime: <class 'int'>,\n            Optional  (str) session_holdtime_ms: <class 'int'>,\n            Optional  (str) password: <class 'str'>,\n            'state': <class 'str'>,\n            'msg_sent': <class 'int'>,\n            'msg_rcvd': <class 'int'>,\n            'neighbor': <class 'str'>,\n            Optional  (str) last_tib_rev_sent: <class 'int'>,\n            'uptime': <class 'str'>,\n            Optional  (str) uid: <class 'int'>,\n            Optional  (str) peer_id: <class 'int'>,\n            Optional  (str) address_family: {\n              Any  (str) *: {\n                'ldp_discovery_sources': {\n                  Optional  (str) interface: {\n                    Any  (str) *: {\n                      Optional  (str) ip_address: {\n                        Any  (str) *: {\n                          Optional  (str) holdtime_ms: <class 'int'>,\n                          Optional  (str) hello_interval_ms: <class 'int'>,\n                          Optional  (str) holdtime: <class 'int'>,\n                          Optional  (str) hello_interval: <class 'int'>,\n                          Optional  (str) holdtime_str: <class 'str'>,\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) targeted_hello: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) active: <class 'bool'>,\n                        Optional  (str) holdtime_ms: <class 'int'>,\n                        Optional  (str) hello_interval_ms: <class 'int'>,\n                        Optional  (str) holdtime: <class 'int'>,\n                        Optional  (str) hello_interval: <class 'int'>,\n                        Optional  (str) holdtime_str: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) address_bound: <class 'list'>,\n                },\n              },\n            Optional  (str) peer_holdtime: <class 'int'>,\n            Optional  (str) ka_interval: <class 'int'>,\n            Optional  (str) peer_holdtime_ms: <class 'int'>,\n            Optional  (str) ka_interval_ms: <class 'int'>,\n            Optional  (str) peer_state: <class 'str'>,\n            Optional  (str) clients: <class 'str'>,\n            Optional  (str) inbound_label_filtering: <class 'str'>,\n            Optional  (str) session_protection: {\n              'session_state': <class 'str'>,\n              Optional  (str) duration_int: <class 'int'>,\n              Optional  (str) duration_str: <class 'str'>,\n              },\n            Optional  (str) nsr: <class 'str'>,\n            Optional  (str) capabilities: {\n              Optional  (str) sent: {\n                Any  (str) *: <class 'str'>,\n                },\n              Optional  (str) received: {\n                Any  (str) *: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mpls_ldp_vrf_vrf_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mpls.py#L588"}}, "show mrib route summary": {"iosxr": {"class": "ShowMribVrfRouteSummary", "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route summary\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af (optional)\n    ", "module_name": "show_mrib", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'no_group_ranges': <class 'int'>,\n        'no_g_routes': <class 'int'>,\n        'no_s_g_routes': <class 'int'>,\n        'no_route_x_interfaces': <class 'int'>,\n        'total_no_interfaces': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mrib_route_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py#L268"}}, "show mrib vrf {vrf} ipv4 route summary": {"iosxr": {"class": "ShowMribVrfRouteSummary", "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route summary\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af (optional)\n    ", "module_name": "show_mrib", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'no_group_ranges': <class 'int'>,\n        'no_g_routes': <class 'int'>,\n        'no_s_g_routes': <class 'int'>,\n        'no_route_x_interfaces': <class 'int'>,\n        'total_no_interfaces': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mrib_vrf_vrf_ipv4_route_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py#L268"}}, "show mrib vrf {vrf} ipv6 route summary": {"iosxr": {"class": "ShowMribVrfRouteSummary", "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route summary\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af (optional)\n    ", "module_name": "show_mrib", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'no_group_ranges': <class 'int'>,\n        'no_g_routes': <class 'int'>,\n        'no_s_g_routes': <class 'int'>,\n        'no_route_x_interfaces': <class 'int'>,\n        'total_no_interfaces': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mrib_vrf_vrf_ipv6_route_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py#L268"}}, "show mrib vrf {vrf} route summary": {"iosxr": {"class": "ShowMribVrfRouteSummary", "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route summary\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af (optional)\n    ", "module_name": "show_mrib", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'no_group_ranges': <class 'int'>,\n        'no_g_routes': <class 'int'>,\n        'no_s_g_routes': <class 'int'>,\n        'no_route_x_interfaces': <class 'int'>,\n        'total_no_interfaces': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_mrib_vrf_vrf_route_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py#L268"}}, "show mrib vrf {vrf} {af} route": {"iosxr": {"class": "ShowMribVrfRoute", "doc": "\n    Parser for show mrib vrf <vrf> <address-family> route\n    For checking any output with the parser, below mandatory keys have to be in cli command.\n    - vrf\n    - af\n    ", "module_name": "show_mrib", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'multicast_group': {\n          Any  (str) *: {\n            'source_address': {\n              Any  (str) *: {\n                'uptime': <class 'str'>,\n                Optional  (str) flags: <class 'str'>,\n                Optional  (str) rpf_nbr: <class 'str'>,\n                Optional  (str) mvpn_tid: <class 'str'>,\n                Optional  (str) mvpn_remote_tid: <class 'str'>,\n                Optional  (str) mvpn_payload: <class 'str'>,\n                Optional  (str) mdt_ifh: <class 'str'>,\n                Optional  (str) mt_slot: <class 'str'>,\n                Optional  (str) incoming_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'flags': <class 'str'>,\n                    Optional  (str) rpf_nbr: <class 'str'>,\n                    },\n                  },\n                Optional  (str) outgoing_interface_list: {\n                  Any  (str) *: {\n                    'uptime': <class 'str'>,\n                    'flags': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_mrib_vrf_vrf_af_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_mrib.py#L64"}}, "show msdp context": {"iosxr": {"class": "ShowMsdpContext", "doc": " Parser for:\n        * 'show msdp context'\n        * 'show msdp vrf <vrf> context'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'context_info': {\n      'vrf_id': <class 'str'>,\n      'table_id': <class 'str'>,\n      'table_count': {\n        'active': <class 'int'>,\n        'total': <class 'int'>,\n        },\n      },\n    'inheritable_config': {\n      'ttl': <class 'int'>,\n      'maximum_sa': <class 'int'>,\n      'keepalive_period': <class 'int'>,\n      'peer_timeout_period': <class 'int'>,\n      Optional  (str) connect_source: <class 'str'>,\n      Optional  (str) sa_filter: {\n        'in': <class 'str'>,\n        'out': <class 'str'>,\n        },\n      Optional  (str) rp_filter: {\n        'in': <class 'str'>,\n        'out': <class 'str'>,\n        },\n      },\n    'config': {\n      'originator_address': <class 'str'>,\n      Optional  (str) originator_interface: <class 'str'>,\n      'default_peer_address': <class 'str'>,\n      'sa_holdtime': <class 'int'>,\n      'allow_encaps_count': <class 'int'>,\n      'maximum_sa': <class 'int'>,\n      },\n    'sa_cache': {\n      'groups': {\n        'current': <class 'int'>,\n        'high_water_mark': <class 'int'>,\n        },\n      'sources': {\n        'current': <class 'int'>,\n        'high_water_mark': <class 'int'>,\n        },\n      'rps': {\n        'current': <class 'int'>,\n        'high_water_mark': <class 'int'>,\n        },\n      'external_sas': {\n        'current': <class 'int'>,\n        'high_water_mark': <class 'int'>,\n        },\n      },\n    'mrib_update_counts': {\n      'total_updates': <class 'int'>,\n      'with_no_changes': <class 'int'>,\n      'g_routes': <class 'int'>,\n      'sg_routes': <class 'int'>,\n      },\n    'mrib_update_drops': {\n      'invalid_group': <class 'int'>,\n      'invalid_group_length': <class 'int'>,\n      'invalid_source': <class 'int'>,\n      'auto_rp_address': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_msdp_context", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L482"}}, "show msdp peer": {"iosxr": {"class": "ShowMsdpPeer", "doc": " Parser for:\n        * 'show msdp peer'\n        * 'show msdp peer <peer>'\n        * 'show msdp vrf <vrf> peer'\n        * 'show msdp vrf <vrf> peer <peer>'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'peer_name': <class 'str'>,\n        'peer_as': <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'session_state': <class 'str'>,\n        'reset': <class 'str'>,\n        'connect_source_address': <class 'str'>,\n        'elapsed_time': <class 'str'>,\n        'statistics': {\n          'received': {\n            'sa_message': <class 'int'>,\n            'tlv_message': <class 'int'>,\n            },\n          'sent': {\n            'tlv_message': <class 'int'>,\n            },\n          'output_message_discarded': <class 'int'>,\n          'queue': {\n            'size_input': <class 'int'>,\n            'size_output': <class 'int'>,\n            },\n          'conn_count_cleared': <class 'str'>,\n          },\n        'sa_filter': {\n          'in': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              },\n            },\n          'out': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              },\n            },\n          },\n        'sa_request': {\n          'input_filter': <class 'str'>,\n          'sa_request_to_peer': <class 'str'>,\n          },\n        'password': <class 'str'>,\n        'ttl_threshold': <class 'int'>,\n        'timer': {\n          'keepalive_interval': <class 'int'>,\n          'peer_timeout_interval': <class 'int'>,\n          },\n        'nsr': {\n          'state': <class 'str'>,\n          'oper_downs': <class 'int'>,\n          'up_down_time': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L94"}}, "show msdp peer {peer}": {"iosxr": {"class": "ShowMsdpPeer", "doc": " Parser for:\n        * 'show msdp peer'\n        * 'show msdp peer <peer>'\n        * 'show msdp vrf <vrf> peer'\n        * 'show msdp vrf <vrf> peer <peer>'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'peer_name': <class 'str'>,\n        'peer_as': <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'session_state': <class 'str'>,\n        'reset': <class 'str'>,\n        'connect_source_address': <class 'str'>,\n        'elapsed_time': <class 'str'>,\n        'statistics': {\n          'received': {\n            'sa_message': <class 'int'>,\n            'tlv_message': <class 'int'>,\n            },\n          'sent': {\n            'tlv_message': <class 'int'>,\n            },\n          'output_message_discarded': <class 'int'>,\n          'queue': {\n            'size_input': <class 'int'>,\n            'size_output': <class 'int'>,\n            },\n          'conn_count_cleared': <class 'str'>,\n          },\n        'sa_filter': {\n          'in': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              },\n            },\n          'out': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              },\n            },\n          },\n        'sa_request': {\n          'input_filter': <class 'str'>,\n          'sa_request_to_peer': <class 'str'>,\n          },\n        'password': <class 'str'>,\n        'ttl_threshold': <class 'int'>,\n        'timer': {\n          'keepalive_interval': <class 'int'>,\n          'peer_timeout_interval': <class 'int'>,\n          },\n        'nsr': {\n          'state': <class 'str'>,\n          'oper_downs': <class 'int'>,\n          'up_down_time': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_peer_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L94"}}, "show msdp sa-cache": {"iosxr": {"class": "ShowMsdpSaCache", "doc": null, "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sa_cache': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'source_addr': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        Optional  (str) peer_learned_from: <class 'str'>,\n        Optional  (str) rpf_peer: <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        'flags': {\n          'grp': <class 'list'>,\n          'src': <class 'list'>,\n          },\n        Optional  (str) statistics: {\n          'received': {\n            'sa': <class 'int'>,\n            'encapsulated_data_received': <class 'int'>,\n            },\n          },\n        'up_time': <class 'str'>,\n        'expire': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_sa-cache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L1003"}}, "show msdp sa-cache {group}": {"iosxr": {"class": "ShowMsdpSaCache", "doc": null, "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sa_cache': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'source_addr': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        Optional  (str) peer_learned_from: <class 'str'>,\n        Optional  (str) rpf_peer: <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        'flags': {\n          'grp': <class 'list'>,\n          'src': <class 'list'>,\n          },\n        Optional  (str) statistics: {\n          'received': {\n            'sa': <class 'int'>,\n            'encapsulated_data_received': <class 'int'>,\n            },\n          },\n        'up_time': <class 'str'>,\n        'expire': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_sa-cache_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L1003"}}, "show msdp statistics peer": {"iosxr": {"class": "ShowMsdpStatisticsPeer", "doc": null, "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'as': <class 'int'>,\n        'state': <class 'str'>,\n        'active_sa': <class 'int'>,\n        'tlv_rcvd': {\n          'total': <class 'int'>,\n          'keepalives': <class 'int'>,\n          'notifications': <class 'int'>,\n          'sa': <class 'int'>,\n          'request': <class 'int'>,\n          'sa_response': <class 'int'>,\n          'unknowns': <class 'int'>,\n          },\n        'tlv_sent': {\n          'total': <class 'int'>,\n          'keepalives': <class 'int'>,\n          'notifications': <class 'int'>,\n          'sa': <class 'int'>,\n          'request': <class 'int'>,\n          'sa_response': <class 'int'>,\n          },\n        'sa_msgs': {\n          'received': <class 'int'>,\n          'sent': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_statistics_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L1153"}}, "show msdp statistics peer {peer}": {"iosxr": {"class": "ShowMsdpStatisticsPeer", "doc": null, "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'as': <class 'int'>,\n        'state': <class 'str'>,\n        'active_sa': <class 'int'>,\n        'tlv_rcvd': {\n          'total': <class 'int'>,\n          'keepalives': <class 'int'>,\n          'notifications': <class 'int'>,\n          'sa': <class 'int'>,\n          'request': <class 'int'>,\n          'sa_response': <class 'int'>,\n          'unknowns': <class 'int'>,\n          },\n        'tlv_sent': {\n          'total': <class 'int'>,\n          'keepalives': <class 'int'>,\n          'notifications': <class 'int'>,\n          'sa': <class 'int'>,\n          'request': <class 'int'>,\n          'sa_response': <class 'int'>,\n          },\n        'sa_msgs': {\n          'received': <class 'int'>,\n          'sent': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_statistics_peer_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L1153"}}, "show msdp summary": {"iosxr": {"class": "ShowMsdpSummary", "doc": "Parser for:\n        * 'show msdp summary'\n        * 'show msdp vrf <vrf> summary'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'maximum_external_sa_global': <class 'int'>,\n    'current_external_active_sa': <class 'int'>,\n    Optional  (str) peer_address: {\n      Any  (str) *: {\n        'as': <class 'int'>,\n        'state': <class 'str'>,\n        'uptime_downtime': <class 'str'>,\n        'reset_count': <class 'int'>,\n        'name': <class 'str'>,\n        'active_sa_cnt': <class 'int'>,\n        'cfg_max_ext_sas': <class 'int'>,\n        'tlv': {\n          'receive': <class 'int'>,\n          'sent': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L874"}}, "show msdp vrf {vrf} context": {"iosxr": {"class": "ShowMsdpContext", "doc": " Parser for:\n        * 'show msdp context'\n        * 'show msdp vrf <vrf> context'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'context_info': {\n      'vrf_id': <class 'str'>,\n      'table_id': <class 'str'>,\n      'table_count': {\n        'active': <class 'int'>,\n        'total': <class 'int'>,\n        },\n      },\n    'inheritable_config': {\n      'ttl': <class 'int'>,\n      'maximum_sa': <class 'int'>,\n      'keepalive_period': <class 'int'>,\n      'peer_timeout_period': <class 'int'>,\n      Optional  (str) connect_source: <class 'str'>,\n      Optional  (str) sa_filter: {\n        'in': <class 'str'>,\n        'out': <class 'str'>,\n        },\n      Optional  (str) rp_filter: {\n        'in': <class 'str'>,\n        'out': <class 'str'>,\n        },\n      },\n    'config': {\n      'originator_address': <class 'str'>,\n      Optional  (str) originator_interface: <class 'str'>,\n      'default_peer_address': <class 'str'>,\n      'sa_holdtime': <class 'int'>,\n      'allow_encaps_count': <class 'int'>,\n      'maximum_sa': <class 'int'>,\n      },\n    'sa_cache': {\n      'groups': {\n        'current': <class 'int'>,\n        'high_water_mark': <class 'int'>,\n        },\n      'sources': {\n        'current': <class 'int'>,\n        'high_water_mark': <class 'int'>,\n        },\n      'rps': {\n        'current': <class 'int'>,\n        'high_water_mark': <class 'int'>,\n        },\n      'external_sas': {\n        'current': <class 'int'>,\n        'high_water_mark': <class 'int'>,\n        },\n      },\n    'mrib_update_counts': {\n      'total_updates': <class 'int'>,\n      'with_no_changes': <class 'int'>,\n      'g_routes': <class 'int'>,\n      'sg_routes': <class 'int'>,\n      },\n    'mrib_update_drops': {\n      'invalid_group': <class 'int'>,\n      'invalid_group_length': <class 'int'>,\n      'invalid_source': <class 'int'>,\n      'auto_rp_address': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_msdp_vrf_vrf_context", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L482"}}, "show msdp vrf {vrf} peer": {"iosxr": {"class": "ShowMsdpPeer", "doc": " Parser for:\n        * 'show msdp peer'\n        * 'show msdp peer <peer>'\n        * 'show msdp vrf <vrf> peer'\n        * 'show msdp vrf <vrf> peer <peer>'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'peer_name': <class 'str'>,\n        'peer_as': <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'session_state': <class 'str'>,\n        'reset': <class 'str'>,\n        'connect_source_address': <class 'str'>,\n        'elapsed_time': <class 'str'>,\n        'statistics': {\n          'received': {\n            'sa_message': <class 'int'>,\n            'tlv_message': <class 'int'>,\n            },\n          'sent': {\n            'tlv_message': <class 'int'>,\n            },\n          'output_message_discarded': <class 'int'>,\n          'queue': {\n            'size_input': <class 'int'>,\n            'size_output': <class 'int'>,\n            },\n          'conn_count_cleared': <class 'str'>,\n          },\n        'sa_filter': {\n          'in': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              },\n            },\n          'out': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              },\n            },\n          },\n        'sa_request': {\n          'input_filter': <class 'str'>,\n          'sa_request_to_peer': <class 'str'>,\n          },\n        'password': <class 'str'>,\n        'ttl_threshold': <class 'int'>,\n        'timer': {\n          'keepalive_interval': <class 'int'>,\n          'peer_timeout_interval': <class 'int'>,\n          },\n        'nsr': {\n          'state': <class 'str'>,\n          'oper_downs': <class 'int'>,\n          'up_down_time': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_vrf_vrf_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L94"}}, "show msdp vrf {vrf} peer {peer}": {"iosxr": {"class": "ShowMsdpPeer", "doc": " Parser for:\n        * 'show msdp peer'\n        * 'show msdp peer <peer>'\n        * 'show msdp vrf <vrf> peer'\n        * 'show msdp vrf <vrf> peer <peer>'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'peer_name': <class 'str'>,\n        'peer_as': <class 'int'>,\n        Optional  (str) description: <class 'str'>,\n        'session_state': <class 'str'>,\n        'reset': <class 'str'>,\n        'connect_source_address': <class 'str'>,\n        'elapsed_time': <class 'str'>,\n        'statistics': {\n          'received': {\n            'sa_message': <class 'int'>,\n            'tlv_message': <class 'int'>,\n            },\n          'sent': {\n            'tlv_message': <class 'int'>,\n            },\n          'output_message_discarded': <class 'int'>,\n          'queue': {\n            'size_input': <class 'int'>,\n            'size_output': <class 'int'>,\n            },\n          'conn_count_cleared': <class 'str'>,\n          },\n        'sa_filter': {\n          'in': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              },\n            },\n          'out': {\n            Any  (str) *: {\n              'filter': <class 'str'>,\n              },\n            },\n          },\n        'sa_request': {\n          'input_filter': <class 'str'>,\n          'sa_request_to_peer': <class 'str'>,\n          },\n        'password': <class 'str'>,\n        'ttl_threshold': <class 'int'>,\n        'timer': {\n          'keepalive_interval': <class 'int'>,\n          'peer_timeout_interval': <class 'int'>,\n          },\n        'nsr': {\n          'state': <class 'str'>,\n          'oper_downs': <class 'int'>,\n          'up_down_time': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_vrf_vrf_peer_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L94"}}, "show msdp vrf {vrf} sa-cache": {"iosxr": {"class": "ShowMsdpSaCache", "doc": null, "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sa_cache': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'source_addr': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        Optional  (str) peer_learned_from: <class 'str'>,\n        Optional  (str) rpf_peer: <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        'flags': {\n          'grp': <class 'list'>,\n          'src': <class 'list'>,\n          },\n        Optional  (str) statistics: {\n          'received': {\n            'sa': <class 'int'>,\n            'encapsulated_data_received': <class 'int'>,\n            },\n          },\n        'up_time': <class 'str'>,\n        'expire': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_vrf_vrf_sa-cache", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L1003"}}, "show msdp vrf {vrf} sa-cache {group}": {"iosxr": {"class": "ShowMsdpSaCache", "doc": null, "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'sa_cache': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'source_addr': <class 'str'>,\n        Optional  (str) peer_as: <class 'int'>,\n        Optional  (str) peer_learned_from: <class 'str'>,\n        Optional  (str) rpf_peer: <class 'str'>,\n        'origin_rp': {\n          Any  (str) *: {\n            'rp_address': <class 'str'>,\n            },\n          },\n        'flags': {\n          'grp': <class 'list'>,\n          'src': <class 'list'>,\n          },\n        Optional  (str) statistics: {\n          'received': {\n            'sa': <class 'int'>,\n            'encapsulated_data_received': <class 'int'>,\n            },\n          },\n        'up_time': <class 'str'>,\n        'expire': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_vrf_vrf_sa-cache_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L1003"}}, "show msdp vrf {vrf} statistics peer": {"iosxr": {"class": "ShowMsdpStatisticsPeer", "doc": null, "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'as': <class 'int'>,\n        'state': <class 'str'>,\n        'active_sa': <class 'int'>,\n        'tlv_rcvd': {\n          'total': <class 'int'>,\n          'keepalives': <class 'int'>,\n          'notifications': <class 'int'>,\n          'sa': <class 'int'>,\n          'request': <class 'int'>,\n          'sa_response': <class 'int'>,\n          'unknowns': <class 'int'>,\n          },\n        'tlv_sent': {\n          'total': <class 'int'>,\n          'keepalives': <class 'int'>,\n          'notifications': <class 'int'>,\n          'sa': <class 'int'>,\n          'request': <class 'int'>,\n          'sa_response': <class 'int'>,\n          },\n        'sa_msgs': {\n          'received': <class 'int'>,\n          'sent': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_vrf_vrf_statistics_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L1153"}}, "show msdp vrf {vrf} statistics peer {peer}": {"iosxr": {"class": "ShowMsdpStatisticsPeer", "doc": null, "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        'as': <class 'int'>,\n        'state': <class 'str'>,\n        'active_sa': <class 'int'>,\n        'tlv_rcvd': {\n          'total': <class 'int'>,\n          'keepalives': <class 'int'>,\n          'notifications': <class 'int'>,\n          'sa': <class 'int'>,\n          'request': <class 'int'>,\n          'sa_response': <class 'int'>,\n          'unknowns': <class 'int'>,\n          },\n        'tlv_sent': {\n          'total': <class 'int'>,\n          'keepalives': <class 'int'>,\n          'notifications': <class 'int'>,\n          'sa': <class 'int'>,\n          'request': <class 'int'>,\n          'sa_response': <class 'int'>,\n          },\n        'sa_msgs': {\n          'received': <class 'int'>,\n          'sent': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_vrf_vrf_statistics_peer_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L1153"}}, "show msdp vrf {vrf} summary": {"iosxr": {"class": "ShowMsdpSummary", "doc": "Parser for:\n        * 'show msdp summary'\n        * 'show msdp vrf <vrf> summary'\n    ", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'maximum_external_sa_global': <class 'int'>,\n    'current_external_active_sa': <class 'int'>,\n    Optional  (str) peer_address: {\n      Any  (str) *: {\n        'as': <class 'int'>,\n        'state': <class 'str'>,\n        'uptime_downtime': <class 'str'>,\n        'reset_count': <class 'int'>,\n        'name': <class 'str'>,\n        'active_sa_cnt': <class 'int'>,\n        'cfg_max_ext_sas': <class 'int'>,\n        'tlv': {\n          'receive': <class 'int'>,\n          'sent': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_msdp_vrf_vrf_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_msdp.py#L874"}}, "show ntp associations": {"ios": {"class": "ShowNtpAssociations", "doc": "Parser for show ntp associations", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'local_mode': {\n      Any  (str) *: {\n        'remote': <class 'str'>,\n        'configured': <class 'bool'>,\n        Optional  (str) refid: <class 'str'>,\n        Optional  (str) local_mode: <class 'str'>,\n        Optional  (str) stratum: <class 'int'>,\n        Optional  (str) receive_time: Or (<class 'str'>, <class 'int'>),\n        Optional  (str) poll: <class 'int'>,\n        Optional  (str) reach: <class 'int'>,\n        Optional  (str) delay: <class 'float'>,\n        Optional  (str) offset: <class 'float'>,\n        Optional  (str) jitter: <class 'float'>,\n        'mode': <class 'str'>,\n        },\n      },\n    },\n  },\n'clock_state': {\n  'system_status': {\n    'clock_state': <class 'str'>,\n    Optional  (str) clock_stratum: <class 'int'>,\n    Optional  (str) associations_address: <class 'str'>,\n    Optional  (str) root_delay: <class 'float'>,\n    Optional  (str) clock_offset: <class 'float'>,\n    Optional  (str) clock_refid: <class 'str'>,\n    Optional  (str) associations_local_mode: <class 'str'>,\n    },\n  },\n}", "uid": "show_ntp_associations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ntp.py#L65"}, "iosxe": {"class": "ShowNtpAssociations", "doc": "Parser for show ntp associations", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'local_mode': {\n      Any  (str) *: {\n        'remote': <class 'str'>,\n        'configured': <class 'bool'>,\n        Optional  (str) refid: <class 'str'>,\n        Optional  (str) local_mode: <class 'str'>,\n        Optional  (str) stratum: <class 'int'>,\n        Optional  (str) receive_time: Or (<class 'str'>, <class 'int'>),\n        Optional  (str) poll: <class 'int'>,\n        Optional  (str) reach: <class 'int'>,\n        Optional  (str) delay: <class 'float'>,\n        Optional  (str) offset: <class 'float'>,\n        Optional  (str) jitter: <class 'float'>,\n        'mode': <class 'str'>,\n        },\n      },\n    },\n  },\n'clock_state': {\n  'system_status': {\n    'clock_state': <class 'str'>,\n    Optional  (str) clock_stratum: <class 'int'>,\n    Optional  (str) associations_address: <class 'str'>,\n    Optional  (str) root_delay: <class 'float'>,\n    Optional  (str) clock_offset: <class 'float'>,\n    Optional  (str) clock_refid: <class 'str'>,\n    Optional  (str) associations_local_mode: <class 'str'>,\n    },\n  },\n}", "uid": "show_ntp_associations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ntp.py#L62"}, "iosxr": {"class": "ShowNtpAssociations", "doc": "Parser for show ntp associations", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'local_mode': {\n      Any  (str) *: {\n        'remote': <class 'str'>,\n        'configured': <class 'bool'>,\n        Optional  (str) refid: <class 'str'>,\n        Optional  (str) local_mode: <class 'str'>,\n        Optional  (str) stratum: <class 'int'>,\n        Optional  (str) receive_time: Or (<class 'str'>, <class 'int'>),\n        Optional  (str) poll: <class 'int'>,\n        Optional  (str) reach: <class 'int'>,\n        Optional  (str) delay: <class 'float'>,\n        Optional  (str) offset: <class 'float'>,\n        Optional  (str) jitter: <class 'float'>,\n        'mode': <class 'str'>,\n        },\n      },\n    },\n  },\n'clock_state': {\n  'system_status': {\n    'clock_state': <class 'str'>,\n    Optional  (str) clock_stratum: <class 'int'>,\n    Optional  (str) associations_address: <class 'str'>,\n    Optional  (str) root_delay: <class 'float'>,\n    Optional  (str) clock_offset: <class 'float'>,\n    Optional  (str) clock_refid: <class 'str'>,\n    Optional  (str) associations_local_mode: <class 'str'>,\n    },\n  },\n'vrf': {\n  Any  (str) *: {\n    'address': {\n      Any  (str) *: {\n        'type': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'type': <class 'str'>,\n            'vrf': <class 'str'>,\n            },\n          },\n        'isconfigured': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'isconfigured': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ntp_associations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ntp.py#L84"}, "junos": {"class": "ShowNtpAssociations", "doc": "Parser for show ntp associations", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'local_mode': {\n      Any  (str) *: {\n        'remote': <class 'str'>,\n        Optional  (str) refid: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) stratum: <class 'int'>,\n        Optional  (str) receive_time: <class 'int'>,\n        Optional  (str) poll: <class 'int'>,\n        Optional  (str) reach: <class 'int'>,\n        Optional  (str) delay: <class 'float'>,\n        Optional  (str) offset: <class 'float'>,\n        Optional  (str) jitter: <class 'float'>,\n        'mode': <class 'str'>,\n        },\n      },\n    },\n  },\n'clock_state': {\n  'system_status': {\n    'clock_state': <class 'str'>,\n    Optional  (str) clock_stratum: <class 'int'>,\n    Optional  (str) associations_address: <class 'str'>,\n    Optional  (str) root_delay: <class 'float'>,\n    Optional  (str) clock_offset: <class 'float'>,\n    Optional  (str) clock_refid: <class 'str'>,\n    Optional  (str) associations_local_mode: <class 'str'>,\n    },\n  },\n}", "uid": "show_ntp_associations", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ntp.py#L61"}}, "show ntp associations detail": {"ios": {"class": "ShowNtpAssociationsDetail", "doc": "Parser for show ntp associations detail", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'associations': {\n      'address': {\n        Any  (str) *: {\n          'local_mode': {\n            Any  (str) *: {\n              'isconfigured': {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  'local_mode': <class 'str'>,\n                  'isconfigured': <class 'bool'>,\n                  'stratum': <class 'int'>,\n                  'refid': <class 'str'>,\n                  Optional  (str) authenticated: <class 'bool'>,\n                  Optional  (str) prefer: <class 'str'>,\n                  'peer_interface': <class 'str'>,\n                  Optional  (str) minpoll: <class 'int'>,\n                  Optional  (str) maxpoll: <class 'int'>,\n                  Optional  (str) port: <class 'str'>,\n                  'version': <class 'int'>,\n                  'reach': <class 'str'>,\n                  Optional  (str) unreach: <class 'str'>,\n                  'poll': <class 'str'>,\n                  Optional  (str) now: <class 'str'>,\n                  'root_delay_msec': <class 'str'>,\n                  'root_disp': <class 'str'>,\n                  'offset_msec': <class 'str'>,\n                  'delay_msec': <class 'str'>,\n                  'dispersion': <class 'str'>,\n                  Optional  (str) jitter_msec: <class 'str'>,\n                  'originate_time': <class 'str'>,\n                  'receive_time': <class 'str'>,\n                  'transmit_time': <class 'str'>,\n                  'input_time': <class 'str'>,\n                  'vrf': <class 'str'>,\n                  Optional  (str) ip_type: <class 'str'>,\n                  'sane': <class 'bool'>,\n                  'valid': <class 'bool'>,\n                  Optional  (str) master: <class 'bool'>,\n                  Optional  (str) selected: <class 'bool'>,\n                  Optional  (str) unsynced: <class 'bool'>,\n                  'sync_dist': <class 'str'>,\n                  'precision': <class 'str'>,\n                  Optional  (str) assoc_id: <class 'int'>,\n                  Optional  (str) assoc_name: <class 'str'>,\n                  'filterror': <class 'str'>,\n                  'filtoffset': <class 'str'>,\n                  'filtdelay': <class 'str'>,\n                  Optional  (str) ntp_statistics: {\n                    'packet_sent': <class 'int'>,\n                    Optional  (str) packet_sent_fail: <class 'int'>,\n                    'packet_received': <class 'int'>,\n                    'packet_dropped': <class 'int'>,\n                    },\n                  'peer': {\n                    Any  (str) *: {\n                      'local_mode': {\n                        Any  (str) *: {\n                          'local_mode': <class 'str'>,\n                          'poll': <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ntp_associations_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ntp.py#L298"}, "iosxe": {"class": "ShowNtpAssociationsDetail", "doc": "Parser for show ntp associations detail", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'associations': {\n      'address': {\n        Any  (str) *: {\n          'local_mode': {\n            Any  (str) *: {\n              'isconfigured': {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  'local_mode': <class 'str'>,\n                  'isconfigured': <class 'bool'>,\n                  'stratum': <class 'int'>,\n                  'refid': <class 'str'>,\n                  Optional  (str) authenticated: <class 'bool'>,\n                  Optional  (str) prefer: <class 'str'>,\n                  'peer_interface': <class 'str'>,\n                  Optional  (str) minpoll: <class 'int'>,\n                  Optional  (str) maxpoll: <class 'int'>,\n                  Optional  (str) port: <class 'str'>,\n                  'version': <class 'int'>,\n                  'reach': <class 'str'>,\n                  Optional  (str) unreach: <class 'str'>,\n                  'poll': <class 'str'>,\n                  Optional  (str) now: <class 'str'>,\n                  'root_delay_msec': <class 'str'>,\n                  'root_disp': <class 'str'>,\n                  'offset_msec': <class 'str'>,\n                  'delay_msec': <class 'str'>,\n                  'dispersion': <class 'str'>,\n                  Optional  (str) jitter_msec: <class 'str'>,\n                  'originate_time': <class 'str'>,\n                  'receive_time': <class 'str'>,\n                  'transmit_time': <class 'str'>,\n                  'input_time': <class 'str'>,\n                  'vrf': <class 'str'>,\n                  Optional  (str) ip_type: <class 'str'>,\n                  'sane': <class 'bool'>,\n                  'valid': <class 'bool'>,\n                  Optional  (str) master: <class 'bool'>,\n                  Optional  (str) selected: <class 'bool'>,\n                  Optional  (str) unsynced: <class 'bool'>,\n                  'sync_dist': <class 'str'>,\n                  'precision': <class 'str'>,\n                  Optional  (str) assoc_id: <class 'int'>,\n                  Optional  (str) assoc_name: <class 'str'>,\n                  'filterror': <class 'str'>,\n                  'filtoffset': <class 'str'>,\n                  'filtdelay': <class 'str'>,\n                  Optional  (str) ntp_statistics: {\n                    'packet_sent': <class 'int'>,\n                    Optional  (str) packet_sent_fail: <class 'int'>,\n                    'packet_received': <class 'int'>,\n                    'packet_dropped': <class 'int'>,\n                    },\n                  'peer': {\n                    Any  (str) *: {\n                      'local_mode': {\n                        Any  (str) *: {\n                          'local_mode': <class 'str'>,\n                          'poll': <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ntp_associations_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ntp.py#L493"}}, "show ntp config": {"ios": {"class": "ShowNtpConfig", "doc": "Parser for: show ntp config", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address': {\n      Any  (str) *: {\n        'type': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'type': <class 'str'>,\n            'vrf': <class 'str'>,\n            Optional  (str) source: <class 'str'>,\n            },\n          },\n        'isconfigured': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'isconfigured': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ntp_config", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ntp.py#L242"}, "iosxe": {"class": "ShowNtpConfig", "doc": "Parser for: show ntp config", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address': {\n      Any  (str) *: {\n        'type': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'type': <class 'str'>,\n            'vrf': <class 'str'>,\n            Optional  (str) source: <class 'str'>,\n            },\n          },\n        'isconfigured': {\n          Any  (str) *: {\n            'address': <class 'str'>,\n            'isconfigured': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ntp_config", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ntp.py#L355"}}, "show ntp peer-status": {"nxos": {"class": "ShowNtpPeerStatus", "doc": "Parser for show ntp peer-status", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'total_peers': <class 'int'>,\n'vrf': {\n  Any  (str) *: {\n    'peer': {\n      Any  (str) *: {\n        Optional  (str) clock_state: <class 'str'>,\n        Optional  (str) mode: <class 'str'>,\n        'remote': <class 'str'>,\n        Optional  (str) local: <class 'str'>,\n        Optional  (str) stratum: <class 'int'>,\n        Optional  (str) poll: <class 'int'>,\n        Optional  (str) reach: <class 'int'>,\n        Optional  (str) delay: <class 'float'>,\n        Optional  (str) vrf: <class 'str'>,\n        },\n      },\n    },\n  },\n'clock_state': {\n  'system_status': {\n    'clock_state': <class 'str'>,\n    Optional  (str) clock_stratum: <class 'int'>,\n    Optional  (str) associations_address: <class 'str'>,\n    Optional  (str) root_delay: <class 'float'>,\n    },\n  },\n}", "uid": "show_ntp_peer-status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ntp.py#L59"}}, "show ntp peers": {"nxos": {"class": "ShowNtpPeers", "doc": "Parser for: show ntp peers", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'peer': {\n  Any  (str) *: {\n    'isconfigured': {\n      Any  (str) *: {\n        'address': <class 'str'>,\n        'type': <class 'str'>,\n        'isconfigured': <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ntp_peers", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_ntp.py#L165"}}, "show ntp status": {"ios": {"class": "ShowNtpStatus", "doc": "Parser for: show ntp status", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'clock_state': {\n  'system_status': {\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) stratum: <class 'int'>,\n    Optional  (str) refid: <class 'str'>,\n    Optional  (str) assoc_id: <class 'int'>,\n    Optional  (str) nom_freq: <class 'float'>,\n    Optional  (str) act_freq: <class 'float'>,\n    Optional  (str) precision: Or (<class 'int'>, <class 'str'>),\n    Optional  (str) uptime: <class 'str'>,\n    Optional  (str) resolution: <class 'int'>,\n    Optional  (str) reftime: <class 'str'>,\n    Optional  (str) offset: <class 'float'>,\n    Optional  (str) rootdelay: <class 'float'>,\n    Optional  (str) rootdispersion: <class 'float'>,\n    Optional  (str) peerdispersion: <class 'float'>,\n    Optional  (str) leap_status: <class 'str'>,\n    Optional  (str) drift: <class 'str'>,\n    Optional  (str) poll: <class 'int'>,\n    Optional  (str) last_update: <class 'str'>,\n    Optional  (str) leapsecond: <class 'bool'>,\n    },\n  },\n}", "uid": "show_ntp_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_ntp.py#L204"}, "iosxe": {"class": "ShowNtpStatus", "doc": "Parser for: show ntp status", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'clock_state': {\n  'system_status': {\n    Optional  (str) status: <class 'str'>,\n    Optional  (str) stratum: <class 'int'>,\n    Optional  (str) refid: <class 'str'>,\n    Optional  (str) assoc_id: <class 'int'>,\n    Optional  (str) nom_freq: <class 'float'>,\n    Optional  (str) act_freq: <class 'float'>,\n    Optional  (str) precision: Or (<class 'int'>, <class 'str'>),\n    Optional  (str) uptime: <class 'str'>,\n    Optional  (str) resolution: <class 'int'>,\n    Optional  (str) reftime: <class 'str'>,\n    Optional  (str) offset: <class 'float'>,\n    Optional  (str) rootdelay: <class 'float'>,\n    Optional  (str) rootdispersion: <class 'float'>,\n    Optional  (str) peerdispersion: <class 'float'>,\n    Optional  (str) leap_status: <class 'str'>,\n    Optional  (str) drift: <class 'str'>,\n    Optional  (str) poll: <class 'int'>,\n    Optional  (str) last_update: <class 'str'>,\n    Optional  (str) leapsecond: <class 'bool'>,\n    },\n  },\n}", "uid": "show_ntp_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_ntp.py#L188"}, "iosxr": {"class": "ShowNtpStatus", "doc": "Parser for: show ntp status", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'clock_state': {\n  'system_status': {\n    'status': <class 'str'>,\n    Optional  (str) stratum: <class 'int'>,\n    Optional  (str) refid: <class 'str'>,\n    Optional  (str) nom_freq: <class 'float'>,\n    Optional  (str) act_freq: <class 'float'>,\n    Optional  (str) precision: Or (<class 'int'>, <class 'str'>),\n    Optional  (str) uptime: <class 'str'>,\n    Optional  (str) resolution: <class 'int'>,\n    Optional  (str) reftime: <class 'str'>,\n    Optional  (str) offset: <class 'float'>,\n    Optional  (str) rootdelay: <class 'float'>,\n    Optional  (str) rootdispersion: <class 'float'>,\n    Optional  (str) peerdispersion: <class 'float'>,\n    Optional  (str) leap_status: <class 'str'>,\n    Optional  (str) drift: <class 'str'>,\n    Optional  (str) poll: <class 'int'>,\n    Optional  (str) last_update: <class 'str'>,\n    },\n  },\n}", "uid": "show_ntp_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ntp.py#L332"}, "junos": {"class": "ShowNtpStatus", "doc": "Parser for: show ntp status", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'clock_state': {\n  'system_status': {\n    Optional  (str) ass_id: <class 'int'>,\n    Optional  (str) clock: <class 'str'>,\n    Optional  (str) frequency: <class 'float'>,\n    Optional  (str) jitter: <class 'float'>,\n    Optional  (str) leap_status: <class 'str'>,\n    Optional  (str) number_of_events: <class 'int'>,\n    Optional  (str) offset: <class 'float'>,\n    Optional  (str) peer: <class 'int'>,\n    Optional  (str) poll: <class 'int'>,\n    Optional  (str) precision: <class 'float'>,\n    Optional  (str) processor: <class 'str'>,\n    Optional  (str) recent_event: <class 'str'>,\n    Optional  (str) refid: <class 'str'>,\n    Optional  (str) reftime: <class 'str'>,\n    Optional  (str) rootdelay: <class 'float'>,\n    Optional  (str) rootdispersion: <class 'float'>,\n    Optional  (str) stability: <class 'float'>,\n    Optional  (str) state: <class 'int'>,\n    'status': <class 'str'>,\n    Optional  (str) stratum: <class 'int'>,\n    Optional  (str) synch_source: <class 'str'>,\n    Optional  (str) system: <class 'str'>,\n    Optional  (str) version: <class 'str'>,\n    Optional  (str) leap: <class 'str'>,\n    },\n  },\n}", "uid": "show_ntp_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ntp.py#L190"}}, "show nve ethernet-segment": {"nxos": {"class": "ShowNveEthernetSegment", "doc": "parser for:\n        show nve ethernet-segment", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'nve': {\n  Any  (str) *: {\n    'ethernet_segment': {\n      'esi': {\n        Any  (str) *: {\n          'esi': <class 'str'>,\n          'if_name': <class 'str'>,\n          'es_state': <class 'str'>,\n          'po_state': <class 'str'>,\n          'nve_if_name': <class 'str'>,\n          'nve_state': <class 'str'>,\n          'host_reach_mode': <class 'str'>,\n          'active_vlans': <class 'str'>,\n          Optional  (str) df_vlans: <class 'str'>,\n          'active_vnis': <class 'str'>,\n          'cc_failed_vlans': <class 'str'>,\n          'cc_timer_left': <class 'str'>,\n          'num_es_mem': <class 'int'>,\n          Optional  (str) local_ordinal: <class 'int'>,\n          'df_timer_st': <class 'str'>,\n          'config_status': <class 'str'>,\n          Optional  (str) df_list: <class 'str'>,\n          'es_rt_added': <class 'bool'>,\n          'ead_rt_added': <class 'bool'>,\n          'ead_evi_rt_timer_age': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_nve_ethernet-segment", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L874"}}, "show nve interface {interface} detail": {"nxos": {"class": "ShowNveInterfaceDetail", "doc": "parser for:\n        show nve interface <nve> detail", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'nve_name': <class 'str'>,\n  Optional  (str) if_state: <class 'str'>,\n  Optional  (str) encap_type: <class 'str'>,\n  Optional  (str) vpc_capability: <class 'str'>,\n  Optional  (str) local_rmac: <class 'str'>,\n  Optional  (str) host_reach_mode: <class 'str'>,\n  Optional  (str) source_if: <class 'str'>,\n  Optional  (str) primary_ip: <class 'str'>,\n  Optional  (str) secondary_ip: <class 'str'>,\n  Optional  (str) src_if_state: <class 'str'>,\n  Optional  (str) ir_cap_mode: <class 'str'>,\n  Optional  (str) adv_vmac: <class 'bool'>,\n  Optional  (str) nve_flags: <class 'str'>,\n  Optional  (str) nve_if_handle: <class 'int'>,\n  Optional  (str) src_if_holddown_tm: <class 'int'>,\n  Optional  (str) src_if_holdup_tm: <class 'int'>,\n  Optional  (str) src_if_holddown_left: <class 'int'>,\n  Optional  (str) multisite_convergence_time: <class 'int'>,\n  Optional  (str) multisite_convergence_time_left: <class 'int'>,\n  Optional  (str) vip_rmac: <class 'str'>,\n  Optional  (str) vip_rmac_ro: <class 'str'>,\n  Optional  (str) sm_state: <class 'str'>,\n  Optional  (str) peer_forwarding_mode: <class 'bool'>,\n  Optional  (str) dwn_strm_vni_cfg_mode: <class 'str'>,\n  Optional  (str) src_intf_last_reinit_notify_type: <class 'str'>,\n  Optional  (str) mcast_src_intf_last_reinit_notify_type: <class 'str'>,\n  Optional  (str) multi_src_intf_last_reinit_notify_type: <class 'str'>,\n  Optional  (str) multisite_bgw_if: <class 'str'>,\n  Optional  (str) multisite_bgw_if_ip: <class 'str'>,\n  Optional  (str) multisite_bgw_if_admin_state: <class 'str'>,\n  Optional  (str) multisite_bgw_if_oper_state: <class 'str'>,\n  Optional  (str) multisite_bgw_if_oper_state_down_reason: <class 'str'>,\n  Optional  (str) multisite_dci_advertise_pip: <class 'bool'>,\n  },\n}", "uid": "show_nve_interface_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L412"}}, "show nve multisite dci-links": {"nxos": {"class": "ShowNveMultisiteDciLinks", "doc": "parser for:\n        show nve multisite dci-links", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'multisite': {\n  Optional  (str) dci_links: {\n    Any  (str) *: {\n      'if_name': <class 'str'>,\n      'if_state': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_nve_multisite_dci-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L732"}}, "show nve multisite fabric-links": {"nxos": {"class": "ShowNveMultisiteFabricLinks", "doc": "parser for:\n        show nve multisite fabric-links", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'multisite': {\n  'fabric_links': {\n    Any  (str) *: {\n      'if_name': <class 'str'>,\n      'if_state': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_nve_multisite_fabric-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L791"}}, "show nve peers": {"nxos": {"class": "ShowNvePeers", "doc": "Parser for :\n       show nve peers", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'nve_name': <class 'str'>,\n  'peer_ip': {\n    Any  (str) *: {\n      'peer_state': <class 'str'>,\n      'learn_type': <class 'str'>,\n      'uptime': <class 'str'>,\n      'router_mac': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_nve_peers", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L134"}}, "show nve vni": {"nxos": {"class": "ShowNveVni", "doc": "parser for:\n        show nve vni", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vni': {\n    Any  (str) *: {\n      'vni': <class 'int'>,\n      'mcast': <class 'str'>,\n      'vni_state': <class 'str'>,\n      'mode': <class 'str'>,\n      'type': <class 'str'>,\n      'flags': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_nve_vni", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L272"}}, "show nve vni ingress-replication": {"nxos": {"class": "ShowNveVniIngressReplication", "doc": "parser for:\n        show nve vni Ingress-replication", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vni': {\n    Any  (str) *: {\n      'vni': <class 'int'>,\n      Optional  (str) repl_ip: {\n        Any  (str) *: {\n          Optional  (str) repl_ip: <class 'str'>,\n          Optional  (str) source: <class 'str'>,\n          Optional  (str) up_time: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_nve_vni_ingress-replication", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1976"}}, "show nve vni summary": {"nxos": {"class": "ShowNveVniSummary", "doc": "Parser for :\n       show nve vni summary", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\n'vni': {\n  'summary': {\n    'cp_vni_count': <class 'int'>,\n    'cp_vni_up': <class 'int'>,\n    'cp_vni_down': <class 'int'>,\n    'dp_vni_count': <class 'int'>,\n    'dp_vni_up': <class 'int'>,\n    'dp_vni_down': <class 'int'>,\n    },\n  },\n}", "uid": "show_nve_vni_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L206"}}, "show ospf database": {"junos": {"class": "ShowOspfDatabase", "doc": null, "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'ospf-database-information': {\n  'ospf-area-header': {\n    'ospf-area': <class 'str'>,\n    },\n  'ospf-database': Use  (function) <function ShowOspfDatabaseSchema.validate_neighbor_database_list at 0x1095dae18>,\n  },\n}", "uid": "show_ospf_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L496"}}, "show ospf database advertising-router self detail": {"junos": {"class": "ShowOspfDatabaseAdvertisingRouterSelfDetail", "doc": " Parser for:\n            * show ospf database advertising-router self detail\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'ospf-database-information': {\n  'ospf-area-header': {\n    'ospf-area': <class 'str'>,\n    },\n  'ospf-database': Use  (function) <function ShowOspfDatabaseAdvertisingRouterSelfDetailSchema.validate_ospf_database at 0x1094b02f0>,\n  },\n}", "uid": "show_ospf_database_advertising-router_self_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L1479"}}, "show ospf database external extensive": {"junos": {"class": "ShowOspfDatabaseExternalExtensive", "doc": null, "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'ospf-database-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'ospf-database': Use  (function) <function ShowOspfDatabaseExternalExtensiveSchema.validate_neighbor_database_external_extensive_list at 0x1094b00d0>,\n  },\n}", "uid": "show_ospf_database_external_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L816"}}, "show ospf database summary": {"junos": {"class": "ShowOspfDatabaseSummary", "doc": null, "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'ospf-database-information': {\n  'ospf-database-summary': Use  (function) <function ShowOspfDatabaseSummarySchema.validate_neighbor_database_summary_list at 0x1095daf28>,\n  },\n}", "uid": "show_ospf_database_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L595"}}, "show ospf interface": {"junos": {"class": "ShowOspfInterface", "doc": " Parser for:\n            * show ospf interface\n            * show ospf interface {interface}\n            * show ospf interface instance {instance}\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'dr_id': <class 'str'>,\n            'bdr_id': <class 'str'>,\n            'nbrs_count': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L117"}}, "show ospf interface brief": {"junos": {"class": "ShowOspfInterfaceBrief", "doc": " Parser for:\n            * show ospf interface brief\n            * show ospf interface brief instance {instance}\n            * show ospf interface {interface} brief\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'dr_id': <class 'str'>,\n            'bdr_id': <class 'str'>,\n            'nbrs_count': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L61"}}, "show ospf interface brief instance {instance}": {"junos": {"class": "ShowOspfInterfaceBrief", "doc": " Parser for:\n            * show ospf interface brief\n            * show ospf interface brief instance {instance}\n            * show ospf interface {interface} brief\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'dr_id': <class 'str'>,\n            'bdr_id': <class 'str'>,\n            'nbrs_count': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_interface_brief_instance_instance", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L61"}}, "show ospf interface detail": {"junos": {"class": "ShowOspfInterfaceDetail", "doc": " Parser for:\n           * show ospf interface detail\n           * show ospf interface {interface} detail\n           * show ospf interface detail instance {instance}\n           * show ospf interface {interface} detail instance {instance}\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'dr_id': <class 'str'>,\n            'bdr_id': <class 'str'>,\n            'nbrs_count': <class 'int'>,\n            'type': <class 'str'>,\n            'address': <class 'str'>,\n            'mask': <class 'str'>,\n            'mtu': <class 'int'>,\n            Optional  (str) dr_ip_addr: <class 'str'>,\n            Optional  (str) priority: <class 'int'>,\n            'cost': <class 'int'>,\n            'adj_count': <class 'int'>,\n            'hello': <class 'int'>,\n            'dead': <class 'int'>,\n            'rexmit': <class 'int'>,\n            'ospf_stub_type': <class 'str'>,\n            'authentication_type': <class 'str'>,\n            'ospf_interface': {\n              'protection_type': <class 'str'>,\n              Optional  (str) tilfa: {\n                'prot_link': <class 'str'>,\n                'prot_srlg': <class 'str'>,\n                'prot_fate': <class 'str'>,\n                'prot_node': <class 'int'>,\n                },\n              'topology': {\n                Any  (str) *: {\n                  'id': <class 'int'>,\n                  'metric': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L200"}}, "show ospf interface detail instance {instance}": {"junos": {"class": "ShowOspfInterfaceDetail", "doc": " Parser for:\n           * show ospf interface detail\n           * show ospf interface {interface} detail\n           * show ospf interface detail instance {instance}\n           * show ospf interface {interface} detail instance {instance}\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'dr_id': <class 'str'>,\n            'bdr_id': <class 'str'>,\n            'nbrs_count': <class 'int'>,\n            'type': <class 'str'>,\n            'address': <class 'str'>,\n            'mask': <class 'str'>,\n            'mtu': <class 'int'>,\n            Optional  (str) dr_ip_addr: <class 'str'>,\n            Optional  (str) priority: <class 'int'>,\n            'cost': <class 'int'>,\n            'adj_count': <class 'int'>,\n            'hello': <class 'int'>,\n            'dead': <class 'int'>,\n            'rexmit': <class 'int'>,\n            'ospf_stub_type': <class 'str'>,\n            'authentication_type': <class 'str'>,\n            'ospf_interface': {\n              'protection_type': <class 'str'>,\n              Optional  (str) tilfa: {\n                'prot_link': <class 'str'>,\n                'prot_srlg': <class 'str'>,\n                'prot_fate': <class 'str'>,\n                'prot_node': <class 'int'>,\n                },\n              'topology': {\n                Any  (str) *: {\n                  'id': <class 'int'>,\n                  'metric': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_interface_detail_instance_instance", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L200"}}, "show ospf interface instance {instance}": {"junos": {"class": "ShowOspfInterface", "doc": " Parser for:\n            * show ospf interface\n            * show ospf interface {interface}\n            * show ospf interface instance {instance}\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'dr_id': <class 'str'>,\n            'bdr_id': <class 'str'>,\n            'nbrs_count': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_interface_instance_instance", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L117"}}, "show ospf interface {interface}": {"junos": {"class": "ShowOspfInterface", "doc": " Parser for:\n            * show ospf interface\n            * show ospf interface {interface}\n            * show ospf interface instance {instance}\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'dr_id': <class 'str'>,\n            'bdr_id': <class 'str'>,\n            'nbrs_count': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L117"}}, "show ospf interface {interface} brief": {"junos": {"class": "ShowOspfInterfaceBrief", "doc": " Parser for:\n            * show ospf interface brief\n            * show ospf interface brief instance {instance}\n            * show ospf interface {interface} brief\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'dr_id': <class 'str'>,\n            'bdr_id': <class 'str'>,\n            'nbrs_count': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_interface_interface_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L61"}}, "show ospf interface {interface} detail": {"junos": {"class": "ShowOspfInterfaceDetail", "doc": " Parser for:\n           * show ospf interface detail\n           * show ospf interface {interface} detail\n           * show ospf interface detail instance {instance}\n           * show ospf interface {interface} detail instance {instance}\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'dr_id': <class 'str'>,\n            'bdr_id': <class 'str'>,\n            'nbrs_count': <class 'int'>,\n            'type': <class 'str'>,\n            'address': <class 'str'>,\n            'mask': <class 'str'>,\n            'mtu': <class 'int'>,\n            Optional  (str) dr_ip_addr: <class 'str'>,\n            Optional  (str) priority: <class 'int'>,\n            'cost': <class 'int'>,\n            'adj_count': <class 'int'>,\n            'hello': <class 'int'>,\n            'dead': <class 'int'>,\n            'rexmit': <class 'int'>,\n            'ospf_stub_type': <class 'str'>,\n            'authentication_type': <class 'str'>,\n            'ospf_interface': {\n              'protection_type': <class 'str'>,\n              Optional  (str) tilfa: {\n                'prot_link': <class 'str'>,\n                'prot_srlg': <class 'str'>,\n                'prot_fate': <class 'str'>,\n                'prot_node': <class 'int'>,\n                },\n              'topology': {\n                Any  (str) *: {\n                  'id': <class 'int'>,\n                  'metric': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_interface_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L200"}}, "show ospf interface {interface} detail instance {instance}": {"junos": {"class": "ShowOspfInterfaceDetail", "doc": " Parser for:\n           * show ospf interface detail\n           * show ospf interface {interface} detail\n           * show ospf interface detail instance {instance}\n           * show ospf interface {interface} detail instance {instance}\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'areas': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'state': <class 'str'>,\n            'dr_id': <class 'str'>,\n            'bdr_id': <class 'str'>,\n            'nbrs_count': <class 'int'>,\n            'type': <class 'str'>,\n            'address': <class 'str'>,\n            'mask': <class 'str'>,\n            'mtu': <class 'int'>,\n            Optional  (str) dr_ip_addr: <class 'str'>,\n            Optional  (str) priority: <class 'int'>,\n            'cost': <class 'int'>,\n            'adj_count': <class 'int'>,\n            'hello': <class 'int'>,\n            'dead': <class 'int'>,\n            'rexmit': <class 'int'>,\n            'ospf_stub_type': <class 'str'>,\n            'authentication_type': <class 'str'>,\n            'ospf_interface': {\n              'protection_type': <class 'str'>,\n              Optional  (str) tilfa: {\n                'prot_link': <class 'str'>,\n                'prot_srlg': <class 'str'>,\n                'prot_fate': <class 'str'>,\n                'prot_node': <class 'int'>,\n                },\n              'topology': {\n                Any  (str) *: {\n                  'id': <class 'int'>,\n                  'metric': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_interface_interface_detail_instance_instance", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L200"}}, "show ospf mpls traffic-eng link": {"iosxr": {"class": "ShowOspfMplsTrafficEngLink", "doc": "Parser for show ospf mpls traffic-eng link", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'mpls': {\n              'te': {\n                'router_id': <class 'str'>,\n                },\n              },\n            'areas': {\n              Any  (str) *: {\n                'mpls': {\n                  'te': {\n                    'enable': <class 'bool'>,\n                    Optional  (str) total_links: <class 'int'>,\n                    Optional  (str) area_instance: <class 'int'>,\n                    Optional  (str) link_fragments: {\n                      Any  (str) *: {\n                        'link_instance': <class 'int'>,\n                        'network_type': <class 'str'>,\n                        'link_id': <class 'str'>,\n                        'interface_address': <class 'str'>,\n                        'te_admin_metric': <class 'int'>,\n                        'maximum_bandwidth': <class 'int'>,\n                        'maximum_reservable_bandwidth': <class 'int'>,\n                        'total_priority': <class 'int'>,\n                        'out_interface_id': <class 'int'>,\n                        'affinity_bit': <class 'str'>,\n                        'total_extended_admin_group': <class 'int'>,\n                        'unreserved_bandwidths': {\n                          Any  (str) *: {\n                            'priority': <class 'int'>,\n                            'unreserved_bandwidth': <class 'int'>,\n                            },\n                          },\n                        'extended_admin_groups': {\n                          Any  (str) *: {\n                            'value': <class 'int'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_mpls_traffic-eng_link", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L2629"}}, "show ospf neighbor": {"junos": {"class": "ShowOspfNeighbor", "doc": null, "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'ospf-neighbor-information': {\n  'ospf-neighbor': Use  (function) <function ShowOspfNeighborSchema.validate_neighbor_list at 0x1095dad08>,\n  },\n}", "uid": "show_ospf_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L400"}}, "show ospf overview": {"junos": {"class": "ShowOspfOverview", "doc": null, "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'ospf-overview-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'ospf-overview': {\n    'instance-name': <class 'str'>,\n    'ospf-area-overview': {\n      'authentication-type': <class 'str'>,\n      'ospf-abr-count': <class 'str'>,\n      'ospf-area': <class 'str'>,\n      'ospf-asbr-count': <class 'str'>,\n      'ospf-nbr-overview': {\n        'ospf-nbr-up-count': <class 'str'>,\n        },\n      'ospf-stub-type': <class 'str'>,\n      },\n    'ospf-lsa-refresh-time': <class 'str'>,\n    'ospf-route-table-index': <class 'str'>,\n    'ospf-router-id': <class 'str'>,\n    'ospf-spring-overview': {\n      'ospf-node-segment': {\n        'ospf-node-segment-ipv4-index': <class 'str'>,\n        },\n      'ospf-node-segment-enabled': <class 'str'>,\n      'ospf-spring-enabled': <class 'str'>,\n      'ospf-srgb-allocation': <class 'str'>,\n      'ospf-srgb-block': {\n        'ospf-srgb-first-label': <class 'str'>,\n        'ospf-srgb-last-label': <class 'str'>,\n        'ospf-srgb-size': <class 'str'>,\n        'ospf-srgb-start-index': <class 'str'>,\n        },\n      'ospf-srgb-config': {\n        'ospf-srgb-config-block-header': <class 'str'>,\n        'ospf-srgb-index-range': <class 'str'>,\n        'ospf-srgb-start-label': <class 'str'>,\n        },\n      },\n    'ospf-tilfa-overview': {\n      'ospf-tilfa-ecmp-backup': <class 'str'>,\n      'ospf-tilfa-enabled': <class 'str'>,\n      'ospf-tilfa-max-labels': <class 'str'>,\n      'ospf-tilfa-max-spf': <class 'str'>,\n      },\n    'ospf-topology-overview': {\n      'ospf-backup-spf-status': <class 'str'>,\n      'ospf-full-spf-count': <class 'str'>,\n      'ospf-prefix-export-count': <class 'str'>,\n      'ospf-spf-delay': <class 'str'>,\n      'ospf-spf-holddown': <class 'str'>,\n      'ospf-spf-rapid-runs': <class 'str'>,\n      'ospf-topology-id': <class 'str'>,\n      'ospf-topology-name': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ospf_overview", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L1043"}}, "show ospf overview extensive": {"junos": {"class": "ShowOspfOverviewExtensive", "doc": " Parser for:\n            - show ospf overview extensive\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'ospf-overview-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'ospf-overview': {\n    'instance-name': <class 'str'>,\n    'ospf-area-overview': {\n      'authentication-type': <class 'str'>,\n      'ospf-abr-count': <class 'str'>,\n      'ospf-area': <class 'str'>,\n      'ospf-asbr-count': <class 'str'>,\n      'ospf-nbr-overview': {\n        'ospf-nbr-up-count': <class 'str'>,\n        },\n      'ospf-stub-type': <class 'str'>,\n      },\n    'ospf-lsa-refresh-time': <class 'str'>,\n    'ospf-route-table-index': <class 'str'>,\n    'ospf-router-id': <class 'str'>,\n    'ospf-spring-overview': {\n      'ospf-node-segment': {\n        'ospf-node-segment-ipv4-index': <class 'str'>,\n        },\n      'ospf-node-segment-enabled': <class 'str'>,\n      'ospf-spring-enabled': <class 'str'>,\n      'ospf-srgb-allocation': <class 'str'>,\n      'ospf-srgb-block': {\n        'ospf-srgb-first-label': <class 'str'>,\n        'ospf-srgb-last-label': <class 'str'>,\n        'ospf-srgb-size': <class 'str'>,\n        'ospf-srgb-start-index': <class 'str'>,\n        },\n      'ospf-srgb-config': {\n        'ospf-srgb-config-block-header': <class 'str'>,\n        'ospf-srgb-index-range': <class 'str'>,\n        'ospf-srgb-start-label': <class 'str'>,\n        },\n      },\n    'ospf-tilfa-overview': {\n      'ospf-tilfa-ecmp-backup': <class 'str'>,\n      'ospf-tilfa-enabled': <class 'str'>,\n      'ospf-tilfa-max-labels': <class 'str'>,\n      'ospf-tilfa-max-spf': <class 'str'>,\n      },\n    'ospf-topology-overview': {\n      'ospf-backup-spf-status': <class 'str'>,\n      'ospf-full-spf-count': <class 'str'>,\n      'ospf-prefix-export-count': <class 'str'>,\n      'ospf-spf-delay': <class 'str'>,\n      'ospf-spf-holddown': <class 'str'>,\n      'ospf-spf-rapid-runs': <class 'str'>,\n      'ospf-topology-id': <class 'str'>,\n      'ospf-topology-name': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ospf_overview_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf.py#L1319"}}, "show ospf segment-routing prefix-sid-map {status}": {"iosxr": {"class": "ShowOspfSegmentRoutingPrefixSidMap", "doc": " Parser for:\n          *  show ospf segment-routing prefix-sid-map active-policy\n          *  show ospf segment-routing prefix-sid-map backup-policy\n        ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'process_id': {\n  Any  (str) *: {\n    'policy': {\n      Any  (str) *: {\n        'sid': {\n          Any  (str) *: {\n            'prefix': <class 'str'>,\n            'range': <class 'int'>,\n            Optional  (str) flags: <class 'str'>,\n            },\n          },\n        'number_of_mapping_entries': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_segment-routing_prefix-sid-map_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L140"}}, "show ospf vrf all-inclusive": {"iosxr": {"class": "ShowOspfVrfAllInclusive", "doc": "Parser for show ospf vrf all-inclusive", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            'role': <class 'str'>,\n            'nsr': {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) maximum_interfaces: <class 'int'>,\n            Optional  (str) redistribution: {\n              Optional  (str) max_prefix: {\n                Optional  (str) num_of_prefix: <class 'int'>,\n                Optional  (str) prefix_thld: <class 'int'>,\n                Optional  (str) warn_only: <class 'bool'>,\n                },\n              Optional  (str) connected: {\n                'enabled': <class 'bool'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) static: {\n                'enabled': <class 'bool'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) bgp: {\n                'bgp_id': <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) isis: {\n                'isis_pid': <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              },\n            Optional  (str) stub_router: {\n              Optional  (str) always: {\n                Optional  (str) always: <class 'bool'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                Optional  (str) state: <class 'str'>,\n                },\n              Optional  (str) on_startup: {\n                Optional  (str) on_startup: <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                'state': <class 'str'>,\n                },\n              Optional  (str) on_switchover: {\n                Optional  (str) on_switchover: <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                Optional  (str) state: <class 'str'>,\n                },\n              Optional  (str) on_procrestart: {\n                Optional  (str) on_procrestart: <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                'state': <class 'str'>,\n                },\n              },\n            Optional  (str) spf_control: {\n              Optional  (str) paths: <class 'str'>,\n              'throttle': {\n                'spf': {\n                  'start': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  },\n                'lsa': {\n                  'start': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  'interval': <class 'int'>,\n                  'arrival': <class 'int'>,\n                  'refresh_interval': <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) mpls: {\n              'ldp': {\n                'ldp_igp_sync': <class 'bool'>,\n                'ldp_sync_status': <class 'str'>,\n                },\n              },\n            Optional  (str) adjacency_stagger: {\n              'disable': <class 'bool'>,\n              'initial_number': <class 'int'>,\n              'maximum_number': <class 'int'>,\n              'nbrs_forming': <class 'int'>,\n              'nbrs_full': <class 'int'>,\n              },\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                'enable': <class 'bool'>,\n                'type': <class 'str'>,\n                },\n              },\n            Optional  (str) numbers: {\n              Optional  (str) external_lsa: <class 'int'>,\n              Optional  (str) external_lsa_checksum: <class 'str'>,\n              Optional  (str) opaque_as_lsa: <class 'int'>,\n              Optional  (str) opaque_as_lsa_checksum: <class 'str'>,\n              Optional  (str) dc_bitless: <class 'int'>,\n              Optional  (str) do_not_age: <class 'int'>,\n              },\n            Optional  (str) total_areas: <class 'int'>,\n            Optional  (str) total_normal_areas: <class 'int'>,\n            Optional  (str) total_stub_areas: <class 'int'>,\n            Optional  (str) total_nssa_areas: <class 'int'>,\n            Optional  (str) flood_pacing_interval_msec: <class 'int'>,\n            Optional  (str) retransmission_pacing_interval: <class 'int'>,\n            Optional  (str) external_flood_list_length: <class 'int'>,\n            Optional  (str) snmp_trap: <class 'bool'>,\n            Optional  (str) lsd_state: <class 'str'>,\n            Optional  (str) lsd_revision: <class 'int'>,\n            Optional  (str) segment_routing_global_block_default: <class 'str'>,\n            Optional  (str) segment_routing_global_block_status: <class 'str'>,\n            Optional  (str) strict_spf: <class 'bool'>,\n            Optional  (str) flags: {\n              Optional  (str) abr: <class 'bool'>,\n              Optional  (str) asbr: <class 'bool'>,\n              },\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_id': <class 'str'>,\n                'area_type': <class 'str'>,\n                Optional  (str) summary: <class 'bool'>,\n                Optional  (str) default_cost: <class 'int'>,\n                Optional  (str) lsa_translation: <class 'str'>,\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    'advertise': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) rrr_enabled: <class 'bool'>,\n                Optional  (str) topology_version: <class 'int'>,\n                Optional  (str) statistics: {\n                  Optional  (str) spf_runs_count: <class 'int'>,\n                  Optional  (str) interfaces_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) area_scope_opaque_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_opaque_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                  Optional  (str) indication_lsa_count: <class 'int'>,\n                  Optional  (str) donotage_lsa_count: <class 'int'>,\n                  Optional  (str) flood_list_length: <class 'int'>,\n                  Optional  (str) lfa_interface_count: <class 'int'>,\n                  Optional  (str) lfa_revision: <class 'int'>,\n                  Optional  (str) lfa_per_prefix_interface_count: <class 'int'>,\n                  Optional  (str) nbrs_staggered_mode: <class 'int'>,\n                  Optional  (str) nbrs_full: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L1301"}}, "show ospf vrf all-inclusive database external": {"iosxr": {"class": "ShowOspfVrfAllInclusiveDatabaseExternal", "doc": "\n    Parser for show ospf vrf all-inclusive database external\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'external': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    'tos': <class 'int'>,\n                                    Optional  (str) flags: <class 'str'>,\n                                    'metric': <class 'int'>,\n                                    'forwarding_address': <class 'str'>,\n                                    'external_route_tag': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_database_external", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L4022"}}, "show ospf vrf all-inclusive database network": {"iosxr": {"class": "ShowOspfVrfAllInclusiveDatabaseNetwork", "doc": "\n    Parser for show ospf vrf all-inclusive database network\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'network': {\n                                'network_mask': <class 'str'>,\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_database_network", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L4106"}}, "show ospf vrf all-inclusive database opaque-area": {"iosxr": {"class": "ShowOspfVrfAllInclusiveDatabaseOpaqueArea", "doc": "\n    Parser for show ospf vrf all-inclusive database opaque-area\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              'opaque_type': <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              Optional  (str) mpls_te_router_id: <class 'str'>,\n                              Optional  (str) num_links: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) num_of_links: <class 'int'>,\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_type': <class 'int'>,\n                                    'link_name': <class 'str'>,\n                                    'link_id': <class 'str'>,\n                                    'te_metric': <class 'int'>,\n                                    'max_bandwidth': <class 'int'>,\n                                    Optional  (str) max_reservable_bandwidth: <class 'int'>,\n                                    Optional  (str) admin_group: <class 'str'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    Optional  (str) neighbor_address: <class 'str'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Optional  (str) remote_if_ipv4_addr: Or (<class 'str'>, {}),\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_link_tlvs: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'link_type': <class 'int'>,\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'str'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'str'>,\n                                        Optional  (str) weight: <class 'int'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        Optional  (str) local_interface_id: <class 'int'>,\n                                        Optional  (str) remote_interface_id: <class 'int'>,\n                                        Optional  (str) neighbor_address: <class 'str'>,\n                                        Optional  (str) node_type: <class 'int'>,\n                                        Optional  (str) value: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_prefix_tlvs: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    Optional  (str) af: <class 'int'>,\n                                    Optional  (str) prefix: <class 'str'>,\n                                    Optional  (str) range_size: <class 'int'>,\n                                    Optional  (str) flags: <class 'str'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'str'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'str'>,\n                                        Optional  (str) algo: <class 'int'>,\n                                        Optional  (str) sid: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) router_capabilities_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    Optional  (str) information_capabilities: {\n                                      Optional  (str) graceful_restart_helper: <class 'bool'>,\n                                      Optional  (str) stub_router: <class 'bool'>,\n                                      Optional  (str) capability_bits: <class 'str'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sr_algorithm_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    Optional  (str) algorithm: {\n                                      Any  (str) *: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sid_range_tlvs: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    'range_size': <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'str'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) node_msd_tlvs: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    Optional  (str) node_type: <class 'int'>,\n                                    Optional  (str) value: <class 'int'>,\n                                    },\n                                  },\n                                Optional  (str) local_block_tlvs: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    Optional  (str) range_size: <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'str'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_database_opaque-area", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L4409"}}, "show ospf vrf all-inclusive database router": {"iosxr": {"class": "ShowOspfVrfAllInclusiveDatabaseRouter", "doc": "\n    Parser for show ospf vrf all-inclusive database router\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              Optional  (str) as_boundary_router: <class 'bool'>,\n                              Optional  (str) area_border_router: <class 'bool'>,\n                              },\n                            'body': {\n                              'router': {\n                                Optional  (str) flags: <class 'str'>,\n                                'num_of_links': <class 'int'>,\n                                'links': {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'type': <class 'str'>,\n                                    'num_tos_metrics': <class 'int'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        Optional  (str) metric: <class 'int'>,\n                                        Optional  (str) tos: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_database_router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L3932"}}, "show ospf vrf all-inclusive database summary": {"iosxr": {"class": "ShowOspfVrfAllInclusiveDatabaseSummary", "doc": "\n    Parser for show ospf vrf all-inclusive database summary\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    'tos': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_database_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L4193"}}, "show ospf vrf all-inclusive interface": {"iosxr": {"class": "ShowOspfVrfAllInclusiveInterface", "doc": "Parser for show ospf vrf all-inclusive interface", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L232"}}, "show ospf vrf all-inclusive interface {interface}": {"iosxr": {"class": "ShowOspfVrfAllInclusiveInterface", "doc": "Parser for show ospf vrf all-inclusive interface", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L232"}}, "show ospf vrf all-inclusive neighbor detail": {"iosxr": {"class": "ShowOspfVrfAllInclusiveNeighborDetail", "doc": "Parser for show ospf vrf all-inclusive neighbor detail", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) total_neighbor_count: <class 'int'>,\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bfd_enable: <class 'bool'>,\n                        Optional  (str) bfd_mode: <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L813"}}, "show ospf vrf all-inclusive neighbor detail {interface}": {"iosxr": {"class": "ShowOspfVrfAllInclusiveNeighborDetail", "doc": "Parser for show ospf vrf all-inclusive neighbor detail", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) total_neighbor_count: <class 'int'>,\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bfd_enable: <class 'bool'>,\n                        Optional  (str) bfd_mode: <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_neighbor_detail_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L813"}}, "show ospf vrf all-inclusive neighbor {neighbor} detail": {"iosxr": {"class": "ShowOspfVrfAllInclusiveNeighborDetail", "doc": "Parser for show ospf vrf all-inclusive neighbor detail", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) total_neighbor_count: <class 'int'>,\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bfd_enable: <class 'bool'>,\n                        Optional  (str) bfd_mode: <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_neighbor_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L813"}}, "show ospf vrf all-inclusive neighbor {neighbor} detail {interface}": {"iosxr": {"class": "ShowOspfVrfAllInclusiveNeighborDetail", "doc": "Parser for show ospf vrf all-inclusive neighbor detail", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) total_neighbor_count: <class 'int'>,\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bfd_enable: <class 'bool'>,\n                        Optional  (str) bfd_mode: <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_neighbor_neighbor_detail_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L813"}}, "show ospf vrf all-inclusive sham-links": {"iosxr": {"class": "ShowOspfVrfAllInclusiveShamLinks", "doc": "Parser for show ospf vrf all-inclusive sham-links", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    'local_id': <class 'str'>,\n                    'remote_id': <class 'str'>,\n                    'transit_area_id': <class 'str'>,\n                    'hello_interval': <class 'int'>,\n                    'dead_interval': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    'cost': <class 'int'>,\n                    'state': <class 'str'>,\n                    'hello_timer': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'if_index': <class 'int'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) nsf: {\n                      'enable': <class 'bool'>,\n                      'last_restart': <class 'str'>,\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_sham-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L2478"}}, "show ospf vrf all-inclusive virtual-links": {"iosxr": {"class": "ShowOspfVrfAllInclusiveVirtualLinks", "doc": "Parser for show ospf vrf all-inclusive virtual-links", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'transit_area_id': <class 'str'>,\n                    'hello_interval': <class 'int'>,\n                    'dead_interval': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    'cost': <class 'int'>,\n                    'state': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) nsf: {\n                      'enable': <class 'bool'>,\n                      'last_restart': <class 'str'>,\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_all-inclusive_virtual-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L2549"}}, "show ospf vrf {vrf}": {"iosxr": {"class": "ShowOspfVrfAllInclusive", "doc": "Parser for show ospf vrf all-inclusive", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'router_id': <class 'str'>,\n            'role': <class 'str'>,\n            'nsr': {\n              'enable': <class 'bool'>,\n              },\n            Optional  (str) maximum_interfaces: <class 'int'>,\n            Optional  (str) redistribution: {\n              Optional  (str) max_prefix: {\n                Optional  (str) num_of_prefix: <class 'int'>,\n                Optional  (str) prefix_thld: <class 'int'>,\n                Optional  (str) warn_only: <class 'bool'>,\n                },\n              Optional  (str) connected: {\n                'enabled': <class 'bool'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) static: {\n                'enabled': <class 'bool'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) bgp: {\n                'bgp_id': <class 'int'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              Optional  (str) isis: {\n                'isis_pid': <class 'str'>,\n                Optional  (str) metric: <class 'int'>,\n                },\n              },\n            Optional  (str) database_control: {\n              'max_lsa': <class 'int'>,\n              },\n            Optional  (str) stub_router: {\n              Optional  (str) always: {\n                Optional  (str) always: <class 'bool'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                Optional  (str) state: <class 'str'>,\n                },\n              Optional  (str) on_startup: {\n                Optional  (str) on_startup: <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                'state': <class 'str'>,\n                },\n              Optional  (str) on_switchover: {\n                Optional  (str) on_switchover: <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                Optional  (str) state: <class 'str'>,\n                },\n              Optional  (str) on_procrestart: {\n                Optional  (str) on_procrestart: <class 'int'>,\n                Optional  (str) include_stub: <class 'bool'>,\n                Optional  (str) summary_lsa: <class 'bool'>,\n                Optional  (str) summary_lsa_metric: <class 'int'>,\n                Optional  (str) external_lsa: <class 'bool'>,\n                Optional  (str) external_lsa_metric: <class 'int'>,\n                'state': <class 'str'>,\n                },\n              },\n            Optional  (str) spf_control: {\n              Optional  (str) paths: <class 'str'>,\n              'throttle': {\n                'spf': {\n                  'start': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  },\n                'lsa': {\n                  'start': <class 'int'>,\n                  'hold': <class 'int'>,\n                  'maximum': <class 'int'>,\n                  'interval': <class 'int'>,\n                  'arrival': <class 'int'>,\n                  'refresh_interval': <class 'int'>,\n                  },\n                },\n              },\n            Optional  (str) mpls: {\n              'ldp': {\n                'ldp_igp_sync': <class 'bool'>,\n                'ldp_sync_status': <class 'str'>,\n                },\n              },\n            Optional  (str) adjacency_stagger: {\n              'disable': <class 'bool'>,\n              'initial_number': <class 'int'>,\n              'maximum_number': <class 'int'>,\n              'nbrs_forming': <class 'int'>,\n              'nbrs_full': <class 'int'>,\n              },\n            Optional  (str) graceful_restart: {\n              Any  (str) *: {\n                'enable': <class 'bool'>,\n                'type': <class 'str'>,\n                },\n              },\n            Optional  (str) numbers: {\n              Optional  (str) external_lsa: <class 'int'>,\n              Optional  (str) external_lsa_checksum: <class 'str'>,\n              Optional  (str) opaque_as_lsa: <class 'int'>,\n              Optional  (str) opaque_as_lsa_checksum: <class 'str'>,\n              Optional  (str) dc_bitless: <class 'int'>,\n              Optional  (str) do_not_age: <class 'int'>,\n              },\n            Optional  (str) total_areas: <class 'int'>,\n            Optional  (str) total_normal_areas: <class 'int'>,\n            Optional  (str) total_stub_areas: <class 'int'>,\n            Optional  (str) total_nssa_areas: <class 'int'>,\n            Optional  (str) flood_pacing_interval_msec: <class 'int'>,\n            Optional  (str) retransmission_pacing_interval: <class 'int'>,\n            Optional  (str) external_flood_list_length: <class 'int'>,\n            Optional  (str) snmp_trap: <class 'bool'>,\n            Optional  (str) lsd_state: <class 'str'>,\n            Optional  (str) lsd_revision: <class 'int'>,\n            Optional  (str) segment_routing_global_block_default: <class 'str'>,\n            Optional  (str) segment_routing_global_block_status: <class 'str'>,\n            Optional  (str) strict_spf: <class 'bool'>,\n            Optional  (str) flags: {\n              Optional  (str) abr: <class 'bool'>,\n              Optional  (str) asbr: <class 'bool'>,\n              },\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'area_id': <class 'str'>,\n                'area_type': <class 'str'>,\n                Optional  (str) summary: <class 'bool'>,\n                Optional  (str) default_cost: <class 'int'>,\n                Optional  (str) lsa_translation: <class 'str'>,\n                Optional  (str) ranges: {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    'advertise': <class 'bool'>,\n                    },\n                  },\n                Optional  (str) rrr_enabled: <class 'bool'>,\n                Optional  (str) topology_version: <class 'int'>,\n                Optional  (str) statistics: {\n                  Optional  (str) spf_runs_count: <class 'int'>,\n                  Optional  (str) interfaces_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) area_scope_opaque_lsa_count: <class 'int'>,\n                  Optional  (str) area_scope_opaque_lsa_cksum_sum: <class 'str'>,\n                  Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                  Optional  (str) indication_lsa_count: <class 'int'>,\n                  Optional  (str) donotage_lsa_count: <class 'int'>,\n                  Optional  (str) flood_list_length: <class 'int'>,\n                  Optional  (str) lfa_interface_count: <class 'int'>,\n                  Optional  (str) lfa_revision: <class 'int'>,\n                  Optional  (str) lfa_per_prefix_interface_count: <class 'int'>,\n                  Optional  (str) nbrs_staggered_mode: <class 'int'>,\n                  Optional  (str) nbrs_full: <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L1301"}}, "show ospf vrf {vrf} database external": {"iosxr": {"class": "ShowOspfVrfAllInclusiveDatabaseExternal", "doc": "\n    Parser for show ospf vrf all-inclusive database external\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'external': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    'tos': <class 'int'>,\n                                    Optional  (str) flags: <class 'str'>,\n                                    'metric': <class 'int'>,\n                                    'forwarding_address': <class 'str'>,\n                                    'external_route_tag': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_database_external", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L4022"}}, "show ospf vrf {vrf} database network": {"iosxr": {"class": "ShowOspfVrfAllInclusiveDatabaseNetwork", "doc": "\n    Parser for show ospf vrf all-inclusive database network\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'network': {\n                                'network_mask': <class 'str'>,\n                                'attached_routers': {\n                                  Any  (str) *: {\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_database_network", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L4106"}}, "show ospf vrf {vrf} database opaque-area": {"iosxr": {"class": "ShowOspfVrfAllInclusiveDatabaseOpaqueArea", "doc": "\n    Parser for show ospf vrf all-inclusive database opaque-area\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              'opaque_type': <class 'int'>,\n                              'opaque_id': <class 'int'>,\n                              Optional  (str) fragment_number: <class 'int'>,\n                              Optional  (str) mpls_te_router_id: <class 'str'>,\n                              Optional  (str) num_links: <class 'int'>,\n                              },\n                            'body': {\n                              'opaque': {\n                                Optional  (str) num_of_links: <class 'int'>,\n                                Optional  (str) link_tlvs: {\n                                  Any  (str) *: {\n                                    'link_type': <class 'int'>,\n                                    'link_name': <class 'str'>,\n                                    'link_id': <class 'str'>,\n                                    'te_metric': <class 'int'>,\n                                    'max_bandwidth': <class 'int'>,\n                                    Optional  (str) max_reservable_bandwidth: <class 'int'>,\n                                    Optional  (str) admin_group: <class 'str'>,\n                                    Optional  (str) igp_metric: <class 'int'>,\n                                    Optional  (str) total_priority: <class 'int'>,\n                                    Optional  (str) neighbor_address: <class 'str'>,\n                                    Optional  (str) local_if_ipv4_addrs: {\n                                      Any  (str) *: {\n                                        },\n                                      },\n                                    Optional  (str) remote_if_ipv4_addrs: {\n                                      Optional  (str) remote_if_ipv4_addr: Or (<class 'str'>, {}),\n                                      },\n                                    Optional  (str) unreserved_bandwidths: {\n                                      Any  (str) *: {\n                                        'priority': <class 'int'>,\n                                        'unreserved_bandwidth': <class 'int'>,\n                                        },\n                                      },\n                                    Optional  (str) unknown_tlvs: {\n                                      Any  (str) *: {\n                                        'type': <class 'int'>,\n                                        'length': <class 'int'>,\n                                        'value': <class 'str'>,\n                                        },\n                                      },\n                                    Optional  (str) extended_admin_group: {\n                                      'length': <class 'int'>,\n                                      Optional  (str) groups: {\n                                        Any  (str) *: {\n                                          'value': <class 'int'>,\n                                          },\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_link_tlvs: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'link_type': <class 'int'>,\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'str'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'str'>,\n                                        Optional  (str) weight: <class 'int'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        Optional  (str) local_interface_id: <class 'int'>,\n                                        Optional  (str) remote_interface_id: <class 'int'>,\n                                        Optional  (str) neighbor_address: <class 'str'>,\n                                        Optional  (str) node_type: <class 'int'>,\n                                        Optional  (str) value: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) extended_prefix_tlvs: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    Optional  (str) af: <class 'int'>,\n                                    Optional  (str) prefix: <class 'str'>,\n                                    Optional  (str) range_size: <class 'int'>,\n                                    Optional  (str) flags: <class 'str'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'str'>,\n                                        Optional  (str) flags: <class 'str'>,\n                                        Optional  (str) mt_id: <class 'str'>,\n                                        Optional  (str) algo: <class 'int'>,\n                                        Optional  (str) sid: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) router_capabilities_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    Optional  (str) information_capabilities: {\n                                      Optional  (str) graceful_restart_helper: <class 'bool'>,\n                                      Optional  (str) stub_router: <class 'bool'>,\n                                      Optional  (str) capability_bits: <class 'str'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sr_algorithm_tlv: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    Optional  (str) algorithm: {\n                                      Any  (str) *: <class 'bool'>,\n                                      },\n                                    },\n                                  },\n                                Optional  (str) sid_range_tlvs: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    'tlv_type': <class 'str'>,\n                                    'range_size': <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'str'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                Optional  (str) node_msd_tlvs: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    Optional  (str) node_type: <class 'int'>,\n                                    Optional  (str) value: <class 'int'>,\n                                    },\n                                  },\n                                Optional  (str) local_block_tlvs: {\n                                  Any  (str) *: {\n                                    'length': <class 'int'>,\n                                    Optional  (str) range_size: <class 'int'>,\n                                    Optional  (str) sub_tlvs: {\n                                      Any  (str) *: {\n                                        'length': <class 'int'>,\n                                        'type': <class 'str'>,\n                                        Optional  (str) label: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_database_opaque-area", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L4409"}}, "show ospf vrf {vrf} database router": {"iosxr": {"class": "ShowOspfVrfAllInclusiveDatabaseRouter", "doc": "\n    Parser for show ospf vrf all-inclusive database router\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              Optional  (str) as_boundary_router: <class 'bool'>,\n                              Optional  (str) area_border_router: <class 'bool'>,\n                              },\n                            'body': {\n                              'router': {\n                                Optional  (str) flags: <class 'str'>,\n                                'num_of_links': <class 'int'>,\n                                'links': {\n                                  Any  (str) *: {\n                                    'link_id': <class 'str'>,\n                                    'link_data': <class 'str'>,\n                                    'type': <class 'str'>,\n                                    'num_tos_metrics': <class 'int'>,\n                                    'topologies': {\n                                      Any  (str) *: {\n                                        'mt_id': <class 'int'>,\n                                        Optional  (str) metric: <class 'int'>,\n                                        Optional  (str) tos: <class 'int'>,\n                                        },\n                                      },\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_database_router", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L3932"}}, "show ospf vrf {vrf} database summary": {"iosxr": {"class": "ShowOspfVrfAllInclusiveDatabaseSummary", "doc": "\n    Parser for show ospf vrf all-inclusive database summary\n    For checking any output with the parser ,below mandatory key(s) are needed and have to be in cli command.\n\n    - db_type\n    ", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) areas: {\n              Any  (str) *: {\n                'database': {\n                  'lsa_types': {\n                    Any  (str) *: {\n                      'lsa_type': <class 'int'>,\n                      'lsas': {\n                        Any  (str) *: {\n                          'lsa_id': <class 'str'>,\n                          'adv_router': <class 'str'>,\n                          'ospfv2': {\n                            'header': {\n                              'option': <class 'str'>,\n                              'option_desc': <class 'str'>,\n                              'lsa_id': <class 'str'>,\n                              'age': <class 'int'>,\n                              'type': <class 'int'>,\n                              'adv_router': <class 'str'>,\n                              'seq_num': <class 'str'>,\n                              'checksum': <class 'str'>,\n                              'length': <class 'int'>,\n                              Optional  (str) routing_bit_enable: <class 'bool'>,\n                              },\n                            'body': {\n                              'summary': {\n                                'network_mask': <class 'str'>,\n                                'topologies': {\n                                  Any  (str) *: {\n                                    'mt_id': <class 'int'>,\n                                    'tos': <class 'int'>,\n                                    'metric': <class 'int'>,\n                                    },\n                                  },\n                                },\n                              },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_database_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L4193"}}, "show ospf vrf {vrf} interface": {"iosxr": {"class": "ShowOspfVrfAllInclusiveInterface", "doc": "Parser for show ospf vrf all-inclusive interface", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L232"}}, "show ospf vrf {vrf} interface {interface}": {"iosxr": {"class": "ShowOspfVrfAllInclusiveInterface", "doc": "Parser for show ospf vrf all-inclusive interface", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) sham_links: {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'enable': <class 'bool'>,\n                    'line_protocol': <class 'bool'>,\n                    'ip_address': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'process_id': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'interface_type': <class 'str'>,\n                    'bfd': {\n                      'enable': <class 'bool'>,\n                      Optional  (str) interval: <class 'int'>,\n                      Optional  (str) min_interval: <class 'int'>,\n                      Optional  (str) multiplier: <class 'int'>,\n                      Optional  (str) mode: <class 'str'>,\n                      },\n                    Optional  (str) cost: <class 'int'>,\n                    Optional  (str) transmit_delay: <class 'int'>,\n                    Optional  (str) state: <class 'str'>,\n                    Optional  (str) priority: <class 'int'>,\n                    Optional  (str) mtu: <class 'int'>,\n                    Optional  (str) max_pkt_sz: <class 'int'>,\n                    Optional  (str) dr_router_id: <class 'str'>,\n                    Optional  (str) dr_ip_addr: <class 'str'>,\n                    Optional  (str) bdr_router_id: <class 'str'>,\n                    Optional  (str) bdr_ip_addr: <class 'str'>,\n                    Optional  (str) hello_interval: <class 'int'>,\n                    Optional  (str) dead_interval: <class 'int'>,\n                    Optional  (str) wait_interval: <class 'int'>,\n                    Optional  (str) retransmit_interval: <class 'int'>,\n                    Optional  (str) passive: <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) index: <class 'str'>,\n                    Optional  (str) flood_queue_length: <class 'int'>,\n                    Optional  (str) next: <class 'str'>,\n                    Optional  (str) last_flood_scan_length: <class 'int'>,\n                    Optional  (str) max_flood_scan_length: <class 'int'>,\n                    Optional  (str) last_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) max_flood_scan_time_msec: <class 'int'>,\n                    Optional  (str) ls_ack_list: <class 'str'>,\n                    Optional  (str) ls_ack_list_length: <class 'int'>,\n                    Optional  (str) high_water_mark: <class 'int'>,\n                    Optional  (str) total_dcbitless_lsa: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'bool'>,\n                    Optional  (str) statistics: {\n                      Optional  (str) adj_nbr_count: <class 'int'>,\n                      Optional  (str) nbr_count: <class 'int'>,\n                      Optional  (str) num_nbrs_suppress_hello: <class 'int'>,\n                      Optional  (str) multi_area_intf_count: <class 'int'>,\n                      },\n                    Optional  (str) neighbors: {\n                      Any  (str) *: {\n                        Optional  (str) dr_router_id: <class 'str'>,\n                        Optional  (str) bdr_router_id: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L232"}}, "show ospf vrf {vrf} neighbor detail": {"iosxr": {"class": "ShowOspfVrfAllInclusiveNeighborDetail", "doc": "Parser for show ospf vrf all-inclusive neighbor detail", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) total_neighbor_count: <class 'int'>,\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bfd_enable: <class 'bool'>,\n                        Optional  (str) bfd_mode: <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L813"}}, "show ospf vrf {vrf} neighbor detail {interface}": {"iosxr": {"class": "ShowOspfVrfAllInclusiveNeighborDetail", "doc": "Parser for show ospf vrf all-inclusive neighbor detail", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) total_neighbor_count: <class 'int'>,\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bfd_enable: <class 'bool'>,\n                        Optional  (str) bfd_mode: <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_neighbor_detail_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L813"}}, "show ospf vrf {vrf} neighbor {neighbor} detail": {"iosxr": {"class": "ShowOspfVrfAllInclusiveNeighborDetail", "doc": "Parser for show ospf vrf all-inclusive neighbor detail", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) total_neighbor_count: <class 'int'>,\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bfd_enable: <class 'bool'>,\n                        Optional  (str) bfd_mode: <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_neighbor_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L813"}}, "show ospf vrf {vrf} neighbor {neighbor} detail {interface}": {"iosxr": {"class": "ShowOspfVrfAllInclusiveNeighborDetail", "doc": "Parser for show ospf vrf all-inclusive neighbor detail", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            Optional  (str) total_neighbor_count: <class 'int'>,\n            'areas': {\n              Any  (str) *: {\n                Optional  (str) interfaces: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        Optional  (str) bfd_enable: <class 'bool'>,\n                        Optional  (str) bfd_mode: <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                Optional  (str) virtual_links: {\n                  Any  (str) *: {\n                    'neighbors': {\n                      Any  (str) *: {\n                        'neighbor_router_id': <class 'str'>,\n                        'address': <class 'str'>,\n                        'priority': <class 'int'>,\n                        'state': <class 'str'>,\n                        'dr_ip_addr': <class 'str'>,\n                        'bdr_ip_addr': <class 'str'>,\n                        Optional  (str) options: <class 'str'>,\n                        Optional  (str) lls_options: <class 'str'>,\n                        Optional  (str) dead_timer: <class 'str'>,\n                        Optional  (str) neighbor_uptime: <class 'str'>,\n                        Optional  (str) index: <class 'str'>,\n                        Optional  (str) first: <class 'str'>,\n                        Optional  (str) next: <class 'str'>,\n                        Optional  (str) ls_ack_list: <class 'str'>,\n                        Optional  (str) ls_ack_list_pending: <class 'int'>,\n                        Optional  (str) high_water_mark: <class 'int'>,\n                        Optional  (str) statistics: {\n                          Optional  (str) total_dbd_retrans: <class 'int'>,\n                          Optional  (str) nbr_event_count: <class 'int'>,\n                          Optional  (str) nbr_retrans_qlen: <class 'int'>,\n                          Optional  (str) total_retransmission: <class 'int'>,\n                          Optional  (str) last_retrans_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_length: <class 'int'>,\n                          Optional  (str) last_retrans_scan_time_msec: <class 'int'>,\n                          Optional  (str) last_retrans_max_scan_time_msec: <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_neighbor_neighbor_detail_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L813"}}, "show ospf vrf {vrf} sham-links": {"iosxr": {"class": "ShowOspfVrfAllInclusiveShamLinks", "doc": "Parser for show ospf vrf all-inclusive sham-links", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'sham_links': {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    'local_id': <class 'str'>,\n                    'remote_id': <class 'str'>,\n                    'transit_area_id': <class 'str'>,\n                    'hello_interval': <class 'int'>,\n                    'dead_interval': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    'cost': <class 'int'>,\n                    'state': <class 'str'>,\n                    'hello_timer': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    'if_index': <class 'int'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) nsf: {\n                      'enable': <class 'bool'>,\n                      'last_restart': <class 'str'>,\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_sham-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L2478"}}, "show ospf vrf {vrf} virtual-links": {"iosxr": {"class": "ShowOspfVrfAllInclusiveVirtualLinks", "doc": "Parser for show ospf vrf all-inclusive virtual-links", "module_name": "show_ospf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'areas': {\n              Any  (str) *: {\n                'virtual_links': {\n                  Any  (str) *: {\n                    'name': <class 'str'>,\n                    'link_state': <class 'str'>,\n                    'router_id': <class 'str'>,\n                    'transit_area_id': <class 'str'>,\n                    'hello_interval': <class 'int'>,\n                    'dead_interval': <class 'int'>,\n                    'wait_interval': <class 'int'>,\n                    'retransmit_interval': <class 'int'>,\n                    'transmit_delay': <class 'int'>,\n                    'cost': <class 'int'>,\n                    'state': <class 'str'>,\n                    'demand_circuit': <class 'bool'>,\n                    Optional  (str) hello_timer: <class 'str'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) dcbitless_lsa_count: <class 'int'>,\n                    Optional  (str) donotage_lsa: <class 'str'>,\n                    Optional  (str) nsf: {\n                      'enable': <class 'bool'>,\n                      'last_restart': <class 'str'>,\n                      },\n                    Optional  (str) authentication: {\n                      'auth_trailer_key': {\n                        'crypto_algorithm': <class 'str'>,\n                        Optional  (str) youngest_key_id: <class 'int'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_ospf_vrf_vrf_virtual-links", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ospf.py#L2549"}}, "show ospf3 database": {"junos": {"class": "ShowOspf3Database", "doc": " Parser for:\n    * show ospf3 database\n    ", "module_name": "show_ospf3", "package": "genie.libs.parser", "schema": "{\n'ospf3-database-information': {\n  'ospf3-area-header': {\n    'ospf-area': <class 'str'>,\n    },\n  'ospf3-database': Use  (function) <function ShowOspf3DatabaseSchema.validate_ospf3_database_list at 0x10941d9d8>,\n  'ospf3-intf-header': Use  (function) <function ShowOspf3DatabaseSchema.validate_ospf3_intf_header_list at 0x10941da60>,\n  },\n}", "uid": "show_ospf3_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf3.py#L444"}}, "show ospf3 database extensive": {"junos": {"class": "ShowOspf3DatabaseExtensive", "doc": " Parser for:\n    * show ospf3 database extensive\n    ", "module_name": "show_ospf3", "package": "genie.libs.parser", "schema": "{\n'ospf3-database-information': {\n  'ospf3-area-header': {\n    'ospf-area': <class 'str'>,\n    },\n  'ospf3-database': Use  (function) <function ShowOspf3DatabaseExtensiveSchema.validate_ospf3_database_list at 0x109426048>,\n  'ospf3-intf-header': Use  (function) <function ShowOspf3DatabaseExtensiveSchema.validate_ospf3_intf_header_list at 0x1094260d0>,\n  },\n}", "uid": "show_ospf3_database_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf3.py#L1407"}}, "show ospf3 database external extensive": {"junos": {"class": "ShowOspf3DatabaseExternalExtensive", "doc": " Parser for:\n            * show ospf3 database external extensive\n    ", "module_name": "show_ospf3", "package": "genie.libs.parser", "schema": "{\n'ospf3-database-information': {\n  'ospf3-database': Use  (function) <function ShowOspf3DatabaseExternalExtensiveSchema.validate_ospf3_database_list at 0x10941dc80>,\n  },\n}", "uid": "show_ospf3_database_external_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf3.py#L795"}}, "show ospf3 interface": {"junos": {"class": "ShowOspf3Interface", "doc": " Parser for:\n    * show ospf3 interface\n    ", "module_name": "show_ospf3", "package": "genie.libs.parser", "schema": "{\n'ospf3-interface-information': {\n  'ospf3-interface': Use  (function) <function ShowOspf3InterfaceSchema.validate_ospf3_interface_list at 0x10941d620>,\n  },\n}", "uid": "show_ospf3_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf3.py#L59"}}, "show ospf3 interface extensive": {"junos": {"class": "ShowOspf3InterfaceExtensive", "doc": " Parser for:\n    * show ospf3 interface extensive\n    ", "module_name": "show_ospf3", "package": "genie.libs.parser", "schema": "{\n'ospf3-interface-information': {\n  'ospf3-interface': Use  (function) <function ShowOspf3InterfaceExtensiveSchema.validate_ospf3_interface_list at 0x10941db70>,\n  },\n}", "uid": "show_ospf3_interface_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf3.py#L571"}}, "show ospf3 neighbor": {"junos": {"class": "ShowOspf3Neighbor", "doc": " Parser for:\n            * show ospf3 neighbor\n    ", "module_name": "show_ospf3", "package": "genie.libs.parser", "schema": "{\n'ospf3-neighbor-information': {\n  'ospf3-neighbor': Use  (function) <function ShowOspf3NeighborSchema.validate_ospf3_neighbor_list at 0x10941d840>,\n  },\n}", "uid": "show_ospf3_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf3.py#L302"}}, "show ospf3 neighbor detail": {"junos": {"class": "ShowOspf3NeighborDetail", "doc": " Parser for:\n            - show ospf3 neighbor detail\n    ", "module_name": "show_ospf3", "package": "genie.libs.parser", "schema": "{\n'ospf3-neighbor-information': {\n  'ospf3-neighbor': Use  (function) <function ShowOspf3NeighborExtensiveSchema.validate_ospf3_neighbor_extensive_list at 0x10941d730>,\n  },\n}", "uid": "show_ospf3_neighbor_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf3.py#L354"}}, "show ospf3 neighbor extensive": {"junos": {"class": "ShowOspf3NeighborExtensive", "doc": " Parser for:\n            * show ospf3 neighbor extensive\n    ", "module_name": "show_ospf3", "package": "genie.libs.parser", "schema": "{\n'ospf3-neighbor-information': {\n  'ospf3-neighbor': Use  (function) <function ShowOspf3NeighborExtensiveSchema.validate_ospf3_neighbor_extensive_list at 0x10941d730>,\n  },\n}", "uid": "show_ospf3_neighbor_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf3.py#L168"}}, "show ospf3 overview": {"junos": {"class": "ShowOspf3Overview", "doc": " Parser for:\n            * show ospf3 overview\n    ", "module_name": "show_ospf3", "package": "genie.libs.parser", "schema": "{\n'ospf3-overview-information': {\n  'ospf-overview': {\n    'instance-name': <class 'str'>,\n    'ospf-area-overview': {\n      'ospf-abr-count': <class 'str'>,\n      'ospf-area': <class 'str'>,\n      'ospf-asbr-count': <class 'str'>,\n      'ospf-nbr-overview': {\n        'ospf-nbr-up-count': <class 'str'>,\n        },\n      'ospf-stub-type': <class 'str'>,\n      },\n    'ospf-lsa-refresh-time': <class 'str'>,\n    'ospf-route-table-index': <class 'str'>,\n    'ospf-router-id': <class 'str'>,\n    'ospf-tilfa-overview': {\n      'ospf-tilfa-enabled': <class 'str'>,\n      },\n    'ospf-topology-overview': {\n      'ospf-backup-spf-status': <class 'str'>,\n      'ospf-full-spf-count': <class 'str'>,\n      'ospf-prefix-export-count': <class 'str'>,\n      'ospf-spf-delay': <class 'str'>,\n      'ospf-spf-holddown': <class 'str'>,\n      'ospf-spf-rapid-runs': <class 'str'>,\n      'ospf-topology-id': <class 'str'>,\n      'ospf-topology-name': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ospf3_overview", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf3.py#L1012"}}, "show ospf3 overview extensive": {"junos": {"class": "ShowOspf3OverviewExtensive", "doc": " Parser for:\n            - show ospf3 overview extensive\n    ", "module_name": "show_ospf3", "package": "genie.libs.parser", "schema": "{\n'ospf3-overview-information': {\n  'ospf-overview': {\n    'instance-name': <class 'str'>,\n    'ospf-area-overview': {\n      'ospf-abr-count': <class 'str'>,\n      'ospf-area': <class 'str'>,\n      'ospf-asbr-count': <class 'str'>,\n      'ospf-nbr-overview': {\n        'ospf-nbr-up-count': <class 'str'>,\n        },\n      'ospf-stub-type': <class 'str'>,\n      },\n    'ospf-lsa-refresh-time': <class 'str'>,\n    'ospf-route-table-index': <class 'str'>,\n    'ospf-router-id': <class 'str'>,\n    'ospf-tilfa-overview': {\n      'ospf-tilfa-enabled': <class 'str'>,\n      },\n    'ospf-topology-overview': {\n      'ospf-backup-spf-status': <class 'str'>,\n      'ospf-full-spf-count': <class 'str'>,\n      'ospf-prefix-export-count': <class 'str'>,\n      'ospf-spf-delay': <class 'str'>,\n      'ospf-spf-holddown': <class 'str'>,\n      'ospf-spf-rapid-runs': <class 'str'>,\n      'ospf-topology-id': <class 'str'>,\n      'ospf-topology-name': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ospf3_overview_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ospf3.py#L1183"}}, "show pagp counters": {"ios": {"class": "ShowPagpCounters", "doc": "Parser for :\n      show pagp counters", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'information_in_pkts': <class 'int'>,\n          'information_out_pkts': <class 'int'>,\n          'pagp_errors': <class 'int'>,\n          'flush_in_pkts': <class 'int'>,\n          'flush_out_pkts': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L82"}, "iosxe": {"class": "ShowPagpCounters", "doc": "Parser for :\n      show pagp counters", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'information_in_pkts': <class 'int'>,\n          'information_out_pkts': <class 'int'>,\n          'pagp_errors': <class 'int'>,\n          'flush_in_pkts': <class 'int'>,\n          'flush_out_pkts': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L437"}}, "show pagp internal": {"ios": {"class": "ShowPagpInternal", "doc": "Parser for :\n      show pagp internal\n      show pagp <channel_group> internal", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'group_ifindex': <class 'int'>,\n        'partner_count': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        Optional  (str) timers: <class 'str'>,\n        'pagp_port_priority': <class 'int'>,\n        'flags': <class 'str'>,\n        'state': <class 'str'>,\n        'learn_method': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L100"}, "iosxe": {"class": "ShowPagpInternal", "doc": "Parser for :\n      show pagp internal\n      show pagp <channel_group> internal", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'group_ifindex': <class 'int'>,\n        'partner_count': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        Optional  (str) timers: <class 'str'>,\n        'pagp_port_priority': <class 'int'>,\n        'flags': <class 'str'>,\n        'state': <class 'str'>,\n        'learn_method': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L620"}}, "show pagp neighbor": {"ios": {"class": "ShowPagpNeighbor", "doc": "Parser for :\n      show pagp neighbor", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        Optional  (str) activity: <class 'str'>,\n        'partner_name': <class 'str'>,\n        'partner_id': <class 'str'>,\n        'partner_port': <class 'str'>,\n        'age': <class 'int'>,\n        'flags': <class 'str'>,\n        'group_cap': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L91"}, "iosxe": {"class": "ShowPagpNeighbor", "doc": "Parser for :\n      show pagp neighbor", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        Optional  (str) activity: <class 'str'>,\n        'partner_name': <class 'str'>,\n        'partner_id': <class 'str'>,\n        'partner_port': <class 'str'>,\n        'age': <class 'int'>,\n        'flags': <class 'str'>,\n        'group_cap': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L525"}}, "show pagp {channel_group} counters": {"ios": {"class": "ShowPagpCounters", "doc": "Parser for :\n      show pagp counters", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'information_in_pkts': <class 'int'>,\n          'information_out_pkts': <class 'int'>,\n          'pagp_errors': <class 'int'>,\n          'flush_in_pkts': <class 'int'>,\n          'flush_out_pkts': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_channel_group_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L82"}, "iosxe": {"class": "ShowPagpCounters", "doc": "Parser for :\n      show pagp counters", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'counters': {\n          'information_in_pkts': <class 'int'>,\n          'information_out_pkts': <class 'int'>,\n          'pagp_errors': <class 'int'>,\n          'flush_in_pkts': <class 'int'>,\n          'flush_out_pkts': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_channel_group_counters", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L437"}}, "show pagp {channel_group} internal": {"ios": {"class": "ShowPagpInternal", "doc": "Parser for :\n      show pagp internal\n      show pagp <channel_group> internal", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'group_ifindex': <class 'int'>,\n        'partner_count': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        Optional  (str) timers: <class 'str'>,\n        'pagp_port_priority': <class 'int'>,\n        'flags': <class 'str'>,\n        'state': <class 'str'>,\n        'learn_method': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_channel_group_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L100"}, "iosxe": {"class": "ShowPagpInternal", "doc": "Parser for :\n      show pagp internal\n      show pagp <channel_group> internal", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'group_ifindex': <class 'int'>,\n        'partner_count': <class 'int'>,\n        'hello_interval': <class 'int'>,\n        Optional  (str) timers: <class 'str'>,\n        'pagp_port_priority': <class 'int'>,\n        'flags': <class 'str'>,\n        'state': <class 'str'>,\n        'learn_method': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_channel_group_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L620"}}, "show pagp {channel_group} neighbor": {"ios": {"class": "ShowPagpNeighbor", "doc": "Parser for :\n      show pagp neighbor", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        Optional  (str) activity: <class 'str'>,\n        'partner_name': <class 'str'>,\n        'partner_id': <class 'str'>,\n        'partner_port': <class 'str'>,\n        'age': <class 'int'>,\n        'flags': <class 'str'>,\n        'group_cap': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_channel_group_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_lag.py#L91"}, "iosxe": {"class": "ShowPagpNeighbor", "doc": "Parser for :\n      show pagp neighbor", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        Optional  (str) activity: <class 'str'>,\n        'partner_name': <class 'str'>,\n        'partner_id': <class 'str'>,\n        'partner_port': <class 'str'>,\n        'age': <class 'int'>,\n        'flags': <class 'str'>,\n        'group_cap': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_pagp_channel_group_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_lag.py#L525"}}, "show pce ipv4 peer": {"iosxr": {"class": "ShowPceIPV4Peer", "doc": " Parser for:\n        * show pce ipv4 peer\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'pce_peer_database': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'capabilities': {\n      Optional  (str) stateful: <class 'bool'>,\n      Optional  (str) segment-routing: <class 'bool'>,\n      Optional  (str) update: <class 'bool'>,\n      },\n    },\n  },\n}", "uid": "show_pce_ipv4_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L218"}}, "show pce ipv4 peer detail": {"iosxr": {"class": "ShowPceIPV4PeerDetail", "doc": " Parser for:\n        * show pce ipv4 peer detail\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'pce_peer_database': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'capabilities': {\n      'stateful': <class 'bool'>,\n      'segment-routing': <class 'bool'>,\n      'update': <class 'bool'>,\n      },\n    'pcep': {\n      'uptime': <class 'str'>,\n      'session_id_local': <class 'int'>,\n      'session_id_remote': <class 'int'>,\n      },\n    'ka': {\n      'sending_intervals': <class 'int'>,\n      'minimum_acceptable_inteval': <class 'int'>,\n      },\n    'peer_timeout': <class 'int'>,\n    'statistics': {\n      'rx': {\n        'keepalive_messages': <class 'int'>,\n        'request_messages': <class 'int'>,\n        'reply_messages': <class 'int'>,\n        'error_messages': <class 'int'>,\n        'open_messages': <class 'int'>,\n        'report_messages': <class 'int'>,\n        'update_messages': <class 'int'>,\n        'initiate_messages': <class 'int'>,\n        },\n      'tx': {\n        'keepalive_messages': <class 'int'>,\n        'request_messages': <class 'int'>,\n        'reply_messages': <class 'int'>,\n        'error_messages': <class 'int'>,\n        'open_messages': <class 'int'>,\n        'report_messages': <class 'int'>,\n        'update_messages': <class 'int'>,\n        'initiate_messages': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_pce_ipv4_peer_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L321"}}, "show pce ipv4 prefix": {"iosxr": {"class": "ShowPceIPV4PeerPrefix", "doc": " Parser for:\n        * show pce ipv4 prefix\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'nodes': {\n  Any  (str) *: {\n    'te_router_id': <class 'str'>,\n    'host_name': <class 'str'>,\n    'isis_system_id': <class 'list'>,\n    Optional  (str) asn: <class 'list'>,\n    Optional  (str) domain_id: <class 'list'>,\n    'advertised_prefixes': <class 'list'>,\n    },\n  },\n}", "uid": "show_pce_ipv4_prefix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L516"}}, "show pce ipv4 topology summary": {"iosxr": {"class": "ShowPceIpv4TopologySummary", "doc": " parser for:\n        * show pce ipv4 topology summary\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'pce_topology_database_summary': {\n  'topology_nodes': <class 'int'>,\n  'prefixes': <class 'int'>,\n  'prefix_sids': {\n    'total': <class 'int'>,\n    Optional  (str) regular: <class 'int'>,\n    Optional  (str) strict: <class 'int'>,\n    },\n  'links': {\n    'total': <class 'int'>,\n    Optional  (str) epe: <class 'int'>,\n    },\n  'adjancency_sids': {\n    'total': <class 'int'>,\n    Optional  (str) unprotected: <class 'int'>,\n    Optional  (str) protected: <class 'int'>,\n    Optional  (str) epe: <class 'int'>,\n    },\n  Optional  (str) private_information: {\n    'lookup_nodes': <class 'int'>,\n    'consistent': <class 'str'>,\n    'update_stats': {\n      'noded': {\n        'added': <class 'int'>,\n        'deleted': <class 'int'>,\n        },\n      'links': {\n        'added': <class 'int'>,\n        'deleted': <class 'int'>,\n        },\n      'prefix': {\n        'added': <class 'int'>,\n        'deleted': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_pce_ipv4_topology_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L628"}}, "show pce lsp": {"iosxr": {"class": "ShowPceLsp", "doc": " Parser for:\n            show pce lsp\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'pcc': {\n  Any  (str) *: {\n    'tunnel_name': {\n      Any  (str) *: {\n        'lsps': {\n          Any  (str) *: {\n            'source': <class 'str'>,\n            'destination': <class 'str'>,\n            'tunnel_id': <class 'int'>,\n            'lsp_id': <class 'int'>,\n            'admin_state': <class 'str'>,\n            'operation_state': <class 'str'>,\n            'setup_type': <class 'str'>,\n            'binding_sid': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_pce_lsp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L849"}}, "show pce lsp detail": {"iosxr": {"class": "ShowPceLspDetail", "doc": " Parser for:\n       * show pce lsp detail\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'pcc': {\n  Any  (str) *: {\n    'tunnel_name': <class 'str'>,\n    'lsps': {\n      Any  (str) *: {\n        'source': <class 'str'>,\n        'destination': <class 'str'>,\n        'tunnel_id': <class 'int'>,\n        'lsp_id': <class 'int'>,\n        'admin_state': <class 'str'>,\n        'operation_state': <class 'str'>,\n        'setup_type': <class 'str'>,\n        'binding_sid': <class 'int'>,\n        'pcep_information': {\n          'plsp_id': <class 'int'>,\n          'flags': {\n            'd': <class 'int'>,\n            's': <class 'int'>,\n            'r': <class 'int'>,\n            'a': <class 'int'>,\n            'o': <class 'int'>,\n            },\n          },\n        'paths': {\n          Any  (str) *: {\n            Optional  (str) metric_type: <class 'str'>,\n            Optional  (str) accumulated_metric: <class 'int'>,\n            Optional  (str) none: <class 'str'>,\n            Optional  (str) sids: {\n              Any  (str) *: {\n                'type': <class 'str'>,\n                'label': <class 'int'>,\n                'local_address': <class 'str'>,\n                'remote_address': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      'event_history': {\n        Any  (str) *: {\n          Any  (str) *: {\n            'symbolic_name': <class 'str'>,\n            Optional  (str) lsp-id: <class 'int'>,\n            Optional  (str) plsp-id: <class 'int'>,\n            Optional  (str) source: <class 'str'>,\n            Optional  (str) destination: <class 'str'>,\n            Optional  (str) flags: {\n              'd': <class 'int'>,\n              'r': <class 'int'>,\n              'a': <class 'int'>,\n              'o': <class 'int'>,\n              'sig_bw': <class 'int'>,\n              'act_bw': <class 'int'>,\n              },\n            Optional  (str) peer: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_pce_lsp_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L1001"}}, "show pfe statistics traffic": {"junos": {"class": "ShowPfeStatisticsTraffic", "doc": " Parser for:\n            * show pfe statistics traffic\n    ", "module_name": "show_pfe", "package": "genie.libs.parser", "schema": "{\n'pfe-statistics': {\n  'pfe-chip-statistics': {\n    'input-checksum': <class 'str'>,\n    'output-mtu': <class 'str'>,\n    },\n  'pfe-hardware-discard-statistics': {\n    'bad-route-discard': <class 'str'>,\n    'bits-to-test-discard': <class 'str'>,\n    'data-error-discard': <class 'str'>,\n    'fabric-discard': <class 'str'>,\n    'info-cell-discard': <class 'str'>,\n    'invalid-iif-discard': <class 'str'>,\n    'nexthop-discard': <class 'str'>,\n    'stack-overflow-discard': <class 'str'>,\n    'stack-underflow-discard': <class 'str'>,\n    'tcp-header-error-discard': <class 'str'>,\n    'timeout-discard': <class 'str'>,\n    'truncated-key-discard': <class 'str'>,\n    },\n  'pfe-local-protocol-statistics': {\n    'arp-count': <class 'str'>,\n    'atm-oam-count': <class 'str'>,\n    'bfd-count': <class 'str'>,\n    'ether-oam-count': <class 'str'>,\n    'fr-lmi-count': <class 'str'>,\n    'hdlc-keepalive-count': <class 'str'>,\n    'isis-iih-count': <class 'str'>,\n    'lacp-count': <class 'str'>,\n    'ldp-hello-count': <class 'str'>,\n    'ospf-hello-count': <class 'str'>,\n    'ospf3-hello-count': <class 'str'>,\n    'ppp-lcp-ncp-count': <class 'str'>,\n    'rsvp-hello-count': <class 'str'>,\n    'unknown-count': <class 'str'>,\n    },\n  'pfe-local-traffic-statistics': {\n    'hardware-input-drops': <class 'str'>,\n    'pfe-input-packets': <class 'str'>,\n    'pfe-output-packets': <class 'str'>,\n    'software-input-control-drops': <class 'str'>,\n    'software-input-high-drops': <class 'str'>,\n    'software-input-low-drops': <class 'str'>,\n    'software-input-medium-drops': <class 'str'>,\n    'software-output-low-drops': <class 'str'>,\n    },\n  'pfe-traffic-statistics': {\n    'input-pps': <class 'str'>,\n    'output-pps': <class 'str'>,\n    'pfe-fabric-input': <class 'str'>,\n    'pfe-fabric-input-pps': <class 'str'>,\n    'pfe-fabric-output': <class 'str'>,\n    'pfe-fabric-output-pps': <class 'str'>,\n    'pfe-input-packets': <class 'str'>,\n    'pfe-output-packets': <class 'str'>,\n    },\n  },\n}", "uid": "show_pfe_statistics_traffic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_pfe.py#L79"}}, "show pim vrf {vrf} {af} interface detail": {"iosxr": {"class": "ShowPimVrfInterfaceDetail", "doc": "\n    Parser for show pim vrf <vrf> <address_family> interface detail\n    For checking any output with the parser ,below mandatory key(s) have to be in cli command.\n\n    - vrf\n    - af\n    ", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'oper_status': <class 'str'>,\n            'nbr_count': <class 'int'>,\n            'hello_interval': <class 'int'>,\n            'dr_priority': <class 'int'>,\n            'primary_address': <class 'str'>,\n            'address': <class 'list'>,\n            'flags': <class 'str'>,\n            'bfd': {\n              'enable': <class 'bool'>,\n              'interval': <class 'float'>,\n              'detection_multiplier': <class 'int'>,\n              },\n            'dr': <class 'str'>,\n            'propagation_delay': <class 'int'>,\n            'override_interval': <class 'int'>,\n            'hello_expiration': <class 'str'>,\n            'neighbor_filter': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_pim_vrf_vrf_af_interface_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py#L159"}}, "show pim vrf {vrf} {af} mstatic": {"iosxr": {"class": "ShowPimVrfMstatic", "doc": "Parser for show pim vrf <vrf> <address_family> mstatic\n    For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n    - vrf\n    - af\n    ", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'mroute': {\n          Any  (str) *: {\n            'path': {\n              Any  (str) *: {\n                'neighbor_address': <class 'str'>,\n                'interface_name': <class 'str'>,\n                'admin_distance': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_pim_vrf_vrf_af_mstatic", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py#L46"}}, "show pim vrf {vrf} {af} rpf summary": {"iosxr": {"class": "ShowPimVrfRpfSummary", "doc": "\n    Parser for show pim vrf <vrf> <address_family> rpf summary\n    For checking any output with the parser ,below mandatory keys have to be in cli command.\n\n    - vrf\n    - af\n    ", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) isis_mcast_topology: <class 'bool'>,\n        Optional  (str) mo_frr_flow_based: <class 'bool'>,\n        Optional  (str) mo_frr_rib: <class 'bool'>,\n        Optional  (str) rump_mu_rib: <class 'bool'>,\n        Optional  (str) pim_rpfs_registered: <class 'str'>,\n        Optional  (str) default_rpf_table: <class 'str'>,\n        Optional  (str) rib_convergence_timeout: <class 'str'>,\n        Optional  (str) rib_convergence_time_left: <class 'str'>,\n        Optional  (str) multipath: <class 'bool'>,\n        Optional  (str) table: {\n          Any  (str) *: {\n            'pim_rpf_registrations': <class 'int'>,\n            'rib_table_converged': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_pim_vrf_vrf_af_rpf_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_pim.py#L367"}}, "show placement program all": {"iosxr": {"class": "ShowPlacementProgramAll", "doc": "Parser for show placement program all", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'program': {\n  Any  (str) *: {\n    'instance': {\n      Any  (str) *: {\n        'group': <class 'str'>,\n        'jid': <class 'str'>,\n        'active': <class 'str'>,\n        'active_state': <class 'str'>,\n        'standby': <class 'str'>,\n        'standby_state': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_placement_program_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L318"}}, "show platform": {"ios": {"class": "ShowPlatform", "doc": "Parser for Parser for show platform", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) main: {\n  Optional  (str) switch_mac_address: <class 'str'>,\n  Optional  (str) mac_persistency_wait_time: <class 'str'>,\n  Optional  (str) chassis: <class 'str'>,\n  Optional  (str) swstack: <class 'bool'>,\n  },\n'slot': {\n  Any  (str) *: {\n    Optional  (str) rp: {\n      Any  (str) *: {\n        Optional  (str) sn: <class 'str'>,\n        'state': <class 'str'>,\n        Optional  (str) num_of_ports: <class 'str'>,\n        Optional  (str) mac_address: <class 'str'>,\n        Optional  (str) hw_ver: <class 'str'>,\n        Optional  (str) sw_ver: <class 'str'>,\n        Optional  (str) swstack_role: <class 'str'>,\n        Optional  (str) swstack_priority: <class 'str'>,\n        Optional  (str) ports: <class 'str'>,\n        Optional  (str) role: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        Optional  (str) priority: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) cpld_ver: <class 'str'>,\n        },\n      },\n    Optional  (str) lc: {\n      Any  (str) *: {\n        Optional  (str) cpld_ver: <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) insert_time: <class 'str'>,\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) state: <class 'str'>,\n              Optional  (str) subslot: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) other: {\n      Any  (str) *: {\n        Optional  (str) cpld_ver: <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) insert_time: <class 'str'>,\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) state: <class 'str'>,\n              Optional  (str) subslot: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L494"}, "iosxe": {"c9500": {"class": "ShowPlatform", "doc": " Parser for:\n        * 'show platform'\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'chassis': <class 'str'>,\n'slot': {\n  Any  (str) *: {\n    Optional  (str) cpld_ver: <class 'str'>,\n    Optional  (str) fw_ver: <class 'str'>,\n    'insert_time': <class 'str'>,\n    'name': <class 'str'>,\n    'slot': <class 'str'>,\n    'state': <class 'str'>,\n    Optional  (str) subslot: {\n      Any  (str) *: {\n        'insert_time': <class 'str'>,\n        'name': <class 'str'>,\n        'state': <class 'str'>,\n        'subslot': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_platform.py#L817"}, "class": "ShowPlatform", "doc": "Parser for show platform\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) main: {\n  Optional  (str) switch_mac_address: <class 'str'>,\n  Optional  (str) mac_persistency_wait_time: <class 'str'>,\n  Optional  (str) chassis: <class 'str'>,\n  Optional  (str) swstack: <class 'bool'>,\n  },\n'slot': {\n  Any  (str) *: {\n    Optional  (str) rp: {\n      Any  (str) *: {\n        Optional  (str) sn: <class 'str'>,\n        'state': <class 'str'>,\n        Optional  (str) num_of_ports: <class 'str'>,\n        Optional  (str) mac_address: <class 'str'>,\n        Optional  (str) hw_ver: <class 'str'>,\n        Optional  (str) sw_ver: <class 'str'>,\n        Optional  (str) swstack_role: <class 'str'>,\n        Optional  (str) swstack_priority: <class 'str'>,\n        Optional  (str) ports: <class 'str'>,\n        Optional  (str) role: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        Optional  (str) priority: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) cpld_ver: <class 'str'>,\n        },\n      },\n    Optional  (str) lc: {\n      Any  (str) *: {\n        Optional  (str) cpld_ver: <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) insert_time: <class 'str'>,\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) state: <class 'str'>,\n              Optional  (str) subslot: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) other: {\n      Any  (str) *: {\n        Optional  (str) cpld_ver: <class 'str'>,\n        Optional  (str) fw_ver: <class 'str'>,\n        Optional  (str) insert_time: <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) slot: <class 'str'>,\n        Optional  (str) state: <class 'str'>,\n        Optional  (str) subslot: {\n          Any  (str) *: {\n            Any  (str) *: {\n              Optional  (str) insert_time: <class 'str'>,\n              Optional  (str) name: <class 'str'>,\n              Optional  (str) state: <class 'str'>,\n              Optional  (str) subslot: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2039"}, "iosxr": {"class": "ShowPlatform", "doc": "Parser for show platform", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'slot': {\n  Any  (str) *: {\n    Any  (str) *: {\n      'name': <class 'str'>,\n      'state': <class 'str'>,\n      'config_state': <class 'str'>,\n      'full_slot': <class 'str'>,\n      Optional  (str) redundancy_state: <class 'str'>,\n      Optional  (str) plim: <class 'str'>,\n      Optional  (str) subslot: {\n        Optional  (Any) Any  (str) *: {\n          Optional  (str) name: <class 'str'>,\n          Optional  (str) state: <class 'str'>,\n          Optional  (str) config_state: <class 'str'>,\n          Optional  (str) redundancy_state: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L330"}}, "show platform hardware port {port} plim statistics": {"ios": {"class": "ShowPlatformHardwarePlim", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) port: {\n  Any  (str) *: {\n    'received': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      },\n    'transmitted': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        'received': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            },\n          },\n        'transmitted': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_port_port_plim_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L529"}, "iosxe": {"class": "ShowPlatformHardwarePlim", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) port: {\n  Any  (str) *: {\n    'received': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      },\n    'transmitted': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        'received': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            },\n          },\n        'transmitted': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_port_port_plim_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3935"}}, "show platform hardware qfp active infrastructure bqs queue output default all": {"ios": {"class": "ShowPlatformHardware", "doc": "Parser for show platform hardware qfp active infrastructure bqs queue output default all", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'if_h': <class 'int'>,\n  Optional  (str) index: {\n    Any  (str) *: {\n      'queue_id': <class 'str'>,\n      'name': <class 'str'>,\n      'software_control_info': {\n        'cache_queue_id': <class 'str'>,\n        'wred': <class 'str'>,\n        Optional  (str) qlimit_bytes: <class 'int'>,\n        Optional  (str) qlimit_pkts: <class 'int'>,\n        'parent_sid': <class 'str'>,\n        'debug_name': <class 'str'>,\n        'sw_flags': <class 'str'>,\n        'sw_state': <class 'str'>,\n        'port_uidb': <class 'int'>,\n        'orig_min': <class 'int'>,\n        'min': <class 'int'>,\n        'min_qos': <class 'int'>,\n        'min_dflt': <class 'int'>,\n        'orig_max': <class 'int'>,\n        'max': <class 'int'>,\n        'max_qos': <class 'int'>,\n        'max_dflt': <class 'int'>,\n        'share': <class 'int'>,\n        'plevel': <class 'int'>,\n        'priority': <class 'int'>,\n        Optional  (str) defer_obj_refcnt: <class 'int'>,\n        Optional  (str) cp_ppe_addr: <class 'str'>,\n        },\n      'statistics': {\n        'tail_drops_bytes': <class 'int'>,\n        'tail_drops_packets': <class 'int'>,\n        'total_enqs_bytes': <class 'int'>,\n        'total_enqs_packets': <class 'int'>,\n        Optional  (str) queue_depth_bytes: <class 'int'>,\n        Optional  (str) queue_depth_pkts: <class 'int'>,\n        Optional  (str) lic_throughput_oversub_drops_bytes: <class 'int'>,\n        Optional  (str) lic_throughput_oversub_drops_packets: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_active_infrastructure_bqs_queue_output_default_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L524"}, "iosxe": {"class": "ShowPlatformHardware", "doc": "Parser for show platform hardware qfp active infrastructure bqs queue output default all\n        show platform hardware qfp active infrastructure bqs queue output default interface {interface}", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'if_h': <class 'int'>,\n  Optional  (str) index: {\n    Any  (str) *: {\n      'queue_id': <class 'str'>,\n      'name': <class 'str'>,\n      'software_control_info': {\n        'cache_queue_id': <class 'str'>,\n        'wred': <class 'str'>,\n        Optional  (str) qlimit_bytes: <class 'int'>,\n        Optional  (str) qlimit_pkts: <class 'int'>,\n        'parent_sid': <class 'str'>,\n        'debug_name': <class 'str'>,\n        'sw_flags': <class 'str'>,\n        'sw_state': <class 'str'>,\n        'port_uidb': <class 'int'>,\n        'orig_min': <class 'int'>,\n        'min': <class 'int'>,\n        'min_qos': <class 'int'>,\n        'min_dflt': <class 'int'>,\n        'orig_max': <class 'int'>,\n        'max': <class 'int'>,\n        'max_qos': <class 'int'>,\n        'max_dflt': <class 'int'>,\n        'share': <class 'int'>,\n        'plevel': <class 'int'>,\n        'priority': <class 'int'>,\n        Optional  (str) defer_obj_refcnt: <class 'int'>,\n        Optional  (str) cp_ppe_addr: <class 'str'>,\n        },\n      'statistics': {\n        'tail_drops_bytes': <class 'int'>,\n        'tail_drops_packets': <class 'int'>,\n        'total_enqs_bytes': <class 'int'>,\n        'total_enqs_packets': <class 'int'>,\n        Optional  (str) queue_depth_bytes: <class 'int'>,\n        Optional  (str) queue_depth_pkts: <class 'int'>,\n        Optional  (str) lic_throughput_oversub_drops_bytes: <class 'int'>,\n        Optional  (str) lic_throughput_oversub_drops_packets: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_active_infrastructure_bqs_queue_output_default_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3603"}}, "show platform hardware qfp active infrastructure bqs queue output default interface {interface}": {"ios": {"class": "ShowPlatformHardware", "doc": "Parser for show platform hardware qfp active infrastructure bqs queue output default all", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'if_h': <class 'int'>,\n  Optional  (str) index: {\n    Any  (str) *: {\n      'queue_id': <class 'str'>,\n      'name': <class 'str'>,\n      'software_control_info': {\n        'cache_queue_id': <class 'str'>,\n        'wred': <class 'str'>,\n        Optional  (str) qlimit_bytes: <class 'int'>,\n        Optional  (str) qlimit_pkts: <class 'int'>,\n        'parent_sid': <class 'str'>,\n        'debug_name': <class 'str'>,\n        'sw_flags': <class 'str'>,\n        'sw_state': <class 'str'>,\n        'port_uidb': <class 'int'>,\n        'orig_min': <class 'int'>,\n        'min': <class 'int'>,\n        'min_qos': <class 'int'>,\n        'min_dflt': <class 'int'>,\n        'orig_max': <class 'int'>,\n        'max': <class 'int'>,\n        'max_qos': <class 'int'>,\n        'max_dflt': <class 'int'>,\n        'share': <class 'int'>,\n        'plevel': <class 'int'>,\n        'priority': <class 'int'>,\n        Optional  (str) defer_obj_refcnt: <class 'int'>,\n        Optional  (str) cp_ppe_addr: <class 'str'>,\n        },\n      'statistics': {\n        'tail_drops_bytes': <class 'int'>,\n        'tail_drops_packets': <class 'int'>,\n        'total_enqs_bytes': <class 'int'>,\n        'total_enqs_packets': <class 'int'>,\n        Optional  (str) queue_depth_bytes: <class 'int'>,\n        Optional  (str) queue_depth_pkts: <class 'int'>,\n        Optional  (str) lic_throughput_oversub_drops_bytes: <class 'int'>,\n        Optional  (str) lic_throughput_oversub_drops_packets: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_active_infrastructure_bqs_queue_output_default_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L524"}, "iosxe": {"class": "ShowPlatformHardware", "doc": "Parser for show platform hardware qfp active infrastructure bqs queue output default all\n        show platform hardware qfp active infrastructure bqs queue output default interface {interface}", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'if_h': <class 'int'>,\n  Optional  (str) index: {\n    Any  (str) *: {\n      'queue_id': <class 'str'>,\n      'name': <class 'str'>,\n      'software_control_info': {\n        'cache_queue_id': <class 'str'>,\n        'wred': <class 'str'>,\n        Optional  (str) qlimit_bytes: <class 'int'>,\n        Optional  (str) qlimit_pkts: <class 'int'>,\n        'parent_sid': <class 'str'>,\n        'debug_name': <class 'str'>,\n        'sw_flags': <class 'str'>,\n        'sw_state': <class 'str'>,\n        'port_uidb': <class 'int'>,\n        'orig_min': <class 'int'>,\n        'min': <class 'int'>,\n        'min_qos': <class 'int'>,\n        'min_dflt': <class 'int'>,\n        'orig_max': <class 'int'>,\n        'max': <class 'int'>,\n        'max_qos': <class 'int'>,\n        'max_dflt': <class 'int'>,\n        'share': <class 'int'>,\n        'plevel': <class 'int'>,\n        'priority': <class 'int'>,\n        Optional  (str) defer_obj_refcnt: <class 'int'>,\n        Optional  (str) cp_ppe_addr: <class 'str'>,\n        },\n      'statistics': {\n        'tail_drops_bytes': <class 'int'>,\n        'tail_drops_packets': <class 'int'>,\n        'total_enqs_bytes': <class 'int'>,\n        'total_enqs_packets': <class 'int'>,\n        Optional  (str) queue_depth_bytes: <class 'int'>,\n        Optional  (str) queue_depth_pkts: <class 'int'>,\n        Optional  (str) lic_throughput_oversub_drops_bytes: <class 'int'>,\n        Optional  (str) lic_throughput_oversub_drops_packets: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_active_infrastructure_bqs_queue_output_default_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3603"}}, "show platform hardware qfp {status} bqs {slot} ipm mapping": {"ios": {"class": "ShowPlatformHardwareQfpBqsIpmMapping", "doc": "Parser for show platform hardware qfp active bqs <x> ipm mapping\n                  show platform hardware qfp standby bqs <x> ipm mapping", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'channel': {\n  Any  (str) *: {\n    Optional  (str) interface: <class 'str'>,\n    'name': <class 'str'>,\n    Optional  (str) logical_channel: <class 'int'>,\n    Optional  (str) drain_mode: <class 'bool'>,\n    Optional  (str) port: <class 'int'>,\n    Optional  (str) cfifo: <class 'int'>,\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_status_bqs_slot_ipm_mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L543"}, "iosxe": {"class": "ShowPlatformHardwareQfpBqsIpmMapping", "doc": "Parser for show platform hardware qfp active bqs <x> ipm mapping\n                  show platform hardware qfp standby bqs <x> ipm mapping", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'channel': {\n  Any  (str) *: {\n    Optional  (str) interface: <class 'str'>,\n    'name': <class 'str'>,\n    Optional  (str) logical_channel: <class 'int'>,\n    Optional  (str) drain_mode: <class 'bool'>,\n    Optional  (str) port: <class 'int'>,\n    Optional  (str) cfifo: <class 'int'>,\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_status_bqs_slot_ipm_mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L4351"}}, "show platform hardware qfp {status} bqs {slot} opm mapping": {"ios": {"class": "ShowPlatformHardwareQfpBqsOpmMapping", "doc": "Parser for show platform hardware qfp active bqs <x> opm mapping\n                  show platform hardware qfp standby bqs <x> opm mapping", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'channel': {\n  Any  (str) *: {\n    Optional  (str) interface: <class 'str'>,\n    'name': <class 'str'>,\n    Optional  (str) logical_channel: <class 'int'>,\n    Optional  (str) drain_mode: <class 'bool'>,\n    Optional  (str) port: <class 'int'>,\n    Optional  (str) cfifo: <class 'int'>,\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_status_bqs_slot_opm_mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L537"}, "iosxe": {"class": "ShowPlatformHardwareQfpBqsOpmMapping", "doc": "Parser for show platform hardware qfp active bqs <x> opm mapping\n                  show platform hardware qfp standby bqs <x> opm mapping", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'channel': {\n  Any  (str) *: {\n    Optional  (str) interface: <class 'str'>,\n    'name': <class 'str'>,\n    Optional  (str) logical_channel: <class 'int'>,\n    Optional  (str) drain_mode: <class 'bool'>,\n    Optional  (str) port: <class 'int'>,\n    Optional  (str) cfifo: <class 'int'>,\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_status_bqs_slot_opm_mapping", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L4286"}}, "show platform hardware qfp {status} bqs {slot} {iotype} statistics channel all": {"ios": {"class": "ShowPlatformHardwareQfpBqsStatisticsChannelAll", "doc": "Parser for show platform hardware qfp active bqs <x> ipm statistics channel all\n                  show platform hardware qfp standby bqs <x> ipm statistics channel all\n                  show platform hardware qfp active bqs <x> opm statistics channel all\n                  show platform hardware qfp standby bqs <x> opm statistics channel all", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'channel': {\n  Any  (str) *: {\n    'goodpkts': <class 'str'>,\n    'goodbytes': <class 'str'>,\n    'badpkts': <class 'str'>,\n    'badbytes': <class 'str'>,\n    Optional  (str) comment: <class 'str'>,\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_status_bqs_slot_iotype_statistics_channel_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L559"}, "iosxe": {"class": "ShowPlatformHardwareQfpBqsStatisticsChannelAll", "doc": "Parser for show platform hardware qfp active bqs <x> ipm statistics channel all\n                  show platform hardware qfp standby bqs <x> ipm statistics channel all\n                  show platform hardware qfp active bqs <x> opm statistics channel all\n                  show platform hardware qfp standby bqs <x> opm statistics channel all", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'channel': {\n  Any  (str) *: {\n    'goodpkts': <class 'str'>,\n    'goodbytes': <class 'str'>,\n    'badpkts': <class 'str'>,\n    'badbytes': <class 'str'>,\n    Optional  (str) comment: <class 'str'>,\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_status_bqs_slot_iotype_statistics_channel_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L4930"}}, "show platform hardware qfp {status} interface if-name {interface} statistics": {"ios": {"class": "ShowPlatformHardwareQfpInterfaceIfnameStatistics", "doc": "Parser for show platform hardware qfp active interface if-name <interface> statistics\n                  show platform hardware qfp standby interface if-name <interface> statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'qfp': {\n  'active': {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) platform_handle: <class 'int'>,\n        'receive_stats': {\n          Any  (str) *: {\n            'packets': <class 'int'>,\n            'octets': <class 'int'>,\n            },\n          },\n        'transmit_stats': {\n          Any  (str) *: {\n            'packets': <class 'int'>,\n            'octets': <class 'int'>,\n            },\n          },\n        'ingress_drop_stats': {\n          Optional  (Any) Any  (str) *: {\n            'packets': <class 'int'>,\n            'octets': <class 'int'>,\n            },\n          },\n        'egress_drop_stats': {\n          Optional  (Any) Any  (str) *: {\n            'packets': <class 'int'>,\n            'octets': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_status_interface_if-name_interface_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L567"}, "iosxe": {"class": "ShowPlatformHardwareQfpInterfaceIfnameStatistics", "doc": "Parser for show platform hardware qfp active interface if-name <interface> statistics\n                  show platform hardware qfp standby interface if-name <interface> statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'qfp': {\n  'active': {\n    'interface': {\n      Any  (str) *: {\n        Optional  (str) platform_handle: <class 'int'>,\n        'receive_stats': {\n          Any  (str) *: {\n            'packets': <class 'int'>,\n            'octets': <class 'int'>,\n            },\n          },\n        'transmit_stats': {\n          Any  (str) *: {\n            'packets': <class 'int'>,\n            'octets': <class 'int'>,\n            },\n          },\n        'ingress_drop_stats': {\n          Optional  (Any) Any  (str) *: {\n            'packets': <class 'int'>,\n            'octets': <class 'int'>,\n            },\n          },\n        'egress_drop_stats': {\n          Optional  (Any) Any  (str) *: {\n            'packets': <class 'int'>,\n            'octets': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_status_interface_if-name_interface_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L5170"}}, "show platform hardware qfp {status} statistics drop | exclude _0_": {"ios": {"class": "ShowPlatformHardwareQfpStatisticsDrop", "doc": "Parser for show platform hardware qfp active statistics drop\n                  show platform hardware qfp standby statistics drop", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'global_drop_stats': {\n  Any  (str) *: {\n    'packets': <class 'int'>,\n    'octets': <class 'int'>,\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_status_statistics_drop___exclude__0_", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L573"}, "iosxe": {"class": "ShowPlatformHardwareQfpStatisticsDrop", "doc": "Parser for show platform hardware qfp active statistics drop\n                  show platform hardware qfp standby statistics drop", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'global_drop_stats': {\n  Any  (str) *: {\n    'packets': <class 'int'>,\n    'octets': <class 'int'>,\n    },\n  },\n}", "uid": "show_platform_hardware_qfp_status_statistics_drop___exclude__0_", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L5261"}}, "show platform hardware slot {slot} plim statistics": {"ios": {"class": "ShowPlatformHardwarePlim", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) port: {\n  Any  (str) *: {\n    'received': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      },\n    'transmitted': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        'received': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            },\n          },\n        'transmitted': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_slot_slot_plim_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L529"}, "iosxe": {"class": "ShowPlatformHardwarePlim", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) port: {\n  Any  (str) *: {\n    'received': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      },\n    'transmitted': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        'received': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            },\n          },\n        'transmitted': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_slot_slot_plim_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3935"}}, "show platform hardware slot {slot} plim statistics internal": {"ios": {"class": "ShowPlatformHardwarePlim", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) port: {\n  Any  (str) *: {\n    'received': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      },\n    'transmitted': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        'received': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            },\n          },\n        'transmitted': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_slot_slot_plim_statistics_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L529"}, "iosxe": {"class": "ShowPlatformHardwarePlim", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) port: {\n  Any  (str) *: {\n    'received': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      },\n    'transmitted': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        'received': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            },\n          },\n        'transmitted': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_slot_slot_plim_statistics_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3935"}}, "show platform hardware slot {slot} serdes statistics": {"ios": {"class": "ShowPlatformHardwareSerdes", "doc": "Parser for show platform hardware slot <x> serdes statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'link': {\n  Any  (str) *: {\n    Optional  (str) from: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        },\n      'bytes': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        },\n      Optional  (str) qstat_count: <class 'int'>,\n      Optional  (str) flow_ctrl_count: <class 'int'>,\n      },\n    Optional  (str) to: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        },\n      },\n    Optional  (str) local_tx_in_sync: <class 'bool'>,\n    Optional  (str) local_rx_in_sync: <class 'bool'>,\n    Optional  (str) remote_tx_in_sync: <class 'bool'>,\n    Optional  (str) remote_rx_in_sync: <class 'bool'>,\n    Optional  (str) errors: {\n      'rx_process': <class 'int'>,\n      'rx_schedule': <class 'int'>,\n      'rx_statistics': <class 'int'>,\n      'rx_parity': <class 'int'>,\n      'tx_process': <class 'int'>,\n      'tx_schedule': <class 'int'>,\n      'tx_statistics': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) serdes_exception_counts: {\n  Any  (str) *: {\n    Optional  (str) link: {\n      Any  (str) *: {\n        'msgTypeError': <class 'int'>,\n        'msgEccError': <class 'int'>,\n        'chicoEvent': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_slot_slot_serdes_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L549"}, "iosxe": {"class": "ShowPlatformHardwareSerdes", "doc": "Parser for show platform hardware slot <x> serdes statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'link': {\n  Any  (str) *: {\n    Optional  (str) from: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        },\n      'bytes': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        },\n      Optional  (str) qstat_count: <class 'int'>,\n      Optional  (str) flow_ctrl_count: <class 'int'>,\n      },\n    Optional  (str) to: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        },\n      },\n    Optional  (str) local_tx_in_sync: <class 'bool'>,\n    Optional  (str) local_rx_in_sync: <class 'bool'>,\n    Optional  (str) remote_tx_in_sync: <class 'bool'>,\n    Optional  (str) remote_rx_in_sync: <class 'bool'>,\n    Optional  (str) errors: {\n      'rx_process': <class 'int'>,\n      'rx_schedule': <class 'int'>,\n      'rx_statistics': <class 'int'>,\n      'rx_parity': <class 'int'>,\n      'tx_process': <class 'int'>,\n      'tx_schedule': <class 'int'>,\n      'tx_statistics': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) serdes_exception_counts: {\n  Any  (str) *: {\n    Optional  (str) link: {\n      Any  (str) *: {\n        'msgTypeError': <class 'int'>,\n        'msgEccError': <class 'int'>,\n        'chicoEvent': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_slot_slot_serdes_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L4483"}}, "show platform hardware slot {slot} serdes statistics internal": {"ios": {"class": "ShowPlatformHardwareSerdesInternal", "doc": "Parser for show platform hardware slot <x> serdes statistics internal", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'link': {\n  Any  (str) *: {\n    Optional  (str) from: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        },\n      'bytes': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        },\n      Optional  (str) qstat_count: <class 'int'>,\n      Optional  (str) flow_ctrl_count: <class 'int'>,\n      },\n    Optional  (str) to: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        },\n      },\n    Optional  (str) local_tx_in_sync: <class 'bool'>,\n    Optional  (str) local_rx_in_sync: <class 'bool'>,\n    Optional  (str) remote_tx_in_sync: <class 'bool'>,\n    Optional  (str) remote_rx_in_sync: <class 'bool'>,\n    Optional  (str) errors: {\n      'rx_process': <class 'int'>,\n      'rx_schedule': <class 'int'>,\n      'rx_statistics': <class 'int'>,\n      'rx_parity': <class 'int'>,\n      'tx_process': <class 'int'>,\n      'tx_schedule': <class 'int'>,\n      'tx_statistics': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) serdes_exception_counts: {\n  Any  (str) *: {\n    Optional  (str) link: {\n      Any  (str) *: {\n        'msgTypeError': <class 'int'>,\n        'msgEccError': <class 'int'>,\n        'chicoEvent': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_slot_slot_serdes_statistics_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L554"}, "iosxe": {"class": "ShowPlatformHardwareSerdesInternal", "doc": "Parser for show platform hardware slot <x> serdes statistics internal", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'link': {\n  Any  (str) *: {\n    Optional  (str) from: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        },\n      'bytes': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        Optional  (str) looped: <class 'int'>,\n        Optional  (str) bad: <class 'int'>,\n        },\n      Optional  (str) qstat_count: <class 'int'>,\n      Optional  (str) flow_ctrl_count: <class 'int'>,\n      },\n    Optional  (str) to: {\n      'pkts': {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        },\n      Optional  (str) bytes: {\n        Optional  (str) total: <class 'int'>,\n        Optional  (str) high: <class 'int'>,\n        Optional  (str) low: <class 'int'>,\n        Optional  (str) dropped: <class 'int'>,\n        Optional  (str) errored: <class 'int'>,\n        },\n      },\n    Optional  (str) local_tx_in_sync: <class 'bool'>,\n    Optional  (str) local_rx_in_sync: <class 'bool'>,\n    Optional  (str) remote_tx_in_sync: <class 'bool'>,\n    Optional  (str) remote_rx_in_sync: <class 'bool'>,\n    Optional  (str) errors: {\n      'rx_process': <class 'int'>,\n      'rx_schedule': <class 'int'>,\n      'rx_statistics': <class 'int'>,\n      'rx_parity': <class 'int'>,\n      'tx_process': <class 'int'>,\n      'tx_schedule': <class 'int'>,\n      'tx_statistics': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) serdes_exception_counts: {\n  Any  (str) *: {\n    Optional  (str) link: {\n      Any  (str) *: {\n        'msgTypeError': <class 'int'>,\n        'msgEccError': <class 'int'>,\n        'chicoEvent': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_slot_slot_serdes_statistics_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L4567"}}, "show platform hardware subslot {subslot} plim statistics": {"ios": {"class": "ShowPlatformHardwarePlim", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) port: {\n  Any  (str) *: {\n    'received': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      },\n    'transmitted': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        'received': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            },\n          },\n        'transmitted': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_subslot_subslot_plim_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L529"}, "iosxe": {"class": "ShowPlatformHardwarePlim", "doc": "Parser for show platform hardware port <x/x/x> plim statistics\n                  show platform hardware slot <x> plim statistics\n                  show platform hardware slot <x> plim statistics internal\n                  show platform hardware subslot <x/x> plim statistics", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) port: {\n  Any  (str) *: {\n    'received': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'errored_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        'errored_bytes': <class 'int'>,\n        },\n      },\n    'transmitted': {\n      'low_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      'high_priority': {\n        'pkts': <class 'int'>,\n        'dropped_pkts': <class 'int'>,\n        'bytes': <class 'int'>,\n        'dropped_bytes': <class 'int'>,\n        },\n      },\n    },\n  },\nOptional  (str) slot: {\n  Any  (str) *: {\n    'subslot': {\n      Any  (str) *: {\n        'name': <class 'str'>,\n        'status': <class 'str'>,\n        'received': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'dip4_error': <class 'int'>,\n            'disabled': <class 'int'>,\n            'loss_of_sync': <class 'int'>,\n            'sequence_error': <class 'int'>,\n            'burst_error': <class 'int'>,\n            'eop_abort': <class 'int'>,\n            'packet_gap_error': <class 'int'>,\n            'control_word_error': <class 'int'>,\n            },\n          },\n        'transmitted': {\n          Optional  (str) pkts: <class 'int'>,\n          Optional  (str) ipc_pkts: <class 'int'>,\n          Optional  (str) bytes: <class 'int'>,\n          Optional  (str) ipc_bytes: <class 'int'>,\n          Optional  (str) ipc_err: <class 'int'>,\n          Optional  (str) spi4_interrupt_counters: {\n            'out_of_frame': <class 'int'>,\n            'frame_error': <class 'int'>,\n            'fifo_over_flow': <class 'int'>,\n            'dip2_error': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_hardware_subslot_subslot_plim_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3935"}}, "show platform integrity": {"iosxe": {"class": "ShowPlatformIntegrity", "doc": null, "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'platform': <class 'str'>,\n'boot': {\n  Any  (str) *: {\n    'version': <class 'str'>,\n    'hash': <class 'str'>,\n    },\n  'loader': {\n    'version': <class 'str'>,\n    'hash': <class 'str'>,\n    },\n  },\n'os_version': <class 'str'>,\n'os_hashes': {\n  Any  (str) *: <class 'str'>,\n  },\n}", "uid": "show_platform_integrity", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L5811"}}, "show platform power": {"ios": {"class": "ShowPlatformPower", "doc": "Parser for Parser for show platform power", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'chassis': <class 'str'>,\n'total_load': <class 'int'>,\n'total_capacity': <class 'int'>,\n'load_capacity_percent': <class 'int'>,\n'power_capacity': <class 'int'>,\n'redundant_alc': <class 'int'>,\n'fan_alc': <class 'int'>,\n'fru_alc': <class 'int'>,\n'excess_power': <class 'int'>,\n'excess_capacity_percent': <class 'int'>,\n'redundancy_mode': <class 'str'>,\n'allocation_status': <class 'str'>,\n'slot': {\n  Any  (str) *: {\n    'type': <class 'str'>,\n    'state': <class 'str'>,\n    Optional  (str) allocation: <class 'float'>,\n    Optional  (str) capacity: <class 'int'>,\n    Optional  (str) load: <class 'int'>,\n    },\n  },\n}", "uid": "show_platform_power", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L499"}, "iosxe": {"class": "ShowPlatformPower", "doc": "Parser for show platform power", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'chassis': <class 'str'>,\n'total_load': <class 'int'>,\n'total_capacity': <class 'int'>,\n'load_capacity_percent': <class 'int'>,\n'power_capacity': <class 'int'>,\n'redundant_alc': <class 'int'>,\n'fan_alc': <class 'int'>,\n'fru_alc': <class 'int'>,\n'excess_power': <class 'int'>,\n'excess_capacity_percent': <class 'int'>,\n'redundancy_mode': <class 'str'>,\n'allocation_status': <class 'str'>,\n'slot': {\n  Any  (str) *: {\n    'type': <class 'str'>,\n    'state': <class 'str'>,\n    Optional  (str) allocation: <class 'float'>,\n    Optional  (str) capacity: <class 'int'>,\n    Optional  (str) load: <class 'int'>,\n    },\n  },\n}", "uid": "show_platform_power", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L4772"}}, "show platform software memory {process} switch active {slot} alloc backtrace": {"iosxe": {"class": "ShowPlatformSoftwareMemoryBacktrace", "doc": " Parser for show platform software memory <process> switch active <R0> alloc backtrace ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'backtraces': {\n  Any  (str) *: {\n    'allocs': <class 'int'>,\n    'frees': <class 'int'>,\n    'call_diff': <class 'int'>,\n    'callsite': <class 'int'>,\n    'thread_id': <class 'int'>,\n    },\n  },\n}", "uid": "show_platform_software_memory_process_switch_active_slot_alloc_backtrace", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L5626"}}, "show platform software memory {process} switch active {slot} alloc callsite brief": {"iosxe": {"class": "ShowPlatformSoftwareMemoryCallsite", "doc": " Parser for show platform software memory <process> switch active <R0> alloc callsite brief ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'tracekey': <class 'str'>,\n'callsites': {\n  Any  (str) *: {\n    'thread': <class 'int'>,\n    'diff_byte': <class 'int'>,\n    'diff_call': <class 'int'>,\n    },\n  },\n}", "uid": "show_platform_software_memory_process_switch_active_slot_alloc_callsite_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L5560"}}, "show platform software process slot switch active R0 monitor | inc Mem :|Swap:": {"ios": {"class": "ShowPlatformSoftwareSlotActiveMonitorMem", "doc": "Parser for show platform software process slot switch active R0 monitor | inc Mem :|Swap:", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'memory': {\n  'total': <class 'int'>,\n  'free': <class 'int'>,\n  'used': <class 'int'>,\n  'buff_cache': <class 'int'>,\n  },\n'swap': {\n  'total': <class 'int'>,\n  'free': <class 'int'>,\n  'used': <class 'int'>,\n  'available_memory': <class 'int'>,\n  },\n}", "uid": "show_platform_software_process_slot_switch_active_R0_monitor___inc_Mem_:_Swap:", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L519"}, "iosxe": {"class": "ShowPlatformSoftwareSlotActiveMonitorMem", "doc": "Parser for show platform software process slot switch active R0 monitor | inc Mem :|Swap:", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'memory': {\n  'total': <class 'int'>,\n  'free': <class 'int'>,\n  'used': <class 'int'>,\n  'buff_cache': <class 'int'>,\n  },\n'swap': {\n  'total': <class 'int'>,\n  'free': <class 'int'>,\n  'used': <class 'int'>,\n  'available_memory': <class 'int'>,\n  },\n}", "uid": "show_platform_software_process_slot_switch_active_R0_monitor___inc_Mem_:_Swap:", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2939"}}, "show platform software status control-processor brief": {"ios": {"class": "ShowPlatformSoftwareStatusControl", "doc": "Parser for show platform software status control-processor brief", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'slot': {\n  Any  (str) *: {\n    'load_average': {\n      'status': <class 'str'>,\n      '1_min': <class 'float'>,\n      '5_min': <class 'float'>,\n      '15_min': <class 'float'>,\n      },\n    'memory': {\n      'status': <class 'str'>,\n      'total': <class 'int'>,\n      'used': <class 'int'>,\n      'used_percentage': <class 'int'>,\n      'free': <class 'int'>,\n      'free_percentage': <class 'int'>,\n      'committed': <class 'int'>,\n      'committed_percentage': <class 'int'>,\n      },\n    'cpu': {\n      Any  (str) *: {\n        'user': <class 'float'>,\n        'system': <class 'float'>,\n        'nice_process': <class 'float'>,\n        'idle': <class 'float'>,\n        'irq': <class 'float'>,\n        'sirq': <class 'float'>,\n        'waiting': <class 'float'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_software_status_control-processor_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L514"}, "iosxe": {"class": "ShowPlatformSoftwareStatusControl", "doc": "Parser for show platform software status control-processor brief", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'slot': {\n  Any  (str) *: {\n    'load_average': {\n      'status': <class 'str'>,\n      '1_min': <class 'float'>,\n      '5_min': <class 'float'>,\n      '15_min': <class 'float'>,\n      },\n    'memory': {\n      'status': <class 'str'>,\n      'total': <class 'int'>,\n      'used': <class 'int'>,\n      'used_percentage': <class 'int'>,\n      'free': <class 'int'>,\n      'free_percentage': <class 'int'>,\n      'committed': <class 'int'>,\n      'committed_percentage': <class 'int'>,\n      },\n    'cpu': {\n      Any  (str) *: {\n        'user': <class 'float'>,\n        'system': <class 'float'>,\n        'nice_process': <class 'float'>,\n        'idle': <class 'float'>,\n        'irq': <class 'float'>,\n        'sirq': <class 'float'>,\n        'waiting': <class 'float'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_platform_software_status_control-processor_brief", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3020"}}, "show platform vm": {"iosxr": {"class": "ShowPlatformVm", "doc": "Parser for show platform vm", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'node': {\n  Any  (str) *: {\n    'type': <class 'str'>,\n    'partner_name': <class 'str'>,\n    'sw_status': <class 'str'>,\n    'ip_address': <class 'str'>,\n    },\n  },\n}", "uid": "show_platform_vm", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L460"}}, "show policy-map": {"iosxe": {"class": "ShowPolicyMap", "doc": " Parser for\n        * \"show policy-map\"\n        * \"show policy-map {name}\"\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\n'policy_map': {\n  Any  (str) *: {\n    'class': {\n      Any  (str) *: {\n        Optional  (str) priority_level: {\n          Any  (str) *: {\n            'kbps': <class 'int'>,\n            },\n          },\n        Optional  (str) police: {\n          Optional  (str) rate_pps: <class 'int'>,\n          Optional  (str) cir_bps: <class 'int'>,\n          Optional  (str) cir_bc_bytes: <class 'int'>,\n          Optional  (str) cir_be_bytes: <class 'int'>,\n          Optional  (str) conform_color: <class 'str'>,\n          Optional  (str) conform_action: <class 'list'>,\n          Optional  (str) exceed_action: <class 'list'>,\n          Optional  (str) violate_action: <class 'list'>,\n          Optional  (str) service_policy: <class 'str'>,\n          Optional  (str) conform_burst: <class 'int'>,\n          Optional  (str) pir: <class 'int'>,\n          Optional  (str) pir_bc_bytes: <class 'int'>,\n          Optional  (str) pir_be_bytes: <class 'int'>,\n          Optional  (str) peak_burst: <class 'int'>,\n          Optional  (str) cir_percent: <class 'int'>,\n          Optional  (str) bc_ms: <class 'int'>,\n          Optional  (str) pir_percent: <class 'int'>,\n          Optional  (str) be_ms: <class 'int'>,\n          },\n        Optional  (str) queue_limit_ms: <class 'int'>,\n        Optional  (str) queue_limit_packets: <class 'int'>,\n        Optional  (str) service_policy: <class 'str'>,\n        Optional  (str) bandwidth_kbps: <class 'int'>,\n        Optional  (str) bandwidth: <class 'int'>,\n        Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n        Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n        Optional  (str) shape_average_min: <class 'int'>,\n        Optional  (str) set: <class 'str'>,\n        Optional  (str) conform_burst: <class 'int'>,\n        Optional  (str) priority: <class 'bool'>,\n        Optional  (str) priority_kbps: <class 'int'>,\n        Optional  (str) priority_levels: <class 'int'>,\n        Optional  (str) peak_burst: <class 'int'>,\n        Optional  (str) average_rate_traffic_shaping: <class 'bool'>,\n        Optional  (str) adaptive_rate_traffic_shaping: <class 'bool'>,\n        Optional  (str) cir_percent: <class 'int'>,\n        Optional  (str) bc_msec: <class 'int'>,\n        Optional  (str) be_msec: <class 'int'>,\n        Optional  (str) be_bits: <class 'int'>,\n        Optional  (str) bc_bits: <class 'int'>,\n        Optional  (str) cir_bps: <class 'int'>,\n        Optional  (str) cir_upper_bound_bps: <class 'int'>,\n        Optional  (str) cir_lower_bound_bps: <class 'int'>,\n        Optional  (str) random_detect: {\n          Optional  (str) exponential_weight: <class 'int'>,\n          Optional  (str) bandwidth_percent: <class 'int'>,\n          Optional  (str) wred_type: <class 'str'>,\n          Optional  (str) class_val: {\n            Any  (str) *: {\n              'min_threshold': <class 'str'>,\n              'max_threshold': <class 'str'>,\n              'mark_probability': <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) weighted_fair_queueing: {\n          'bandwidth_percent': <class 'int'>,\n          'exponential_weight': <class 'int'>,\n          'explicit_congestion_notification': <class 'bool'>,\n          'class_val': {\n            Any  (str) *: {\n              'min_threshold': <class 'str'>,\n              'max_threshold': <class 'str'>,\n              'mark_probability': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1519"}}, "show policy-map control-plane": {"iosxe": {"class": "ShowPolicyMapControlPlane", "doc": " Parser for:\n        * 'show policy-map control-plane'\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) service_group: <class 'int'>,\n  Optional  (str) service_policy: {\n    Any  (str) *: {\n      Optional  (str) policy_name: {\n        Any  (str) *: {\n          Optional  (str) child_policy_name: {\n            Any  (str) *: {\n              Optional  (str) class_map: {\n                Any  (str) *: {\n                  'match_evaluation': <class 'str'>,\n                  'match': <class 'list'>,\n                  Optional  (str) packets: <class 'int'>,\n                  Optional  (str) packet_output: <class 'int'>,\n                  Optional  (str) packet_drop: <class 'int'>,\n                  Optional  (str) tail_random_drops: <class 'int'>,\n                  Optional  (str) other_drops: <class 'int'>,\n                  Optional  (str) bytes: <class 'int'>,\n                  Optional  (str) queueing: <class 'bool'>,\n                  Optional  (str) queue_limit_packets: <class 'str'>,\n                  Optional  (str) queue_size: <class 'int'>,\n                  Optional  (str) queue_limit: <class 'int'>,\n                  Optional  (str) queue_limit_bytes: <class 'int'>,\n                  Optional  (str) queue_limit_us: <class 'int'>,\n                  Optional  (str) queue_depth: <class 'int'>,\n                  Optional  (str) total_drops: <class 'int'>,\n                  Optional  (str) no_buffer_drops: <class 'int'>,\n                  Optional  (str) pkts_output: <class 'int'>,\n                  Optional  (str) bytes_output: <class 'int'>,\n                  Optional  (str) pkts_matched: <class 'int'>,\n                  Optional  (str) bytes_matched: <class 'int'>,\n                  Optional  (str) pkts_queued: <class 'int'>,\n                  Optional  (str) bytes_queued: <class 'int'>,\n                  Optional  (str) shape_type: <class 'str'>,\n                  Optional  (str) shape_cir_bps: <class 'int'>,\n                  Optional  (str) shape_bc_bps: <class 'int'>,\n                  Optional  (str) shape_be_bps: <class 'int'>,\n                  Optional  (str) target_shape_rate: <class 'int'>,\n                  Optional  (str) output_queue: <class 'str'>,\n                  Optional  (str) bandwidth_percent: <class 'int'>,\n                  Optional  (str) bandwidth_kbps: <class 'int'>,\n                  Optional  (str) bandwidth: <class 'str'>,\n                  Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                  Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n                  Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n                  Optional  (str) priority_level: <class 'int'>,\n                  Optional  (str) random_detect: {\n                    Optional  (str) exp_weight_constant: <class 'str'>,\n                    Optional  (str) exponential_weight: <class 'str'>,\n                    Optional  (str) mean_queue_depth: <class 'int'>,\n                    Optional  (str) class: {\n                      Any  (str) *: {\n                        'transmitted': <class 'str'>,\n                        'random_drop': <class 'str'>,\n                        'tail_drop': <class 'str'>,\n                        'minimum_thresh': <class 'str'>,\n                        'maximum_thresh': <class 'str'>,\n                        'mark_prob': <class 'str'>,\n                        Optional  (str) ecn_mark: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) priority: {\n                    Optional  (str) percent: <class 'int'>,\n                    Optional  (str) kbps: <class 'int'>,\n                    Optional  (str) burst_bytes: <class 'int'>,\n                    Optional  (str) exceed_drops: <class 'int'>,\n                    Optional  (str) type: <class 'str'>,\n                    },\n                  Optional  (str) rate: {\n                    Optional  (str) interval: <class 'int'>,\n                    Optional  (str) offered_rate_bps: <class 'int'>,\n                    Optional  (str) drop_rate_bps: <class 'int'>,\n                    },\n                  Optional  (str) policy: {\n                    Any  (str) *: {\n                      'class': {\n                        Any  (str) *: {\n                          Optional  (str) bandwidth: <class 'int'>,\n                          Optional  (str) random_detect: {\n                            'precedence': <class 'list'>,\n                            'bytes1': <class 'list'>,\n                            'bytes2': <class 'list'>,\n                            'bytes3': <class 'list'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) qos_set: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) packets_marked: <class 'int'>,\n                        Optional  (str) marker_statistics: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) police: {\n                    Optional  (str) cir_bps: <class 'int'>,\n                    Optional  (str) pir_bps: <class 'int'>,\n                    Optional  (str) cir_bc_bytes: <class 'int'>,\n                    Optional  (str) cir_be_bytes: <class 'int'>,\n                    Optional  (str) pir_bc_bytes: <class 'int'>,\n                    Optional  (str) pir_be_bytes: <class 'int'>,\n                    Optional  (str) police_bps: <class 'int'>,\n                    Optional  (str) police_limit: <class 'int'>,\n                    Optional  (str) extended_limit: <class 'int'>,\n                    Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                    Optional  (str) conformed: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) exceeded: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) violated: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) queue_stats_for_all_priority_classes: {\n                Optional  (str) priority_level: {\n                  Any  (str) *: {\n                    Optional  (str) queueing: <class 'bool'>,\n                    Optional  (str) queue_limit_packets: <class 'str'>,\n                    Optional  (str) queue_limit_bytes: <class 'int'>,\n                    Optional  (str) queue_limit_us: <class 'int'>,\n                    Optional  (str) queue_depth: <class 'int'>,\n                    Optional  (str) total_drops: <class 'int'>,\n                    Optional  (str) no_buffer_drops: <class 'int'>,\n                    Optional  (str) pkts_output: <class 'int'>,\n                    Optional  (str) bytes_output: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) class_map: {\n            Any  (str) *: {\n              'match_evaluation': <class 'str'>,\n              'match': <class 'list'>,\n              Optional  (str) packets: <class 'int'>,\n              Optional  (str) packet_output: <class 'int'>,\n              Optional  (str) packet_drop: <class 'int'>,\n              Optional  (str) tail_random_drops: <class 'int'>,\n              Optional  (str) other_drops: <class 'int'>,\n              Optional  (str) bytes: <class 'int'>,\n              Optional  (str) queueing: <class 'bool'>,\n              Optional  (str) queue_limit_packets: <class 'str'>,\n              Optional  (str) queue_size: <class 'int'>,\n              Optional  (str) queue_limit: <class 'int'>,\n              Optional  (str) queue_limit_bytes: <class 'int'>,\n              Optional  (str) queue_limit_us: <class 'int'>,\n              Optional  (str) queue_depth: <class 'int'>,\n              Optional  (str) total_drops: <class 'int'>,\n              Optional  (str) no_buffer_drops: <class 'int'>,\n              Optional  (str) pkts_output: <class 'int'>,\n              Optional  (str) bytes_output: <class 'int'>,\n              Optional  (str) pkts_matched: <class 'int'>,\n              Optional  (str) bytes_matched: <class 'int'>,\n              Optional  (str) pkts_queued: <class 'int'>,\n              Optional  (str) bytes_queued: <class 'int'>,\n              Optional  (str) shape_type: <class 'str'>,\n              Optional  (str) shape_cir_bps: <class 'int'>,\n              Optional  (str) shape_bc_bps: <class 'int'>,\n              Optional  (str) shape_be_bps: <class 'int'>,\n              Optional  (str) target_shape_rate: <class 'int'>,\n              Optional  (str) output_queue: <class 'str'>,\n              Optional  (str) bandwidth_percent: <class 'int'>,\n              Optional  (str) bandwidth_kbps: <class 'int'>,\n              Optional  (str) bandwidth: <class 'str'>,\n              Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n              Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n              Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n              Optional  (str) priority_level: <class 'int'>,\n              Optional  (str) random_detect: {\n                Optional  (str) exp_weight_constant: <class 'str'>,\n                Optional  (str) exponential_weight: <class 'str'>,\n                Optional  (str) mean_queue_depth: <class 'int'>,\n                Optional  (str) class: {\n                  Any  (str) *: {\n                    'transmitted': <class 'str'>,\n                    'random_drop': <class 'str'>,\n                    'tail_drop': <class 'str'>,\n                    'minimum_thresh': <class 'str'>,\n                    'maximum_thresh': <class 'str'>,\n                    'mark_prob': <class 'str'>,\n                    Optional  (str) ecn_mark: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) priority: {\n                Optional  (str) percent: <class 'int'>,\n                Optional  (str) kbps: <class 'int'>,\n                Optional  (str) burst_bytes: <class 'int'>,\n                Optional  (str) exceed_drops: <class 'int'>,\n                Optional  (str) type: <class 'str'>,\n                },\n              Optional  (str) rate: {\n                Optional  (str) interval: <class 'int'>,\n                Optional  (str) offered_rate_bps: <class 'int'>,\n                Optional  (str) drop_rate_bps: <class 'int'>,\n                },\n              Optional  (str) policy: {\n                Any  (str) *: {\n                  'class': {\n                    Any  (str) *: {\n                      Optional  (str) bandwidth: <class 'int'>,\n                      Optional  (str) random_detect: {\n                        'precedence': <class 'list'>,\n                        'bytes1': <class 'list'>,\n                        'bytes2': <class 'list'>,\n                        'bytes3': <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) qos_set: {\n                Any  (str) *: {\n                  Any  (str) *: {\n                    Optional  (str) packets_marked: <class 'int'>,\n                    Optional  (str) marker_statistics: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) police: {\n                Optional  (str) cir_bps: <class 'int'>,\n                Optional  (str) pir_bps: <class 'int'>,\n                Optional  (str) cir_bc_bytes: <class 'int'>,\n                Optional  (str) cir_be_bytes: <class 'int'>,\n                Optional  (str) pir_bc_bytes: <class 'int'>,\n                Optional  (str) pir_be_bytes: <class 'int'>,\n                Optional  (str) police_bps: <class 'int'>,\n                Optional  (str) police_limit: <class 'int'>,\n                Optional  (str) extended_limit: <class 'int'>,\n                Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                Optional  (str) conformed: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) exceeded: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) violated: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) queue_stats_for_all_priority_classes: {\n            Optional  (str) priority_level: {\n              Any  (str) *: {\n                Optional  (str) queueing: <class 'bool'>,\n                Optional  (str) queue_limit_packets: <class 'str'>,\n                Optional  (str) queue_limit_bytes: <class 'int'>,\n                Optional  (str) queue_limit_us: <class 'int'>,\n                Optional  (str) queue_depth: <class 'int'>,\n                Optional  (str) total_drops: <class 'int'>,\n                Optional  (str) no_buffer_drops: <class 'int'>,\n                Optional  (str) pkts_output: <class 'int'>,\n                Optional  (str) bytes_output: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map_control-plane", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1248"}}, "show policy-map interface": {"iosxe": {"class": "ShowPolicyMapInterface", "doc": " Parser for:\n        * 'show policy-map interface {interface}'\n        * 'show policy-map interface'\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) service_group: <class 'int'>,\n  Optional  (str) service_policy: {\n    Any  (str) *: {\n      Optional  (str) policy_name: {\n        Any  (str) *: {\n          Optional  (str) child_policy_name: {\n            Any  (str) *: {\n              Optional  (str) class_map: {\n                Any  (str) *: {\n                  'match_evaluation': <class 'str'>,\n                  'match': <class 'list'>,\n                  Optional  (str) packets: <class 'int'>,\n                  Optional  (str) packet_output: <class 'int'>,\n                  Optional  (str) packet_drop: <class 'int'>,\n                  Optional  (str) tail_random_drops: <class 'int'>,\n                  Optional  (str) other_drops: <class 'int'>,\n                  Optional  (str) bytes: <class 'int'>,\n                  Optional  (str) queueing: <class 'bool'>,\n                  Optional  (str) queue_limit_packets: <class 'str'>,\n                  Optional  (str) queue_size: <class 'int'>,\n                  Optional  (str) queue_limit: <class 'int'>,\n                  Optional  (str) queue_limit_bytes: <class 'int'>,\n                  Optional  (str) queue_limit_us: <class 'int'>,\n                  Optional  (str) queue_depth: <class 'int'>,\n                  Optional  (str) total_drops: <class 'int'>,\n                  Optional  (str) no_buffer_drops: <class 'int'>,\n                  Optional  (str) pkts_output: <class 'int'>,\n                  Optional  (str) bytes_output: <class 'int'>,\n                  Optional  (str) pkts_matched: <class 'int'>,\n                  Optional  (str) bytes_matched: <class 'int'>,\n                  Optional  (str) pkts_queued: <class 'int'>,\n                  Optional  (str) bytes_queued: <class 'int'>,\n                  Optional  (str) shape_type: <class 'str'>,\n                  Optional  (str) shape_cir_bps: <class 'int'>,\n                  Optional  (str) shape_bc_bps: <class 'int'>,\n                  Optional  (str) shape_be_bps: <class 'int'>,\n                  Optional  (str) target_shape_rate: <class 'int'>,\n                  Optional  (str) output_queue: <class 'str'>,\n                  Optional  (str) bandwidth_percent: <class 'int'>,\n                  Optional  (str) bandwidth_kbps: <class 'int'>,\n                  Optional  (str) bandwidth: <class 'str'>,\n                  Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                  Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n                  Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n                  Optional  (str) priority_level: <class 'int'>,\n                  Optional  (str) random_detect: {\n                    Optional  (str) exp_weight_constant: <class 'str'>,\n                    Optional  (str) exponential_weight: <class 'str'>,\n                    Optional  (str) mean_queue_depth: <class 'int'>,\n                    Optional  (str) class: {\n                      Any  (str) *: {\n                        'transmitted': <class 'str'>,\n                        'random_drop': <class 'str'>,\n                        'tail_drop': <class 'str'>,\n                        'minimum_thresh': <class 'str'>,\n                        'maximum_thresh': <class 'str'>,\n                        'mark_prob': <class 'str'>,\n                        Optional  (str) ecn_mark: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) priority: {\n                    Optional  (str) percent: <class 'int'>,\n                    Optional  (str) kbps: <class 'int'>,\n                    Optional  (str) burst_bytes: <class 'int'>,\n                    Optional  (str) exceed_drops: <class 'int'>,\n                    Optional  (str) type: <class 'str'>,\n                    },\n                  Optional  (str) rate: {\n                    Optional  (str) interval: <class 'int'>,\n                    Optional  (str) offered_rate_bps: <class 'int'>,\n                    Optional  (str) drop_rate_bps: <class 'int'>,\n                    },\n                  Optional  (str) policy: {\n                    Any  (str) *: {\n                      'class': {\n                        Any  (str) *: {\n                          Optional  (str) bandwidth: <class 'int'>,\n                          Optional  (str) random_detect: {\n                            'precedence': <class 'list'>,\n                            'bytes1': <class 'list'>,\n                            'bytes2': <class 'list'>,\n                            'bytes3': <class 'list'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) qos_set: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) packets_marked: <class 'int'>,\n                        Optional  (str) marker_statistics: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) police: {\n                    Optional  (str) cir_bps: <class 'int'>,\n                    Optional  (str) pir_bps: <class 'int'>,\n                    Optional  (str) cir_bc_bytes: <class 'int'>,\n                    Optional  (str) cir_be_bytes: <class 'int'>,\n                    Optional  (str) pir_bc_bytes: <class 'int'>,\n                    Optional  (str) pir_be_bytes: <class 'int'>,\n                    Optional  (str) police_bps: <class 'int'>,\n                    Optional  (str) police_limit: <class 'int'>,\n                    Optional  (str) extended_limit: <class 'int'>,\n                    Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                    Optional  (str) conformed: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) exceeded: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) violated: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) queue_stats_for_all_priority_classes: {\n                Optional  (str) priority_level: {\n                  Any  (str) *: {\n                    Optional  (str) queueing: <class 'bool'>,\n                    Optional  (str) queue_limit_packets: <class 'str'>,\n                    Optional  (str) queue_limit_bytes: <class 'int'>,\n                    Optional  (str) queue_limit_us: <class 'int'>,\n                    Optional  (str) queue_depth: <class 'int'>,\n                    Optional  (str) total_drops: <class 'int'>,\n                    Optional  (str) no_buffer_drops: <class 'int'>,\n                    Optional  (str) pkts_output: <class 'int'>,\n                    Optional  (str) bytes_output: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) class_map: {\n            Any  (str) *: {\n              'match_evaluation': <class 'str'>,\n              'match': <class 'list'>,\n              Optional  (str) packets: <class 'int'>,\n              Optional  (str) packet_output: <class 'int'>,\n              Optional  (str) packet_drop: <class 'int'>,\n              Optional  (str) tail_random_drops: <class 'int'>,\n              Optional  (str) other_drops: <class 'int'>,\n              Optional  (str) bytes: <class 'int'>,\n              Optional  (str) queueing: <class 'bool'>,\n              Optional  (str) queue_limit_packets: <class 'str'>,\n              Optional  (str) queue_size: <class 'int'>,\n              Optional  (str) queue_limit: <class 'int'>,\n              Optional  (str) queue_limit_bytes: <class 'int'>,\n              Optional  (str) queue_limit_us: <class 'int'>,\n              Optional  (str) queue_depth: <class 'int'>,\n              Optional  (str) total_drops: <class 'int'>,\n              Optional  (str) no_buffer_drops: <class 'int'>,\n              Optional  (str) pkts_output: <class 'int'>,\n              Optional  (str) bytes_output: <class 'int'>,\n              Optional  (str) pkts_matched: <class 'int'>,\n              Optional  (str) bytes_matched: <class 'int'>,\n              Optional  (str) pkts_queued: <class 'int'>,\n              Optional  (str) bytes_queued: <class 'int'>,\n              Optional  (str) shape_type: <class 'str'>,\n              Optional  (str) shape_cir_bps: <class 'int'>,\n              Optional  (str) shape_bc_bps: <class 'int'>,\n              Optional  (str) shape_be_bps: <class 'int'>,\n              Optional  (str) target_shape_rate: <class 'int'>,\n              Optional  (str) output_queue: <class 'str'>,\n              Optional  (str) bandwidth_percent: <class 'int'>,\n              Optional  (str) bandwidth_kbps: <class 'int'>,\n              Optional  (str) bandwidth: <class 'str'>,\n              Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n              Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n              Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n              Optional  (str) priority_level: <class 'int'>,\n              Optional  (str) random_detect: {\n                Optional  (str) exp_weight_constant: <class 'str'>,\n                Optional  (str) exponential_weight: <class 'str'>,\n                Optional  (str) mean_queue_depth: <class 'int'>,\n                Optional  (str) class: {\n                  Any  (str) *: {\n                    'transmitted': <class 'str'>,\n                    'random_drop': <class 'str'>,\n                    'tail_drop': <class 'str'>,\n                    'minimum_thresh': <class 'str'>,\n                    'maximum_thresh': <class 'str'>,\n                    'mark_prob': <class 'str'>,\n                    Optional  (str) ecn_mark: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) priority: {\n                Optional  (str) percent: <class 'int'>,\n                Optional  (str) kbps: <class 'int'>,\n                Optional  (str) burst_bytes: <class 'int'>,\n                Optional  (str) exceed_drops: <class 'int'>,\n                Optional  (str) type: <class 'str'>,\n                },\n              Optional  (str) rate: {\n                Optional  (str) interval: <class 'int'>,\n                Optional  (str) offered_rate_bps: <class 'int'>,\n                Optional  (str) drop_rate_bps: <class 'int'>,\n                },\n              Optional  (str) policy: {\n                Any  (str) *: {\n                  'class': {\n                    Any  (str) *: {\n                      Optional  (str) bandwidth: <class 'int'>,\n                      Optional  (str) random_detect: {\n                        'precedence': <class 'list'>,\n                        'bytes1': <class 'list'>,\n                        'bytes2': <class 'list'>,\n                        'bytes3': <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) qos_set: {\n                Any  (str) *: {\n                  Any  (str) *: {\n                    Optional  (str) packets_marked: <class 'int'>,\n                    Optional  (str) marker_statistics: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) police: {\n                Optional  (str) cir_bps: <class 'int'>,\n                Optional  (str) pir_bps: <class 'int'>,\n                Optional  (str) cir_bc_bytes: <class 'int'>,\n                Optional  (str) cir_be_bytes: <class 'int'>,\n                Optional  (str) pir_bc_bytes: <class 'int'>,\n                Optional  (str) pir_be_bytes: <class 'int'>,\n                Optional  (str) police_bps: <class 'int'>,\n                Optional  (str) police_limit: <class 'int'>,\n                Optional  (str) extended_limit: <class 'int'>,\n                Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                Optional  (str) conformed: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) exceeded: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) violated: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) queue_stats_for_all_priority_classes: {\n            Optional  (str) priority_level: {\n              Any  (str) *: {\n                Optional  (str) queueing: <class 'bool'>,\n                Optional  (str) queue_limit_packets: <class 'str'>,\n                Optional  (str) queue_limit_bytes: <class 'int'>,\n                Optional  (str) queue_limit_us: <class 'int'>,\n                Optional  (str) queue_depth: <class 'int'>,\n                Optional  (str) total_drops: <class 'int'>,\n                Optional  (str) no_buffer_drops: <class 'int'>,\n                Optional  (str) pkts_output: <class 'int'>,\n                Optional  (str) bytes_output: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1275"}}, "show policy-map interface class {class_name}": {"iosxe": {"class": "ShowPolicyMapInterfaceClass", "doc": " Parser for:\n        * 'show policy-map interface class {class_name}'\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) service_group: <class 'int'>,\n  Optional  (str) service_policy: {\n    Any  (str) *: {\n      Optional  (str) policy_name: {\n        Any  (str) *: {\n          Optional  (str) child_policy_name: {\n            Any  (str) *: {\n              Optional  (str) class_map: {\n                Any  (str) *: {\n                  'match_evaluation': <class 'str'>,\n                  'match': <class 'list'>,\n                  Optional  (str) packets: <class 'int'>,\n                  Optional  (str) packet_output: <class 'int'>,\n                  Optional  (str) packet_drop: <class 'int'>,\n                  Optional  (str) tail_random_drops: <class 'int'>,\n                  Optional  (str) other_drops: <class 'int'>,\n                  Optional  (str) bytes: <class 'int'>,\n                  Optional  (str) queueing: <class 'bool'>,\n                  Optional  (str) queue_limit_packets: <class 'str'>,\n                  Optional  (str) queue_size: <class 'int'>,\n                  Optional  (str) queue_limit: <class 'int'>,\n                  Optional  (str) queue_limit_bytes: <class 'int'>,\n                  Optional  (str) queue_limit_us: <class 'int'>,\n                  Optional  (str) queue_depth: <class 'int'>,\n                  Optional  (str) total_drops: <class 'int'>,\n                  Optional  (str) no_buffer_drops: <class 'int'>,\n                  Optional  (str) pkts_output: <class 'int'>,\n                  Optional  (str) bytes_output: <class 'int'>,\n                  Optional  (str) pkts_matched: <class 'int'>,\n                  Optional  (str) bytes_matched: <class 'int'>,\n                  Optional  (str) pkts_queued: <class 'int'>,\n                  Optional  (str) bytes_queued: <class 'int'>,\n                  Optional  (str) shape_type: <class 'str'>,\n                  Optional  (str) shape_cir_bps: <class 'int'>,\n                  Optional  (str) shape_bc_bps: <class 'int'>,\n                  Optional  (str) shape_be_bps: <class 'int'>,\n                  Optional  (str) target_shape_rate: <class 'int'>,\n                  Optional  (str) output_queue: <class 'str'>,\n                  Optional  (str) bandwidth_percent: <class 'int'>,\n                  Optional  (str) bandwidth_kbps: <class 'int'>,\n                  Optional  (str) bandwidth: <class 'str'>,\n                  Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                  Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n                  Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n                  Optional  (str) priority_level: <class 'int'>,\n                  Optional  (str) random_detect: {\n                    Optional  (str) exp_weight_constant: <class 'str'>,\n                    Optional  (str) exponential_weight: <class 'str'>,\n                    Optional  (str) mean_queue_depth: <class 'int'>,\n                    Optional  (str) class: {\n                      Any  (str) *: {\n                        'transmitted': <class 'str'>,\n                        'random_drop': <class 'str'>,\n                        'tail_drop': <class 'str'>,\n                        'minimum_thresh': <class 'str'>,\n                        'maximum_thresh': <class 'str'>,\n                        'mark_prob': <class 'str'>,\n                        Optional  (str) ecn_mark: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) priority: {\n                    Optional  (str) percent: <class 'int'>,\n                    Optional  (str) kbps: <class 'int'>,\n                    Optional  (str) burst_bytes: <class 'int'>,\n                    Optional  (str) exceed_drops: <class 'int'>,\n                    Optional  (str) type: <class 'str'>,\n                    },\n                  Optional  (str) rate: {\n                    Optional  (str) interval: <class 'int'>,\n                    Optional  (str) offered_rate_bps: <class 'int'>,\n                    Optional  (str) drop_rate_bps: <class 'int'>,\n                    },\n                  Optional  (str) policy: {\n                    Any  (str) *: {\n                      'class': {\n                        Any  (str) *: {\n                          Optional  (str) bandwidth: <class 'int'>,\n                          Optional  (str) random_detect: {\n                            'precedence': <class 'list'>,\n                            'bytes1': <class 'list'>,\n                            'bytes2': <class 'list'>,\n                            'bytes3': <class 'list'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) qos_set: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) packets_marked: <class 'int'>,\n                        Optional  (str) marker_statistics: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) police: {\n                    Optional  (str) cir_bps: <class 'int'>,\n                    Optional  (str) pir_bps: <class 'int'>,\n                    Optional  (str) cir_bc_bytes: <class 'int'>,\n                    Optional  (str) cir_be_bytes: <class 'int'>,\n                    Optional  (str) pir_bc_bytes: <class 'int'>,\n                    Optional  (str) pir_be_bytes: <class 'int'>,\n                    Optional  (str) police_bps: <class 'int'>,\n                    Optional  (str) police_limit: <class 'int'>,\n                    Optional  (str) extended_limit: <class 'int'>,\n                    Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                    Optional  (str) conformed: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) exceeded: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) violated: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) queue_stats_for_all_priority_classes: {\n                Optional  (str) priority_level: {\n                  Any  (str) *: {\n                    Optional  (str) queueing: <class 'bool'>,\n                    Optional  (str) queue_limit_packets: <class 'str'>,\n                    Optional  (str) queue_limit_bytes: <class 'int'>,\n                    Optional  (str) queue_limit_us: <class 'int'>,\n                    Optional  (str) queue_depth: <class 'int'>,\n                    Optional  (str) total_drops: <class 'int'>,\n                    Optional  (str) no_buffer_drops: <class 'int'>,\n                    Optional  (str) pkts_output: <class 'int'>,\n                    Optional  (str) bytes_output: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) class_map: {\n            Any  (str) *: {\n              'match_evaluation': <class 'str'>,\n              'match': <class 'list'>,\n              Optional  (str) packets: <class 'int'>,\n              Optional  (str) packet_output: <class 'int'>,\n              Optional  (str) packet_drop: <class 'int'>,\n              Optional  (str) tail_random_drops: <class 'int'>,\n              Optional  (str) other_drops: <class 'int'>,\n              Optional  (str) bytes: <class 'int'>,\n              Optional  (str) queueing: <class 'bool'>,\n              Optional  (str) queue_limit_packets: <class 'str'>,\n              Optional  (str) queue_size: <class 'int'>,\n              Optional  (str) queue_limit: <class 'int'>,\n              Optional  (str) queue_limit_bytes: <class 'int'>,\n              Optional  (str) queue_limit_us: <class 'int'>,\n              Optional  (str) queue_depth: <class 'int'>,\n              Optional  (str) total_drops: <class 'int'>,\n              Optional  (str) no_buffer_drops: <class 'int'>,\n              Optional  (str) pkts_output: <class 'int'>,\n              Optional  (str) bytes_output: <class 'int'>,\n              Optional  (str) pkts_matched: <class 'int'>,\n              Optional  (str) bytes_matched: <class 'int'>,\n              Optional  (str) pkts_queued: <class 'int'>,\n              Optional  (str) bytes_queued: <class 'int'>,\n              Optional  (str) shape_type: <class 'str'>,\n              Optional  (str) shape_cir_bps: <class 'int'>,\n              Optional  (str) shape_bc_bps: <class 'int'>,\n              Optional  (str) shape_be_bps: <class 'int'>,\n              Optional  (str) target_shape_rate: <class 'int'>,\n              Optional  (str) output_queue: <class 'str'>,\n              Optional  (str) bandwidth_percent: <class 'int'>,\n              Optional  (str) bandwidth_kbps: <class 'int'>,\n              Optional  (str) bandwidth: <class 'str'>,\n              Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n              Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n              Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n              Optional  (str) priority_level: <class 'int'>,\n              Optional  (str) random_detect: {\n                Optional  (str) exp_weight_constant: <class 'str'>,\n                Optional  (str) exponential_weight: <class 'str'>,\n                Optional  (str) mean_queue_depth: <class 'int'>,\n                Optional  (str) class: {\n                  Any  (str) *: {\n                    'transmitted': <class 'str'>,\n                    'random_drop': <class 'str'>,\n                    'tail_drop': <class 'str'>,\n                    'minimum_thresh': <class 'str'>,\n                    'maximum_thresh': <class 'str'>,\n                    'mark_prob': <class 'str'>,\n                    Optional  (str) ecn_mark: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) priority: {\n                Optional  (str) percent: <class 'int'>,\n                Optional  (str) kbps: <class 'int'>,\n                Optional  (str) burst_bytes: <class 'int'>,\n                Optional  (str) exceed_drops: <class 'int'>,\n                Optional  (str) type: <class 'str'>,\n                },\n              Optional  (str) rate: {\n                Optional  (str) interval: <class 'int'>,\n                Optional  (str) offered_rate_bps: <class 'int'>,\n                Optional  (str) drop_rate_bps: <class 'int'>,\n                },\n              Optional  (str) policy: {\n                Any  (str) *: {\n                  'class': {\n                    Any  (str) *: {\n                      Optional  (str) bandwidth: <class 'int'>,\n                      Optional  (str) random_detect: {\n                        'precedence': <class 'list'>,\n                        'bytes1': <class 'list'>,\n                        'bytes2': <class 'list'>,\n                        'bytes3': <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) qos_set: {\n                Any  (str) *: {\n                  Any  (str) *: {\n                    Optional  (str) packets_marked: <class 'int'>,\n                    Optional  (str) marker_statistics: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) police: {\n                Optional  (str) cir_bps: <class 'int'>,\n                Optional  (str) pir_bps: <class 'int'>,\n                Optional  (str) cir_bc_bytes: <class 'int'>,\n                Optional  (str) cir_be_bytes: <class 'int'>,\n                Optional  (str) pir_bc_bytes: <class 'int'>,\n                Optional  (str) pir_be_bytes: <class 'int'>,\n                Optional  (str) police_bps: <class 'int'>,\n                Optional  (str) police_limit: <class 'int'>,\n                Optional  (str) extended_limit: <class 'int'>,\n                Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                Optional  (str) conformed: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) exceeded: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) violated: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) queue_stats_for_all_priority_classes: {\n            Optional  (str) priority_level: {\n              Any  (str) *: {\n                Optional  (str) queueing: <class 'bool'>,\n                Optional  (str) queue_limit_packets: <class 'str'>,\n                Optional  (str) queue_limit_bytes: <class 'int'>,\n                Optional  (str) queue_limit_us: <class 'int'>,\n                Optional  (str) queue_depth: <class 'int'>,\n                Optional  (str) total_drops: <class 'int'>,\n                Optional  (str) no_buffer_drops: <class 'int'>,\n                Optional  (str) pkts_output: <class 'int'>,\n                Optional  (str) bytes_output: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map_interface_class_class_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1373"}}, "show policy-map interface {interface}": {"iosxe": {"class": "ShowPolicyMapInterface", "doc": " Parser for:\n        * 'show policy-map interface {interface}'\n        * 'show policy-map interface'\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) service_group: <class 'int'>,\n  Optional  (str) service_policy: {\n    Any  (str) *: {\n      Optional  (str) policy_name: {\n        Any  (str) *: {\n          Optional  (str) child_policy_name: {\n            Any  (str) *: {\n              Optional  (str) class_map: {\n                Any  (str) *: {\n                  'match_evaluation': <class 'str'>,\n                  'match': <class 'list'>,\n                  Optional  (str) packets: <class 'int'>,\n                  Optional  (str) packet_output: <class 'int'>,\n                  Optional  (str) packet_drop: <class 'int'>,\n                  Optional  (str) tail_random_drops: <class 'int'>,\n                  Optional  (str) other_drops: <class 'int'>,\n                  Optional  (str) bytes: <class 'int'>,\n                  Optional  (str) queueing: <class 'bool'>,\n                  Optional  (str) queue_limit_packets: <class 'str'>,\n                  Optional  (str) queue_size: <class 'int'>,\n                  Optional  (str) queue_limit: <class 'int'>,\n                  Optional  (str) queue_limit_bytes: <class 'int'>,\n                  Optional  (str) queue_limit_us: <class 'int'>,\n                  Optional  (str) queue_depth: <class 'int'>,\n                  Optional  (str) total_drops: <class 'int'>,\n                  Optional  (str) no_buffer_drops: <class 'int'>,\n                  Optional  (str) pkts_output: <class 'int'>,\n                  Optional  (str) bytes_output: <class 'int'>,\n                  Optional  (str) pkts_matched: <class 'int'>,\n                  Optional  (str) bytes_matched: <class 'int'>,\n                  Optional  (str) pkts_queued: <class 'int'>,\n                  Optional  (str) bytes_queued: <class 'int'>,\n                  Optional  (str) shape_type: <class 'str'>,\n                  Optional  (str) shape_cir_bps: <class 'int'>,\n                  Optional  (str) shape_bc_bps: <class 'int'>,\n                  Optional  (str) shape_be_bps: <class 'int'>,\n                  Optional  (str) target_shape_rate: <class 'int'>,\n                  Optional  (str) output_queue: <class 'str'>,\n                  Optional  (str) bandwidth_percent: <class 'int'>,\n                  Optional  (str) bandwidth_kbps: <class 'int'>,\n                  Optional  (str) bandwidth: <class 'str'>,\n                  Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                  Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n                  Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n                  Optional  (str) priority_level: <class 'int'>,\n                  Optional  (str) random_detect: {\n                    Optional  (str) exp_weight_constant: <class 'str'>,\n                    Optional  (str) exponential_weight: <class 'str'>,\n                    Optional  (str) mean_queue_depth: <class 'int'>,\n                    Optional  (str) class: {\n                      Any  (str) *: {\n                        'transmitted': <class 'str'>,\n                        'random_drop': <class 'str'>,\n                        'tail_drop': <class 'str'>,\n                        'minimum_thresh': <class 'str'>,\n                        'maximum_thresh': <class 'str'>,\n                        'mark_prob': <class 'str'>,\n                        Optional  (str) ecn_mark: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) priority: {\n                    Optional  (str) percent: <class 'int'>,\n                    Optional  (str) kbps: <class 'int'>,\n                    Optional  (str) burst_bytes: <class 'int'>,\n                    Optional  (str) exceed_drops: <class 'int'>,\n                    Optional  (str) type: <class 'str'>,\n                    },\n                  Optional  (str) rate: {\n                    Optional  (str) interval: <class 'int'>,\n                    Optional  (str) offered_rate_bps: <class 'int'>,\n                    Optional  (str) drop_rate_bps: <class 'int'>,\n                    },\n                  Optional  (str) policy: {\n                    Any  (str) *: {\n                      'class': {\n                        Any  (str) *: {\n                          Optional  (str) bandwidth: <class 'int'>,\n                          Optional  (str) random_detect: {\n                            'precedence': <class 'list'>,\n                            'bytes1': <class 'list'>,\n                            'bytes2': <class 'list'>,\n                            'bytes3': <class 'list'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) qos_set: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) packets_marked: <class 'int'>,\n                        Optional  (str) marker_statistics: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) police: {\n                    Optional  (str) cir_bps: <class 'int'>,\n                    Optional  (str) pir_bps: <class 'int'>,\n                    Optional  (str) cir_bc_bytes: <class 'int'>,\n                    Optional  (str) cir_be_bytes: <class 'int'>,\n                    Optional  (str) pir_bc_bytes: <class 'int'>,\n                    Optional  (str) pir_be_bytes: <class 'int'>,\n                    Optional  (str) police_bps: <class 'int'>,\n                    Optional  (str) police_limit: <class 'int'>,\n                    Optional  (str) extended_limit: <class 'int'>,\n                    Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                    Optional  (str) conformed: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) exceeded: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) violated: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) queue_stats_for_all_priority_classes: {\n                Optional  (str) priority_level: {\n                  Any  (str) *: {\n                    Optional  (str) queueing: <class 'bool'>,\n                    Optional  (str) queue_limit_packets: <class 'str'>,\n                    Optional  (str) queue_limit_bytes: <class 'int'>,\n                    Optional  (str) queue_limit_us: <class 'int'>,\n                    Optional  (str) queue_depth: <class 'int'>,\n                    Optional  (str) total_drops: <class 'int'>,\n                    Optional  (str) no_buffer_drops: <class 'int'>,\n                    Optional  (str) pkts_output: <class 'int'>,\n                    Optional  (str) bytes_output: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) class_map: {\n            Any  (str) *: {\n              'match_evaluation': <class 'str'>,\n              'match': <class 'list'>,\n              Optional  (str) packets: <class 'int'>,\n              Optional  (str) packet_output: <class 'int'>,\n              Optional  (str) packet_drop: <class 'int'>,\n              Optional  (str) tail_random_drops: <class 'int'>,\n              Optional  (str) other_drops: <class 'int'>,\n              Optional  (str) bytes: <class 'int'>,\n              Optional  (str) queueing: <class 'bool'>,\n              Optional  (str) queue_limit_packets: <class 'str'>,\n              Optional  (str) queue_size: <class 'int'>,\n              Optional  (str) queue_limit: <class 'int'>,\n              Optional  (str) queue_limit_bytes: <class 'int'>,\n              Optional  (str) queue_limit_us: <class 'int'>,\n              Optional  (str) queue_depth: <class 'int'>,\n              Optional  (str) total_drops: <class 'int'>,\n              Optional  (str) no_buffer_drops: <class 'int'>,\n              Optional  (str) pkts_output: <class 'int'>,\n              Optional  (str) bytes_output: <class 'int'>,\n              Optional  (str) pkts_matched: <class 'int'>,\n              Optional  (str) bytes_matched: <class 'int'>,\n              Optional  (str) pkts_queued: <class 'int'>,\n              Optional  (str) bytes_queued: <class 'int'>,\n              Optional  (str) shape_type: <class 'str'>,\n              Optional  (str) shape_cir_bps: <class 'int'>,\n              Optional  (str) shape_bc_bps: <class 'int'>,\n              Optional  (str) shape_be_bps: <class 'int'>,\n              Optional  (str) target_shape_rate: <class 'int'>,\n              Optional  (str) output_queue: <class 'str'>,\n              Optional  (str) bandwidth_percent: <class 'int'>,\n              Optional  (str) bandwidth_kbps: <class 'int'>,\n              Optional  (str) bandwidth: <class 'str'>,\n              Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n              Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n              Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n              Optional  (str) priority_level: <class 'int'>,\n              Optional  (str) random_detect: {\n                Optional  (str) exp_weight_constant: <class 'str'>,\n                Optional  (str) exponential_weight: <class 'str'>,\n                Optional  (str) mean_queue_depth: <class 'int'>,\n                Optional  (str) class: {\n                  Any  (str) *: {\n                    'transmitted': <class 'str'>,\n                    'random_drop': <class 'str'>,\n                    'tail_drop': <class 'str'>,\n                    'minimum_thresh': <class 'str'>,\n                    'maximum_thresh': <class 'str'>,\n                    'mark_prob': <class 'str'>,\n                    Optional  (str) ecn_mark: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) priority: {\n                Optional  (str) percent: <class 'int'>,\n                Optional  (str) kbps: <class 'int'>,\n                Optional  (str) burst_bytes: <class 'int'>,\n                Optional  (str) exceed_drops: <class 'int'>,\n                Optional  (str) type: <class 'str'>,\n                },\n              Optional  (str) rate: {\n                Optional  (str) interval: <class 'int'>,\n                Optional  (str) offered_rate_bps: <class 'int'>,\n                Optional  (str) drop_rate_bps: <class 'int'>,\n                },\n              Optional  (str) policy: {\n                Any  (str) *: {\n                  'class': {\n                    Any  (str) *: {\n                      Optional  (str) bandwidth: <class 'int'>,\n                      Optional  (str) random_detect: {\n                        'precedence': <class 'list'>,\n                        'bytes1': <class 'list'>,\n                        'bytes2': <class 'list'>,\n                        'bytes3': <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) qos_set: {\n                Any  (str) *: {\n                  Any  (str) *: {\n                    Optional  (str) packets_marked: <class 'int'>,\n                    Optional  (str) marker_statistics: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) police: {\n                Optional  (str) cir_bps: <class 'int'>,\n                Optional  (str) pir_bps: <class 'int'>,\n                Optional  (str) cir_bc_bytes: <class 'int'>,\n                Optional  (str) cir_be_bytes: <class 'int'>,\n                Optional  (str) pir_bc_bytes: <class 'int'>,\n                Optional  (str) pir_be_bytes: <class 'int'>,\n                Optional  (str) police_bps: <class 'int'>,\n                Optional  (str) police_limit: <class 'int'>,\n                Optional  (str) extended_limit: <class 'int'>,\n                Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                Optional  (str) conformed: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) exceeded: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) violated: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) queue_stats_for_all_priority_classes: {\n            Optional  (str) priority_level: {\n              Any  (str) *: {\n                Optional  (str) queueing: <class 'bool'>,\n                Optional  (str) queue_limit_packets: <class 'str'>,\n                Optional  (str) queue_limit_bytes: <class 'int'>,\n                Optional  (str) queue_limit_us: <class 'int'>,\n                Optional  (str) queue_depth: <class 'int'>,\n                Optional  (str) total_drops: <class 'int'>,\n                Optional  (str) no_buffer_drops: <class 'int'>,\n                Optional  (str) pkts_output: <class 'int'>,\n                Optional  (str) bytes_output: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1275"}}, "show policy-map interface {interface} input": {"iosxe": {"class": "ShowPolicyMapInterfaceInput", "doc": " Parser for:\n        * 'show policy-map interface {interface} input class {class_name}'\n        * 'show policy-map interface {interface} input'\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) service_group: <class 'int'>,\n  Optional  (str) service_policy: {\n    Any  (str) *: {\n      Optional  (str) policy_name: {\n        Any  (str) *: {\n          Optional  (str) child_policy_name: {\n            Any  (str) *: {\n              Optional  (str) class_map: {\n                Any  (str) *: {\n                  'match_evaluation': <class 'str'>,\n                  'match': <class 'list'>,\n                  Optional  (str) packets: <class 'int'>,\n                  Optional  (str) packet_output: <class 'int'>,\n                  Optional  (str) packet_drop: <class 'int'>,\n                  Optional  (str) tail_random_drops: <class 'int'>,\n                  Optional  (str) other_drops: <class 'int'>,\n                  Optional  (str) bytes: <class 'int'>,\n                  Optional  (str) queueing: <class 'bool'>,\n                  Optional  (str) queue_limit_packets: <class 'str'>,\n                  Optional  (str) queue_size: <class 'int'>,\n                  Optional  (str) queue_limit: <class 'int'>,\n                  Optional  (str) queue_limit_bytes: <class 'int'>,\n                  Optional  (str) queue_limit_us: <class 'int'>,\n                  Optional  (str) queue_depth: <class 'int'>,\n                  Optional  (str) total_drops: <class 'int'>,\n                  Optional  (str) no_buffer_drops: <class 'int'>,\n                  Optional  (str) pkts_output: <class 'int'>,\n                  Optional  (str) bytes_output: <class 'int'>,\n                  Optional  (str) pkts_matched: <class 'int'>,\n                  Optional  (str) bytes_matched: <class 'int'>,\n                  Optional  (str) pkts_queued: <class 'int'>,\n                  Optional  (str) bytes_queued: <class 'int'>,\n                  Optional  (str) shape_type: <class 'str'>,\n                  Optional  (str) shape_cir_bps: <class 'int'>,\n                  Optional  (str) shape_bc_bps: <class 'int'>,\n                  Optional  (str) shape_be_bps: <class 'int'>,\n                  Optional  (str) target_shape_rate: <class 'int'>,\n                  Optional  (str) output_queue: <class 'str'>,\n                  Optional  (str) bandwidth_percent: <class 'int'>,\n                  Optional  (str) bandwidth_kbps: <class 'int'>,\n                  Optional  (str) bandwidth: <class 'str'>,\n                  Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                  Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n                  Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n                  Optional  (str) priority_level: <class 'int'>,\n                  Optional  (str) random_detect: {\n                    Optional  (str) exp_weight_constant: <class 'str'>,\n                    Optional  (str) exponential_weight: <class 'str'>,\n                    Optional  (str) mean_queue_depth: <class 'int'>,\n                    Optional  (str) class: {\n                      Any  (str) *: {\n                        'transmitted': <class 'str'>,\n                        'random_drop': <class 'str'>,\n                        'tail_drop': <class 'str'>,\n                        'minimum_thresh': <class 'str'>,\n                        'maximum_thresh': <class 'str'>,\n                        'mark_prob': <class 'str'>,\n                        Optional  (str) ecn_mark: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) priority: {\n                    Optional  (str) percent: <class 'int'>,\n                    Optional  (str) kbps: <class 'int'>,\n                    Optional  (str) burst_bytes: <class 'int'>,\n                    Optional  (str) exceed_drops: <class 'int'>,\n                    Optional  (str) type: <class 'str'>,\n                    },\n                  Optional  (str) rate: {\n                    Optional  (str) interval: <class 'int'>,\n                    Optional  (str) offered_rate_bps: <class 'int'>,\n                    Optional  (str) drop_rate_bps: <class 'int'>,\n                    },\n                  Optional  (str) policy: {\n                    Any  (str) *: {\n                      'class': {\n                        Any  (str) *: {\n                          Optional  (str) bandwidth: <class 'int'>,\n                          Optional  (str) random_detect: {\n                            'precedence': <class 'list'>,\n                            'bytes1': <class 'list'>,\n                            'bytes2': <class 'list'>,\n                            'bytes3': <class 'list'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) qos_set: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) packets_marked: <class 'int'>,\n                        Optional  (str) marker_statistics: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) police: {\n                    Optional  (str) cir_bps: <class 'int'>,\n                    Optional  (str) pir_bps: <class 'int'>,\n                    Optional  (str) cir_bc_bytes: <class 'int'>,\n                    Optional  (str) cir_be_bytes: <class 'int'>,\n                    Optional  (str) pir_bc_bytes: <class 'int'>,\n                    Optional  (str) pir_be_bytes: <class 'int'>,\n                    Optional  (str) police_bps: <class 'int'>,\n                    Optional  (str) police_limit: <class 'int'>,\n                    Optional  (str) extended_limit: <class 'int'>,\n                    Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                    Optional  (str) conformed: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) exceeded: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) violated: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) queue_stats_for_all_priority_classes: {\n                Optional  (str) priority_level: {\n                  Any  (str) *: {\n                    Optional  (str) queueing: <class 'bool'>,\n                    Optional  (str) queue_limit_packets: <class 'str'>,\n                    Optional  (str) queue_limit_bytes: <class 'int'>,\n                    Optional  (str) queue_limit_us: <class 'int'>,\n                    Optional  (str) queue_depth: <class 'int'>,\n                    Optional  (str) total_drops: <class 'int'>,\n                    Optional  (str) no_buffer_drops: <class 'int'>,\n                    Optional  (str) pkts_output: <class 'int'>,\n                    Optional  (str) bytes_output: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) class_map: {\n            Any  (str) *: {\n              'match_evaluation': <class 'str'>,\n              'match': <class 'list'>,\n              Optional  (str) packets: <class 'int'>,\n              Optional  (str) packet_output: <class 'int'>,\n              Optional  (str) packet_drop: <class 'int'>,\n              Optional  (str) tail_random_drops: <class 'int'>,\n              Optional  (str) other_drops: <class 'int'>,\n              Optional  (str) bytes: <class 'int'>,\n              Optional  (str) queueing: <class 'bool'>,\n              Optional  (str) queue_limit_packets: <class 'str'>,\n              Optional  (str) queue_size: <class 'int'>,\n              Optional  (str) queue_limit: <class 'int'>,\n              Optional  (str) queue_limit_bytes: <class 'int'>,\n              Optional  (str) queue_limit_us: <class 'int'>,\n              Optional  (str) queue_depth: <class 'int'>,\n              Optional  (str) total_drops: <class 'int'>,\n              Optional  (str) no_buffer_drops: <class 'int'>,\n              Optional  (str) pkts_output: <class 'int'>,\n              Optional  (str) bytes_output: <class 'int'>,\n              Optional  (str) pkts_matched: <class 'int'>,\n              Optional  (str) bytes_matched: <class 'int'>,\n              Optional  (str) pkts_queued: <class 'int'>,\n              Optional  (str) bytes_queued: <class 'int'>,\n              Optional  (str) shape_type: <class 'str'>,\n              Optional  (str) shape_cir_bps: <class 'int'>,\n              Optional  (str) shape_bc_bps: <class 'int'>,\n              Optional  (str) shape_be_bps: <class 'int'>,\n              Optional  (str) target_shape_rate: <class 'int'>,\n              Optional  (str) output_queue: <class 'str'>,\n              Optional  (str) bandwidth_percent: <class 'int'>,\n              Optional  (str) bandwidth_kbps: <class 'int'>,\n              Optional  (str) bandwidth: <class 'str'>,\n              Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n              Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n              Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n              Optional  (str) priority_level: <class 'int'>,\n              Optional  (str) random_detect: {\n                Optional  (str) exp_weight_constant: <class 'str'>,\n                Optional  (str) exponential_weight: <class 'str'>,\n                Optional  (str) mean_queue_depth: <class 'int'>,\n                Optional  (str) class: {\n                  Any  (str) *: {\n                    'transmitted': <class 'str'>,\n                    'random_drop': <class 'str'>,\n                    'tail_drop': <class 'str'>,\n                    'minimum_thresh': <class 'str'>,\n                    'maximum_thresh': <class 'str'>,\n                    'mark_prob': <class 'str'>,\n                    Optional  (str) ecn_mark: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) priority: {\n                Optional  (str) percent: <class 'int'>,\n                Optional  (str) kbps: <class 'int'>,\n                Optional  (str) burst_bytes: <class 'int'>,\n                Optional  (str) exceed_drops: <class 'int'>,\n                Optional  (str) type: <class 'str'>,\n                },\n              Optional  (str) rate: {\n                Optional  (str) interval: <class 'int'>,\n                Optional  (str) offered_rate_bps: <class 'int'>,\n                Optional  (str) drop_rate_bps: <class 'int'>,\n                },\n              Optional  (str) policy: {\n                Any  (str) *: {\n                  'class': {\n                    Any  (str) *: {\n                      Optional  (str) bandwidth: <class 'int'>,\n                      Optional  (str) random_detect: {\n                        'precedence': <class 'list'>,\n                        'bytes1': <class 'list'>,\n                        'bytes2': <class 'list'>,\n                        'bytes3': <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) qos_set: {\n                Any  (str) *: {\n                  Any  (str) *: {\n                    Optional  (str) packets_marked: <class 'int'>,\n                    Optional  (str) marker_statistics: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) police: {\n                Optional  (str) cir_bps: <class 'int'>,\n                Optional  (str) pir_bps: <class 'int'>,\n                Optional  (str) cir_bc_bytes: <class 'int'>,\n                Optional  (str) cir_be_bytes: <class 'int'>,\n                Optional  (str) pir_bc_bytes: <class 'int'>,\n                Optional  (str) pir_be_bytes: <class 'int'>,\n                Optional  (str) police_bps: <class 'int'>,\n                Optional  (str) police_limit: <class 'int'>,\n                Optional  (str) extended_limit: <class 'int'>,\n                Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                Optional  (str) conformed: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) exceeded: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) violated: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) queue_stats_for_all_priority_classes: {\n            Optional  (str) priority_level: {\n              Any  (str) *: {\n                Optional  (str) queueing: <class 'bool'>,\n                Optional  (str) queue_limit_packets: <class 'str'>,\n                Optional  (str) queue_limit_bytes: <class 'int'>,\n                Optional  (str) queue_limit_us: <class 'int'>,\n                Optional  (str) queue_depth: <class 'int'>,\n                Optional  (str) total_drops: <class 'int'>,\n                Optional  (str) no_buffer_drops: <class 'int'>,\n                Optional  (str) pkts_output: <class 'int'>,\n                Optional  (str) bytes_output: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map_interface_interface_input", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1308"}}, "show policy-map interface {interface} input class {class_name}": {"iosxe": {"class": "ShowPolicyMapInterfaceInput", "doc": " Parser for:\n        * 'show policy-map interface {interface} input class {class_name}'\n        * 'show policy-map interface {interface} input'\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) service_group: <class 'int'>,\n  Optional  (str) service_policy: {\n    Any  (str) *: {\n      Optional  (str) policy_name: {\n        Any  (str) *: {\n          Optional  (str) child_policy_name: {\n            Any  (str) *: {\n              Optional  (str) class_map: {\n                Any  (str) *: {\n                  'match_evaluation': <class 'str'>,\n                  'match': <class 'list'>,\n                  Optional  (str) packets: <class 'int'>,\n                  Optional  (str) packet_output: <class 'int'>,\n                  Optional  (str) packet_drop: <class 'int'>,\n                  Optional  (str) tail_random_drops: <class 'int'>,\n                  Optional  (str) other_drops: <class 'int'>,\n                  Optional  (str) bytes: <class 'int'>,\n                  Optional  (str) queueing: <class 'bool'>,\n                  Optional  (str) queue_limit_packets: <class 'str'>,\n                  Optional  (str) queue_size: <class 'int'>,\n                  Optional  (str) queue_limit: <class 'int'>,\n                  Optional  (str) queue_limit_bytes: <class 'int'>,\n                  Optional  (str) queue_limit_us: <class 'int'>,\n                  Optional  (str) queue_depth: <class 'int'>,\n                  Optional  (str) total_drops: <class 'int'>,\n                  Optional  (str) no_buffer_drops: <class 'int'>,\n                  Optional  (str) pkts_output: <class 'int'>,\n                  Optional  (str) bytes_output: <class 'int'>,\n                  Optional  (str) pkts_matched: <class 'int'>,\n                  Optional  (str) bytes_matched: <class 'int'>,\n                  Optional  (str) pkts_queued: <class 'int'>,\n                  Optional  (str) bytes_queued: <class 'int'>,\n                  Optional  (str) shape_type: <class 'str'>,\n                  Optional  (str) shape_cir_bps: <class 'int'>,\n                  Optional  (str) shape_bc_bps: <class 'int'>,\n                  Optional  (str) shape_be_bps: <class 'int'>,\n                  Optional  (str) target_shape_rate: <class 'int'>,\n                  Optional  (str) output_queue: <class 'str'>,\n                  Optional  (str) bandwidth_percent: <class 'int'>,\n                  Optional  (str) bandwidth_kbps: <class 'int'>,\n                  Optional  (str) bandwidth: <class 'str'>,\n                  Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                  Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n                  Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n                  Optional  (str) priority_level: <class 'int'>,\n                  Optional  (str) random_detect: {\n                    Optional  (str) exp_weight_constant: <class 'str'>,\n                    Optional  (str) exponential_weight: <class 'str'>,\n                    Optional  (str) mean_queue_depth: <class 'int'>,\n                    Optional  (str) class: {\n                      Any  (str) *: {\n                        'transmitted': <class 'str'>,\n                        'random_drop': <class 'str'>,\n                        'tail_drop': <class 'str'>,\n                        'minimum_thresh': <class 'str'>,\n                        'maximum_thresh': <class 'str'>,\n                        'mark_prob': <class 'str'>,\n                        Optional  (str) ecn_mark: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) priority: {\n                    Optional  (str) percent: <class 'int'>,\n                    Optional  (str) kbps: <class 'int'>,\n                    Optional  (str) burst_bytes: <class 'int'>,\n                    Optional  (str) exceed_drops: <class 'int'>,\n                    Optional  (str) type: <class 'str'>,\n                    },\n                  Optional  (str) rate: {\n                    Optional  (str) interval: <class 'int'>,\n                    Optional  (str) offered_rate_bps: <class 'int'>,\n                    Optional  (str) drop_rate_bps: <class 'int'>,\n                    },\n                  Optional  (str) policy: {\n                    Any  (str) *: {\n                      'class': {\n                        Any  (str) *: {\n                          Optional  (str) bandwidth: <class 'int'>,\n                          Optional  (str) random_detect: {\n                            'precedence': <class 'list'>,\n                            'bytes1': <class 'list'>,\n                            'bytes2': <class 'list'>,\n                            'bytes3': <class 'list'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) qos_set: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) packets_marked: <class 'int'>,\n                        Optional  (str) marker_statistics: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) police: {\n                    Optional  (str) cir_bps: <class 'int'>,\n                    Optional  (str) pir_bps: <class 'int'>,\n                    Optional  (str) cir_bc_bytes: <class 'int'>,\n                    Optional  (str) cir_be_bytes: <class 'int'>,\n                    Optional  (str) pir_bc_bytes: <class 'int'>,\n                    Optional  (str) pir_be_bytes: <class 'int'>,\n                    Optional  (str) police_bps: <class 'int'>,\n                    Optional  (str) police_limit: <class 'int'>,\n                    Optional  (str) extended_limit: <class 'int'>,\n                    Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                    Optional  (str) conformed: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) exceeded: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) violated: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) queue_stats_for_all_priority_classes: {\n                Optional  (str) priority_level: {\n                  Any  (str) *: {\n                    Optional  (str) queueing: <class 'bool'>,\n                    Optional  (str) queue_limit_packets: <class 'str'>,\n                    Optional  (str) queue_limit_bytes: <class 'int'>,\n                    Optional  (str) queue_limit_us: <class 'int'>,\n                    Optional  (str) queue_depth: <class 'int'>,\n                    Optional  (str) total_drops: <class 'int'>,\n                    Optional  (str) no_buffer_drops: <class 'int'>,\n                    Optional  (str) pkts_output: <class 'int'>,\n                    Optional  (str) bytes_output: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) class_map: {\n            Any  (str) *: {\n              'match_evaluation': <class 'str'>,\n              'match': <class 'list'>,\n              Optional  (str) packets: <class 'int'>,\n              Optional  (str) packet_output: <class 'int'>,\n              Optional  (str) packet_drop: <class 'int'>,\n              Optional  (str) tail_random_drops: <class 'int'>,\n              Optional  (str) other_drops: <class 'int'>,\n              Optional  (str) bytes: <class 'int'>,\n              Optional  (str) queueing: <class 'bool'>,\n              Optional  (str) queue_limit_packets: <class 'str'>,\n              Optional  (str) queue_size: <class 'int'>,\n              Optional  (str) queue_limit: <class 'int'>,\n              Optional  (str) queue_limit_bytes: <class 'int'>,\n              Optional  (str) queue_limit_us: <class 'int'>,\n              Optional  (str) queue_depth: <class 'int'>,\n              Optional  (str) total_drops: <class 'int'>,\n              Optional  (str) no_buffer_drops: <class 'int'>,\n              Optional  (str) pkts_output: <class 'int'>,\n              Optional  (str) bytes_output: <class 'int'>,\n              Optional  (str) pkts_matched: <class 'int'>,\n              Optional  (str) bytes_matched: <class 'int'>,\n              Optional  (str) pkts_queued: <class 'int'>,\n              Optional  (str) bytes_queued: <class 'int'>,\n              Optional  (str) shape_type: <class 'str'>,\n              Optional  (str) shape_cir_bps: <class 'int'>,\n              Optional  (str) shape_bc_bps: <class 'int'>,\n              Optional  (str) shape_be_bps: <class 'int'>,\n              Optional  (str) target_shape_rate: <class 'int'>,\n              Optional  (str) output_queue: <class 'str'>,\n              Optional  (str) bandwidth_percent: <class 'int'>,\n              Optional  (str) bandwidth_kbps: <class 'int'>,\n              Optional  (str) bandwidth: <class 'str'>,\n              Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n              Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n              Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n              Optional  (str) priority_level: <class 'int'>,\n              Optional  (str) random_detect: {\n                Optional  (str) exp_weight_constant: <class 'str'>,\n                Optional  (str) exponential_weight: <class 'str'>,\n                Optional  (str) mean_queue_depth: <class 'int'>,\n                Optional  (str) class: {\n                  Any  (str) *: {\n                    'transmitted': <class 'str'>,\n                    'random_drop': <class 'str'>,\n                    'tail_drop': <class 'str'>,\n                    'minimum_thresh': <class 'str'>,\n                    'maximum_thresh': <class 'str'>,\n                    'mark_prob': <class 'str'>,\n                    Optional  (str) ecn_mark: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) priority: {\n                Optional  (str) percent: <class 'int'>,\n                Optional  (str) kbps: <class 'int'>,\n                Optional  (str) burst_bytes: <class 'int'>,\n                Optional  (str) exceed_drops: <class 'int'>,\n                Optional  (str) type: <class 'str'>,\n                },\n              Optional  (str) rate: {\n                Optional  (str) interval: <class 'int'>,\n                Optional  (str) offered_rate_bps: <class 'int'>,\n                Optional  (str) drop_rate_bps: <class 'int'>,\n                },\n              Optional  (str) policy: {\n                Any  (str) *: {\n                  'class': {\n                    Any  (str) *: {\n                      Optional  (str) bandwidth: <class 'int'>,\n                      Optional  (str) random_detect: {\n                        'precedence': <class 'list'>,\n                        'bytes1': <class 'list'>,\n                        'bytes2': <class 'list'>,\n                        'bytes3': <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) qos_set: {\n                Any  (str) *: {\n                  Any  (str) *: {\n                    Optional  (str) packets_marked: <class 'int'>,\n                    Optional  (str) marker_statistics: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) police: {\n                Optional  (str) cir_bps: <class 'int'>,\n                Optional  (str) pir_bps: <class 'int'>,\n                Optional  (str) cir_bc_bytes: <class 'int'>,\n                Optional  (str) cir_be_bytes: <class 'int'>,\n                Optional  (str) pir_bc_bytes: <class 'int'>,\n                Optional  (str) pir_be_bytes: <class 'int'>,\n                Optional  (str) police_bps: <class 'int'>,\n                Optional  (str) police_limit: <class 'int'>,\n                Optional  (str) extended_limit: <class 'int'>,\n                Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                Optional  (str) conformed: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) exceeded: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) violated: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) queue_stats_for_all_priority_classes: {\n            Optional  (str) priority_level: {\n              Any  (str) *: {\n                Optional  (str) queueing: <class 'bool'>,\n                Optional  (str) queue_limit_packets: <class 'str'>,\n                Optional  (str) queue_limit_bytes: <class 'int'>,\n                Optional  (str) queue_limit_us: <class 'int'>,\n                Optional  (str) queue_depth: <class 'int'>,\n                Optional  (str) total_drops: <class 'int'>,\n                Optional  (str) no_buffer_drops: <class 'int'>,\n                Optional  (str) pkts_output: <class 'int'>,\n                Optional  (str) bytes_output: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map_interface_interface_input_class_class_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1308"}}, "show policy-map interface {interface} output": {"iosxe": {"class": "ShowPolicyMapInterfaceOutput", "doc": " Parser for:\n        * 'show policy-map interface {interface} output class {class_name}'\n        * 'show policy-map interface {interface} output'\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) service_group: <class 'int'>,\n  Optional  (str) service_policy: {\n    Any  (str) *: {\n      Optional  (str) policy_name: {\n        Any  (str) *: {\n          Optional  (str) child_policy_name: {\n            Any  (str) *: {\n              Optional  (str) class_map: {\n                Any  (str) *: {\n                  'match_evaluation': <class 'str'>,\n                  'match': <class 'list'>,\n                  Optional  (str) packets: <class 'int'>,\n                  Optional  (str) packet_output: <class 'int'>,\n                  Optional  (str) packet_drop: <class 'int'>,\n                  Optional  (str) tail_random_drops: <class 'int'>,\n                  Optional  (str) other_drops: <class 'int'>,\n                  Optional  (str) bytes: <class 'int'>,\n                  Optional  (str) queueing: <class 'bool'>,\n                  Optional  (str) queue_limit_packets: <class 'str'>,\n                  Optional  (str) queue_size: <class 'int'>,\n                  Optional  (str) queue_limit: <class 'int'>,\n                  Optional  (str) queue_limit_bytes: <class 'int'>,\n                  Optional  (str) queue_limit_us: <class 'int'>,\n                  Optional  (str) queue_depth: <class 'int'>,\n                  Optional  (str) total_drops: <class 'int'>,\n                  Optional  (str) no_buffer_drops: <class 'int'>,\n                  Optional  (str) pkts_output: <class 'int'>,\n                  Optional  (str) bytes_output: <class 'int'>,\n                  Optional  (str) pkts_matched: <class 'int'>,\n                  Optional  (str) bytes_matched: <class 'int'>,\n                  Optional  (str) pkts_queued: <class 'int'>,\n                  Optional  (str) bytes_queued: <class 'int'>,\n                  Optional  (str) shape_type: <class 'str'>,\n                  Optional  (str) shape_cir_bps: <class 'int'>,\n                  Optional  (str) shape_bc_bps: <class 'int'>,\n                  Optional  (str) shape_be_bps: <class 'int'>,\n                  Optional  (str) target_shape_rate: <class 'int'>,\n                  Optional  (str) output_queue: <class 'str'>,\n                  Optional  (str) bandwidth_percent: <class 'int'>,\n                  Optional  (str) bandwidth_kbps: <class 'int'>,\n                  Optional  (str) bandwidth: <class 'str'>,\n                  Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                  Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n                  Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n                  Optional  (str) priority_level: <class 'int'>,\n                  Optional  (str) random_detect: {\n                    Optional  (str) exp_weight_constant: <class 'str'>,\n                    Optional  (str) exponential_weight: <class 'str'>,\n                    Optional  (str) mean_queue_depth: <class 'int'>,\n                    Optional  (str) class: {\n                      Any  (str) *: {\n                        'transmitted': <class 'str'>,\n                        'random_drop': <class 'str'>,\n                        'tail_drop': <class 'str'>,\n                        'minimum_thresh': <class 'str'>,\n                        'maximum_thresh': <class 'str'>,\n                        'mark_prob': <class 'str'>,\n                        Optional  (str) ecn_mark: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) priority: {\n                    Optional  (str) percent: <class 'int'>,\n                    Optional  (str) kbps: <class 'int'>,\n                    Optional  (str) burst_bytes: <class 'int'>,\n                    Optional  (str) exceed_drops: <class 'int'>,\n                    Optional  (str) type: <class 'str'>,\n                    },\n                  Optional  (str) rate: {\n                    Optional  (str) interval: <class 'int'>,\n                    Optional  (str) offered_rate_bps: <class 'int'>,\n                    Optional  (str) drop_rate_bps: <class 'int'>,\n                    },\n                  Optional  (str) policy: {\n                    Any  (str) *: {\n                      'class': {\n                        Any  (str) *: {\n                          Optional  (str) bandwidth: <class 'int'>,\n                          Optional  (str) random_detect: {\n                            'precedence': <class 'list'>,\n                            'bytes1': <class 'list'>,\n                            'bytes2': <class 'list'>,\n                            'bytes3': <class 'list'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) qos_set: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) packets_marked: <class 'int'>,\n                        Optional  (str) marker_statistics: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) police: {\n                    Optional  (str) cir_bps: <class 'int'>,\n                    Optional  (str) pir_bps: <class 'int'>,\n                    Optional  (str) cir_bc_bytes: <class 'int'>,\n                    Optional  (str) cir_be_bytes: <class 'int'>,\n                    Optional  (str) pir_bc_bytes: <class 'int'>,\n                    Optional  (str) pir_be_bytes: <class 'int'>,\n                    Optional  (str) police_bps: <class 'int'>,\n                    Optional  (str) police_limit: <class 'int'>,\n                    Optional  (str) extended_limit: <class 'int'>,\n                    Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                    Optional  (str) conformed: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) exceeded: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) violated: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) queue_stats_for_all_priority_classes: {\n                Optional  (str) priority_level: {\n                  Any  (str) *: {\n                    Optional  (str) queueing: <class 'bool'>,\n                    Optional  (str) queue_limit_packets: <class 'str'>,\n                    Optional  (str) queue_limit_bytes: <class 'int'>,\n                    Optional  (str) queue_limit_us: <class 'int'>,\n                    Optional  (str) queue_depth: <class 'int'>,\n                    Optional  (str) total_drops: <class 'int'>,\n                    Optional  (str) no_buffer_drops: <class 'int'>,\n                    Optional  (str) pkts_output: <class 'int'>,\n                    Optional  (str) bytes_output: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) class_map: {\n            Any  (str) *: {\n              'match_evaluation': <class 'str'>,\n              'match': <class 'list'>,\n              Optional  (str) packets: <class 'int'>,\n              Optional  (str) packet_output: <class 'int'>,\n              Optional  (str) packet_drop: <class 'int'>,\n              Optional  (str) tail_random_drops: <class 'int'>,\n              Optional  (str) other_drops: <class 'int'>,\n              Optional  (str) bytes: <class 'int'>,\n              Optional  (str) queueing: <class 'bool'>,\n              Optional  (str) queue_limit_packets: <class 'str'>,\n              Optional  (str) queue_size: <class 'int'>,\n              Optional  (str) queue_limit: <class 'int'>,\n              Optional  (str) queue_limit_bytes: <class 'int'>,\n              Optional  (str) queue_limit_us: <class 'int'>,\n              Optional  (str) queue_depth: <class 'int'>,\n              Optional  (str) total_drops: <class 'int'>,\n              Optional  (str) no_buffer_drops: <class 'int'>,\n              Optional  (str) pkts_output: <class 'int'>,\n              Optional  (str) bytes_output: <class 'int'>,\n              Optional  (str) pkts_matched: <class 'int'>,\n              Optional  (str) bytes_matched: <class 'int'>,\n              Optional  (str) pkts_queued: <class 'int'>,\n              Optional  (str) bytes_queued: <class 'int'>,\n              Optional  (str) shape_type: <class 'str'>,\n              Optional  (str) shape_cir_bps: <class 'int'>,\n              Optional  (str) shape_bc_bps: <class 'int'>,\n              Optional  (str) shape_be_bps: <class 'int'>,\n              Optional  (str) target_shape_rate: <class 'int'>,\n              Optional  (str) output_queue: <class 'str'>,\n              Optional  (str) bandwidth_percent: <class 'int'>,\n              Optional  (str) bandwidth_kbps: <class 'int'>,\n              Optional  (str) bandwidth: <class 'str'>,\n              Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n              Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n              Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n              Optional  (str) priority_level: <class 'int'>,\n              Optional  (str) random_detect: {\n                Optional  (str) exp_weight_constant: <class 'str'>,\n                Optional  (str) exponential_weight: <class 'str'>,\n                Optional  (str) mean_queue_depth: <class 'int'>,\n                Optional  (str) class: {\n                  Any  (str) *: {\n                    'transmitted': <class 'str'>,\n                    'random_drop': <class 'str'>,\n                    'tail_drop': <class 'str'>,\n                    'minimum_thresh': <class 'str'>,\n                    'maximum_thresh': <class 'str'>,\n                    'mark_prob': <class 'str'>,\n                    Optional  (str) ecn_mark: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) priority: {\n                Optional  (str) percent: <class 'int'>,\n                Optional  (str) kbps: <class 'int'>,\n                Optional  (str) burst_bytes: <class 'int'>,\n                Optional  (str) exceed_drops: <class 'int'>,\n                Optional  (str) type: <class 'str'>,\n                },\n              Optional  (str) rate: {\n                Optional  (str) interval: <class 'int'>,\n                Optional  (str) offered_rate_bps: <class 'int'>,\n                Optional  (str) drop_rate_bps: <class 'int'>,\n                },\n              Optional  (str) policy: {\n                Any  (str) *: {\n                  'class': {\n                    Any  (str) *: {\n                      Optional  (str) bandwidth: <class 'int'>,\n                      Optional  (str) random_detect: {\n                        'precedence': <class 'list'>,\n                        'bytes1': <class 'list'>,\n                        'bytes2': <class 'list'>,\n                        'bytes3': <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) qos_set: {\n                Any  (str) *: {\n                  Any  (str) *: {\n                    Optional  (str) packets_marked: <class 'int'>,\n                    Optional  (str) marker_statistics: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) police: {\n                Optional  (str) cir_bps: <class 'int'>,\n                Optional  (str) pir_bps: <class 'int'>,\n                Optional  (str) cir_bc_bytes: <class 'int'>,\n                Optional  (str) cir_be_bytes: <class 'int'>,\n                Optional  (str) pir_bc_bytes: <class 'int'>,\n                Optional  (str) pir_be_bytes: <class 'int'>,\n                Optional  (str) police_bps: <class 'int'>,\n                Optional  (str) police_limit: <class 'int'>,\n                Optional  (str) extended_limit: <class 'int'>,\n                Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                Optional  (str) conformed: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) exceeded: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) violated: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) queue_stats_for_all_priority_classes: {\n            Optional  (str) priority_level: {\n              Any  (str) *: {\n                Optional  (str) queueing: <class 'bool'>,\n                Optional  (str) queue_limit_packets: <class 'str'>,\n                Optional  (str) queue_limit_bytes: <class 'int'>,\n                Optional  (str) queue_limit_us: <class 'int'>,\n                Optional  (str) queue_depth: <class 'int'>,\n                Optional  (str) total_drops: <class 'int'>,\n                Optional  (str) no_buffer_drops: <class 'int'>,\n                Optional  (str) pkts_output: <class 'int'>,\n                Optional  (str) bytes_output: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map_interface_interface_output", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1341"}}, "show policy-map interface {interface} output class {class_name}": {"iosxe": {"class": "ShowPolicyMapInterfaceOutput", "doc": " Parser for:\n        * 'show policy-map interface {interface} output class {class_name}'\n        * 'show policy-map interface {interface} output'\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) service_group: <class 'int'>,\n  Optional  (str) service_policy: {\n    Any  (str) *: {\n      Optional  (str) policy_name: {\n        Any  (str) *: {\n          Optional  (str) child_policy_name: {\n            Any  (str) *: {\n              Optional  (str) class_map: {\n                Any  (str) *: {\n                  'match_evaluation': <class 'str'>,\n                  'match': <class 'list'>,\n                  Optional  (str) packets: <class 'int'>,\n                  Optional  (str) packet_output: <class 'int'>,\n                  Optional  (str) packet_drop: <class 'int'>,\n                  Optional  (str) tail_random_drops: <class 'int'>,\n                  Optional  (str) other_drops: <class 'int'>,\n                  Optional  (str) bytes: <class 'int'>,\n                  Optional  (str) queueing: <class 'bool'>,\n                  Optional  (str) queue_limit_packets: <class 'str'>,\n                  Optional  (str) queue_size: <class 'int'>,\n                  Optional  (str) queue_limit: <class 'int'>,\n                  Optional  (str) queue_limit_bytes: <class 'int'>,\n                  Optional  (str) queue_limit_us: <class 'int'>,\n                  Optional  (str) queue_depth: <class 'int'>,\n                  Optional  (str) total_drops: <class 'int'>,\n                  Optional  (str) no_buffer_drops: <class 'int'>,\n                  Optional  (str) pkts_output: <class 'int'>,\n                  Optional  (str) bytes_output: <class 'int'>,\n                  Optional  (str) pkts_matched: <class 'int'>,\n                  Optional  (str) bytes_matched: <class 'int'>,\n                  Optional  (str) pkts_queued: <class 'int'>,\n                  Optional  (str) bytes_queued: <class 'int'>,\n                  Optional  (str) shape_type: <class 'str'>,\n                  Optional  (str) shape_cir_bps: <class 'int'>,\n                  Optional  (str) shape_bc_bps: <class 'int'>,\n                  Optional  (str) shape_be_bps: <class 'int'>,\n                  Optional  (str) target_shape_rate: <class 'int'>,\n                  Optional  (str) output_queue: <class 'str'>,\n                  Optional  (str) bandwidth_percent: <class 'int'>,\n                  Optional  (str) bandwidth_kbps: <class 'int'>,\n                  Optional  (str) bandwidth: <class 'str'>,\n                  Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                  Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n                  Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n                  Optional  (str) priority_level: <class 'int'>,\n                  Optional  (str) random_detect: {\n                    Optional  (str) exp_weight_constant: <class 'str'>,\n                    Optional  (str) exponential_weight: <class 'str'>,\n                    Optional  (str) mean_queue_depth: <class 'int'>,\n                    Optional  (str) class: {\n                      Any  (str) *: {\n                        'transmitted': <class 'str'>,\n                        'random_drop': <class 'str'>,\n                        'tail_drop': <class 'str'>,\n                        'minimum_thresh': <class 'str'>,\n                        'maximum_thresh': <class 'str'>,\n                        'mark_prob': <class 'str'>,\n                        Optional  (str) ecn_mark: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) priority: {\n                    Optional  (str) percent: <class 'int'>,\n                    Optional  (str) kbps: <class 'int'>,\n                    Optional  (str) burst_bytes: <class 'int'>,\n                    Optional  (str) exceed_drops: <class 'int'>,\n                    Optional  (str) type: <class 'str'>,\n                    },\n                  Optional  (str) rate: {\n                    Optional  (str) interval: <class 'int'>,\n                    Optional  (str) offered_rate_bps: <class 'int'>,\n                    Optional  (str) drop_rate_bps: <class 'int'>,\n                    },\n                  Optional  (str) policy: {\n                    Any  (str) *: {\n                      'class': {\n                        Any  (str) *: {\n                          Optional  (str) bandwidth: <class 'int'>,\n                          Optional  (str) random_detect: {\n                            'precedence': <class 'list'>,\n                            'bytes1': <class 'list'>,\n                            'bytes2': <class 'list'>,\n                            'bytes3': <class 'list'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) qos_set: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) packets_marked: <class 'int'>,\n                        Optional  (str) marker_statistics: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) police: {\n                    Optional  (str) cir_bps: <class 'int'>,\n                    Optional  (str) pir_bps: <class 'int'>,\n                    Optional  (str) cir_bc_bytes: <class 'int'>,\n                    Optional  (str) cir_be_bytes: <class 'int'>,\n                    Optional  (str) pir_bc_bytes: <class 'int'>,\n                    Optional  (str) pir_be_bytes: <class 'int'>,\n                    Optional  (str) police_bps: <class 'int'>,\n                    Optional  (str) police_limit: <class 'int'>,\n                    Optional  (str) extended_limit: <class 'int'>,\n                    Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                    Optional  (str) conformed: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) exceeded: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) violated: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) queue_stats_for_all_priority_classes: {\n                Optional  (str) priority_level: {\n                  Any  (str) *: {\n                    Optional  (str) queueing: <class 'bool'>,\n                    Optional  (str) queue_limit_packets: <class 'str'>,\n                    Optional  (str) queue_limit_bytes: <class 'int'>,\n                    Optional  (str) queue_limit_us: <class 'int'>,\n                    Optional  (str) queue_depth: <class 'int'>,\n                    Optional  (str) total_drops: <class 'int'>,\n                    Optional  (str) no_buffer_drops: <class 'int'>,\n                    Optional  (str) pkts_output: <class 'int'>,\n                    Optional  (str) bytes_output: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) class_map: {\n            Any  (str) *: {\n              'match_evaluation': <class 'str'>,\n              'match': <class 'list'>,\n              Optional  (str) packets: <class 'int'>,\n              Optional  (str) packet_output: <class 'int'>,\n              Optional  (str) packet_drop: <class 'int'>,\n              Optional  (str) tail_random_drops: <class 'int'>,\n              Optional  (str) other_drops: <class 'int'>,\n              Optional  (str) bytes: <class 'int'>,\n              Optional  (str) queueing: <class 'bool'>,\n              Optional  (str) queue_limit_packets: <class 'str'>,\n              Optional  (str) queue_size: <class 'int'>,\n              Optional  (str) queue_limit: <class 'int'>,\n              Optional  (str) queue_limit_bytes: <class 'int'>,\n              Optional  (str) queue_limit_us: <class 'int'>,\n              Optional  (str) queue_depth: <class 'int'>,\n              Optional  (str) total_drops: <class 'int'>,\n              Optional  (str) no_buffer_drops: <class 'int'>,\n              Optional  (str) pkts_output: <class 'int'>,\n              Optional  (str) bytes_output: <class 'int'>,\n              Optional  (str) pkts_matched: <class 'int'>,\n              Optional  (str) bytes_matched: <class 'int'>,\n              Optional  (str) pkts_queued: <class 'int'>,\n              Optional  (str) bytes_queued: <class 'int'>,\n              Optional  (str) shape_type: <class 'str'>,\n              Optional  (str) shape_cir_bps: <class 'int'>,\n              Optional  (str) shape_bc_bps: <class 'int'>,\n              Optional  (str) shape_be_bps: <class 'int'>,\n              Optional  (str) target_shape_rate: <class 'int'>,\n              Optional  (str) output_queue: <class 'str'>,\n              Optional  (str) bandwidth_percent: <class 'int'>,\n              Optional  (str) bandwidth_kbps: <class 'int'>,\n              Optional  (str) bandwidth: <class 'str'>,\n              Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n              Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n              Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n              Optional  (str) priority_level: <class 'int'>,\n              Optional  (str) random_detect: {\n                Optional  (str) exp_weight_constant: <class 'str'>,\n                Optional  (str) exponential_weight: <class 'str'>,\n                Optional  (str) mean_queue_depth: <class 'int'>,\n                Optional  (str) class: {\n                  Any  (str) *: {\n                    'transmitted': <class 'str'>,\n                    'random_drop': <class 'str'>,\n                    'tail_drop': <class 'str'>,\n                    'minimum_thresh': <class 'str'>,\n                    'maximum_thresh': <class 'str'>,\n                    'mark_prob': <class 'str'>,\n                    Optional  (str) ecn_mark: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) priority: {\n                Optional  (str) percent: <class 'int'>,\n                Optional  (str) kbps: <class 'int'>,\n                Optional  (str) burst_bytes: <class 'int'>,\n                Optional  (str) exceed_drops: <class 'int'>,\n                Optional  (str) type: <class 'str'>,\n                },\n              Optional  (str) rate: {\n                Optional  (str) interval: <class 'int'>,\n                Optional  (str) offered_rate_bps: <class 'int'>,\n                Optional  (str) drop_rate_bps: <class 'int'>,\n                },\n              Optional  (str) policy: {\n                Any  (str) *: {\n                  'class': {\n                    Any  (str) *: {\n                      Optional  (str) bandwidth: <class 'int'>,\n                      Optional  (str) random_detect: {\n                        'precedence': <class 'list'>,\n                        'bytes1': <class 'list'>,\n                        'bytes2': <class 'list'>,\n                        'bytes3': <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) qos_set: {\n                Any  (str) *: {\n                  Any  (str) *: {\n                    Optional  (str) packets_marked: <class 'int'>,\n                    Optional  (str) marker_statistics: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) police: {\n                Optional  (str) cir_bps: <class 'int'>,\n                Optional  (str) pir_bps: <class 'int'>,\n                Optional  (str) cir_bc_bytes: <class 'int'>,\n                Optional  (str) cir_be_bytes: <class 'int'>,\n                Optional  (str) pir_bc_bytes: <class 'int'>,\n                Optional  (str) pir_be_bytes: <class 'int'>,\n                Optional  (str) police_bps: <class 'int'>,\n                Optional  (str) police_limit: <class 'int'>,\n                Optional  (str) extended_limit: <class 'int'>,\n                Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                Optional  (str) conformed: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) exceeded: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) violated: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) queue_stats_for_all_priority_classes: {\n            Optional  (str) priority_level: {\n              Any  (str) *: {\n                Optional  (str) queueing: <class 'bool'>,\n                Optional  (str) queue_limit_packets: <class 'str'>,\n                Optional  (str) queue_limit_bytes: <class 'int'>,\n                Optional  (str) queue_limit_us: <class 'int'>,\n                Optional  (str) queue_depth: <class 'int'>,\n                Optional  (str) total_drops: <class 'int'>,\n                Optional  (str) no_buffer_drops: <class 'int'>,\n                Optional  (str) pkts_output: <class 'int'>,\n                Optional  (str) bytes_output: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map_interface_interface_output_class_class_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1341"}}, "show policy-map target service-group {num}": {"iosxe": {"class": "ShowPolicyMapTargetClass", "doc": " Parser for:\n        * 'show policy-map target service-group {num}'\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) service_group: <class 'int'>,\n  Optional  (str) service_policy: {\n    Any  (str) *: {\n      Optional  (str) policy_name: {\n        Any  (str) *: {\n          Optional  (str) child_policy_name: {\n            Any  (str) *: {\n              Optional  (str) class_map: {\n                Any  (str) *: {\n                  'match_evaluation': <class 'str'>,\n                  'match': <class 'list'>,\n                  Optional  (str) packets: <class 'int'>,\n                  Optional  (str) packet_output: <class 'int'>,\n                  Optional  (str) packet_drop: <class 'int'>,\n                  Optional  (str) tail_random_drops: <class 'int'>,\n                  Optional  (str) other_drops: <class 'int'>,\n                  Optional  (str) bytes: <class 'int'>,\n                  Optional  (str) queueing: <class 'bool'>,\n                  Optional  (str) queue_limit_packets: <class 'str'>,\n                  Optional  (str) queue_size: <class 'int'>,\n                  Optional  (str) queue_limit: <class 'int'>,\n                  Optional  (str) queue_limit_bytes: <class 'int'>,\n                  Optional  (str) queue_limit_us: <class 'int'>,\n                  Optional  (str) queue_depth: <class 'int'>,\n                  Optional  (str) total_drops: <class 'int'>,\n                  Optional  (str) no_buffer_drops: <class 'int'>,\n                  Optional  (str) pkts_output: <class 'int'>,\n                  Optional  (str) bytes_output: <class 'int'>,\n                  Optional  (str) pkts_matched: <class 'int'>,\n                  Optional  (str) bytes_matched: <class 'int'>,\n                  Optional  (str) pkts_queued: <class 'int'>,\n                  Optional  (str) bytes_queued: <class 'int'>,\n                  Optional  (str) shape_type: <class 'str'>,\n                  Optional  (str) shape_cir_bps: <class 'int'>,\n                  Optional  (str) shape_bc_bps: <class 'int'>,\n                  Optional  (str) shape_be_bps: <class 'int'>,\n                  Optional  (str) target_shape_rate: <class 'int'>,\n                  Optional  (str) output_queue: <class 'str'>,\n                  Optional  (str) bandwidth_percent: <class 'int'>,\n                  Optional  (str) bandwidth_kbps: <class 'int'>,\n                  Optional  (str) bandwidth: <class 'str'>,\n                  Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                  Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n                  Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n                  Optional  (str) priority_level: <class 'int'>,\n                  Optional  (str) random_detect: {\n                    Optional  (str) exp_weight_constant: <class 'str'>,\n                    Optional  (str) exponential_weight: <class 'str'>,\n                    Optional  (str) mean_queue_depth: <class 'int'>,\n                    Optional  (str) class: {\n                      Any  (str) *: {\n                        'transmitted': <class 'str'>,\n                        'random_drop': <class 'str'>,\n                        'tail_drop': <class 'str'>,\n                        'minimum_thresh': <class 'str'>,\n                        'maximum_thresh': <class 'str'>,\n                        'mark_prob': <class 'str'>,\n                        Optional  (str) ecn_mark: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) priority: {\n                    Optional  (str) percent: <class 'int'>,\n                    Optional  (str) kbps: <class 'int'>,\n                    Optional  (str) burst_bytes: <class 'int'>,\n                    Optional  (str) exceed_drops: <class 'int'>,\n                    Optional  (str) type: <class 'str'>,\n                    },\n                  Optional  (str) rate: {\n                    Optional  (str) interval: <class 'int'>,\n                    Optional  (str) offered_rate_bps: <class 'int'>,\n                    Optional  (str) drop_rate_bps: <class 'int'>,\n                    },\n                  Optional  (str) policy: {\n                    Any  (str) *: {\n                      'class': {\n                        Any  (str) *: {\n                          Optional  (str) bandwidth: <class 'int'>,\n                          Optional  (str) random_detect: {\n                            'precedence': <class 'list'>,\n                            'bytes1': <class 'list'>,\n                            'bytes2': <class 'list'>,\n                            'bytes3': <class 'list'>,\n                            },\n                          },\n                        },\n                      },\n                    },\n                  Optional  (str) qos_set: {\n                    Any  (str) *: {\n                      Any  (str) *: {\n                        Optional  (str) packets_marked: <class 'int'>,\n                        Optional  (str) marker_statistics: <class 'str'>,\n                        },\n                      },\n                    },\n                  Optional  (str) police: {\n                    Optional  (str) cir_bps: <class 'int'>,\n                    Optional  (str) pir_bps: <class 'int'>,\n                    Optional  (str) cir_bc_bytes: <class 'int'>,\n                    Optional  (str) cir_be_bytes: <class 'int'>,\n                    Optional  (str) pir_bc_bytes: <class 'int'>,\n                    Optional  (str) pir_be_bytes: <class 'int'>,\n                    Optional  (str) police_bps: <class 'int'>,\n                    Optional  (str) police_limit: <class 'int'>,\n                    Optional  (str) extended_limit: <class 'int'>,\n                    Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                    Optional  (str) conformed: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) exceeded: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    Optional  (str) violated: {\n                      'packets': <class 'int'>,\n                      'bytes': <class 'int'>,\n                      'bps': <class 'int'>,\n                      Optional  (str) actions: {\n                        Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) queue_stats_for_all_priority_classes: {\n                Optional  (str) priority_level: {\n                  Any  (str) *: {\n                    Optional  (str) queueing: <class 'bool'>,\n                    Optional  (str) queue_limit_packets: <class 'str'>,\n                    Optional  (str) queue_limit_bytes: <class 'int'>,\n                    Optional  (str) queue_limit_us: <class 'int'>,\n                    Optional  (str) queue_depth: <class 'int'>,\n                    Optional  (str) total_drops: <class 'int'>,\n                    Optional  (str) no_buffer_drops: <class 'int'>,\n                    Optional  (str) pkts_output: <class 'int'>,\n                    Optional  (str) bytes_output: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) class_map: {\n            Any  (str) *: {\n              'match_evaluation': <class 'str'>,\n              'match': <class 'list'>,\n              Optional  (str) packets: <class 'int'>,\n              Optional  (str) packet_output: <class 'int'>,\n              Optional  (str) packet_drop: <class 'int'>,\n              Optional  (str) tail_random_drops: <class 'int'>,\n              Optional  (str) other_drops: <class 'int'>,\n              Optional  (str) bytes: <class 'int'>,\n              Optional  (str) queueing: <class 'bool'>,\n              Optional  (str) queue_limit_packets: <class 'str'>,\n              Optional  (str) queue_size: <class 'int'>,\n              Optional  (str) queue_limit: <class 'int'>,\n              Optional  (str) queue_limit_bytes: <class 'int'>,\n              Optional  (str) queue_limit_us: <class 'int'>,\n              Optional  (str) queue_depth: <class 'int'>,\n              Optional  (str) total_drops: <class 'int'>,\n              Optional  (str) no_buffer_drops: <class 'int'>,\n              Optional  (str) pkts_output: <class 'int'>,\n              Optional  (str) bytes_output: <class 'int'>,\n              Optional  (str) pkts_matched: <class 'int'>,\n              Optional  (str) bytes_matched: <class 'int'>,\n              Optional  (str) pkts_queued: <class 'int'>,\n              Optional  (str) bytes_queued: <class 'int'>,\n              Optional  (str) shape_type: <class 'str'>,\n              Optional  (str) shape_cir_bps: <class 'int'>,\n              Optional  (str) shape_bc_bps: <class 'int'>,\n              Optional  (str) shape_be_bps: <class 'int'>,\n              Optional  (str) target_shape_rate: <class 'int'>,\n              Optional  (str) output_queue: <class 'str'>,\n              Optional  (str) bandwidth_percent: <class 'int'>,\n              Optional  (str) bandwidth_kbps: <class 'int'>,\n              Optional  (str) bandwidth: <class 'str'>,\n              Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n              Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n              Optional  (str) bandwidth_max_threshold_packets: <class 'int'>,\n              Optional  (str) priority_level: <class 'int'>,\n              Optional  (str) random_detect: {\n                Optional  (str) exp_weight_constant: <class 'str'>,\n                Optional  (str) exponential_weight: <class 'str'>,\n                Optional  (str) mean_queue_depth: <class 'int'>,\n                Optional  (str) class: {\n                  Any  (str) *: {\n                    'transmitted': <class 'str'>,\n                    'random_drop': <class 'str'>,\n                    'tail_drop': <class 'str'>,\n                    'minimum_thresh': <class 'str'>,\n                    'maximum_thresh': <class 'str'>,\n                    'mark_prob': <class 'str'>,\n                    Optional  (str) ecn_mark: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) priority: {\n                Optional  (str) percent: <class 'int'>,\n                Optional  (str) kbps: <class 'int'>,\n                Optional  (str) burst_bytes: <class 'int'>,\n                Optional  (str) exceed_drops: <class 'int'>,\n                Optional  (str) type: <class 'str'>,\n                },\n              Optional  (str) rate: {\n                Optional  (str) interval: <class 'int'>,\n                Optional  (str) offered_rate_bps: <class 'int'>,\n                Optional  (str) drop_rate_bps: <class 'int'>,\n                },\n              Optional  (str) policy: {\n                Any  (str) *: {\n                  'class': {\n                    Any  (str) *: {\n                      Optional  (str) bandwidth: <class 'int'>,\n                      Optional  (str) random_detect: {\n                        'precedence': <class 'list'>,\n                        'bytes1': <class 'list'>,\n                        'bytes2': <class 'list'>,\n                        'bytes3': <class 'list'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              Optional  (str) qos_set: {\n                Any  (str) *: {\n                  Any  (str) *: {\n                    Optional  (str) packets_marked: <class 'int'>,\n                    Optional  (str) marker_statistics: <class 'str'>,\n                    },\n                  },\n                },\n              Optional  (str) police: {\n                Optional  (str) cir_bps: <class 'int'>,\n                Optional  (str) pir_bps: <class 'int'>,\n                Optional  (str) cir_bc_bytes: <class 'int'>,\n                Optional  (str) cir_be_bytes: <class 'int'>,\n                Optional  (str) pir_bc_bytes: <class 'int'>,\n                Optional  (str) pir_be_bytes: <class 'int'>,\n                Optional  (str) police_bps: <class 'int'>,\n                Optional  (str) police_limit: <class 'int'>,\n                Optional  (str) extended_limit: <class 'int'>,\n                Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n                Optional  (str) conformed: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) exceeded: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                Optional  (str) violated: {\n                  'packets': <class 'int'>,\n                  'bytes': <class 'int'>,\n                  'bps': <class 'int'>,\n                  Optional  (str) actions: {\n                    Any  (str) *: Or (<class 'bool'>, <class 'str'>),\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) queue_stats_for_all_priority_classes: {\n            Optional  (str) priority_level: {\n              Any  (str) *: {\n                Optional  (str) queueing: <class 'bool'>,\n                Optional  (str) queue_limit_packets: <class 'str'>,\n                Optional  (str) queue_limit_bytes: <class 'int'>,\n                Optional  (str) queue_limit_us: <class 'int'>,\n                Optional  (str) queue_depth: <class 'int'>,\n                Optional  (str) total_drops: <class 'int'>,\n                Optional  (str) no_buffer_drops: <class 'int'>,\n                Optional  (str) pkts_output: <class 'int'>,\n                Optional  (str) bytes_output: <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map_target_service-group_num", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1401"}}, "show policy-map {name}": {"iosxe": {"class": "ShowPolicyMap", "doc": " Parser for\n        * \"show policy-map\"\n        * \"show policy-map {name}\"\n    ", "module_name": "show_policy_map", "package": "genie.libs.parser", "schema": "{\n'policy_map': {\n  Any  (str) *: {\n    'class': {\n      Any  (str) *: {\n        Optional  (str) priority_level: {\n          Any  (str) *: {\n            'kbps': <class 'int'>,\n            },\n          },\n        Optional  (str) police: {\n          Optional  (str) rate_pps: <class 'int'>,\n          Optional  (str) cir_bps: <class 'int'>,\n          Optional  (str) cir_bc_bytes: <class 'int'>,\n          Optional  (str) cir_be_bytes: <class 'int'>,\n          Optional  (str) conform_color: <class 'str'>,\n          Optional  (str) conform_action: <class 'list'>,\n          Optional  (str) exceed_action: <class 'list'>,\n          Optional  (str) violate_action: <class 'list'>,\n          Optional  (str) service_policy: <class 'str'>,\n          Optional  (str) conform_burst: <class 'int'>,\n          Optional  (str) pir: <class 'int'>,\n          Optional  (str) pir_bc_bytes: <class 'int'>,\n          Optional  (str) pir_be_bytes: <class 'int'>,\n          Optional  (str) peak_burst: <class 'int'>,\n          Optional  (str) cir_percent: <class 'int'>,\n          Optional  (str) bc_ms: <class 'int'>,\n          Optional  (str) pir_percent: <class 'int'>,\n          Optional  (str) be_ms: <class 'int'>,\n          },\n        Optional  (str) queue_limit_ms: <class 'int'>,\n        Optional  (str) queue_limit_packets: <class 'int'>,\n        Optional  (str) service_policy: <class 'str'>,\n        Optional  (str) bandwidth_kbps: <class 'int'>,\n        Optional  (str) bandwidth: <class 'int'>,\n        Optional  (str) bandwidth_remaining_percent: <class 'int'>,\n        Optional  (str) bandwidth_remaining_ratio: <class 'int'>,\n        Optional  (str) shape_average_min: <class 'int'>,\n        Optional  (str) set: <class 'str'>,\n        Optional  (str) conform_burst: <class 'int'>,\n        Optional  (str) priority: <class 'bool'>,\n        Optional  (str) priority_kbps: <class 'int'>,\n        Optional  (str) priority_levels: <class 'int'>,\n        Optional  (str) peak_burst: <class 'int'>,\n        Optional  (str) average_rate_traffic_shaping: <class 'bool'>,\n        Optional  (str) adaptive_rate_traffic_shaping: <class 'bool'>,\n        Optional  (str) cir_percent: <class 'int'>,\n        Optional  (str) bc_msec: <class 'int'>,\n        Optional  (str) be_msec: <class 'int'>,\n        Optional  (str) be_bits: <class 'int'>,\n        Optional  (str) bc_bits: <class 'int'>,\n        Optional  (str) cir_bps: <class 'int'>,\n        Optional  (str) cir_upper_bound_bps: <class 'int'>,\n        Optional  (str) cir_lower_bound_bps: <class 'int'>,\n        Optional  (str) random_detect: {\n          Optional  (str) exponential_weight: <class 'int'>,\n          Optional  (str) bandwidth_percent: <class 'int'>,\n          Optional  (str) wred_type: <class 'str'>,\n          Optional  (str) class_val: {\n            Any  (str) *: {\n              'min_threshold': <class 'str'>,\n              'max_threshold': <class 'str'>,\n              'mark_probability': <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) weighted_fair_queueing: {\n          'bandwidth_percent': <class 'int'>,\n          'exponential_weight': <class 'int'>,\n          'explicit_congestion_notification': <class 'bool'>,\n          'class_val': {\n            Any  (str) *: {\n              'min_threshold': <class 'str'>,\n              'max_threshold': <class 'str'>,\n              'mark_probability': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_policy-map_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_policy_map.py#L1519"}}, "show port-channel database": {"nxos": {"class": "ShowPortChannelDatabase", "doc": "parser show post-channel database", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'last_update_success': <class 'bool'>,\n    'total_ports': <class 'int'>,\n    'up_ports': <class 'int'>,\n    'port_channel_age': <class 'str'>,\n    'time_last_bundle': <class 'str'>,\n    'last_bundled_member': <class 'str'>,\n    Optional  (str) first_oper_port: <class 'str'>,\n    Optional  (str) time_last_unbundle: <class 'str'>,\n    Optional  (str) last_unbundled_member: <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'activity': <class 'str'>,\n        'status': <class 'str'>,\n        'is_first_oper_port': <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_port-channel_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lag.py#L394"}}, "show port-channel summary": {"nxos": {"class": "ShowPortChannelSummary", "doc": "parser for: show port-channel summary", "module_name": "show_lag", "package": "genie.libs.parser", "schema": "{\n'interfaces': {\n  Any  (str) *: {\n    'bundle_id': <class 'int'>,\n    'oper_status': <class 'str'>,\n    'layer': <class 'str'>,\n    'protocol': <class 'str'>,\n    'type': <class 'str'>,\n    'members': {\n      Any  (str) *: {\n        'flags': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_port-channel_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_lag.py#L307"}}, "show power inline {interface}": {"ios": {"class": "ShowPowerInlineInterface", "doc": "Parser for show power inline <interface>", "module_name": "show_power", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'admin_state': <class 'str'>,\n    'oper_state': <class 'str'>,\n    'power': <class 'float'>,\n    Optional  (str) device: <class 'str'>,\n    Optional  (str) class: <class 'str'>,\n    'max': <class 'float'>,\n    },\n  },\n}", "uid": "show_power_inline_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_power.py#L13"}, "iosxe": {"class": "ShowPowerInlineInterface", "doc": "Parser for show power inline <interface>", "module_name": "show_power", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'admin_state': <class 'str'>,\n    'oper_state': <class 'str'>,\n    'power': <class 'float'>,\n    Optional  (str) device: <class 'str'>,\n    Optional  (str) class: <class 'str'>,\n    'max': <class 'float'>,\n    },\n  },\n}", "uid": "show_power_inline_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_power.py#L99"}}, "show processes": {"iosxr": {"class": "ShowProcesses", "doc": " Parser for:\n        * 'show processes'\n        * 'show processes {process}'\n    ", "module_name": "show_processes", "package": "genie.libs.parser", "schema": "{\n'job_id': {\n  Any  (str) *: {\n    Optional  (str) pid: <class 'int'>,\n    Optional  (str) process_name: <class 'str'>,\n    Optional  (str) executable_path: <class 'str'>,\n    Optional  (str) instance: <class 'str'>,\n    Optional  (str) version_id: <class 'str'>,\n    Optional  (str) respawn: <class 'str'>,\n    Optional  (str) respawn_count: <class 'int'>,\n    Optional  (str) last_started: <class 'str'>,\n    Optional  (str) process_state: <class 'str'>,\n    Optional  (str) package_state: <class 'str'>,\n    Optional  (str) started_on_config: <class 'str'>,\n    Optional  (str) process_group: <class 'str'>,\n    Optional  (str) core: <class 'str'>,\n    Optional  (str) registered_item: <class 'str'>,\n    Optional  (str) max_core: <class 'int'>,\n    Optional  (str) placement: <class 'str'>,\n    Optional  (str) startup_path: <class 'str'>,\n    Optional  (str) ready: <class 'str'>,\n    Optional  (str) available: <class 'str'>,\n    Optional  (str) process_cpu_time: {\n      'user': <class 'float'>,\n      'kernel': <class 'float'>,\n      'total': <class 'float'>,\n      },\n    Optional  (str) tid: {\n      Any  (str) *: {\n        'stack': <class 'str'>,\n        'pri': <class 'int'>,\n        'state': <class 'str'>,\n        'name': <class 'str'>,\n        'rt_pri': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_processes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_processes.py#L58"}, "nxos": {"class": "ShowProcesses", "doc": "Parser for show processes <process>", "module_name": "show_process", "package": "genie.libs.parser", "schema": "{\n'process': {\n  Any  (str) *: {\n    Optional  (str) pid: {\n      Any  (str) *: {\n        'pid': <class 'int'>,\n        'state': <class 'str'>,\n        Optional  (str) pc: <class 'str'>,\n        'start_cnt': <class 'int'>,\n        Optional  (str) tty: <class 'int'>,\n        'type': <class 'str'>,\n        'process': <class 'str'>,\n        },\n      },\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) start_cnt: <class 'int'>,\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) process: <class 'str'>,\n    },\n  },\n}", "uid": "show_processes", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_process.py#L42"}}, "show processes cpu": {"ios": {"class": "ShowProcessesCpu", "doc": "Parser for show processes cpu\n                  show processes cpu | include <WORD>", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) five_sec_cpu_interrupts: <class 'int'>,\nOptional  (str) five_sec_cpu_total: <class 'int'>,\nOptional  (str) one_min_cpu: <class 'int'>,\nOptional  (str) five_min_cpu: <class 'int'>,\nOptional  (str) zero_cpu_processes: <class 'list'>,\nOptional  (str) nonzero_cpu_processes: <class 'list'>,\nOptional  (str) sort: {\n  Any  (str) *: {\n    'runtime': <class 'int'>,\n    'invoked': <class 'int'>,\n    'usecs': <class 'int'>,\n    'five_sec_cpu': <class 'float'>,\n    'one_min_cpu': <class 'float'>,\n    'five_min_cpu': <class 'float'>,\n    'tty': <class 'int'>,\n    'pid': <class 'int'>,\n    'process': <class 'str'>,\n    },\n  },\n}", "uid": "show_processes_cpu", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L482"}, "iosxe": {"class": "ShowProcessesCpu", "doc": "Parser for show processes cpu\n                  show processes cpu | include <WORD>", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) five_sec_cpu_interrupts: <class 'int'>,\nOptional  (str) five_sec_cpu_total: <class 'int'>,\nOptional  (str) one_min_cpu: <class 'int'>,\nOptional  (str) five_min_cpu: <class 'int'>,\nOptional  (str) zero_cpu_processes: <class 'list'>,\nOptional  (str) nonzero_cpu_processes: <class 'list'>,\nOptional  (str) sort: {\n  Any  (str) *: {\n    'runtime': <class 'int'>,\n    'invoked': <class 'int'>,\n    'usecs': <class 'int'>,\n    'five_sec_cpu': <class 'float'>,\n    'one_min_cpu': <class 'float'>,\n    'five_min_cpu': <class 'float'>,\n    'tty': <class 'int'>,\n    'pid': <class 'int'>,\n    'process': <class 'str'>,\n    },\n  },\n}", "uid": "show_processes_cpu", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3397"}}, "show processes cpu history": {"ios": {"class": "ShowProcessesCpuHistory", "doc": "Parser for show processes cpu history", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'60s': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n'60m': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n'72h': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n}", "uid": "show_processes_cpu_history", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L504"}, "iosxe": {"class": "ShowProcessesCpuHistory", "doc": "Parser for show processes cpu history", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'60s': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n'60m': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n'72h': {\n  Any  (str) *: {\n    'maximum': <class 'int'>,\n    Optional  (str) average: <class 'int'>,\n    },\n  },\n}", "uid": "show_processes_cpu_history", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L5322"}}, "show processes cpu platform": {"ios": {"class": "ShowProcessesCpuPlatform", "doc": "Parser for show processes cpu platform", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'cpu_utilization': {\n  'cpu_util_five_secs': <class 'str'>,\n  'cpu_util_one_min': <class 'str'>,\n  'cpu_util_five_min': <class 'str'>,\n  Optional  (str) core: {\n    Any  (str) *: {\n      'core_cpu_util_five_secs': <class 'str'>,\n      'core_cpu_util_one_min': <class 'str'>,\n      'core_cpu_util_five_min': <class 'str'>,\n      },\n    },\n  },\n'pid': {\n  Any  (str) *: {\n    'ppid': <class 'int'>,\n    'five_sec': <class 'str'>,\n    'one_min': <class 'str'>,\n    'five_min': <class 'str'>,\n    'status': <class 'str'>,\n    'size': <class 'int'>,\n    'name': <class 'str'>,\n    },\n  },\n}", "uid": "show_processes_cpu_platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L509"}, "iosxe": {"class": "ShowProcessesCpuPlatform", "doc": "Parser for show processes cpu platform", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'cpu_utilization': {\n  'cpu_util_five_secs': <class 'str'>,\n  'cpu_util_one_min': <class 'str'>,\n  'cpu_util_five_min': <class 'str'>,\n  Optional  (str) core: {\n    Any  (str) *: {\n      'core_cpu_util_five_secs': <class 'str'>,\n      'core_cpu_util_one_min': <class 'str'>,\n      'core_cpu_util_five_min': <class 'str'>,\n      },\n    },\n  },\n'pid': {\n  Any  (str) *: {\n    'ppid': <class 'int'>,\n    'five_sec': <class 'str'>,\n    'one_min': <class 'str'>,\n    'five_min': <class 'str'>,\n    'status': <class 'str'>,\n    'size': <class 'int'>,\n    'name': <class 'str'>,\n    },\n  },\n}", "uid": "show_processes_cpu_platform", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3229"}}, "show processes cpu sorted": {"ios": {"class": "ShowProcessesCpuSorted", "doc": "Parser for show processes cpu sorted\n                  show processes cpu sorted <1min|5min|5sec>\n                  show processes cpu sorted | include <WORD>\n                  show processes cpu sorted <1min|5min|5sec> | include <WORD>\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) five_sec_cpu_interrupts: <class 'int'>,\nOptional  (str) five_sec_cpu_total: <class 'int'>,\nOptional  (str) one_min_cpu: <class 'int'>,\nOptional  (str) five_min_cpu: <class 'int'>,\nOptional  (str) zero_cpu_processes: <class 'list'>,\nOptional  (str) nonzero_cpu_processes: <class 'list'>,\nOptional  (str) sort: {\n  Any  (str) *: {\n    'runtime': <class 'int'>,\n    'invoked': <class 'int'>,\n    'usecs': <class 'int'>,\n    'five_sec_cpu': <class 'float'>,\n    'one_min_cpu': <class 'float'>,\n    'five_min_cpu': <class 'float'>,\n    'tty': <class 'int'>,\n    'pid': <class 'int'>,\n    'process': <class 'str'>,\n    },\n  },\n}", "uid": "show_processes_cpu_sorted", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L473"}, "iosxe": {"class": "ShowProcessesCpuSorted", "doc": "Parser for show processes cpu sorted\n                  show processes cpu sorted <1min|5min|5sec>\n                  show processes cpu sorted | include <WORD>\n                  show processes cpu sorted <1min|5min|5sec> | include <WORD>", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\nOptional  (str) five_sec_cpu_interrupts: <class 'int'>,\nOptional  (str) five_sec_cpu_total: <class 'int'>,\nOptional  (str) one_min_cpu: <class 'int'>,\nOptional  (str) five_min_cpu: <class 'int'>,\nOptional  (str) zero_cpu_processes: <class 'list'>,\nOptional  (str) nonzero_cpu_processes: <class 'list'>,\nOptional  (str) sort: {\n  Any  (str) *: {\n    'runtime': <class 'int'>,\n    'invoked': <class 'int'>,\n    'usecs': <class 'int'>,\n    'five_sec_cpu': <class 'float'>,\n    'one_min_cpu': <class 'float'>,\n    'five_min_cpu': <class 'float'>,\n    'tty': <class 'int'>,\n    'pid': <class 'int'>,\n    'process': <class 'str'>,\n    },\n  },\n}", "uid": "show_processes_cpu_sorted", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3124"}}, "show processes memory": {"iosxe": {"class": "ShowProcessesMemory", "doc": null, "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'processor_pool': {\n  'total': <class 'int'>,\n  'used': <class 'int'>,\n  'free': <class 'int'>,\n  },\n'reserve_p_pool': {\n  'total': <class 'int'>,\n  'used': <class 'int'>,\n  'free': <class 'int'>,\n  },\n'lsmi_io_pool': {\n  'total': <class 'int'>,\n  'used': <class 'int'>,\n  'free': <class 'int'>,\n  },\nOptional  (str) pid: {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'pid': <class 'int'>,\n        'tty': <class 'int'>,\n        'allocated': <class 'int'>,\n        'freed': <class 'int'>,\n        'holding': <class 'int'>,\n        'getbufs': <class 'int'>,\n        'retbufs': <class 'int'>,\n        'process': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_processes_memory", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L5462"}}, "show processes memory platform sorted": {"iosxe": {"class": "ShowProcessesMemoryPlatformSorted", "doc": " Parser for \"show processes memory platform sorted\" ", "module_name": "show_processes", "package": "genie.libs.parser", "schema": "{\n'system_memory': {\n  Optional  (str) total: <class 'str'>,\n  Optional  (str) used: <class 'str'>,\n  Optional  (str) free: <class 'str'>,\n  Optional  (str) lowest: <class 'str'>,\n  'per_process_memory': {\n    Any  (str) *: {\n      'pid': <class 'int'>,\n      'text': <class 'int'>,\n      'data': <class 'int'>,\n      'stack': <class 'int'>,\n      'dynamic': <class 'int'>,\n      'RSS': <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_processes_memory_platform_sorted", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_processes.py#L43"}}, "show processes memory sorted": {"iosxe": {"class": "ShowProcessesMemorySorted", "doc": null, "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'processor_pool': {\n  'total': <class 'int'>,\n  'used': <class 'int'>,\n  'free': <class 'int'>,\n  },\n'reserve_p_pool': {\n  'total': <class 'int'>,\n  'used': <class 'int'>,\n  'free': <class 'int'>,\n  },\n'lsmi_io_pool': {\n  'total': <class 'int'>,\n  'used': <class 'int'>,\n  'free': <class 'int'>,\n  },\n'per_process_memory': {\n  Any  (str) *: {\n    'pid': <class 'int'>,\n    'tty': <class 'int'>,\n    'allocated': <class 'int'>,\n    'freed': <class 'int'>,\n    'holding': <class 'int'>,\n    'getbufs': <class 'int'>,\n    'retbufs': <class 'int'>,\n    },\n  },\n}", "uid": "show_processes_memory_sorted", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L5714"}}, "show processes memory | include {include}": {"iosxe": {"class": "ShowProcessesMemory", "doc": null, "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'processor_pool': {\n  'total': <class 'int'>,\n  'used': <class 'int'>,\n  'free': <class 'int'>,\n  },\n'reserve_p_pool': {\n  'total': <class 'int'>,\n  'used': <class 'int'>,\n  'free': <class 'int'>,\n  },\n'lsmi_io_pool': {\n  'total': <class 'int'>,\n  'used': <class 'int'>,\n  'free': <class 'int'>,\n  },\nOptional  (str) pid: {\n  Any  (str) *: {\n    'index': {\n      Any  (str) *: {\n        'pid': <class 'int'>,\n        'tty': <class 'int'>,\n        'allocated': <class 'int'>,\n        'freed': <class 'int'>,\n        'holding': <class 'int'>,\n        'getbufs': <class 'int'>,\n        'retbufs': <class 'int'>,\n        'process': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_processes_memory___include_include", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L5462"}}, "show processes {process}": {"iosxr": {"class": "ShowProcesses", "doc": " Parser for:\n        * 'show processes'\n        * 'show processes {process}'\n    ", "module_name": "show_processes", "package": "genie.libs.parser", "schema": "{\n'job_id': {\n  Any  (str) *: {\n    Optional  (str) pid: <class 'int'>,\n    Optional  (str) process_name: <class 'str'>,\n    Optional  (str) executable_path: <class 'str'>,\n    Optional  (str) instance: <class 'str'>,\n    Optional  (str) version_id: <class 'str'>,\n    Optional  (str) respawn: <class 'str'>,\n    Optional  (str) respawn_count: <class 'int'>,\n    Optional  (str) last_started: <class 'str'>,\n    Optional  (str) process_state: <class 'str'>,\n    Optional  (str) package_state: <class 'str'>,\n    Optional  (str) started_on_config: <class 'str'>,\n    Optional  (str) process_group: <class 'str'>,\n    Optional  (str) core: <class 'str'>,\n    Optional  (str) registered_item: <class 'str'>,\n    Optional  (str) max_core: <class 'int'>,\n    Optional  (str) placement: <class 'str'>,\n    Optional  (str) startup_path: <class 'str'>,\n    Optional  (str) ready: <class 'str'>,\n    Optional  (str) available: <class 'str'>,\n    Optional  (str) process_cpu_time: {\n      'user': <class 'float'>,\n      'kernel': <class 'float'>,\n      'total': <class 'float'>,\n      },\n    Optional  (str) tid: {\n      Any  (str) *: {\n        'stack': <class 'str'>,\n        'pri': <class 'int'>,\n        'state': <class 'str'>,\n        'name': <class 'str'>,\n        'rt_pri': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_processes_process", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_processes.py#L58"}}, "show processes | include {process}": {"nxos": {"class": "ShowProcesses", "doc": "Parser for show processes <process>", "module_name": "show_process", "package": "genie.libs.parser", "schema": "{\n'process': {\n  Any  (str) *: {\n    Optional  (str) pid: {\n      Any  (str) *: {\n        'pid': <class 'int'>,\n        'state': <class 'str'>,\n        Optional  (str) pc: <class 'str'>,\n        'start_cnt': <class 'int'>,\n        Optional  (str) tty: <class 'int'>,\n        'type': <class 'str'>,\n        'process': <class 'str'>,\n        },\n      },\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) start_cnt: <class 'int'>,\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) process: <class 'str'>,\n    },\n  },\n}", "uid": "show_processes___include_process", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_process.py#L42"}}, "show protocols afi-all all": {"iosxr": {"class": "ShowProtocolsAfiAllAll", "doc": "Parser for show protocols afi-all all", "module_name": "show_protocol", "package": "genie.libs.parser", "schema": "{\n'protocols': {\n  Optional  (str) ospf: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                Optional  (str) preference: {\n                  Optional  (str) single_value: {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'intra_area': <class 'int'>,\n                        'inter_area': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                Optional  (str) nsf: <class 'bool'>,\n                Optional  (str) redistribution: {\n                  Optional  (str) connected: {\n                    'enabled': <class 'bool'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  Optional  (str) static: {\n                    'enabled': <class 'bool'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  Optional  (str) bgp: {\n                    'bgp_id': <class 'int'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  Optional  (str) ospf: {\n                    'ospf_id': <class 'int'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  Optional  (str) isis: {\n                    'isis_pid': <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  },\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    'interfaces': <class 'list'>,\n                    Optional  (str) mpls: {\n                      Optional  (str) te: {\n                        Optional  (str) enable: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) ospfv3: {\n    'vrf': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'instance': {\n              Any  (str) *: {\n                Optional  (str) preference: {\n                  Optional  (str) single_value: {\n                    'all': <class 'int'>,\n                    },\n                  Optional  (str) multi_values: {\n                    'granularity': {\n                      'detail': {\n                        'intra_area': <class 'int'>,\n                        'inter_area': <class 'int'>,\n                        },\n                      },\n                    'external': <class 'int'>,\n                    },\n                  },\n                'router_id': <class 'str'>,\n                Optional  (str) nsf: <class 'bool'>,\n                Optional  (str) redistribution: {\n                  Optional  (str) connected: {\n                    'enabled': <class 'bool'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  Optional  (str) static: {\n                    'enabled': <class 'bool'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  Optional  (str) bgp: {\n                    'bgp_id': <class 'int'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  Optional  (str) ospf: {\n                    'ospf_id': <class 'int'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  Optional  (str) isis: {\n                    'isis_pid': <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    },\n                  },\n                Optional  (str) areas: {\n                  Any  (str) *: {\n                    'interfaces': <class 'list'>,\n                    Optional  (str) mpls: {\n                      Optional  (str) te: {\n                        Optional  (str) enable: <class 'bool'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) bgp: {\n    'bgp_pid': <class 'int'>,\n    Optional  (str) nsr: {\n      'enable': <class 'bool'>,\n      'current_state': <class 'str'>,\n      },\n    Optional  (str) graceful_restart: {\n      'enable': <class 'bool'>,\n      },\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) distance: {\n          Optional  (str) external: <class 'int'>,\n          Optional  (str) internal: <class 'int'>,\n          Optional  (str) local: <class 'int'>,\n          },\n        Optional  (str) sourced_networks: <class 'list'>,\n        Optional  (str) neighbors: {\n          Any  (str) *: {\n            'last_update': <class 'str'>,\n            'gr_enable': <class 'str'>,\n            'nsr_state': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_protocols_afi-all_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_protocol.py#L159"}}, "show redundancy": {"ios": {"c7600": {"class": "ShowRedundancy", "doc": "\n    Parser for command:\n        * show redundancy\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'red_sys_info': {\n  'available_system_uptime': <class 'str'>,\n  'switchovers_system_experienced': <class 'str'>,\n  'standby_failures': <class 'str'>,\n  'last_switchover_reason': <class 'str'>,\n  'hw_mode': <class 'str'>,\n  'conf_red_mode': <class 'str'>,\n  'oper_red_mode': <class 'str'>,\n  'maint_mode': <class 'str'>,\n  'communications': <class 'str'>,\n  Optional  (str) communications_reason: <class 'str'>,\n  },\n'slot': {\n  Any  (str) *: {\n    'curr_sw_state': <class 'str'>,\n    'uptime_in_curr_state': <class 'str'>,\n    'image_ver': <class 'str'>,\n    Optional  (str) os: <class 'str'>,\n    Optional  (str) platform: <class 'str'>,\n    Optional  (str) image_id: <class 'str'>,\n    Optional  (str) version: <class 'str'>,\n    Optional  (str) boot: <class 'str'>,\n    Optional  (str) config_file: <class 'str'>,\n    Optional  (str) bootldr: <class 'str'>,\n    'config_register': <class 'str'>,\n    'compiled_by': <class 'str'>,\n    'compiled_date': <class 'str'>,\n    },\n  },\n}", "uid": "show_redundancy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py#L29"}, "cat6k": {"class": "ShowRedundancy", "doc": "\n    Parser for command:\n        * show redundancy\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'red_sys_info': {\n  'available_system_uptime': <class 'str'>,\n  'switchovers_system_experienced': <class 'str'>,\n  'standby_failures': <class 'str'>,\n  'last_switchover_reason': <class 'str'>,\n  'hw_mode': <class 'str'>,\n  'conf_red_mode': <class 'str'>,\n  'oper_red_mode': <class 'str'>,\n  'maint_mode': <class 'str'>,\n  'communications': <class 'str'>,\n  Optional  (str) communications_reason: <class 'str'>,\n  },\n'slot': {\n  Any  (str) *: {\n    'curr_sw_state': <class 'str'>,\n    'uptime_in_curr_state': <class 'str'>,\n    'image_ver': <class 'str'>,\n    Optional  (str) os: <class 'str'>,\n    Optional  (str) platform: <class 'str'>,\n    Optional  (str) image_id: <class 'str'>,\n    Optional  (str) version: <class 'str'>,\n    Optional  (str) boot: <class 'str'>,\n    Optional  (str) config_file: <class 'str'>,\n    Optional  (str) bootldr: <class 'str'>,\n    'config_register': <class 'str'>,\n    'compiled_by': <class 'str'>,\n    'compiled_date': <class 'str'>,\n    },\n  },\n}", "uid": "show_redundancy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py#L560"}, "class": "ShowRedundancy", "doc": "Parser for show redundancy\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'red_sys_info': {\n  'available_system_uptime': <class 'str'>,\n  'switchovers_system_experienced': <class 'str'>,\n  'standby_failures': <class 'str'>,\n  'last_switchover_reason': <class 'str'>,\n  'hw_mode': <class 'str'>,\n  Optional  (str) conf_red_mode: <class 'str'>,\n  Optional  (str) oper_red_mode: <class 'str'>,\n  'maint_mode': <class 'str'>,\n  'communications': <class 'str'>,\n  Optional  (str) communications_reason: <class 'str'>,\n  },\n'slot': {\n  Any  (str) *: {\n    'curr_sw_state': <class 'str'>,\n    'uptime_in_curr_state': <class 'str'>,\n    'image_ver': <class 'str'>,\n    Optional  (str) boot: <class 'str'>,\n    Optional  (str) config_file: <class 'str'>,\n    Optional  (str) bootldr: <class 'str'>,\n    'config_register': <class 'str'>,\n    },\n  },\n}", "uid": "show_redundancy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L100"}, "iosxe": {"c9500": {"class": "ShowRedundancy", "doc": "Parser for show redundancy", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'red_sys_info': {\n  'available_system_uptime': <class 'str'>,\n  'switchovers_system_experienced': <class 'str'>,\n  'standby_failures': <class 'str'>,\n  'last_switchover_reason': <class 'str'>,\n  'hw_mode': <class 'str'>,\n  'conf_red_mode': <class 'str'>,\n  'oper_red_mode': <class 'str'>,\n  'maint_mode': <class 'str'>,\n  'communications': <class 'str'>,\n  Optional  (str) communications_reason: <class 'str'>,\n  },\n'slot': {\n  Any  (str) *: {\n    'curr_sw_state': <class 'str'>,\n    'uptime_in_curr_state': <class 'str'>,\n    'image_ver': <class 'str'>,\n    Optional  (str) boot: <class 'str'>,\n    'config_register': <class 'str'>,\n    'compiled_by': <class 'str'>,\n    'compiled_date': <class 'str'>,\n    },\n  },\n}", "uid": "show_redundancy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_platform.py#L498"}, "class": "ShowRedundancy", "doc": "Parser for show redundancy\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'red_sys_info': {\n  'available_system_uptime': <class 'str'>,\n  'switchovers_system_experienced': <class 'str'>,\n  'standby_failures': <class 'str'>,\n  'last_switchover_reason': <class 'str'>,\n  'hw_mode': <class 'str'>,\n  'conf_red_mode': <class 'str'>,\n  'oper_red_mode': <class 'str'>,\n  'maint_mode': <class 'str'>,\n  'communications': <class 'str'>,\n  Optional  (str) communications_reason: <class 'str'>,\n  },\n'slot': {\n  Any  (str) *: {\n    'curr_sw_state': <class 'str'>,\n    'uptime_in_curr_state': <class 'str'>,\n    'image_ver': <class 'str'>,\n    Optional  (str) boot: <class 'str'>,\n    Optional  (str) config_file: <class 'str'>,\n    Optional  (str) bootldr: <class 'str'>,\n    'config_register': <class 'str'>,\n    },\n  },\n}", "uid": "show_redundancy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1251"}, "iosxr": {"class": "ShowRedundancy", "doc": "Parser for show redundancy", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'node': {\n  Any  (str) *: {\n    'role': <class 'str'>,\n    Optional  (str) valid_partner: <class 'str'>,\n    Optional  (str) ready: <class 'str'>,\n    Optional  (str) group: {\n      Any  (str) *: {\n        'primary': <class 'str'>,\n        'backup': <class 'str'>,\n        'status': <class 'str'>,\n        },\n      },\n    Optional  (str) primary_rmf_state: <class 'str'>,\n    Optional  (str) primary_rmf_state_reason: <class 'str'>,\n    'last_reload_timestamp': <class 'str'>,\n    'time_since_last_reload': <class 'str'>,\n    'node_uptime': <class 'str'>,\n    'node_uptime_timestamp': <class 'str'>,\n    'node_uptime_in_seconds': <class 'int'>,\n    Optional  (str) standby_node: <class 'str'>,\n    Optional  (str) backup_process: <class 'str'>,\n    Optional  (str) last_switchover_timepstamp: <class 'str'>,\n    Optional  (str) time_since_last_switchover: <class 'str'>,\n    Optional  (str) standby_node_timestamp: <class 'str'>,\n    Optional  (str) time_since_standby_boot: <class 'str'>,\n    Optional  (str) standby_node_not_ready: <class 'str'>,\n    Optional  (str) time_since_standby_node_not_ready: <class 'str'>,\n    Optional  (str) standby_node_ready: <class 'str'>,\n    Optional  (str) time_since_standby_node_ready: <class 'str'>,\n    Optional  (str) reload_cause: <class 'str'>,\n    },\n  },\n}", "uid": "show_redundancy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L1231"}}, "show redundancy states": {"iosxe": {"class": "ShowRedundancyStates", "doc": " Parser for show redundancy states ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'my_state': <class 'str'>,\n'peer_state': <class 'str'>,\n'mode': <class 'str'>,\n'unit': <class 'str'>,\n'unit_id': <class 'int'>,\n'redundancy_mode_operational': <class 'str'>,\n'redundancy_mode_configured': <class 'str'>,\n'redundancy_state': <class 'str'>,\nOptional  (str) maintenance_mode: <class 'str'>,\n'manual_swact': <class 'str'>,\nOptional  (str) manual_swact_reason: <class 'str'>,\n'communications': <class 'str'>,\nOptional  (str) communications_reason: <class 'str'>,\n'client_count': <class 'int'>,\n'client_notification_tmr_msec': <class 'int'>,\n'rf_debug_mask': <class 'str'>,\n}", "uid": "show_redundancy_states", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L1462"}}, "show redundancy status": {"nxos": {"class": "ShowSystemRedundancyStatus", "doc": "Parser for show system redundancy status", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'redundancy_mode': {\n  'administrative': <class 'str'>,\n  'operational': <class 'str'>,\n  },\nAny  (str) *: {\n  'redundancy_state': <class 'str'>,\n  Optional  (str) supervisor_state: <class 'str'>,\n  Optional  (str) internal_state: <class 'str'>,\n  },\nOptional  (str) system_start_time: <class 'str'>,\nOptional  (str) system_uptime: <class 'str'>,\nOptional  (str) kernel_uptime: <class 'str'>,\nOptional  (str) active_supervisor_time: <class 'str'>,\n}", "uid": "show_redundancy_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L664"}}, "show redundancy summary": {"iosxr": {"class": "ShowRedundancySummary", "doc": "Parser for show redundancy summary", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'node': {\n  Any  (str) *: {\n    'type': <class 'str'>,\n    Optional  (str) standby_node: <class 'str'>,\n    Optional  (str) backup_node: <class 'str'>,\n    Optional  (str) node_detail: <class 'str'>,\n    },\n  },\nOptional  (str) redundancy_communication: <class 'bool'>,\n}", "uid": "show_redundancy_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L1096"}}, "show resource usage": {"asa": {"class": "ShowResourceUsage", "doc": "Parser for\n        * show resource usage\n    ", "module_name": "show_resource", "package": "genie.libs.parser", "schema": "{\n'context': {\n  Any  (str) *: {\n    'resource': {\n      Any  (str) *: {\n        'current': <class 'int'>,\n        'peak': <class 'int'>,\n        Optional  (str) limit: <class 'int'>,\n        'denied': <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_resource_usage", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_resource.py#L40"}}, "show rip": {"iosxr": {"class": "ShowRip", "doc": "Parser for:\n        show rip\n        show rip vrf {vrf}", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'active': <class 'str'>,\n            'added_to_socket': <class 'str'>,\n            'out_of_memory_state': <class 'str'>,\n            'version': <class 'int'>,\n            'default_metric': <class 'str'>,\n            'maximum_paths': <class 'int'>,\n            'auto_summarize': <class 'str'>,\n            'broadcast_for_v2': <class 'str'>,\n            'packet_source_validation': <class 'str'>,\n            'nsf': <class 'str'>,\n            'timers': {\n              'until_next_update': <class 'int'>,\n              'update_interval': <class 'int'>,\n              'invalid_interval': <class 'int'>,\n              'holddown_interval': <class 'int'>,\n              'flush_interval': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_rip", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rip.py#L70"}}, "show rip database": {"iosxr": {"class": "ShowRipDatabase", "doc": "Parser for:\n        show rip database\n        show rip vrf {vrf} database", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    Optional  (str) summary_type: <class 'str'>,\n                    Optional  (str) up_time: <class 'str'>,\n                    Optional  (str) inactive: <class 'bool'>,\n                    Optional  (str) distance: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_rip_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rip.py#L518"}}, "show rip interface": {"iosxr": {"class": "ShowRipInterface", "doc": "Parser for:\n        show rip interface\n        show rip vrf {vrf} interface", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'interfaces': {\n              Any  (str) *: {\n                'authentication': {\n                  'auth_key_chain': {\n                    'key_chain': <class 'str'>,\n                    },\n                  'auth_key': {\n                    'crypto_algorithm': <class 'str'>,\n                    },\n                  },\n                'cost': <class 'int'>,\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'address': <class 'str'>,\n                    'uptime': <class 'int'>,\n                    'version': <class 'int'>,\n                    'packets_discarded': <class 'int'>,\n                    'routes_discarded': <class 'int'>,\n                    },\n                  },\n                'out_of_memory_state': <class 'str'>,\n                'broadcast_for_v2': <class 'bool'>,\n                'accept_metric_0': <class 'bool'>,\n                'receive_versions': <class 'int'>,\n                'send_versions': <class 'int'>,\n                'oper_status': <class 'str'>,\n                'address': <class 'str'>,\n                'passive': <class 'bool'>,\n                'split_horizon': <class 'bool'>,\n                'poison_reverse': <class 'bool'>,\n                'socket_set': {\n                  'multicast_group': <class 'bool'>,\n                  'lpts_filter': <class 'bool'>,\n                  },\n                'statistics': {\n                  'total_packets_received': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_rip_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rip.py#L704"}}, "show rip statistics": {"iosxr": {"class": "ShowRipStatistics", "doc": "Parser for:\n        show rip statistics\n        show rip vrf {vrf} statistics", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'statistics': {\n              'total_messages_sent': <class 'int'>,\n              'message_send_failures': <class 'int'>,\n              'regular_updates_sent': <class 'int'>,\n              'queries_responsed_to': <class 'int'>,\n              'rib_updates': <class 'int'>,\n              'total_packets_received': <class 'int'>,\n              'packets_discarded': <class 'int'>,\n              'routes_discarded': <class 'int'>,\n              Optional  (str) packets_received_at_standby: <class 'int'>,\n              'routes_allocated': <class 'int'>,\n              'paths_allocated': <class 'int'>,\n              'route_malloc_failures': <class 'int'>,\n              'path_malloc_failures': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_rip_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rip.py#L302"}}, "show rip vrf {vrf}": {"iosxr": {"class": "ShowRip", "doc": "Parser for:\n        show rip\n        show rip vrf {vrf}", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'active': <class 'str'>,\n            'added_to_socket': <class 'str'>,\n            'out_of_memory_state': <class 'str'>,\n            'version': <class 'int'>,\n            'default_metric': <class 'str'>,\n            'maximum_paths': <class 'int'>,\n            'auto_summarize': <class 'str'>,\n            'broadcast_for_v2': <class 'str'>,\n            'packet_source_validation': <class 'str'>,\n            'nsf': <class 'str'>,\n            'timers': {\n              'until_next_update': <class 'int'>,\n              'update_interval': <class 'int'>,\n              'invalid_interval': <class 'int'>,\n              'holddown_interval': <class 'int'>,\n              'flush_interval': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_rip_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rip.py#L70"}}, "show rip vrf {vrf} database": {"iosxr": {"class": "ShowRipDatabase", "doc": "Parser for:\n        show rip database\n        show rip vrf {vrf} database", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'routes': {\n              Any  (str) *: {\n                'index': {\n                  Any  (str) *: {\n                    Optional  (str) route_type: <class 'str'>,\n                    Optional  (str) metric: <class 'int'>,\n                    Optional  (str) interface: <class 'str'>,\n                    Optional  (str) next_hop: <class 'str'>,\n                    Optional  (str) redistributed: <class 'bool'>,\n                    Optional  (str) summary_type: <class 'str'>,\n                    Optional  (str) up_time: <class 'str'>,\n                    Optional  (str) inactive: <class 'bool'>,\n                    Optional  (str) distance: <class 'int'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_rip_vrf_vrf_database", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rip.py#L518"}}, "show rip vrf {vrf} interface": {"iosxr": {"class": "ShowRipInterface", "doc": "Parser for:\n        show rip interface\n        show rip vrf {vrf} interface", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'interfaces': {\n              Any  (str) *: {\n                'authentication': {\n                  'auth_key_chain': {\n                    'key_chain': <class 'str'>,\n                    },\n                  'auth_key': {\n                    'crypto_algorithm': <class 'str'>,\n                    },\n                  },\n                'cost': <class 'int'>,\n                Optional  (str) neighbors: {\n                  Any  (str) *: {\n                    'address': <class 'str'>,\n                    'uptime': <class 'int'>,\n                    'version': <class 'int'>,\n                    'packets_discarded': <class 'int'>,\n                    'routes_discarded': <class 'int'>,\n                    },\n                  },\n                'out_of_memory_state': <class 'str'>,\n                'broadcast_for_v2': <class 'bool'>,\n                'accept_metric_0': <class 'bool'>,\n                'receive_versions': <class 'int'>,\n                'send_versions': <class 'int'>,\n                'oper_status': <class 'str'>,\n                'address': <class 'str'>,\n                'passive': <class 'bool'>,\n                'split_horizon': <class 'bool'>,\n                'poison_reverse': <class 'bool'>,\n                'socket_set': {\n                  'multicast_group': <class 'bool'>,\n                  'lpts_filter': <class 'bool'>,\n                  },\n                'statistics': {\n                  'total_packets_received': <class 'int'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_rip_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rip.py#L704"}}, "show rip vrf {vrf} statistics": {"iosxr": {"class": "ShowRipStatistics", "doc": "Parser for:\n        show rip statistics\n        show rip vrf {vrf} statistics", "module_name": "show_rip", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        'instance': {\n          Any  (str) *: {\n            'statistics': {\n              'total_messages_sent': <class 'int'>,\n              'message_send_failures': <class 'int'>,\n              'regular_updates_sent': <class 'int'>,\n              'queries_responsed_to': <class 'int'>,\n              'rib_updates': <class 'int'>,\n              'total_packets_received': <class 'int'>,\n              'packets_discarded': <class 'int'>,\n              'routes_discarded': <class 'int'>,\n              Optional  (str) packets_received_at_standby: <class 'int'>,\n              'routes_allocated': <class 'int'>,\n              'paths_allocated': <class 'int'>,\n              'route_malloc_failures': <class 'int'>,\n              'path_malloc_failures': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_rip_vrf_vrf_statistics", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rip.py#L302"}}, "show route": {"asa": {"class": "ShowRoute", "doc": "Parser for\n        * show route\n    ", "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  'default': {\n    'address_family': {\n      'ipv4': {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'candidate_default': <class 'bool'>,\n            Optional  (str) subnet: <class 'str'>,\n            'route': <class 'str'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface_name: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface_name: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface_name: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_route.py#L90"}}, "show route advertising-protocol {protocol} {neighbor}": {"junos": {"class": "ShowRouteAdvertisingProtocol", "doc": " Parser for:\n            * show route advertising-protocol {protocol} {neighbor}\n    ", "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'route-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'route-table': {\n    'active-route-count': <class 'str'>,\n    'destination-count': <class 'str'>,\n    'hidden-route-count': <class 'str'>,\n    'holddown-route-count': <class 'str'>,\n    Optional  (str) rt: Use  (function) <function ShowRouteAdvertisingProtocolSchema.validate_rt_list at 0x1095a8c80>,\n    'table-name': <class 'str'>,\n    'total-route-count': <class 'str'>,\n    },\n  },\n}", "uid": "show_route_advertising-protocol_protocol_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L1407"}}, "show route forwarding-table summary": {"junos": {"class": "ShowRouteForwardingTableSummary", "doc": " Parser for:\n            * show route forwarding-table summary\n    ", "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'forwarding-table-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'route-table': Use  (function) <function ShowRouteForwardingTableSummarySchema.validate_route_table_list at 0x1095a8a60>,\n  },\n}", "uid": "show_route_forwarding-table_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L1108"}}, "show route ipv4": {"iosxr": {"class": "ShowRouteIpv4", "doc": null, "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_ipv4", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L85"}}, "show route ipv4 {protocol}": {"iosxr": {"class": "ShowRouteIpv4", "doc": null, "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_ipv4_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L85"}}, "show route ipv4 {route}": {"iosxr": {"class": "ShowRouteIpv4", "doc": null, "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_ipv4_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L85"}}, "show route ipv6": {"iosxr": {"class": "ShowRouteIpv6", "doc": "Parser for :\n       show route ipv6\n       show route vrf <vrf> ipv6", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_ipv6", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L596"}}, "show route ipv6 {protocol}": {"iosxr": {"class": "ShowRouteIpv6", "doc": "Parser for :\n       show route ipv6\n       show route vrf <vrf> ipv6", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_ipv6_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L596"}}, "show route ipv6 {route}": {"iosxr": {"class": "ShowRouteIpv6", "doc": "Parser for :\n       show route ipv6\n       show route vrf <vrf> ipv6", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_ipv6_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L596"}}, "show route protocol {protocol}": {"junos": {"class": "ShowRouteProtocol", "doc": " Parser for:\n            * show route protocol {protocol} {ip_address}\n            * show route protocol {protocol}\n            * show route protocol {protocol} table {table}\n    ", "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'route-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'route-table': Use  (function) <function ShowRouteProtocolSchema.validate_route_table_list at 0x1095a87b8>,\n  },\n}", "uid": "show_route_protocol_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L302"}}, "show route protocol {protocol} extensive": {"junos": {"class": "ShowRouteProtocolExtensive", "doc": " Parser for:\n            * show route protocol {protocol} extensive\n            * show route protocol {protocol} table {table} extensive\n    ", "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'route-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'route-table': Use  (function) <function ShowRouteProtocolExtensiveSchema.validate_route_table_list at 0x1095a8950>,\n  },\n}", "uid": "show_route_protocol_protocol_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L665"}}, "show route protocol {protocol} table {table}": {"junos": {"class": "ShowRouteProtocol", "doc": " Parser for:\n            * show route protocol {protocol} {ip_address}\n            * show route protocol {protocol}\n            * show route protocol {protocol} table {table}\n    ", "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'route-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'route-table': Use  (function) <function ShowRouteProtocolSchema.validate_route_table_list at 0x1095a87b8>,\n  },\n}", "uid": "show_route_protocol_protocol_table_table", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L302"}}, "show route protocol {protocol} table {table} extensive": {"junos": {"class": "ShowRouteProtocolExtensive", "doc": " Parser for:\n            * show route protocol {protocol} extensive\n            * show route protocol {protocol} table {table} extensive\n    ", "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'route-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'route-table': Use  (function) <function ShowRouteProtocolExtensiveSchema.validate_route_table_list at 0x1095a8950>,\n  },\n}", "uid": "show_route_protocol_protocol_table_table_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L665"}}, "show route protocol {protocol} {ip_address}": {"junos": {"class": "ShowRouteProtocol", "doc": " Parser for:\n            * show route protocol {protocol} {ip_address}\n            * show route protocol {protocol}\n            * show route protocol {protocol} table {table}\n    ", "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'route-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'route-table': Use  (function) <function ShowRouteProtocolSchema.validate_route_table_list at 0x1095a87b8>,\n  },\n}", "uid": "show_route_protocol_protocol_ip_address", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L302"}}, "show route protocol {protocol} {ip_address} | no-more": {"junos": {"class": "ShowRouteProtocolNoMore", "doc": " Parser for:\n            * show route protocol static {ip_address} | no-more\n    ", "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'route-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'route-table': Use  (function) <function ShowRouteProtocolSchema.validate_route_table_list at 0x1095a87b8>,\n  },\n}", "uid": "show_route_protocol_protocol_ip_address___no-more", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L443"}}, "show route receive-protocol {protocol} {peer}": {"junos": {"class": "ShowRouteReceiveProtocol", "doc": " Parser for:\n            * show route receive-protocol {protocol} {peer}\n    ", "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'route-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'route-table': Use  (function) <function ShowRouteReceiveProtocolSchema.validate_route_table_list at 0x1095a8b70>,\n  },\n}", "uid": "show_route_receive-protocol_protocol_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L1265"}}, "show route table {table}": {"junos": {"class": "ShowRouteTable", "doc": null, "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\n'table_name': {\n  Any  (str) *: {\n    'destination_count': <class 'int'>,\n    'total_route_count': <class 'int'>,\n    'active_route_count': <class 'int'>,\n    'holddown_route_count': <class 'int'>,\n    'hidden_route_count': <class 'int'>,\n    'routes': {\n      Any  (str) *: {\n        'active_tag': <class 'str'>,\n        'protocol_name': <class 'str'>,\n        'preference': <class 'str'>,\n        Optional  (str) preference2: <class 'str'>,\n        'age': <class 'str'>,\n        'metric': <class 'str'>,\n        'next_hop': {\n          'next_hop_list': {\n            Any  (str) *: {\n              'to': <class 'str'>,\n              'via': <class 'str'>,\n              Optional  (str) mpls_label: <class 'str'>,\n              Optional  (str) best_route: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_route_table_table", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L68"}}, "show route table {table} {prefix}": {"junos": {"class": "ShowRouteTable", "doc": null, "module_name": "show_route", "package": "genie.libs.parser", "schema": "{\n'table_name': {\n  Any  (str) *: {\n    'destination_count': <class 'int'>,\n    'total_route_count': <class 'int'>,\n    'active_route_count': <class 'int'>,\n    'holddown_route_count': <class 'int'>,\n    'hidden_route_count': <class 'int'>,\n    'routes': {\n      Any  (str) *: {\n        'active_tag': <class 'str'>,\n        'protocol_name': <class 'str'>,\n        'preference': <class 'str'>,\n        Optional  (str) preference2: <class 'str'>,\n        'age': <class 'str'>,\n        'metric': <class 'str'>,\n        'next_hop': {\n          'next_hop_list': {\n            Any  (str) *: {\n              'to': <class 'str'>,\n              'via': <class 'str'>,\n              Optional  (str) mpls_label: <class 'str'>,\n              Optional  (str) best_route: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_route_table_table_prefix", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_route.py#L68"}}, "show route vrf {vrf} ipv4": {"iosxr": {"class": "ShowRouteIpv4", "doc": null, "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_vrf_vrf_ipv4", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L85"}}, "show route vrf {vrf} ipv4 {protocol}": {"iosxr": {"class": "ShowRouteIpv4", "doc": null, "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_vrf_vrf_ipv4_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L85"}}, "show route vrf {vrf} ipv4 {route}": {"iosxr": {"class": "ShowRouteIpv4", "doc": null, "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_vrf_vrf_ipv4_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L85"}}, "show route vrf {vrf} ipv6": {"iosxr": {"class": "ShowRouteIpv6", "doc": "Parser for :\n       show route ipv6\n       show route vrf <vrf> ipv6", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_vrf_vrf_ipv6", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L596"}}, "show route vrf {vrf} ipv6 {protocol}": {"iosxr": {"class": "ShowRouteIpv6", "doc": "Parser for :\n       show route ipv6\n       show route vrf <vrf> ipv6", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_vrf_vrf_ipv6_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L596"}}, "show route vrf {vrf} ipv6 {route}": {"iosxr": {"class": "ShowRouteIpv6", "doc": "Parser for :\n       show route ipv6\n       show route vrf <vrf> ipv6", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            'route': <class 'str'>,\n            'active': <class 'bool'>,\n            Optional  (str) ip: <class 'str'>,\n            Optional  (str) mask: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_codes: <class 'str'>,\n            Optional  (str) known_via: <class 'str'>,\n            Optional  (str) distance: <class 'int'>,\n            Optional  (str) type: <class 'str'>,\n            Optional  (str) tag: <class 'str'>,\n            Optional  (str) installed: {\n              'date': <class 'str'>,\n              'for': <class 'str'>,\n              },\n            Optional  (str) redist_advertisers: {\n              Any  (str) *: {\n                'protoid': <class 'int'>,\n                'clientid': <class 'int'>,\n                },\n              },\n            'next_hop': {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  'outgoing_interface': <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  'index': <class 'int'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) from: <class 'str'>,\n                  Optional  (str) table: <class 'str'>,\n                  Optional  (str) address_family: <class 'str'>,\n                  Optional  (str) table_id: <class 'str'>,\n                  Optional  (str) nexthop_in_vrf: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) last_resort: {\n      Optional  (str) gateway: <class 'str'>,\n      Optional  (str) to_network: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_route_vrf_vrf_ipv6_route", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_routing.py#L596"}}, "show route-map": {"nxos": {"class": "ShowRouteMap", "doc": "Parser for show route-map", "module_name": "show_route_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  'statements': {\n    Any  (str) *: {\n      'conditions': {\n        Optional  (str) match_med_eq: <class 'int'>,\n        Optional  (str) match_nexthop_in: <class 'str'>,\n        Optional  (str) match_nexthop_in_v6: <class 'str'>,\n        Optional  (str) match_route_type: <class 'str'>,\n        Optional  (str) match_community_list: <class 'str'>,\n        Optional  (str) match_ext_community_list: <class 'str'>,\n        Optional  (str) match_as_path_list: <class 'str'>,\n        Optional  (str) match_interface: <class 'str'>,\n        Optional  (str) match_prefix_list: <class 'str'>,\n        Optional  (str) match_access_list: <class 'str'>,\n        Optional  (str) match_as_number_list: <class 'str'>,\n        Optional  (str) match_prefix_list_v6: <class 'str'>,\n        Optional  (str) match_access_list_v6: <class 'str'>,\n        Optional  (str) match_tag_list: <class 'str'>,\n        },\n      'actions': {\n        Optional  (str) set_route_origin: <class 'str'>,\n        Optional  (str) set_distance: <class 'int'>,\n        Optional  (str) set_local_pref: <class 'int'>,\n        Optional  (str) set_next_hop: <class 'list'>,\n        Optional  (str) set_next_hop_v6: <class 'list'>,\n        Optional  (str) set_med: <class 'int'>,\n        Optional  (str) set_as_path_prepend: <class 'str'>,\n        Optional  (str) set_as_path_group: <class 'list'>,\n        Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>,\n        Optional  (str) set_community: <class 'str'>,\n        Optional  (str) set_community_additive: <class 'bool'>,\n        Optional  (str) set_community_no_advertise: <class 'bool'>,\n        Optional  (str) set_community_no_export: <class 'bool'>,\n        Optional  (str) set_community_delete: <class 'str'>,\n        Optional  (str) set_ext_community_rt: <class 'str'>,\n        Optional  (str) set_ext_community_soo: <class 'str'>,\n        Optional  (str) set_ext_community_vpn: <class 'str'>,\n        Optional  (str) set_ext_community_rt_additive: <class 'bool'>,\n        Optional  (str) set_ext_community_delete: <class 'str'>,\n        Optional  (str) set_level: <class 'str'>,\n        Optional  (str) set_weight: <class 'int'>,\n        Optional  (str) set_metric_type: <class 'str'>,\n        Optional  (str) set_metric: <class 'int'>,\n        Optional  (str) set_level: <class 'str'>,\n        'clause': <class 'bool'>,\n        'route_disposition': <class 'str'>,\n        Optional  (str) set_tag: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_route-map", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_route_map.py#L63"}}, "show route-map all": {"ios": {"class": "ShowRouteMapAll", "doc": "Parser for show route-map all", "module_name": "show_route_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  'statements': {\n    Any  (str) *: {\n      'conditions': {\n        Optional  (str) match_med_eq: <class 'int'>,\n        Optional  (str) match_local_pref_eq: <class 'int'>,\n        Optional  (str) match_nexthop_in: <class 'list'>,\n        Optional  (str) match_nexthop_in_v6: <class 'list'>,\n        Optional  (str) match_level_eq: <class 'str'>,\n        Optional  (str) match_route_type: <class 'str'>,\n        Optional  (str) match_community_list: <class 'str'>,\n        Optional  (str) match_ext_community_list: <class 'str'>,\n        Optional  (str) match_as_path_list: <class 'str'>,\n        Optional  (str) match_interface: <class 'str'>,\n        Optional  (str) match_prefix_list: <class 'str'>,\n        Optional  (str) match_as_number_list: <class 'str'>,\n        Optional  (str) match_prefix_list_v6: <class 'str'>,\n        },\n      'actions': {\n        Optional  (str) set_route_origin: <class 'str'>,\n        Optional  (str) set_distance: <class 'int'>,\n        Optional  (str) set_local_pref: <class 'int'>,\n        Optional  (str) set_next_hop: <class 'list'>,\n        Optional  (str) set_next_hop_v6: <class 'list'>,\n        Optional  (str) set_next_hop_self: <class 'bool'>,\n        Optional  (str) set_as_path_prepend: <class 'str'>,\n        Optional  (str) set_as_path_group: <class 'list'>,\n        Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>,\n        Optional  (str) set_community: <class 'str'>,\n        Optional  (str) match_tag_list: <class 'str'>,\n        Optional  (str) set_community_additive: <class 'bool'>,\n        Optional  (str) set_community_no_advertise: <class 'bool'>,\n        Optional  (str) set_community_no_export: <class 'bool'>,\n        Optional  (str) set_community_delete: <class 'str'>,\n        Optional  (str) set_ext_community_rt: <class 'list'>,\n        Optional  (str) set_ext_community_soo: <class 'str'>,\n        Optional  (str) set_ext_community_vpn: <class 'str'>,\n        Optional  (str) set_ext_community_rt_additive: <class 'bool'>,\n        Optional  (str) set_ext_community_delete: <class 'str'>,\n        Optional  (str) set_level: <class 'str'>,\n        Optional  (str) set_weight: <class 'int'>,\n        Optional  (str) set_metric: <class 'int'>,\n        Optional  (str) set_ospf_metric_type: <class 'str'>,\n        Optional  (str) set_metric_type: <class 'str'>,\n        'route_disposition': <class 'str'>,\n        Optional  (str) set_tag: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_route-map_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_route_map.py#L10"}, "iosxe": {"class": "ShowRouteMapAll", "doc": "Parser for show route-map all", "module_name": "show_route_map", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  'statements': {\n    Any  (str) *: {\n      'conditions': {\n        Optional  (str) match_med_eq: <class 'int'>,\n        Optional  (str) match_local_pref_eq: <class 'int'>,\n        Optional  (str) match_nexthop_in: <class 'list'>,\n        Optional  (str) match_nexthop_in_v6: <class 'list'>,\n        Optional  (str) match_level_eq: <class 'str'>,\n        Optional  (str) match_route_type: <class 'str'>,\n        Optional  (str) match_community_list: <class 'str'>,\n        Optional  (str) match_ext_community_list: <class 'str'>,\n        Optional  (str) match_as_path_list: <class 'str'>,\n        Optional  (str) match_interface: <class 'str'>,\n        Optional  (str) match_prefix_list: <class 'str'>,\n        Optional  (str) match_as_number_list: <class 'str'>,\n        Optional  (str) match_prefix_list_v6: <class 'str'>,\n        },\n      'actions': {\n        Optional  (str) set_route_origin: <class 'str'>,\n        Optional  (str) set_distance: <class 'int'>,\n        Optional  (str) set_local_pref: <class 'int'>,\n        Optional  (str) set_next_hop: <class 'list'>,\n        Optional  (str) set_next_hop_v6: <class 'list'>,\n        Optional  (str) set_next_hop_self: <class 'bool'>,\n        Optional  (str) set_as_path_prepend: <class 'str'>,\n        Optional  (str) set_as_path_group: <class 'list'>,\n        Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>,\n        Optional  (str) set_community: <class 'str'>,\n        Optional  (str) match_tag_list: <class 'str'>,\n        Optional  (str) set_community_additive: <class 'bool'>,\n        Optional  (str) set_community_no_advertise: <class 'bool'>,\n        Optional  (str) set_community_no_export: <class 'bool'>,\n        Optional  (str) set_community_delete: <class 'str'>,\n        Optional  (str) set_ext_community_rt: <class 'list'>,\n        Optional  (str) set_ext_community_soo: <class 'str'>,\n        Optional  (str) set_ext_community_vpn: <class 'str'>,\n        Optional  (str) set_ext_community_rt_additive: <class 'bool'>,\n        Optional  (str) set_ext_community_delete: <class 'str'>,\n        Optional  (str) set_level: <class 'str'>,\n        Optional  (str) set_weight: <class 'int'>,\n        Optional  (str) set_metric: <class 'int'>,\n        Optional  (str) set_ospf_metric_type: <class 'str'>,\n        Optional  (str) set_metric_type: <class 'str'>,\n        'route_disposition': <class 'str'>,\n        Optional  (str) set_tag: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_route-map_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_route_map.py#L62"}}, "show router isis adjacency": {"sros": {"class": "ShowRouterIsisAdjacency", "doc": " Parser for show router isis adjacency", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'level': {\n      Any  (str) *: {\n        'total_adjacency_count': <class 'int'>,\n        'interfaces': {\n          Any  (str) *: {\n            'system_id': {\n              Any  (str) *: {\n                'hold_time': <class 'int'>,\n                'state': <class 'str'>,\n                'mt_id': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_router_isis_adjacency", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/sros/show_isis.py#L48"}}, "show router isis adjacency detail": {"sros": {"class": "ShowRouterIsisAdjacencyDetail", "doc": " Parser for show router isis adjacency detail", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'level': {\n      Any  (str) *: {\n        'interfaces': {\n          Any  (str) *: {\n            'system_id': {\n              Any  (str) *: {\n                'hostname': <class 'str'>,\n                'state': <class 'str'>,\n                'nbr_sys_typ': <class 'str'>,\n                'hold_time': <class 'int'>,\n                'topology': <class 'str'>,\n                'ipv6_neighbor': <class 'str'>,\n                'ipv4_neighbor': <class 'str'>,\n                'ipv4_adj_sid': <class 'str'>,\n                'restart_support': <class 'str'>,\n                'restart_supressed': <class 'str'>,\n                'restart_status': <class 'str'>,\n                'number_of_restarts': <class 'int'>,\n                'last_restart_at': <class 'str'>,\n                'snpa': <class 'str'>,\n                'up_time': <class 'str'>,\n                'priority': <class 'int'>,\n                'l_circ_typ': <class 'str'>,\n                'max_hold': <class 'int'>,\n                'mt_enabled': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_router_isis_adjacency_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/sros/show_isis.py#L162"}}, "show routing": {"nxos": {"class": "ShowRouting", "doc": "\n        Parser for show routing\n        show routing <ip>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_routing", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L1102"}}, "show routing vrf all": {"nxos": {"class": "ShowRoutingVrfAll", "doc": "Parser for show routing ip vrf all\n                show routing ip vrf <vrf>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) bgp_distance_extern_as: <class 'int'>,\n        Optional  (str) bgp_distance_internal_as: <class 'int'>,\n        Optional  (str) bgp_distance_local: <class 'int'>,\n        'ip': {\n          Any  (str) *: {\n            'ubest_num': <class 'str'>,\n            'mbest_num': <class 'str'>,\n            Optional  (str) attach: <class 'str'>,\n            Optional  (str) best_route: {\n              Any  (str) *: {\n                Optional  (str) nexthop: {\n                  Any  (str) *: {\n                    Optional  (str) protocol: {\n                      Any  (str) *: {\n                        Optional  (str) route_table: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) interface: <class 'str'>,\n                        Optional  (str) preference: <class 'str'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) protocol_id: <class 'str'>,\n                        Optional  (str) attribute: <class 'str'>,\n                        Optional  (str) tag: <class 'str'>,\n                        Optional  (str) mpls: <class 'bool'>,\n                        Optional  (str) mpls_vpn: <class 'bool'>,\n                        Optional  (str) evpn: <class 'bool'>,\n                        Optional  (str) segid: <class 'int'>,\n                        Optional  (str) tunnelid: <class 'str'>,\n                        Optional  (str) encap: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) routes: {\n              Optional  (str) nexthop: {\n                Any  (str) *: {\n                  Optional  (str) protocol: {\n                    Any  (str) *: {\n                      Optional  (str) route_table: <class 'str'>,\n                      Optional  (str) uptime: <class 'str'>,\n                      Optional  (str) interface: <class 'str'>,\n                      Optional  (str) preference: <class 'str'>,\n                      Optional  (str) metric: <class 'str'>,\n                      Optional  (str) protocol_id: <class 'str'>,\n                      Optional  (str) attribute: <class 'str'>,\n                      Optional  (str) tag: <class 'str'>,\n                      Optional  (str) mpls: <class 'bool'>,\n                      Optional  (str) mpls_vpn: <class 'bool'>,\n                      Optional  (str) evpn: <class 'bool'>,\n                      Optional  (str) segid: <class 'int'>,\n                      Optional  (str) tunnelid: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_routing_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L134"}}, "show routing vrf {vrf}": {"nxos": {"class": "ShowRoutingVrfAll", "doc": "Parser for show routing ip vrf all\n                show routing ip vrf <vrf>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) bgp_distance_extern_as: <class 'int'>,\n        Optional  (str) bgp_distance_internal_as: <class 'int'>,\n        Optional  (str) bgp_distance_local: <class 'int'>,\n        'ip': {\n          Any  (str) *: {\n            'ubest_num': <class 'str'>,\n            'mbest_num': <class 'str'>,\n            Optional  (str) attach: <class 'str'>,\n            Optional  (str) best_route: {\n              Any  (str) *: {\n                Optional  (str) nexthop: {\n                  Any  (str) *: {\n                    Optional  (str) protocol: {\n                      Any  (str) *: {\n                        Optional  (str) route_table: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) interface: <class 'str'>,\n                        Optional  (str) preference: <class 'str'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) protocol_id: <class 'str'>,\n                        Optional  (str) attribute: <class 'str'>,\n                        Optional  (str) tag: <class 'str'>,\n                        Optional  (str) mpls: <class 'bool'>,\n                        Optional  (str) mpls_vpn: <class 'bool'>,\n                        Optional  (str) evpn: <class 'bool'>,\n                        Optional  (str) segid: <class 'int'>,\n                        Optional  (str) tunnelid: <class 'str'>,\n                        Optional  (str) encap: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) routes: {\n              Optional  (str) nexthop: {\n                Any  (str) *: {\n                  Optional  (str) protocol: {\n                    Any  (str) *: {\n                      Optional  (str) route_table: <class 'str'>,\n                      Optional  (str) uptime: <class 'str'>,\n                      Optional  (str) interface: <class 'str'>,\n                      Optional  (str) preference: <class 'str'>,\n                      Optional  (str) metric: <class 'str'>,\n                      Optional  (str) protocol_id: <class 'str'>,\n                      Optional  (str) attribute: <class 'str'>,\n                      Optional  (str) tag: <class 'str'>,\n                      Optional  (str) mpls: <class 'bool'>,\n                      Optional  (str) mpls_vpn: <class 'bool'>,\n                      Optional  (str) evpn: <class 'bool'>,\n                      Optional  (str) segid: <class 'int'>,\n                      Optional  (str) tunnelid: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_routing_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L134"}}, "show routing {ip} vrf all": {"nxos": {"class": "ShowRoutingVrfAll", "doc": "Parser for show routing ip vrf all\n                show routing ip vrf <vrf>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) bgp_distance_extern_as: <class 'int'>,\n        Optional  (str) bgp_distance_internal_as: <class 'int'>,\n        Optional  (str) bgp_distance_local: <class 'int'>,\n        'ip': {\n          Any  (str) *: {\n            'ubest_num': <class 'str'>,\n            'mbest_num': <class 'str'>,\n            Optional  (str) attach: <class 'str'>,\n            Optional  (str) best_route: {\n              Any  (str) *: {\n                Optional  (str) nexthop: {\n                  Any  (str) *: {\n                    Optional  (str) protocol: {\n                      Any  (str) *: {\n                        Optional  (str) route_table: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) interface: <class 'str'>,\n                        Optional  (str) preference: <class 'str'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) protocol_id: <class 'str'>,\n                        Optional  (str) attribute: <class 'str'>,\n                        Optional  (str) tag: <class 'str'>,\n                        Optional  (str) mpls: <class 'bool'>,\n                        Optional  (str) mpls_vpn: <class 'bool'>,\n                        Optional  (str) evpn: <class 'bool'>,\n                        Optional  (str) segid: <class 'int'>,\n                        Optional  (str) tunnelid: <class 'str'>,\n                        Optional  (str) encap: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) routes: {\n              Optional  (str) nexthop: {\n                Any  (str) *: {\n                  Optional  (str) protocol: {\n                    Any  (str) *: {\n                      Optional  (str) route_table: <class 'str'>,\n                      Optional  (str) uptime: <class 'str'>,\n                      Optional  (str) interface: <class 'str'>,\n                      Optional  (str) preference: <class 'str'>,\n                      Optional  (str) metric: <class 'str'>,\n                      Optional  (str) protocol_id: <class 'str'>,\n                      Optional  (str) attribute: <class 'str'>,\n                      Optional  (str) tag: <class 'str'>,\n                      Optional  (str) mpls: <class 'bool'>,\n                      Optional  (str) mpls_vpn: <class 'bool'>,\n                      Optional  (str) evpn: <class 'bool'>,\n                      Optional  (str) segid: <class 'int'>,\n                      Optional  (str) tunnelid: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_routing_ip_vrf_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L134"}}, "show routing {ip} vrf {vrf}": {"nxos": {"class": "ShowRoutingVrfAll", "doc": "Parser for show routing ip vrf all\n                show routing ip vrf <vrf>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) bgp_distance_extern_as: <class 'int'>,\n        Optional  (str) bgp_distance_internal_as: <class 'int'>,\n        Optional  (str) bgp_distance_local: <class 'int'>,\n        'ip': {\n          Any  (str) *: {\n            'ubest_num': <class 'str'>,\n            'mbest_num': <class 'str'>,\n            Optional  (str) attach: <class 'str'>,\n            Optional  (str) best_route: {\n              Any  (str) *: {\n                Optional  (str) nexthop: {\n                  Any  (str) *: {\n                    Optional  (str) protocol: {\n                      Any  (str) *: {\n                        Optional  (str) route_table: <class 'str'>,\n                        Optional  (str) uptime: <class 'str'>,\n                        Optional  (str) interface: <class 'str'>,\n                        Optional  (str) preference: <class 'str'>,\n                        Optional  (str) metric: <class 'str'>,\n                        Optional  (str) protocol_id: <class 'str'>,\n                        Optional  (str) attribute: <class 'str'>,\n                        Optional  (str) tag: <class 'str'>,\n                        Optional  (str) mpls: <class 'bool'>,\n                        Optional  (str) mpls_vpn: <class 'bool'>,\n                        Optional  (str) evpn: <class 'bool'>,\n                        Optional  (str) segid: <class 'int'>,\n                        Optional  (str) tunnelid: <class 'str'>,\n                        Optional  (str) encap: <class 'str'>,\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            Optional  (str) routes: {\n              Optional  (str) nexthop: {\n                Any  (str) *: {\n                  Optional  (str) protocol: {\n                    Any  (str) *: {\n                      Optional  (str) route_table: <class 'str'>,\n                      Optional  (str) uptime: <class 'str'>,\n                      Optional  (str) interface: <class 'str'>,\n                      Optional  (str) preference: <class 'str'>,\n                      Optional  (str) metric: <class 'str'>,\n                      Optional  (str) protocol_id: <class 'str'>,\n                      Optional  (str) attribute: <class 'str'>,\n                      Optional  (str) tag: <class 'str'>,\n                      Optional  (str) mpls: <class 'bool'>,\n                      Optional  (str) mpls_vpn: <class 'bool'>,\n                      Optional  (str) evpn: <class 'bool'>,\n                      Optional  (str) segid: <class 'int'>,\n                      Optional  (str) tunnelid: <class 'str'>,\n                      Optional  (str) encap: <class 'str'>,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_routing_ip_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L134"}}, "show routing {protocol}": {"nxos": {"class": "ShowRouting", "doc": "\n        Parser for show routing\n        show routing <ip>", "module_name": "show_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) ubest: <class 'int'>,\n            Optional  (str) mbest: <class 'int'>,\n            Optional  (str) process_id: <class 'str'>,\n            Optional  (str) route_preference: <class 'int'>,\n            Optional  (str) metric: <class 'int'>,\n            Optional  (str) tag: <class 'int'>,\n            Optional  (str) hidden: <class 'bool'>,\n            Optional  (str) source_protocol: <class 'str'>,\n            Optional  (str) source_protocol_status: <class 'str'>,\n            Optional  (str) attached: <class 'bool'>,\n            Optional  (str) active: <class 'bool'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) source_protocol: <class 'str'>,\n                  Optional  (str) source_protocol_status: <class 'str'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) next_hop_vrf: <class 'str'>,\n                  Optional  (str) next_hop_af: <class 'str'>,\n                  Optional  (str) best_ucast_nexthop: <class 'bool'>,\n                  Optional  (str) best_mcast_nexthop: <class 'bool'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) updated: <class 'str'>,\n                  Optional  (str) route_preference: <class 'int'>,\n                  Optional  (str) metric: <class 'int'>,\n                  Optional  (str) mpls: <class 'bool'>,\n                  Optional  (str) mpls_vpn: <class 'bool'>,\n                  Optional  (str) evpn: <class 'bool'>,\n                  Optional  (str) segid: <class 'int'>,\n                  Optional  (str) tunnelid: <class 'str'>,\n                  Optional  (str) encap: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_routing_protocol", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_routing.py#L1102"}}, "show rpl prefix-set": {"iosxr": {"class": "ShowRplPrefixSet", "doc": "Parser for:\n        show rpl prefix-set\n        show rpl prefix-set <name>", "module_name": "show_prefix_list", "package": "genie.libs.parser", "schema": "{\n'prefix_set_name': {\n  Any  (str) *: {\n    'prefix_set_name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'prefixes': {\n      Any  (str) *: {\n        'prefix': <class 'str'>,\n        Optional  (str) masklength_range: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_rpl_prefix-set", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_prefix_list.py#L41"}}, "show rpl prefix-set {name}": {"iosxr": {"class": "ShowRplPrefixSet", "doc": "Parser for:\n        show rpl prefix-set\n        show rpl prefix-set <name>", "module_name": "show_prefix_list", "package": "genie.libs.parser", "schema": "{\n'prefix_set_name': {\n  Any  (str) *: {\n    'prefix_set_name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'prefixes': {\n      Any  (str) *: {\n        'prefix': <class 'str'>,\n        Optional  (str) masklength_range: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_rpl_prefix-set_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_prefix_list.py#L41"}}, "show rpl route-policy": {"iosxr": {"class": "ShowRplRoutePolicy", "doc": "Parser for show rpl route-policy", "module_name": "show_rpl", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) description: <class 'str'>,\n  'statements': {\n    Any  (str) *: {\n      'conditions': {\n        Optional  (str) match_med_eq: <class 'int'>,\n        Optional  (str) match_origin_eq: <class 'str'>,\n        Optional  (str) match_nexthop_in: <class 'str'>,\n        Optional  (str) match_nexthop_in_v6: <class 'str'>,\n        Optional  (str) match_local_pref_eq: <class 'str'>,\n        Optional  (str) match_community_list: <class 'str'>,\n        Optional  (str) match_ext_community_list: <class 'list'>,\n        Optional  (str) match_ext_community_list_type: <class 'str'>,\n        Optional  (str) match_as_path_list: <class 'str'>,\n        Optional  (str) match_as_path_length: <class 'int'>,\n        Optional  (str) match_as_path_length_oper: <class 'str'>,\n        Optional  (str) match_level_eq: <class 'str'>,\n        Optional  (str) match_area_eq: <class 'str'>,\n        Optional  (str) match_prefix_list: <class 'str'>,\n        Optional  (str) match_prefix_list_v6: <class 'str'>,\n        Optional  (str) match_tag_list: <class 'str'>,\n        },\n      'actions': {\n        Optional  (str) set_route_origin: <class 'str'>,\n        Optional  (str) set_local_pref: <class 'int'>,\n        Optional  (str) set_next_hop: <class 'str'>,\n        Optional  (str) set_next_hop_v6: <class 'str'>,\n        Optional  (str) set_next_hop_self: <class 'bool'>,\n        Optional  (str) set_med: <class 'int'>,\n        Optional  (str) set_as_path_prepend: <class 'int'>,\n        Optional  (str) set_as_path_prepend_repeat_n: <class 'int'>,\n        Optional  (str) set_community: <class 'list'>,\n        Optional  (str) set_community_list: <class 'str'>,\n        Optional  (str) set_community_no_export: <class 'bool'>,\n        Optional  (str) set_community_no_advertise: <class 'bool'>,\n        Optional  (str) set_community_additive: <class 'bool'>,\n        Optional  (str) set_community_delete: <class 'str'>,\n        Optional  (str) set_ext_community_rt: <class 'list'>,\n        Optional  (str) set_ext_community_rt_additive: <class 'bool'>,\n        Optional  (str) set_ext_community_soo: <class 'str'>,\n        Optional  (str) set_ext_community_soo_additive: <class 'bool'>,\n        Optional  (str) set_ext_community_vpn: <class 'str'>,\n        Optional  (str) set_ext_community_delete: <class 'str'>,\n        Optional  (str) set_ext_community_delete_type: <class 'str'>,\n        Optional  (str) set_level: <class 'str'>,\n        Optional  (str) set_metric_type: <class 'str'>,\n        Optional  (str) set_metric: <class 'str'>,\n        Optional  (str) set_ospf_metric_type: <class 'str'>,\n        Optional  (str) set_ospf_metric: <class 'str'>,\n        Optional  (str) set_tag: <class 'str'>,\n        Optional  (str) set_weight: <class 'str'>,\n        Optional  (str) actions: <class 'str'>,\n        Optional  (str) set_spf_priority: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_rpl_route-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_rpl.py#L73"}}, "show run formal | i af-group": {"iosxr": {"class": "ShowBgpInstanceAfGroupConfiguration", "doc": "Parser for show bgp instance af-group configuration", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'pp_name': {\n      Any  (str) *: {\n        Optional  (str) default_originate: <class 'bool'>,\n        Optional  (str) address_family: <class 'str'>,\n        Optional  (str) default_originate_route_map: <class 'str'>,\n        Optional  (str) default_originate_inherit: <class 'str'>,\n        Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n        Optional  (str) maximum_prefix_threshold: <class 'int'>,\n        Optional  (str) maximum_prefix_restart: <class 'int'>,\n        Optional  (str) maximum_prefix_warning_only: <class 'str'>,\n        Optional  (str) next_hop_self: <class 'bool'>,\n        Optional  (str) next_hop_self_inherit: <class 'str'>,\n        Optional  (str) route_map_name_in: <class 'str'>,\n        Optional  (str) route_map_name_in_inherit: <class 'str'>,\n        Optional  (str) route_map_name_out: <class 'str'>,\n        Optional  (str) route_map_name_out_inherit: <class 'str'>,\n        Optional  (str) route_reflector_client: <class 'bool'>,\n        Optional  (str) route_reflector_client_inherit: <class 'str'>,\n        Optional  (str) send_community: <class 'str'>,\n        Optional  (str) send_comm_ebgp: <class 'bool'>,\n        Optional  (str) send_comm_ebgp_inherit: <class 'str'>,\n        Optional  (str) send_ext_comm_ebgp: <class 'bool'>,\n        Optional  (str) send_ext_comm_ebgp_inherit: <class 'str'>,\n        Optional  (str) soo: <class 'str'>,\n        Optional  (str) soo_inherit: <class 'str'>,\n        Optional  (str) soft_reconfiguration: <class 'str'>,\n        Optional  (str) soft_reconfiguration_inherit: <class 'str'>,\n        Optional  (str) allowas_in_as_number: <class 'int'>,\n        Optional  (str) allowas_in: <class 'bool'>,\n        Optional  (str) allowas_in_inherit: <class 'str'>,\n        Optional  (str) as_override: <class 'bool'>,\n        Optional  (str) as_override_inherit: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_run_formal___i_af-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L429"}}, "show run formal | i session-group": {"iosxr": {"class": "ShowBgpInstanceSessionGroupConfiguration", "doc": "Parser for show bgp instance session-group configuration", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'peer_session': {\n      Any  (str) *: {\n        Optional  (str) remote_as: <class 'int'>,\n        Optional  (str) remote_as_inherit: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) description_inherit: <class 'str'>,\n        Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n        Optional  (str) ebgp_multihop_max_hop: <class 'int'>,\n        Optional  (str) ebgp_multihop_inherit: <class 'str'>,\n        Optional  (str) local_as_as_no: <class 'int'>,\n        Optional  (str) local_no_prepend: <class 'bool'>,\n        Optional  (str) local_dual_as: <class 'bool'>,\n        Optional  (str) local_replace_as: <class 'bool'>,\n        Optional  (str) local_as_inherit: <class 'str'>,\n        Optional  (str) password_text: <class 'str'>,\n        Optional  (str) password_text_inherit: <class 'str'>,\n        Optional  (str) shutdown: <class 'bool'>,\n        Optional  (str) shutdown_inherit: <class 'str'>,\n        Optional  (str) keepalive_interval: <class 'int'>,\n        Optional  (str) holdtime: <class 'int'>,\n        Optional  (str) ps_minimum_holdtime: <class 'int'>,\n        Optional  (str) timers_inherit: <class 'str'>,\n        Optional  (str) update_source: <class 'str'>,\n        Optional  (str) update_source_inherit: <class 'str'>,\n        Optional  (str) suppress_four_byte_as_capability: <class 'bool'>,\n        Optional  (str) suppress_4byteas_inherit: <class 'str'>,\n        Optional  (str) fall_over_bfd: <class 'bool'>,\n        Optional  (str) fall_over_bfd_inherit: <class 'str'>,\n        Optional  (str) disable_connected_check: <class 'bool'>,\n        Optional  (str) disable_connected_check_inherit: <class 'str'>,\n        Optional  (str) transport_connection_mode: <class 'str'>,\n        Optional  (str) transport_connection_mode_inherit: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_run_formal___i_session-group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_bgp.py#L746"}}, "show run key chain": {"iosxr": {"class": "ShowRunKeyChain", "doc": "Parser for show run key chain", "module_name": "show_run", "package": "genie.libs.parser", "schema": "{\n'key_chain': {\n  Optional  (Any) Any  (str) *: {\n    Optional  (str) keys: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) accept_lifetime: <class 'str'>,\n        Optional  (str) key_string: <class 'str'>,\n        Optional  (str) send_lifetime: <class 'str'>,\n        Optional  (str) cryptographic_algorithm: <class 'str'>,\n        },\n      },\n    Optional  (str) accept_tolerance: <class 'str'>,\n    },\n  },\n}", "uid": "show_run_key_chain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_run.py#L42"}}, "show run policy-map {name}": {"iosxe": {"class": "ShowRunPolicyMap", "doc": " Parser for\n\t\t* \"show run policy-map {name}\"\n\t", "module_name": "show_run", "package": "genie.libs.parser", "schema": "{\n'policy_map': {\n  Any  (str) *: {\n    'class': {\n      Any  (str) *: {\n        Optional  (str) qos_set: {\n          Optional  (str) ip precedence: <class 'str'>,\n          Optional  (str) qos-group: <class 'str'>,\n          },\n        Optional  (str) police: {\n          Optional  (str) cir_bps: <class 'str'>,\n          Optional  (str) pir_bps: <class 'str'>,\n          Optional  (str) cir_bc_bytes: <class 'str'>,\n          Optional  (str) cir_be_bytes: <class 'str'>,\n          Optional  (str) conformed: <class 'str'>,\n          Optional  (str) exceeded: <class 'str'>,\n          },\n        Optional  (str) bandwidth_percent: <class 'str'>,\n        Optional  (str) priority_level: <class 'str'>,\n        Optional  (str) target_shape_rate: <class 'str'>,\n        Optional  (str) service_policy: <class 'str'>,\n        Optional  (str) service_policy_input: <class 'str'>,\n        Optional  (str) service_policy_output: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_run_policy-map_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_run.py#L60"}}, "show run router isis": {"iosxr": {"class": "ShowRunRouterIsis", "doc": "Parser for show run router isis", "module_name": "show_run", "package": "genie.libs.parser", "schema": "{\n'isis': {\n  Any  (str) *: {\n    Optional  (str) segment_routing: {\n      Optional  (Any) Any  (str) *: Any  (str) *,\n      },\n    Optional  (str) lsp_gen_interval: {\n      Optional  (Any) Any  (str) *: Any  (str) *,\n      },\n    Optional  (str) address_family: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) fast_reroute: {\n          Optional  (str) per_prefix: {\n            Optional  (str) tiebreaker: {\n              Optional  (Any) Any  (str) *: Any  (str) *,\n              },\n            },\n          },\n        Optional  (str) mpls: {\n          Optional  (str) traffic_eng: Any  (str) *,\n          },\n        Optional  (str) spf_interval: {\n          Optional  (Any) Any  (str) *: Any  (str) *,\n          },\n        Optional  (str) spf_prefix_priority: {\n          Optional  (Any) Any  (str) *: Any  (str) *,\n          },\n        Optional  (str) segment_routing: {\n          Optional  (Any) Any  (str) *: Any  (str) *,\n          },\n        Optional  (Any) Any  (str) *: Any  (str) *,\n        },\n      },\n    Optional  (str) interfaces: {\n      Optional  (Any) Any  (str) *: {\n        Optional  (str) bfd: {\n          Optional  (Any) Any  (str) *: Any  (str) *,\n          },\n        Optional  (str) address_family: {\n          Optional  (Any) Any  (str) *: {\n            Optional  (Any) Any  (str) *: Any  (str) *,\n            Optional  (Any) Any  (str) *: {\n              Optional  (Any) Any  (str) *: Any  (str) *,\n              },\n            },\n          },\n        Optional  (Any) Any  (str) *: Any  (str) *,\n        },\n      },\n    Optional  (Any) Any  (str) *: Any  (str) *,\n    },\n  },\n}", "uid": "show_run_router_isis", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_run.py#L189"}}, "show run | sec isis": {"iosxe": {"class": "ShowRunSectionIsis", "doc": "Parser for show run | sec isis", "module_name": "show_isis", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'vrf': {\n      Any  (str) *: {\n        },\n      },\n    },\n  },\n}", "uid": "show_run___sec_isis", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_isis.py#L528"}}, "show running-config bgp": {"nxos": {"class": "ShowRunningConfigBgp", "doc": "Parser for show running-config bgp", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'bgp': {\n  'instance': {\n    'default': {\n      'bgp_id': <class 'int'>,\n      'protocol_shutdown': <class 'bool'>,\n      Optional  (str) ps_name: {\n        Any  (str) *: {\n          'ps_fall_over_bfd': <class 'bool'>,\n          'ps_suppress_four_byte_as_capability': <class 'bool'>,\n          Optional  (str) ps_description: <class 'str'>,\n          'ps_disable_connected_check': <class 'bool'>,\n          'ps_ebgp_multihop': <class 'bool'>,\n          Optional  (str) ps_ebgp_multihop_max_hop: <class 'int'>,\n          Optional  (str) ps_local_as_as_no: <class 'int'>,\n          'ps_local_as_no_prepend': <class 'bool'>,\n          'ps_local_as_dual_as': <class 'bool'>,\n          'ps_local_as_replace_as': <class 'bool'>,\n          Optional  (str) ps_password_text: <class 'str'>,\n          Optional  (str) ps_remote_as: <class 'int'>,\n          'ps_shutdown': <class 'bool'>,\n          Optional  (str) ps_keepalive_interval: <class 'int'>,\n          Optional  (str) ps_hodltime: <class 'int'>,\n          Optional  (str) ps_transport_connection_mode: <class 'str'>,\n          Optional  (str) ps_update_source: <class 'str'>,\n          },\n        },\n      Optional  (str) pp_name: {\n        Any  (str) *: {\n          Optional  (str) pp_allowas_in: <class 'bool'>,\n          Optional  (str) pp_allowas_in_as_number: <class 'int'>,\n          Optional  (str) pp_as_override: <class 'bool'>,\n          Optional  (str) pp_default_originate: <class 'bool'>,\n          Optional  (str) pp_default_originate_route_map: <class 'str'>,\n          Optional  (str) pp_route_map_name_in: <class 'str'>,\n          Optional  (str) pp_route_map_name_out: <class 'str'>,\n          Optional  (str) pp_maximum_prefix_max_prefix_no: <class 'int'>,\n          Optional  (str) pp_maximum_prefix_threshold: <class 'int'>,\n          Optional  (str) pp_maximum_prefix_restart: <class 'int'>,\n          Optional  (str) pp_maximum_prefix_warning_only: <class 'bool'>,\n          Optional  (str) pp_next_hop_self: <class 'bool'>,\n          Optional  (str) pp_route_reflector_client: <class 'bool'>,\n          Optional  (str) pp_send_community: <class 'str'>,\n          'pp_soft_reconfiguration': <class 'bool'>,\n          Optional  (str) pp_soo: <class 'str'>,\n          },\n        },\n      Optional  (str) peer_name: {\n        Any  (str) *: {\n          Optional  (str) peer_fall_over_bfd: <class 'bool'>,\n          Optional  (str) peer_remote_as: <class 'int'>,\n          Optional  (str) peer_password_text: <class 'str'>,\n          Optional  (str) peer_af_name: {\n            Any  (str) *: {\n              Optional  (str) peer_af_send_community: <class 'str'>,\n              Optional  (str) peer_maximum_prefix_max_prefix_no: <class 'int'>,\n              Optional  (str) peer_maximum_prefix_threshold: <class 'int'>,\n              Optional  (str) peer_maximum_prefix_warning_only: <class 'bool'>,\n              Optional  (str) peer_next_hop_self: <class 'bool'>,\n              },\n            },\n          },\n        },\n      'vrf': {\n        Any  (str) *: {\n          Optional  (str) rd: <class 'str'>,\n          Optional  (str) always_compare_med: <class 'bool'>,\n          Optional  (str) bestpath_compare_routerid: <class 'bool'>,\n          Optional  (str) bestpath_cost_community_ignore: <class 'bool'>,\n          Optional  (str) bestpath_med_missing_at_worst: <class 'bool'>,\n          Optional  (str) cluster_id: <class 'str'>,\n          Optional  (str) confederation_identifier: <class 'int'>,\n          Optional  (str) confederation_peers_as: <class 'str'>,\n          'graceful_restart': <class 'bool'>,\n          Optional  (str) graceful_restart_restart_time: <class 'int'>,\n          Optional  (str) graceful_restart_stalepath_time: <class 'int'>,\n          'log_neighbor_changes': <class 'bool'>,\n          Optional  (str) router_id: <class 'str'>,\n          Optional  (str) keepalive_interval: <class 'int'>,\n          Optional  (str) holdtime: <class 'int'>,\n          'enforce_first_as': <class 'bool'>,\n          'fast_external_fallover': <class 'bool'>,\n          Optional  (str) default_choice_ipv4_unicast: <class 'str'>,\n          Optional  (str) dynamic_med_interval: <class 'int'>,\n          Optional  (str) shutdown: <class 'str'>,\n          'flush_routes': <class 'bool'>,\n          'isolate': <class 'bool'>,\n          Optional  (str) disable_policy_batching_ipv4: <class 'str'>,\n          Optional  (str) disable_policy_batching_ipv6: <class 'str'>,\n          Optional  (str) af_name: {\n            Any  (str) *: {\n              Optional  (str) af_evpn_vni_rt_type: <class 'str'>,\n              Optional  (str) af_evpn_vni_rt: <class 'str'>,\n              Optional  (str) af_dampening: <class 'bool'>,\n              Optional  (str) af_dampening_route_map: <class 'str'>,\n              Optional  (str) af_dampening_half_life_time: <class 'int'>,\n              Optional  (str) af_dampening_reuse_time: <class 'int'>,\n              Optional  (str) af_dampening_suppress_time: <class 'int'>,\n              Optional  (str) af_dampening_max_suppress_time: <class 'int'>,\n              Optional  (str) af_default_originate: <class 'bool'>,\n              Optional  (str) af_nexthop_route_map: <class 'str'>,\n              Optional  (str) af_nexthop_trigger_enable: <class 'bool'>,\n              Optional  (str) af_nexthop_trigger_delay_critical: <class 'int'>,\n              Optional  (str) af_nexthop_trigger_delay_non_critical: <class 'int'>,\n              Optional  (str) af_client_to_client_reflection: <class 'bool'>,\n              Optional  (str) af_distance_extern_as: <class 'int'>,\n              Optional  (str) af_distance_internal_as: <class 'int'>,\n              Optional  (str) af_distance_local: <class 'int'>,\n              Optional  (str) af_maximum_paths_ebgp: <class 'int'>,\n              Optional  (str) af_maximum_paths_ibgp: <class 'int'>,\n              Optional  (str) af_maximum_paths_eibgp: <class 'int'>,\n              Optional  (str) af_additional_paths_send: <class 'bool'>,\n              Optional  (str) af_additional_paths_receive: <class 'bool'>,\n              Optional  (str) af_aggregate_address_ipv4_address: <class 'str'>,\n              Optional  (str) af_aggregate_address_ipv4_mask: <class 'int'>,\n              Optional  (str) af_aggregate_address_as_set: <class 'bool'>,\n              Optional  (str) af_aggregate_address_summary_only: <class 'bool'>,\n              Optional  (str) af_network_number: <class 'str'>,\n              Optional  (str) af_network_mask: <class 'int'>,\n              Optional  (str) af_network_route_map: <class 'str'>,\n              Optional  (str) af_redist_isis: <class 'str'>,\n              Optional  (str) af_redist_isis_metric: <class 'str'>,\n              Optional  (str) af_redist_isis_route_policy: <class 'str'>,\n              Optional  (str) af_redist_ospf: <class 'str'>,\n              Optional  (str) af_redist_ospf_metric: <class 'str'>,\n              Optional  (str) af_redist_ospf_route_policy: <class 'str'>,\n              Optional  (str) af_redist_rip: <class 'str'>,\n              Optional  (str) af_redist_rip_metric: <class 'str'>,\n              Optional  (str) af_redist_rip_route_policy: <class 'str'>,\n              Optional  (str) af_redist_static: <class 'bool'>,\n              Optional  (str) af_redist_static_metric: <class 'str'>,\n              Optional  (str) af_redist_static_route_policy: <class 'str'>,\n              Optional  (str) af_redist_connected: <class 'bool'>,\n              Optional  (str) af_redist_connected_metric: <class 'str'>,\n              Optional  (str) af_redist_connected_route_policy: <class 'str'>,\n              Optional  (str) af_v6_aggregate_address_ipv6_address: <class 'str'>,\n              Optional  (str) af_v6_aggregate_address_as_set: <class 'bool'>,\n              Optional  (str) af_v6_aggregate_address_summary_only: <class 'bool'>,\n              Optional  (str) af_v6_network_number: <class 'str'>,\n              Optional  (str) af_v6_network_route_map: <class 'str'>,\n              Optional  (str) af_v6_allocate_label_all: <class 'bool'>,\n              Optional  (str) af_retain_rt_all: <class 'bool'>,\n              Optional  (str) af_label_allocation_mode: <class 'str'>,\n              Optional  (str) af_advertise_pip: <class 'bool'>,\n              },\n            },\n          Optional  (str) neighbor_id: {\n            Any  (str) *: {\n              Optional  (str) nbr_fall_over_bfd: <class 'bool'>,\n              Optional  (str) nbr_suppress_four_byte_as_capability: <class 'bool'>,\n              Optional  (str) nbr_description: <class 'str'>,\n              Optional  (str) nbr_disable_connected_check: <class 'bool'>,\n              Optional  (str) nbr_ebgp_multihop: <class 'bool'>,\n              Optional  (str) nbr_ebgp_multihop_max_hop: <class 'int'>,\n              Optional  (str) nbr_inherit_peer_session: <class 'str'>,\n              Optional  (str) nbr_local_as_as_no: <class 'int'>,\n              Optional  (str) nbr_local_as_no_prepend: <class 'bool'>,\n              Optional  (str) nbr_local_as_replace_as: <class 'bool'>,\n              Optional  (str) nbr_local_as_dual_as: <class 'bool'>,\n              Optional  (str) nbr_remote_as: <class 'int'>,\n              Optional  (str) nbr_remove_private_as: <class 'bool'>,\n              Optional  (str) nbr_shutdown: <class 'bool'>,\n              Optional  (str) nbr_keepalive_interval: <class 'int'>,\n              Optional  (str) nbr_holdtime: <class 'int'>,\n              Optional  (str) nbr_update_source: <class 'str'>,\n              Optional  (str) nbr_password_text: <class 'str'>,\n              Optional  (str) nbr_transport_connection_mode: <class 'str'>,\n              Optional  (str) nbr_peer_type: <class 'str'>,\n              Optional  (str) nbr_inherit_peer: <class 'str'>,\n              Optional  (str) nbr_af_name: {\n                Any  (str) *: {\n                  Optional  (str) nbr_af_allowas_in: <class 'bool'>,\n                  Optional  (str) nbr_af_allowas_in_as_number: <class 'int'>,\n                  Optional  (str) nbr_af_inherit_peer_policy: <class 'str'>,\n                  Optional  (str) nbr_af_inherit_peer_seq: <class 'int'>,\n                  Optional  (str) nbr_af_maximum_prefix_max_prefix_no: <class 'int'>,\n                  Optional  (str) nbr_af_maximum_prefix_threshold: <class 'int'>,\n                  Optional  (str) nbr_af_maximum_prefix_restart: <class 'int'>,\n                  Optional  (str) nbr_af_maximum_prefix_warning_only: <class 'bool'>,\n                  Optional  (str) nbr_af_route_map_name_in: <class 'str'>,\n                  Optional  (str) nbr_af_route_map_name_out: <class 'str'>,\n                  Optional  (str) no_nbr_af_route_map_name_in: <class 'str'>,\n                  Optional  (str) no_nbr_af_route_map_name_out: <class 'str'>,\n                  Optional  (str) nbr_af_route_reflector_client: <class 'bool'>,\n                  Optional  (str) nbr_af_send_community: <class 'str'>,\n                  Optional  (str) nbr_af_rewrite_evpn_rt_asn: <class 'bool'>,\n                  Optional  (str) nbr_af_soft_reconfiguration: <class 'bool'>,\n                  Optional  (str) nbr_af_next_hop_self: <class 'bool'>,\n                  Optional  (str) nbr_af_as_override: <class 'bool'>,\n                  Optional  (str) nbr_af_default_originate: <class 'bool'>,\n                  Optional  (str) nbr_af_default_originate_route_map: <class 'str'>,\n                  Optional  (str) nbr_af_soo: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\nOptional  (str) vxlan: {\n  'evpn': {\n    Optional  (str) evpn_vni: {\n      Any  (str) *: {\n        Optional  (str) evpn_vni: <class 'int'>,\n        Optional  (str) evpn_vni_rd: <class 'str'>,\n        Optional  (str) evpn_vni_rt: {\n          Any  (str) *: {\n            Optional  (str) evpn_vni_rt: <class 'str'>,\n            Optional  (str) evpn_vni_rt_type: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_bgp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L6121"}}, "show running-config interface {interface}": {"nxos": {"class": "ShowRunningConfigInterface", "doc": "Parser for show running-config interface <WORD>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) switchport: <class 'bool'>,\n    Optional  (str) switchport_mode: <class 'str'>,\n    Optional  (str) trunk_vlans: <class 'str'>,\n    Optional  (str) port_channel: {\n      Optional  (str) port_channel_mode: <class 'str'>,\n      Optional  (str) port_channel_int: <class 'str'>,\n      },\n    Optional  (str) host_reachability_protocol: <class 'str'>,\n    Optional  (str) source_interface: <class 'str'>,\n    Optional  (str) member_vni: {\n      Any  (str) *: {\n        Optional  (str) associate_vrf: <class 'bool'>,\n        Optional  (str) mcast_group: <class 'str'>,\n        Optional  (str) suppress_arp: <class 'bool'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L2901"}}, "show running-config msdp": {"nxos": {"class": "ShowRunningConfigMsdp", "doc": "Parser for :\n        show run msdp [| sec <vrf> | inc <pip_str>]", "module_name": "show_msdp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) global: {\n      Optional  (str) timer: {\n        'connect_retry_interval': <class 'int'>,\n        },\n      Optional  (str) originating_rp: <class 'str'>,\n      },\n    Optional  (str) peer: {\n      Any  (str) *: {\n        Optional  (str) connect_source: <class 'str'>,\n        Optional  (str) peer_as: <class 'str'>,\n        Optional  (str) description: <class 'str'>,\n        Optional  (str) timer: {\n          'keepalive_interval': <class 'int'>,\n          'holdtime_interval': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_msdp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_msdp.py#L870"}}, "show running-config ntp": {"iosxr": {"class": "ShowRunningConfigNtp", "doc": "Parser for: show running-config ntp", "module_name": "show_ntp", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) source: <class 'str'>,\n    'address': {\n      Any  (str) *: {\n        'type': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_ntp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ntp.py#L507"}}, "show running-config nv overlay": {"nxos": {"class": "ShowRunningConfigNvOverlay", "doc": "parser for:\n        show running-config nv overlay", "module_name": "show_vxlan", "package": "genie.libs.parser", "schema": "{\nOptional  (str) evpn_multisite_border_gateway: <class 'int'>,\nOptional  (str) multisite_convergence_time: <class 'int'>,\nOptional  (str) enabled_nv_overlay: <class 'bool'>,\nAny  (str) *: {\n  Optional  (str) nve_name: <class 'str'>,\n  Optional  (str) if_state: <class 'str'>,\n  Optional  (str) host_reachability_protocol: <class 'str'>,\n  Optional  (str) adv_vmac: <class 'bool'>,\n  Optional  (str) source_if: <class 'str'>,\n  Optional  (str) multisite_bgw_if: <class 'str'>,\n  Optional  (str) vni: {\n    Any  (str) *: {\n      Optional  (str) vni: <class 'int'>,\n      Optional  (str) associated_vrf: <class 'bool'>,\n      Optional  (str) multisite_ingress_replication: <class 'bool'>,\n      Optional  (str) mcast_group: <class 'str'>,\n      Optional  (str) suppress_arp: <class 'bool'>,\n      Optional  (str) vni_type: <class 'str'>,\n      },\n    },\n  },\nOptional  (str) multisite: {\n  Optional  (str) dci_links: {\n    Any  (str) *: {\n      'if_name': <class 'str'>,\n      'if_state': <class 'str'>,\n      },\n    },\n  Optional  (str) fabric_links: {\n    Any  (str) *: {\n      'if_name': <class 'str'>,\n      'if_state': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_running-config_nv_overlay", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vxlan.py#L1769"}}, "show running-config vrf {vrf} | sec '^vrf'": {"nxos": {"class": "ShowRunningConfigVrf", "doc": "Parser for show running-config vrf <vrf> | sec '^vrf' ", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) vrf_name: <class 'str'>,\n    Optional  (str) vni: <class 'int'>,\n    Optional  (str) rd: <class 'str'>,\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) route_target: {\n          Any  (str) *: {\n            Optional  (str) rt_type: <class 'str'>,\n            Optional  (str) protocol: {\n              Any  (str) *: {\n                Optional  (str) rt_evpn: <class 'bool'>,\n                Optional  (str) rt_mvpn: <class 'bool'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_vrf_vrf___sec_'^vrf'", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py#L270"}}, "show running-config {pim}": {"nxos": {"class": "ShowRunningConfigPim", "doc": "Parser for show running-config pim", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\nOptional  (str) feature_pim: <class 'bool'>,\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_announce: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              },\n            Optional  (str) send_rp_discovery: {\n              'interface': <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) policy: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_pim", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4278"}}, "show running-config {pim} | inc {pip_str}": {"nxos": {"class": "ShowRunningConfigPim", "doc": "Parser for show running-config pim", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\nOptional  (str) feature_pim: <class 'bool'>,\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_announce: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              },\n            Optional  (str) send_rp_discovery: {\n              'interface': <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) policy: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_pim___inc_pip_str", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4278"}}, "show running-config {pim} | sec '^i'": {"nxos": {"class": "ShowRunningConfigPim", "doc": "Parser for show running-config pim", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\nOptional  (str) feature_pim: <class 'bool'>,\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_announce: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              },\n            Optional  (str) send_rp_discovery: {\n              'interface': <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) policy: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_pim___sec_'^i'", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4278"}}, "show running-config {pim} | sec '^i' | inc {pip_str}": {"nxos": {"class": "ShowRunningConfigPim", "doc": "Parser for show running-config pim", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\nOptional  (str) feature_pim: <class 'bool'>,\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_announce: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              },\n            Optional  (str) send_rp_discovery: {\n              'interface': <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) policy: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_pim___sec_'^i'___inc_pip_str", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4278"}}, "show running-config {pim} | sec {vrf}": {"nxos": {"class": "ShowRunningConfigPim", "doc": "Parser for show running-config pim", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\nOptional  (str) feature_pim: <class 'bool'>,\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_announce: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              },\n            Optional  (str) send_rp_discovery: {\n              'interface': <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) policy: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_pim___sec_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4278"}}, "show running-config {pim} | sec {vrf} | inc {pip_str}": {"nxos": {"class": "ShowRunningConfigPim", "doc": "Parser for show running-config pim", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\nOptional  (str) feature_pim: <class 'bool'>,\nOptional  (str) feature_pim6: <class 'bool'>,\nOptional  (str) vrf: {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) autorp: {\n            Optional  (str) send_rp_announce: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              },\n            Optional  (str) send_rp_discovery: {\n              'interface': <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              },\n            Optional  (str) listener: <class 'bool'>,\n            },\n          Optional  (str) bsr: {\n            Any  (str) *: {\n              Optional  (str) interface: <class 'str'>,\n              Optional  (str) policy: <class 'str'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) interval: <class 'int'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) policy_name: <class 'str'>,\n              Optional  (str) override: <class 'bool'>,\n              Optional  (str) policy: <class 'int'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) route_map: <class 'str'>,\n              Optional  (str) prefix_list: <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_running-config_pim___sec_vrf___inc_pip_str", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L4278"}}, "show running-config | inc peer": {"nxos": {"class": "ShowBgpPeerTemplate", "doc": "Parser for show bgp peer-template <peer_template>\n       Executing 'show running-config bgp | inc peer' to colllect\n       configured peer-template names.\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_template': {\n  Any  (str) *: {\n    Optional  (str) remote_as: <class 'int'>,\n    Optional  (str) inherit_template: <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) disable_connected_check: <class 'bool'>,\n    Optional  (str) bfd_live_detection: <class 'bool'>,\n    Optional  (str) num_hops_bgp_peer: <class 'int'>,\n    Optional  (str) tcp_md5_auth: <class 'str'>,\n    Optional  (str) nbr_transport_connection_mode: <class 'str'>,\n    Optional  (str) nbr_local_as_cmd: <class 'str'>,\n    Optional  (str) private_as_updates: <class 'bool'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) keepalive_interval: <class 'int'>,\n    },\n  },\n}", "uid": "show_running-config___inc_peer", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L1516"}}, "show running-config | inc peer-policy": {"nxos": {"class": "ShowBgpPeerPolicy", "doc": "Parser for:\n        show bgp peer-policy <peer_policy>\n        Executing 'show running-config bgp | inc peer-policy' to collect\n        configured peer-policy names.\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_policy': {\n  Any  (str) *: {\n    Optional  (str) send_community: <class 'bool'>,\n    Optional  (str) send_ext_community: <class 'bool'>,\n    Optional  (str) route_reflector_client: <class 'bool'>,\n    Optional  (str) route_map_name_in: <class 'str'>,\n    Optional  (str) route_map_name_out: <class 'str'>,\n    Optional  (str) maximum_prefix_max_prefix_no: <class 'int'>,\n    Optional  (str) default_originate: <class 'bool'>,\n    Optional  (str) default_originate_route_map: <class 'str'>,\n    Optional  (str) soft_reconfiguration: <class 'bool'>,\n    Optional  (str) site_of_origin: <class 'bool'>,\n    Optional  (str) allowas_in: <class 'bool'>,\n    Optional  (str) as_override: <class 'bool'>,\n    Optional  (str) inherited_vrf_default: <class 'str'>,\n    Optional  (str) next_hop_self: <class 'bool'>,\n    },\n  },\n}", "uid": "show_running-config___inc_peer-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L1326"}}, "show running-config | inc peer-session": {"nxos": {"class": "ShowBgpPeerSession", "doc": "Parser for:\n        show bgp peer-session <peer_session>\n        Executing 'show running-config bgp | inc peer-session' to collect\n        configured peer-session names.\n    ", "module_name": "show_bgp", "package": "genie.libs.parser", "schema": "{\n'peer_session': {\n  Any  (str) *: {\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) update_source: <class 'str'>,\n    Optional  (str) description: <class 'str'>,\n    Optional  (str) password: <class 'bool'>,\n    Optional  (str) ebgp_multihop_enable: <class 'bool'>,\n    Optional  (str) ebgp_multihop_limit: <class 'int'>,\n    Optional  (str) disable_connectivity_check: <class 'bool'>,\n    Optional  (str) suppress_capabilities: <class 'bool'>,\n    Optional  (str) transport_connection_mode: <class 'str'>,\n    Optional  (str) holdtime: <class 'int'>,\n    Optional  (str) keepalive: <class 'int'>,\n    Optional  (str) remote_as: <class 'bool'>,\n    Optional  (str) local_as: <class 'bool'>,\n    Optional  (str) bfd: <class 'bool'>,\n    Optional  (str) inherited_vrf_default: <class 'str'>,\n    },\n  },\n}", "uid": "show_running-config___inc_peer-session", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_bgp.py#L1134"}}, "show running-config | sec '^advertise evpn multicast'": {"nxos": {"class": "ShowRunningConfigTrm", "doc": "Parser for show running-config | sec '^advertise evpn multicast'", "module_name": "show_trm", "package": "genie.libs.parser", "schema": "{\nOptional  (str) advertise_evpn_multicast: <class 'bool'>,\n}", "uid": "show_running-config___sec_'^advertise_evpn_multicast'", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_trm.py#L34"}}, "show sdr detail": {"iosxr": {"class": "ShowSdrDetail", "doc": "Parser for show sdr detail", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'sdr_id': {\n  Any  (str) *: {\n    'sdr_name': <class 'str'>,\n    Optional  (str) dsdrsc_node: <class 'str'>,\n    Optional  (str) dsdrsc_partner_node: <class 'str'>,\n    'primary_node1': <class 'str'>,\n    'primary_node2': <class 'str'>,\n    Optional  (str) mac_address: <class 'str'>,\n    'membership': {\n      Any  (str) *: {\n        'type': <class 'str'>,\n        'node_status': <class 'str'>,\n        Optional  (str) red_state: <class 'str'>,\n        'partner_name': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_sdr_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L185"}}, "show segment-routing local-block inconsistencies": {"iosxr": {"class": "ShowSegmentRoutingLocalBlockInconsistencies", "doc": " Parser for: \n        * show segment-routing local-block inconsistencies\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'srlb_inconsistencies_range': {\n  'start': <class 'int'>,\n  'end': <class 'int'>,\n  },\n}", "uid": "show_segment-routing_local-block_inconsistencies", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L1194"}}, "show segment-routing mapping-server prefix-sid-map ipv4": {"iosxr": {"class": "ShowSegmentRoutingMappingServerPrefixSidMapIPV4", "doc": " Parser for:\n        * show segment-routing mapping-server prefix-sid-map ipv4\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'ipv4': {\n  'number_of_mapping_entries': <class 'int'>,\n  'prefix': {\n    Any  (str) *: {\n      'sid_index': <class 'int'>,\n      'range': <class 'int'>,\n      Optional  (str) flags: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_segment-routing_mapping-server_prefix-sid-map_ipv4", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L1245"}}, "show segment-routing mapping-server prefix-sid-map ipv4 detail": {"iosxr": {"class": "ShowSegmentRoutingMappingServerPrefixSidMapIPV4Detail", "doc": " Parser for:\n        * show segment-routing mapping-server prefix-sid-map ipv4 detail\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'ipv4': {\n  'prefix': {\n    Any  (str) *: {\n      'sid_index': <class 'int'>,\n      'range': <class 'int'>,\n      Optional  (str) last_prefix: <class 'str'>,\n      Optional  (str) last_sid_index: <class 'int'>,\n      Optional  (str) flags: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_segment-routing_mapping-server_prefix-sid-map_ipv4_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_segment_routing.py#L1311"}}, "show segment-routing mpls connected-prefix-sid-map local {address_family}": {"iosxe": {"class": "ShowSegmentRoutingMplsConnectedPrefixSidMapLocal", "doc": " Parser for:\n        * 'show segment-routing mpls connected-prefix-sid-map local ipv4'\n        * 'show segment-routing mpls connected-prefix-sid-map local ipv6'\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'segment_routing': {\n  'bindings': {\n    Optional  (str) connected_prefix_sid_map: {\n      Optional  (str) ipv4: {\n        'ipv4_prefix_sid': {\n          Any  (str) *: {\n            'algorithm': {\n              Any  (str) *: {\n                'prefix': <class 'str'>,\n                'value_type': <class 'str'>,\n                'sid': <class 'str'>,\n                'range': <class 'str'>,\n                'srgb': <class 'str'>,\n                Optional  (str) source: <class 'str'>,\n                'algorithm': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      Optional  (str) ipv6: {\n        'ipv6_prefix_sid': {\n          Any  (str) *: {\n            'algorithm': {\n              Any  (str) *: {\n                'prefix': <class 'str'>,\n                'value_type': <class 'str'>,\n                'sid': <class 'str'>,\n                'range': <class 'str'>,\n                'srgb': <class 'str'>,\n                Optional  (str) source: <class 'str'>,\n                'algorithm': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) local_prefix_sid: {\n      Optional  (str) ipv4: {\n        'ipv4_prefix_sid_local': {\n          Any  (str) *: {\n            'algorithm': {\n              Any  (str) *: {\n                'prefix': <class 'str'>,\n                'value_type': <class 'str'>,\n                'sid': <class 'str'>,\n                'range': <class 'str'>,\n                'srgb': <class 'str'>,\n                'algorithm': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      Optional  (str) ipv6: {\n        'ipv6_prefix_sid_local': {\n          Any  (str) *: {\n            'algorithm': {\n              Any  (str) *: {\n                'prefix': <class 'str'>,\n                'value_type': <class 'str'>,\n                'sid': <class 'str'>,\n                'range': <class 'str'>,\n                'srgb': <class 'str'>,\n                'algorithm': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_segment-routing_mpls_connected-prefix-sid-map_local_address_family", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L488"}}, "show segment-routing mpls connected-prefix-sid-map {address_family}": {"iosxe": {"class": "ShowSegmentRoutingMplsConnectedPrefixSidMap", "doc": " Parser for:\n        * 'show segment-routing mpls connected-prefix-sid-map ipv4'\n        * 'show segment-routing mpls connected-prefix-sid-map ipv6'\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'segment_routing': {\n  'bindings': {\n    Optional  (str) connected_prefix_sid_map: {\n      Optional  (str) ipv4: {\n        'ipv4_prefix_sid': {\n          Any  (str) *: {\n            'algorithm': {\n              Any  (str) *: {\n                'prefix': <class 'str'>,\n                'value_type': <class 'str'>,\n                'sid': <class 'str'>,\n                'range': <class 'str'>,\n                'srgb': <class 'str'>,\n                Optional  (str) source: <class 'str'>,\n                'algorithm': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      Optional  (str) ipv6: {\n        'ipv6_prefix_sid': {\n          Any  (str) *: {\n            'algorithm': {\n              Any  (str) *: {\n                'prefix': <class 'str'>,\n                'value_type': <class 'str'>,\n                'sid': <class 'str'>,\n                'range': <class 'str'>,\n                'srgb': <class 'str'>,\n                Optional  (str) source: <class 'str'>,\n                'algorithm': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    Optional  (str) local_prefix_sid: {\n      Optional  (str) ipv4: {\n        'ipv4_prefix_sid_local': {\n          Any  (str) *: {\n            'algorithm': {\n              Any  (str) *: {\n                'prefix': <class 'str'>,\n                'value_type': <class 'str'>,\n                'sid': <class 'str'>,\n                'range': <class 'str'>,\n                'srgb': <class 'str'>,\n                'algorithm': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      Optional  (str) ipv6: {\n        'ipv6_prefix_sid_local': {\n          Any  (str) *: {\n            'algorithm': {\n              Any  (str) *: {\n                'prefix': <class 'str'>,\n                'value_type': <class 'str'>,\n                'sid': <class 'str'>,\n                'range': <class 'str'>,\n                'srgb': <class 'str'>,\n                'algorithm': <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_segment-routing_mpls_connected-prefix-sid-map_address_family", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L126"}}, "show segment-routing mpls gb": {"iosxe": {"class": "ShowSegmentRoutingMplsGb", "doc": " Parser for:\n        * 'show segment-routing mpls gb'\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'label_min': <class 'int'>,\n'label_max': <class 'int'>,\n'state': <class 'str'>,\n'default': <class 'str'>,\n}", "uid": "show_segment-routing_mpls_gb", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L272"}}, "show segment-routing mpls gb lock": {"iosxe": {"class": "ShowSegmentRoutingMplsGbLock", "doc": " Parser for 'show segment-routing mpls gb lock'\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'label_min': <class 'int'>,\n'label_max': <class 'int'>,\n}", "uid": "show_segment-routing_mpls_gb_lock", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L455"}}, "show segment-routing mpls lb": {"iosxe": {"class": "ShowSegmentRoutingMplsLB", "doc": " Parser for show segment-routing mpls lb", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'label_min': <class 'int'>,\n'label_max': <class 'int'>,\n'state': <class 'str'>,\n'default': <class 'str'>,\n}", "uid": "show_segment-routing_mpls_lb", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L327"}}, "show segment-routing mpls lb assigned-sids": {"iosxe": {"class": "ShowSegmentRoutingMplsLbAssignedSids", "doc": " Parser for:\n            * show segment-routing mpls lb assigned-sids\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'segment_routing': {\n  'sid': {\n    Any  (str) *: {\n      'state': <class 'str'>,\n      'state_info': <class 'str'>,\n      Optional  (str) protocol: <class 'str'>,\n      Optional  (str) topoid: <class 'int'>,\n      Optional  (str) lan: <class 'str'>,\n      Optional  (str) pro: <class 'str'>,\n      Optional  (str) neighbor: <class 'str'>,\n      Optional  (str) interface: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_segment-routing_mpls_lb_assigned-sids", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L1396"}}, "show segment-routing mpls lb lock": {"iosxe": {"class": "ShowSegmentRoutingMplsLbLock", "doc": " Parser for show segment-routing mpls lb lock", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'label_min': <class 'int'>,\n'label_max': <class 'int'>,\n}", "uid": "show_segment-routing_mpls_lb_lock", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L419"}}, "show segment-routing mpls mapping-server {address_family}": {"iosxe": {"class": "ShowSegmentRoutingMplsMappingServer", "doc": " Parser for:\n        * 'show segment-routing mpls mapping-server ipv4'\n        * 'show segment-routing mpls mapping-server ipv6'\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'segment_routing': {\n  'bindings': {\n    'mapping_server': {\n      'policy': {\n        Optional  (str) prefix_sid_export_map: {\n          Optional  (str) ipv4: {\n            Optional  (str) mapping_entry: {\n              Any  (str) *: {\n                'algorithm': {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    'value_type': <class 'str'>,\n                    'sid': <class 'int'>,\n                    'range': <class 'str'>,\n                    'algorithm': <class 'str'>,\n                    'srgb': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) ipv6: {\n            Optional  (str) mapping_entry: {\n              Any  (str) *: {\n                'algorithm': {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    'value_type': <class 'str'>,\n                    'sid': <class 'int'>,\n                    'range': <class 'str'>,\n                    'algorithm': <class 'str'>,\n                    'srgb': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) prefix_sid_remote_export_map: {\n          Optional  (str) ipv4: {\n            Optional  (str) mapping_entry: {\n              Any  (str) *: {\n                'algorithm': {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    'value_type': <class 'str'>,\n                    'sid': <class 'int'>,\n                    'range': <class 'str'>,\n                    'algorithm': <class 'str'>,\n                    Optional  (str) source: <class 'str'>,\n                    'srgb': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          Optional  (str) ipv6: {\n            Optional  (str) mapping_entry: {\n              Any  (str) *: {\n                'algorithm': {\n                  Any  (str) *: {\n                    'prefix': <class 'str'>,\n                    'value_type': <class 'str'>,\n                    'sid': <class 'int'>,\n                    'range': <class 'str'>,\n                    'algorithm': <class 'str'>,\n                    Optional  (str) source: <class 'str'>,\n                    'srgb': <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_segment-routing_mpls_mapping-server_address_family", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L1242"}}, "show segment-routing mpls state": {"iosxe": {"class": "ShowSegmentRoutingMplsState", "doc": " Parser for show segment-routing mpls state", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'sr_mpls_state': <class 'str'>,\n}", "uid": "show_segment-routing_mpls_state", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L377"}}, "show segment-routing traffic-eng policy all": {"iosxe": {"class": "ShowSegmentRoutingTrafficEngPolicy", "doc": " Parser for \n        'show segment-routing traffic-eng policy all'\n        'show segment-routing traffic-eng policy name {name}'\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'color': <class 'int'>,\n  Optional  (str) end_point: <class 'str'>,\n  'status': {\n    'admin': <class 'str'>,\n    'operational': {\n      'state': <class 'str'>,\n      'time_for_state': <class 'str'>,\n      'since': <class 'str'>,\n      },\n    },\n  Optional  (str) candidate_paths: {\n    'preference': {\n      Any  (str) *: {\n        Optional  (str) constraints: {\n          'affinity': {\n            Any  (str) *: <class 'list'>,\n            },\n          },\n        'path_type': {\n          Optional  (str) dynamic: {\n            'status': <class 'str'>,\n            Optional  (str) pce: <class 'bool'>,\n            'weight': <class 'int'>,\n            'metric_type': <class 'str'>,\n            Optional  (str) path_accumulated_metric: <class 'int'>,\n            Optional  (str) hops: {\n              Any  (str) *: {\n                'sid': <class 'int'>,\n                Optional  (str) sid_type: <class 'str'>,\n                Optional  (str) local_address: <class 'str'>,\n                Optional  (str) remote_address: <class 'str'>,\n                },\n              },\n            },\n          Optional  (str) explicit: {\n            Any  (str) *: {\n              Any  (str) *: {\n                'status': <class 'str'>,\n                'weight': <class 'int'>,\n                'metric_type': <class 'str'>,\n                Optional  (str) hops: {\n                  Any  (str) *: {\n                    'sid': <class 'int'>,\n                    Optional  (str) sid_type: <class 'str'>,\n                    Optional  (str) local_address: <class 'str'>,\n                    Optional  (str) remote_address: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) attributes: {\n    'binding_sid': {\n      Any  (str) *: {\n        'allocation_mode': <class 'str'>,\n        'state': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) forwarding_id: <class 'str'>,\n  Optional  (str) stats: {\n    'packets': <class 'int'>,\n    'bytes': <class 'int'>,\n    },\n  Optional  (str) event_history: {\n    Any  (str) *: {\n      'timestamp': <class 'str'>,\n      'client': <class 'str'>,\n      'event_type': <class 'str'>,\n      'context': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_segment-routing_traffic-eng_policy_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L830"}}, "show segment-routing traffic-eng policy all detail": {"iosxe": {"class": "ShowSegmentRoutingTrafficEngPolicyDetail", "doc": " Parser for \n        'show segment-routing traffic-eng policy all detail'\n        'show segment-routing traffic-eng policy name {name} detail'\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'color': <class 'int'>,\n  Optional  (str) end_point: <class 'str'>,\n  'status': {\n    'admin': <class 'str'>,\n    'operational': {\n      'state': <class 'str'>,\n      'time_for_state': <class 'str'>,\n      'since': <class 'str'>,\n      },\n    },\n  Optional  (str) candidate_paths: {\n    'preference': {\n      Any  (str) *: {\n        Optional  (str) constraints: {\n          'affinity': {\n            Any  (str) *: <class 'list'>,\n            },\n          },\n        'path_type': {\n          Optional  (str) dynamic: {\n            'status': <class 'str'>,\n            Optional  (str) pce: <class 'bool'>,\n            'weight': <class 'int'>,\n            'metric_type': <class 'str'>,\n            Optional  (str) path_accumulated_metric: <class 'int'>,\n            Optional  (str) hops: {\n              Any  (str) *: {\n                'sid': <class 'int'>,\n                Optional  (str) sid_type: <class 'str'>,\n                Optional  (str) local_address: <class 'str'>,\n                Optional  (str) remote_address: <class 'str'>,\n                },\n              },\n            },\n          Optional  (str) explicit: {\n            Any  (str) *: {\n              Any  (str) *: {\n                'status': <class 'str'>,\n                'weight': <class 'int'>,\n                'metric_type': <class 'str'>,\n                Optional  (str) hops: {\n                  Any  (str) *: {\n                    'sid': <class 'int'>,\n                    Optional  (str) sid_type: <class 'str'>,\n                    Optional  (str) local_address: <class 'str'>,\n                    Optional  (str) remote_address: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) attributes: {\n    'binding_sid': {\n      Any  (str) *: {\n        'allocation_mode': <class 'str'>,\n        'state': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) forwarding_id: <class 'str'>,\n  Optional  (str) stats: {\n    'packets': <class 'int'>,\n    'bytes': <class 'int'>,\n    },\n  Optional  (str) event_history: {\n    Any  (str) *: {\n      'timestamp': <class 'str'>,\n      'client': <class 'str'>,\n      'event_type': <class 'str'>,\n      'context': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_segment-routing_traffic-eng_policy_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L1121"}}, "show segment-routing traffic-eng policy name {name}": {"iosxe": {"class": "ShowSegmentRoutingTrafficEngPolicy", "doc": " Parser for \n        'show segment-routing traffic-eng policy all'\n        'show segment-routing traffic-eng policy name {name}'\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'color': <class 'int'>,\n  Optional  (str) end_point: <class 'str'>,\n  'status': {\n    'admin': <class 'str'>,\n    'operational': {\n      'state': <class 'str'>,\n      'time_for_state': <class 'str'>,\n      'since': <class 'str'>,\n      },\n    },\n  Optional  (str) candidate_paths: {\n    'preference': {\n      Any  (str) *: {\n        Optional  (str) constraints: {\n          'affinity': {\n            Any  (str) *: <class 'list'>,\n            },\n          },\n        'path_type': {\n          Optional  (str) dynamic: {\n            'status': <class 'str'>,\n            Optional  (str) pce: <class 'bool'>,\n            'weight': <class 'int'>,\n            'metric_type': <class 'str'>,\n            Optional  (str) path_accumulated_metric: <class 'int'>,\n            Optional  (str) hops: {\n              Any  (str) *: {\n                'sid': <class 'int'>,\n                Optional  (str) sid_type: <class 'str'>,\n                Optional  (str) local_address: <class 'str'>,\n                Optional  (str) remote_address: <class 'str'>,\n                },\n              },\n            },\n          Optional  (str) explicit: {\n            Any  (str) *: {\n              Any  (str) *: {\n                'status': <class 'str'>,\n                'weight': <class 'int'>,\n                'metric_type': <class 'str'>,\n                Optional  (str) hops: {\n                  Any  (str) *: {\n                    'sid': <class 'int'>,\n                    Optional  (str) sid_type: <class 'str'>,\n                    Optional  (str) local_address: <class 'str'>,\n                    Optional  (str) remote_address: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) attributes: {\n    'binding_sid': {\n      Any  (str) *: {\n        'allocation_mode': <class 'str'>,\n        'state': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) forwarding_id: <class 'str'>,\n  Optional  (str) stats: {\n    'packets': <class 'int'>,\n    'bytes': <class 'int'>,\n    },\n  Optional  (str) event_history: {\n    Any  (str) *: {\n      'timestamp': <class 'str'>,\n      'client': <class 'str'>,\n      'event_type': <class 'str'>,\n      'context': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_segment-routing_traffic-eng_policy_name_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L830"}}, "show segment-routing traffic-eng policy name {name} detail": {"iosxe": {"class": "ShowSegmentRoutingTrafficEngPolicyDetail", "doc": " Parser for \n        'show segment-routing traffic-eng policy all detail'\n        'show segment-routing traffic-eng policy name {name} detail'\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'name': <class 'str'>,\n  'color': <class 'int'>,\n  Optional  (str) end_point: <class 'str'>,\n  'status': {\n    'admin': <class 'str'>,\n    'operational': {\n      'state': <class 'str'>,\n      'time_for_state': <class 'str'>,\n      'since': <class 'str'>,\n      },\n    },\n  Optional  (str) candidate_paths: {\n    'preference': {\n      Any  (str) *: {\n        Optional  (str) constraints: {\n          'affinity': {\n            Any  (str) *: <class 'list'>,\n            },\n          },\n        'path_type': {\n          Optional  (str) dynamic: {\n            'status': <class 'str'>,\n            Optional  (str) pce: <class 'bool'>,\n            'weight': <class 'int'>,\n            'metric_type': <class 'str'>,\n            Optional  (str) path_accumulated_metric: <class 'int'>,\n            Optional  (str) hops: {\n              Any  (str) *: {\n                'sid': <class 'int'>,\n                Optional  (str) sid_type: <class 'str'>,\n                Optional  (str) local_address: <class 'str'>,\n                Optional  (str) remote_address: <class 'str'>,\n                },\n              },\n            },\n          Optional  (str) explicit: {\n            Any  (str) *: {\n              Any  (str) *: {\n                'status': <class 'str'>,\n                'weight': <class 'int'>,\n                'metric_type': <class 'str'>,\n                Optional  (str) hops: {\n                  Any  (str) *: {\n                    'sid': <class 'int'>,\n                    Optional  (str) sid_type: <class 'str'>,\n                    Optional  (str) local_address: <class 'str'>,\n                    Optional  (str) remote_address: <class 'str'>,\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) attributes: {\n    'binding_sid': {\n      Any  (str) *: {\n        'allocation_mode': <class 'str'>,\n        'state': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) forwarding_id: <class 'str'>,\n  Optional  (str) stats: {\n    'packets': <class 'int'>,\n    'bytes': <class 'int'>,\n    },\n  Optional  (str) event_history: {\n    Any  (str) *: {\n      'timestamp': <class 'str'>,\n      'client': <class 'str'>,\n      'event_type': <class 'str'>,\n      'context': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_segment-routing_traffic-eng_policy_name_name_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L1121"}}, "show segment-routing traffic-eng topology ipv4": {"iosxe": {"class": "ShowSegmentRoutingTrafficEngTopology", "doc": " Parser for \n        'show segment-routing traffic-eng topology ipv4'\n    ", "module_name": "show_segment_routing", "package": "genie.libs.parser", "schema": "{\n'nodes': {\n  Any  (str) *: {\n    'ospf_router_id': <class 'str'>,\n    'area_id': <class 'int'>,\n    'domain_id': <class 'int'>,\n    'asn': <class 'int'>,\n    Optional  (str) prefix_sid: {\n      'prefix': <class 'str'>,\n      'label': <class 'int'>,\n      'label_type': <class 'str'>,\n      'domain_id': <class 'int'>,\n      'flags': <class 'str'>,\n      },\n    'links': {\n      Any  (str) *: {\n        'local_address': <class 'str'>,\n        'remote_address': <class 'str'>,\n        'local_node': {\n          'ospf_router_id': <class 'str'>,\n          'area_id': <class 'int'>,\n          'domain_id': <class 'int'>,\n          'asn': <class 'int'>,\n          },\n        'remote_node': {\n          'ospf_router_id': <class 'str'>,\n          'area_id': <class 'int'>,\n          'domain_id': <class 'int'>,\n          'asn': <class 'int'>,\n          },\n        'metric': {\n          Any  (str) *: <class 'int'>,\n          },\n        'bandwidth_total': <class 'int'>,\n        'bandwidth_reservable': <class 'int'>,\n        'admin_groups': <class 'str'>,\n        Optional  (str) adj_sid: {\n          Any  (str) *: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_segment-routing_traffic-eng_topology_ipv4", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_segment_routing.py#L561"}}, "show service redir info group": {"nxos": {"aci": {"class": "ShowServiceRedirInfoGroup", "doc": "Parser for show service redir info group", "module_name": "show_service", "package": "genie.libs.parser", "schema": "{\n'group_id': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'oper_st': <class 'str'>,\n    'oper_st_qual': <class 'str'>,\n    'th': <class 'int'>,\n    'tl': <class 'int'>,\n    'hp': <class 'str'>,\n    'tracking': <class 'str'>,\n    'destination': {\n      Any  (str) *: {\n        'hg_name': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_service_redir_info_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/aci/show_service.py#L39"}}}, "show service-group state": {"ios": {"class": "ShowServiceGroupState", "doc": "Parser for show service-group state", "module_name": "show_service", "package": "genie.libs.parser", "schema": "{\n'group': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    },\n  },\n}", "uid": "show_service-group_state", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_service.py#L15"}, "iosxe": {"class": "ShowServiceGroupState", "doc": "\n\tParser for 'show service-group state'\n\t", "module_name": "show_service", "package": "genie.libs.parser", "schema": "{\n'group': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    },\n  },\n}", "uid": "show_service-group_state", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_service.py#L34"}}, "show service-group stats": {"ios": {"class": "ShowServiceGroupStats", "doc": "Parser for show service-group stats", "module_name": "show_service", "package": "genie.libs.parser", "schema": "{\n'service_group_statistics': {\n  'global': {\n    'num_of_groups': <class 'int'>,\n    'num_of_members': <class 'int'>,\n    },\n  Any  (str) *: {\n    'num_of_interfaces': <class 'int'>,\n    'num_of_members': {\n      <class 'int'>: {\n        Any  (str) *: <class 'int'>,\n        },\n      },\n    'members_joined': <class 'int'>,\n    'members_left': <class 'int'>,\n    },\n  },\n}", "uid": "show_service-group_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_service.py#L19"}, "iosxe": {"class": "ShowServiceGroupStats", "doc": " Parser for 'show service-group stats", "module_name": "show_service", "package": "genie.libs.parser", "schema": "{\n'service_group_statistics': {\n  'global': {\n    'num_of_groups': <class 'int'>,\n    'num_of_members': <class 'int'>,\n    },\n  Any  (str) *: {\n    'num_of_interfaces': <class 'int'>,\n    'num_of_members': {\n      <class 'int'>: {\n        Any  (str) *: <class 'int'>,\n        },\n      },\n    'members_joined': <class 'int'>,\n    'members_left': <class 'int'>,\n    },\n  },\n}", "uid": "show_service-group_stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_service.py#L93"}}, "show service-group traffic-stats": {"ios": {"class": "ShowServiceGroupTrafficStats", "doc": "Parser for :\n        show service-group traffic-stats\n        show service-group traffic-stats <group> ", "module_name": "show_service", "package": "genie.libs.parser", "schema": "{\n'group': {\n  Any  (str) *: {\n    'pkts_in': <class 'int'>,\n    'pkts_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    },\n  },\n}", "uid": "show_service-group_traffic-stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_service.py#L24"}, "iosxe": {"class": "ShowServiceGroupTrafficStats", "doc": "Parser for :\n\t\tshow service-group traffic-stats\n\t\tshow service-group traffic-stats <group> ", "module_name": "show_service", "package": "genie.libs.parser", "schema": "{\n'group': {\n  Any  (str) *: {\n    'pkts_in': <class 'int'>,\n    'pkts_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    },\n  },\n}", "uid": "show_service-group_traffic-stats", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_service.py#L246"}}, "show service-group traffic-stats {group}": {"ios": {"class": "ShowServiceGroupTrafficStats", "doc": "Parser for :\n        show service-group traffic-stats\n        show service-group traffic-stats <group> ", "module_name": "show_service", "package": "genie.libs.parser", "schema": "{\n'group': {\n  Any  (str) *: {\n    'pkts_in': <class 'int'>,\n    'pkts_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    },\n  },\n}", "uid": "show_service-group_traffic-stats_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_service.py#L24"}, "iosxe": {"class": "ShowServiceGroupTrafficStats", "doc": "Parser for :\n\t\tshow service-group traffic-stats\n\t\tshow service-group traffic-stats <group> ", "module_name": "show_service", "package": "genie.libs.parser", "schema": "{\n'group': {\n  Any  (str) *: {\n    'pkts_in': <class 'int'>,\n    'pkts_out': <class 'int'>,\n    'bytes_in': <class 'int'>,\n    'bytes_out': <class 'int'>,\n    },\n  },\n}", "uid": "show_service-group_traffic-stats_group", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_service.py#L246"}}, "show service-policy": {"asa": {"class": "ShowServicePolicy", "doc": "Parser for\n        * show service-policy\n    ", "module_name": "show_service_policy", "package": "genie.libs.parser", "schema": "{\n'global_policy': {\n  'service_policy': {\n    <class 'str'>: {\n      'class_map': {\n        <class 'str'>: {\n          'inspect': {\n            <class 'str'>: {\n              Optional  (str) inspect_map: <class 'str'>,\n              'packet': <class 'int'>,\n              'lock_fail': <class 'int'>,\n              'drop': <class 'int'>,\n              'reset_drop': <class 'int'>,\n              'five_minute_pkt_rate': <class 'int'>,\n              'v6_fail_close': <class 'int'>,\n              'sctp_drop_override': <class 'int'>,\n              Optional  (str) tcp_proxy: {\n                'bytes_in_buffer': <class 'int'>,\n                'bytes_dropped': <class 'int'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_service-policy", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_service_policy.py#L56"}}, "show snmp mib": {"ios": {"class": "ShowSnmpMib", "doc": " Parser for \"show snmp mib\" ", "module_name": "show_snmp", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (Any) Any  (str) *: {\n    Optional  (Any) Any  (str) *: <class 'str'>,\n    },\n  },\n}", "uid": "show_snmp_mib", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_snmp.py#L19"}, "iosxe": {"class": "ShowSnmpMib", "doc": " Parser for \"show snmp mib\" ", "module_name": "show_snmp", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (Any) Any  (str) *: {\n    Optional  (Any) Any  (str) *: <class 'str'>,\n    },\n  },\n}", "uid": "show_snmp_mib", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_snmp.py#L34"}}, "show spanning-tree": {"ios": {"class": "ShowSpanningTree", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      Any  (str) *: {\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) cost: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        'max_age': <class 'int'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        },\n      'interfaces': {\n        Any  (str) *: {\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          'cost': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'type': <class 'str'>,\n          Optional  (str) peer: <class 'str'>,\n          Optional  (str) bound: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L33"}, "iosxe": {"class": "ShowSpanningTree", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      Any  (str) *: {\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) cost: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        'max_age': <class 'int'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        },\n      'interfaces': {\n        Any  (str) *: {\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          'cost': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'type': <class 'str'>,\n          Optional  (str) peer: <class 'str'>,\n          Optional  (str) bound: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L871"}}, "show spanning-tree detail": {"ios": {"class": "ShowSpanningTreeDetail", "doc": "Parser for show spanning-tree detail", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) domain: <class 'str'>,\n  Optional  (str) pvst_id: <class 'str'>,\n  Optional  (str) name: <class 'str'>,\n  Optional  (str) revision: <class 'int'>,\n  Optional  (str) max_hop: <class 'int'>,\n  'hello_time': <class 'int'>,\n  'max_age': <class 'int'>,\n  'forwarding_delay': <class 'int'>,\n  Optional  (str) hold_count: <class 'int'>,\n  Any  (str) *: {\n    Any  (str) *: {\n      Optional  (str) mst_id: <class 'int'>,\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) vlan_id: <class 'int'>,\n      Optional  (str) hello_time: <class 'int'>,\n      Optional  (str) max_age: <class 'int'>,\n      Optional  (str) forwarding_delay: <class 'int'>,\n      Optional  (str) hold_count: <class 'int'>,\n      'bridge_priority': <class 'int'>,\n      'bridge_sysid': <class 'int'>,\n      'bridge_address': <class 'str'>,\n      Optional  (str) root_of_spanning_tree: <class 'bool'>,\n      'topology_change_flag': <class 'bool'>,\n      'topology_detected_flag': <class 'bool'>,\n      'hold_time': <class 'int'>,\n      'topology_changes': <class 'int'>,\n      'time_since_topology_change': <class 'str'>,\n      Optional  (str) topology_from_port: <class 'str'>,\n      'hello_time': <class 'int'>,\n      'max_age': <class 'int'>,\n      'forwarding_delay': <class 'int'>,\n      'topology_change_times': <class 'int'>,\n      'notification_times': <class 'int'>,\n      'hello_timer': <class 'int'>,\n      'topology_change_timer': <class 'int'>,\n      'notification_timer': <class 'int'>,\n      Optional  (str) aging_timer: <class 'int'>,\n      'interfaces': {\n        Any  (str) *: {\n          'status': <class 'str'>,\n          'name': <class 'str'>,\n          'cost': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'port_identifier': <class 'str'>,\n          'designated_root_priority': <class 'int'>,\n          'designated_root_address': <class 'str'>,\n          'designated_path_cost': <class 'int'>,\n          'designated_port_id': <class 'str'>,\n          'designated_bridge_priority': <class 'int'>,\n          'designated_bridge_address': <class 'str'>,\n          'number_of_forward_transitions': <class 'int'>,\n          'message_age': <class 'int'>,\n          'forward_delay': <class 'int'>,\n          'hold': <class 'int'>,\n          'link_type': <class 'str'>,\n          Optional  (str) boundary: <class 'str'>,\n          Optional  (str) peer: <class 'str'>,\n          Optional  (str) loop_guard: <class 'bool'>,\n          'counters': {\n            'bpdu_sent': <class 'int'>,\n            'bpdu_received': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L29"}, "iosxe": {"class": "ShowSpanningTreeDetail", "doc": "Parser for show spanning-tree detail", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) domain: <class 'str'>,\n  Optional  (str) pvst_id: <class 'str'>,\n  Optional  (str) name: <class 'str'>,\n  Optional  (str) revision: <class 'int'>,\n  Optional  (str) max_hop: <class 'int'>,\n  'hello_time': <class 'int'>,\n  'max_age': <class 'int'>,\n  'forwarding_delay': <class 'int'>,\n  Optional  (str) hold_count: <class 'int'>,\n  Any  (str) *: {\n    Any  (str) *: {\n      Optional  (str) mst_id: <class 'int'>,\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) vlan_id: <class 'int'>,\n      Optional  (str) hello_time: <class 'int'>,\n      Optional  (str) max_age: <class 'int'>,\n      Optional  (str) forwarding_delay: <class 'int'>,\n      Optional  (str) hold_count: <class 'int'>,\n      'bridge_priority': <class 'int'>,\n      'bridge_sysid': <class 'int'>,\n      'bridge_address': <class 'str'>,\n      Optional  (str) root_of_spanning_tree: <class 'bool'>,\n      'topology_change_flag': <class 'bool'>,\n      'topology_detected_flag': <class 'bool'>,\n      'hold_time': <class 'int'>,\n      'topology_changes': <class 'int'>,\n      'time_since_topology_change': <class 'str'>,\n      Optional  (str) topology_from_port: <class 'str'>,\n      'hello_time': <class 'int'>,\n      'max_age': <class 'int'>,\n      'forwarding_delay': <class 'int'>,\n      'topology_change_times': <class 'int'>,\n      'notification_times': <class 'int'>,\n      'hello_timer': <class 'int'>,\n      'topology_change_timer': <class 'int'>,\n      'notification_timer': <class 'int'>,\n      Optional  (str) aging_timer: <class 'int'>,\n      'interfaces': {\n        Any  (str) *: {\n          'status': <class 'str'>,\n          'name': <class 'str'>,\n          'cost': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'port_identifier': <class 'str'>,\n          'designated_root_priority': <class 'int'>,\n          'designated_root_address': <class 'str'>,\n          'designated_path_cost': <class 'int'>,\n          'designated_port_id': <class 'str'>,\n          'designated_bridge_priority': <class 'int'>,\n          'designated_bridge_address': <class 'str'>,\n          'number_of_forward_transitions': <class 'int'>,\n          'message_age': <class 'int'>,\n          'forward_delay': <class 'int'>,\n          'hold': <class 'int'>,\n          'link_type': <class 'str'>,\n          Optional  (str) boundary: <class 'str'>,\n          Optional  (str) peer: <class 'str'>,\n          Optional  (str) loop_guard: <class 'bool'>,\n          'counters': {\n            'bpdu_sent': <class 'int'>,\n            'bpdu_received': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L287"}, "nxos": {"class": "ShowSpanningTreeDetail", "doc": "Parser for:\n            show spanning-tree detail\n    ", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) domain: <class 'str'>,\n  Optional  (str) pvst_id: <class 'str'>,\n  Optional  (str) name: <class 'str'>,\n  Optional  (str) revision: <class 'int'>,\n  Optional  (str) max_hop: <class 'int'>,\n  'hello_time': <class 'int'>,\n  Optional  (str) fex_hello_time: <class 'int'>,\n  'max_age': <class 'int'>,\n  'forwarding_delay': <class 'int'>,\n  Optional  (str) hold_count: <class 'int'>,\n  Any  (str) *: {\n    Any  (str) *: {\n      'bridge_priority': <class 'int'>,\n      'bridge_sysid': <class 'int'>,\n      'bridge_address': <class 'str'>,\n      'topology_change_flag': <class 'bool'>,\n      'topology_detected_flag': <class 'bool'>,\n      'topology_changes': <class 'int'>,\n      'time_since_topology_change': <class 'str'>,\n      'times': {\n        'hold': <class 'int'>,\n        'topology_change': <class 'int'>,\n        'notification': <class 'int'>,\n        'max_age': <class 'int'>,\n        'hello': <class 'int'>,\n        'forwarding_delay': <class 'int'>,\n        },\n      'timers': {\n        'hello': <class 'int'>,\n        'topology_change': <class 'int'>,\n        'notification': <class 'int'>,\n        },\n      Optional  (str) mst_id: <class 'int'>,\n      Optional  (str) vlan: <class 'str'>,\n      Optional  (str) vlan_id: <class 'int'>,\n      Optional  (str) root_of_the_spanning_tree: <class 'bool'>,\n      Optional  (str) topology_from_port: <class 'str'>,\n      Optional  (str) aging_timer: <class 'int'>,\n      'interfaces': {\n        Any  (str) *: {\n          'status': <class 'str'>,\n          'name': <class 'str'>,\n          Optional  (str) bridge_assurance_inconsistent: <class 'bool'>,\n          Optional  (str) vpc_peer_link_inconsistent: <class 'bool'>,\n          Optional  (str) topology_change: <class 'bool'>,\n          'cost': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'port_identifier': <class 'str'>,\n          'designated_root_priority': <class 'int'>,\n          'designated_root_address': <class 'str'>,\n          'designated_path_cost': <class 'int'>,\n          'designated_port_id': <class 'str'>,\n          'designated_bridge_priority': <class 'int'>,\n          'designated_bridge_address': <class 'str'>,\n          'number_of_forward_transitions': <class 'int'>,\n          'timers': {\n            'message_age': <class 'int'>,\n            'forward_delay': <class 'int'>,\n            'hold': <class 'int'>,\n            },\n          Optional  (str) port_type: <class 'str'>,\n          'link_type': <class 'str'>,\n          Optional  (str) internal: <class 'bool'>,\n          Optional  (str) root_guard: <class 'bool'>,\n          Optional  (str) pvst_simulation: <class 'bool'>,\n          'counters': {\n            'bpdu_sent': <class 'int'>,\n            'bpdu_received': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_spanning_tree.py#L548"}}, "show spanning-tree mst configuration": {"ios": {"class": "ShowSpanningTreeMstConfiguration", "doc": "Parser for show spanning-tree mst configuration ", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'mstp': {\n  'name': <class 'str'>,\n  'revision': <class 'int'>,\n  'instances_configured': <class 'int'>,\n  'mst_instances': {\n    Any  (str) *: {\n      'vlan_mapped': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_mst_configuration", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L47"}, "iosxe": {"class": "ShowSpanningTreeMstConfiguration", "doc": "Parser for show spanning-tree mst configuration", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'mstp': {\n  'name': <class 'str'>,\n  'revision': <class 'int'>,\n  'instances_configured': <class 'int'>,\n  'mst_instances': {\n    Any  (str) *: {\n      'vlan_mapped': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_mst_configuration", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L1029"}}, "show spanning-tree mst detail": {"ios": {"class": "ShowSpanningTreeMstDetail", "doc": null, "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'mst_instances': {\n  Any  (str) *: {\n    'mst_id': <class 'int'>,\n    Optional  (str) vlan: <class 'str'>,\n    'bridge_address': <class 'str'>,\n    'bridge_priority': <class 'int'>,\n    'sysid': <class 'int'>,\n    'root': <class 'str'>,\n    Optional  (str) operational: {\n      'hello_time': <class 'int'>,\n      'forward_delay': <class 'int'>,\n      'max_age': <class 'int'>,\n      'tx_hold_count': <class 'int'>,\n      },\n    Optional  (str) configured: {\n      'hello_time': <class 'int'>,\n      'forward_delay': <class 'int'>,\n      'max_age': <class 'int'>,\n      'max_hops': <class 'int'>,\n      },\n    'interfaces': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        Optional  (str) broken_reason: <class 'str'>,\n        'name': <class 'str'>,\n        'port_id': <class 'str'>,\n        'cost': <class 'int'>,\n        'port_priority': <class 'int'>,\n        'designated_root_priority': <class 'int'>,\n        'designated_root_address': <class 'str'>,\n        'designated_root_cost': <class 'int'>,\n        Optional  (str) designated_regional_root_cost: <class 'int'>,\n        Optional  (str) designated_regional_root_priority: <class 'int'>,\n        Optional  (str) designated_regional_root_address: <class 'str'>,\n        'designated_bridge_priority': <class 'int'>,\n        'designated_bridge_address': <class 'str'>,\n        'designated_bridge_port_id': <class 'str'>,\n        'forward_transitions': <class 'int'>,\n        'message_expires': <class 'int'>,\n        'forward_delay': <class 'int'>,\n        'counters': {\n          'bpdu_sent': <class 'int'>,\n          'bpdu_received': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_mst_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L38"}, "iosxe": {"class": "ShowSpanningTreeMstDetail", "doc": "Parser for show spanning-tree mst detail", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'mst_instances': {\n  Any  (str) *: {\n    'mst_id': <class 'int'>,\n    Optional  (str) vlan: <class 'str'>,\n    'bridge_address': <class 'str'>,\n    'bridge_priority': <class 'int'>,\n    'sysid': <class 'int'>,\n    'root': <class 'str'>,\n    Optional  (str) operational: {\n      'hello_time': <class 'int'>,\n      'forward_delay': <class 'int'>,\n      'max_age': <class 'int'>,\n      'tx_hold_count': <class 'int'>,\n      },\n    Optional  (str) configured: {\n      'hello_time': <class 'int'>,\n      'forward_delay': <class 'int'>,\n      'max_age': <class 'int'>,\n      'max_hops': <class 'int'>,\n      },\n    'interfaces': {\n      Any  (str) *: {\n        'status': <class 'str'>,\n        Optional  (str) broken_reason: <class 'str'>,\n        'name': <class 'str'>,\n        'port_id': <class 'str'>,\n        'cost': <class 'int'>,\n        'port_priority': <class 'int'>,\n        'designated_root_priority': <class 'int'>,\n        'designated_root_address': <class 'str'>,\n        'designated_root_cost': <class 'int'>,\n        Optional  (str) designated_regional_root_cost: <class 'int'>,\n        Optional  (str) designated_regional_root_priority: <class 'int'>,\n        Optional  (str) designated_regional_root_address: <class 'str'>,\n        'designated_bridge_priority': <class 'int'>,\n        'designated_bridge_address': <class 'str'>,\n        'designated_bridge_port_id': <class 'str'>,\n        'forward_transitions': <class 'int'>,\n        'message_expires': <class 'int'>,\n        'forward_delay': <class 'int'>,\n        'counters': {\n          'bpdu_sent': <class 'int'>,\n          'bpdu_received': <class 'int'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_mst_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L593"}, "nxos": {"class": "ShowSpanningTreeMst", "doc": "Parser for:\n            show spanning-tree mst detail\n    ", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'mstp': {\n  'mst_intances': {\n    Any  (str) *: {\n      'mst_id': <class 'int'>,\n      'vlans_mapped': <class 'str'>,\n      'bridge_priority': <class 'int'>,\n      'bridge_address': <class 'str'>,\n      Optional  (str) sys_id: <class 'int'>,\n      Optional  (str) root_for_cist: <class 'str'>,\n      Optional  (str) regional_root: <class 'str'>,\n      Optional  (str) hold_time: <class 'int'>,\n      Optional  (str) topology_changes: <class 'int'>,\n      Optional  (str) time_since_topology_change: <class 'str'>,\n      'interfaces': {\n        Any  (str) *: {\n          'name': <class 'str'>,\n          'port_cost': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'port_id': <class 'str'>,\n          'port_state': <class 'str'>,\n          'bridge_assurance_inconsistent': <class 'bool'>,\n          'vpc_peer_link_inconsistent': <class 'bool'>,\n          'designated_root_priority': <class 'int'>,\n          'designated_root_address': <class 'str'>,\n          'designated_root_cost': <class 'int'>,\n          'designated_bridge_priority': <class 'int'>,\n          'designated_bridge_address': <class 'str'>,\n          'designated_bridge_port_id': <class 'str'>,\n          'designated_regional_root_cost': <class 'int'>,\n          'designated_regional_root_priority': <class 'int'>,\n          'designated_regional_root_address': <class 'str'>,\n          Optional  (str) broken_reason: <class 'str'>,\n          Optional  (str) designated_port_num: <class 'str'>,\n          Optional  (str) timers: {\n            'forward_transitions': <class 'int'>,\n            'forward_delay': <class 'int'>,\n            'message_expires_in': <class 'int'>,\n            },\n          Optional  (str) counters: {\n            'bpdu_sent': <class 'int'>,\n            'bpdu_recieved': <class 'int'>,\n            },\n          },\n        },\n      Any  (str) *: {\n        'domain': <class 'str'>,\n        'hello_time': <class 'int'>,\n        'max_age': <class 'int'>,\n        'forwarding_delay': <class 'int'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) max_hop: <class 'int'>,\n        Optional  (str) hold_count: <class 'int'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_mst_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_spanning_tree.py#L85"}}, "show spanning-tree mst {mst}": {"ios": {"class": "ShowSpanningTree", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      Any  (str) *: {\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) cost: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        'max_age': <class 'int'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        },\n      'interfaces': {\n        Any  (str) *: {\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          'cost': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'type': <class 'str'>,\n          Optional  (str) peer: <class 'str'>,\n          Optional  (str) bound: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_mst_mst", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L33"}, "iosxe": {"class": "ShowSpanningTree", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      Any  (str) *: {\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) cost: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        'max_age': <class 'int'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        },\n      'interfaces': {\n        Any  (str) *: {\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          'cost': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'type': <class 'str'>,\n          Optional  (str) peer: <class 'str'>,\n          Optional  (str) bound: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_mst_mst", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L871"}, "iosxr": {"class": "ShowSpanningTreeMst", "doc": "Parser for:\n\t\t* 'show spanning-tree mst {mst_id}'\n\t", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'mstp': {\n  Any  (str) *: {\n    'mst_instances': {\n      Any  (str) *: {\n        'mst_id': <class 'str'>,\n        Optional  (str) vlan: <class 'str'>,\n        Optional  (str) this_bridge_is: <class 'str'>,\n        Optional  (str) bridge_priority: <class 'int'>,\n        Optional  (str) bridge_address: <class 'str'>,\n        Optional  (str) bridge_max_age: <class 'int'>,\n        Optional  (str) bridge_forward_delay: <class 'int'>,\n        Optional  (str) bridge_max_hops: <class 'int'>,\n        Optional  (str) bridge_transmit_hold_count: <class 'int'>,\n        Optional  (str) designated_root_priority: <class 'int'>,\n        Optional  (str) designated_root_address: <class 'str'>,\n        Optional  (str) root_cost: <class 'int'>,\n        Optional  (str) root_max_age: <class 'int'>,\n        Optional  (str) root_forward_delay: <class 'int'>,\n        Optional  (str) cist_root_priority: <class 'int'>,\n        Optional  (str) cist_root_address: <class 'str'>,\n        Optional  (str) cist_root_cost: <class 'int'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'interfaces': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'cost': <class 'int'>,\n            'port_priority': <class 'int'>,\n            'port_num': <class 'int'>,\n            'role': <class 'str'>,\n            'port_state': <class 'str'>,\n            Optional  (str) designated_cost: <class 'int'>,\n            'designated_bridge_priority': <class 'int'>,\n            'designated_bridge_address': <class 'str'>,\n            'designated_port_priority': <class 'int'>,\n            'designated_port_num': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_mst_mst", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_spanning_tree.py#L75"}}, "show spanning-tree mstag {mag_domain}": {"iosxr": {"class": "ShowSpanningTreeMstag", "doc": "Parser for 'show spanning-tree mstag <mag_domain>'", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'mstag': {\n  Any  (str) *: {\n    'domain': <class 'str'>,\n    'interfaces': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'preempt_delay': <class 'bool'>,\n        Optional  (str) preempt_delay_state: <class 'str'>,\n        'name': <class 'str'>,\n        'revision': <class 'int'>,\n        'max_age': <class 'int'>,\n        'provider_bridge': <class 'bool'>,\n        'bridge_id': <class 'str'>,\n        'port_id': <class 'int'>,\n        'external_cost': <class 'int'>,\n        'hello_time': <class 'int'>,\n        'active': <class 'bool'>,\n        'counters': {\n          'bdpu_sent': <class 'int'>,\n          },\n        },\n      'instances': {\n        Any  (str) *: {\n          'instance': <class 'int'>,\n          'vlans': <class 'str'>,\n          'priority': <class 'int'>,\n          'root_bridge': <class 'str'>,\n          'root_priority': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'cost': <class 'int'>,\n          'counters': {\n            'topology_changes': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_mstag_mag_domain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_spanning_tree.py#L287"}}, "show spanning-tree pvrst {pvst_id}": {"iosxr": {"class": "ShowSpanningTreePvrst", "doc": "Parser for 'show spanning-tree pvrst <pvst_id>'", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'pvst': {\n  Any  (str) *: {\n    'pvst_id': <class 'str'>,\n    'vlans': {\n      Any  (str) *: {\n        'vlan_id': <class 'int'>,\n        'designated_root_priority': <class 'int'>,\n        'designated_root_address': <class 'str'>,\n        'designated_root_max_age': <class 'int'>,\n        'designated_root_forward_delay': <class 'int'>,\n        'bridge_priority': <class 'int'>,\n        'bridge_address': <class 'str'>,\n        'bridge_max_age': <class 'int'>,\n        'bridge_forward_delay': <class 'int'>,\n        'bridge_transmit_hold_count': <class 'int'>,\n        'sys_id_ext': <class 'int'>,\n        'interface': {\n          Any  (str) *: {\n            'name': <class 'str'>,\n            'cost': <class 'int'>,\n            'port_priority': <class 'int'>,\n            'port_num': <class 'int'>,\n            'role': <class 'str'>,\n            'port_state': <class 'str'>,\n            'designated_bridge_priority': <class 'int'>,\n            'designated_bridge_address': <class 'str'>,\n            'designated_port_priority': <class 'int'>,\n            'designated_port_num': <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_pvrst_pvst_id", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_spanning_tree.py#L555"}}, "show spanning-tree pvrstag {pvrstag_domain}": {"iosxr": {"class": "ShowSpanningTreePvrsTag", "doc": "Parser for 'show spanning-tree pvrstag <pvrstag_domain>'", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'pvrstag': {\n  Any  (str) *: {\n    'domain': <class 'str'>,\n    'interfaces': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'vlans': {\n          Any  (str) *: {\n            'preempt_delay': <class 'bool'>,\n            Optional  (str) preempt_delay_state: <class 'str'>,\n            'sub_interface': <class 'str'>,\n            'sub_interface_state': <class 'str'>,\n            'max_age': <class 'int'>,\n            'root_priority': <class 'int'>,\n            'root_bridge': <class 'str'>,\n            'root_cost': <class 'int'>,\n            'bridge_priority': <class 'int'>,\n            'bridge_id': <class 'str'>,\n            'port_priority': <class 'int'>,\n            'port_id': <class 'int'>,\n            'hello_time': <class 'int'>,\n            'active': <class 'bool'>,\n            'counters': {\n              'bdpu_sent': <class 'int'>,\n              'topology_changes': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_pvrstag_pvrstag_domain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_spanning_tree.py#L710"}}, "show spanning-tree pvstag {pvstag_domain}": {"iosxr": {"class": "ShowSpanningTreePvsTag", "doc": "Parser for 'show spanning-tree pvstag <pvstag_domain>'", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\n'pvstag': {\n  Any  (str) *: {\n    'domain': <class 'str'>,\n    'interfaces': {\n      Any  (str) *: {\n        'interface': <class 'str'>,\n        'vlans': {\n          Any  (str) *: {\n            'preempt_delay': <class 'bool'>,\n            'sub_interface': <class 'str'>,\n            'sub_interface_state': <class 'str'>,\n            'max_age': <class 'int'>,\n            'root_priority': <class 'int'>,\n            'root_bridge': <class 'str'>,\n            'root_cost': <class 'int'>,\n            'bridge_priority': <class 'int'>,\n            'bridge_id': <class 'str'>,\n            'port_priority': <class 'int'>,\n            'port_id': <class 'int'>,\n            'hello_time': <class 'int'>,\n            'active': <class 'bool'>,\n            'counters': {\n              'bdpu_sent': <class 'int'>,\n              'topology_changes': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_pvstag_pvstag_domain", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_spanning_tree.py#L921"}}, "show spanning-tree summary": {"ios": {"class": "ShowSpanningTreeSummary", "doc": "Parser for show show spanning-tree summary", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nOptional  (str) etherchannel_misconfig_guard: <class 'bool'>,\nOptional  (str) extended_system_id: <class 'bool'>,\nOptional  (str) portfast_default: <class 'bool'>,\n'bpdu_guard': <class 'bool'>,\nOptional  (str) bpdu_filter: <class 'bool'>,\nOptional  (str) bridge_assurance: <class 'bool'>,\nOptional  (str) loop_guard: <class 'bool'>,\n'uplink_fast': <class 'bool'>,\n'backbone_fast': <class 'bool'>,\nOptional  (str) root_bridge_for: <class 'str'>,\nOptional  (str) pvst_simulation: <class 'bool'>,\nOptional  (str) pvst_simulation_status: <class 'str'>,\nOptional  (str) configured_pathcost: {\n  'method': <class 'str'>,\n  Optional  (str) operational_value: <class 'str'>,\n  },\nOptional  (str) mode: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'blocking': <class 'int'>,\n      'listening': <class 'int'>,\n      'learning': <class 'int'>,\n      'forwarding': <class 'int'>,\n      'stp_active': <class 'int'>,\n      },\n    },\n  },\n'total_statistics': {\n  'blockings': <class 'int'>,\n  'listenings': <class 'int'>,\n  'learnings': <class 'int'>,\n  'forwardings': <class 'int'>,\n  'stp_actives': <class 'int'>,\n  Optional  (str) num_of_msts: <class 'int'>,\n  Optional  (str) num_of_vlans: <class 'int'>,\n  },\n}", "uid": "show_spanning-tree_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L25"}, "iosxe": {"class": "ShowSpanningTreeSummary", "doc": "Parser for show show spanning-tree summary", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nOptional  (str) etherchannel_misconfig_guard: <class 'bool'>,\nOptional  (str) extended_system_id: <class 'bool'>,\nOptional  (str) portfast_default: <class 'bool'>,\n'bpdu_guard': <class 'bool'>,\nOptional  (str) bpdu_filter: <class 'bool'>,\nOptional  (str) bridge_assurance: <class 'bool'>,\nOptional  (str) loop_guard: <class 'bool'>,\n'uplink_fast': <class 'bool'>,\n'backbone_fast': <class 'bool'>,\nOptional  (str) root_bridge_for: <class 'str'>,\nOptional  (str) pvst_simulation: <class 'bool'>,\nOptional  (str) pvst_simulation_status: <class 'str'>,\nOptional  (str) configured_pathcost: {\n  'method': <class 'str'>,\n  Optional  (str) operational_value: <class 'str'>,\n  },\nOptional  (str) mode: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'blocking': <class 'int'>,\n      'listening': <class 'int'>,\n      'learning': <class 'int'>,\n      'forwarding': <class 'int'>,\n      'stp_active': <class 'int'>,\n      },\n    },\n  },\n'total_statistics': {\n  'blockings': <class 'int'>,\n  'listenings': <class 'int'>,\n  'learnings': <class 'int'>,\n  'forwardings': <class 'int'>,\n  'stp_actives': <class 'int'>,\n  Optional  (str) num_of_msts: <class 'int'>,\n  Optional  (str) num_of_vlans: <class 'int'>,\n  },\n}", "uid": "show_spanning-tree_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L68"}, "nxos": {"class": "ShowSpanningTreeSummary", "doc": "Parser class for:\n            show spanning-tree summary\n    ", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nOptional  (str) root_bridge_for: <class 'str'>,\nOptional  (str) mst_type: <class 'str'>,\n'port_type_default': <class 'bool'>,\n'bpdu_guard': <class 'bool'>,\n'bpdu_filter': <class 'bool'>,\n'bridge_assurance': <class 'bool'>,\n'loop_guard': <class 'bool'>,\n'path_cost_method': <class 'str'>,\nOptional  (str) pvst_simulation: <class 'bool'>,\nOptional  (str) vpc_peer_switch: <class 'bool'>,\nOptional  (str) vpc_peer_switch_status: <class 'str'>,\n'stp_lite': <class 'bool'>,\nOptional  (str) portfast_default: <class 'bool'>,\nOptional  (str) uplink_fast: <class 'bool'>,\nOptional  (str) backbone_fast: <class 'bool'>,\n'mode': {\n  Any  (str) *: {\n    Any  (str) *: {\n      'blocking': <class 'int'>,\n      'listening': <class 'int'>,\n      'learning': <class 'int'>,\n      'forwarding': <class 'int'>,\n      'stp_active': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) total_statistics: {\n  'blockings': <class 'int'>,\n  'listenings': <class 'int'>,\n  'learnings': <class 'int'>,\n  'forwardings': <class 'int'>,\n  'stp_actives': <class 'int'>,\n  Optional  (str) num_of_msts: <class 'int'>,\n  Optional  (str) num_of_vlans: <class 'int'>,\n  },\n}", "uid": "show_spanning-tree_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_spanning_tree.py#L303"}}, "show spanning-tree vlan {vlan}": {"ios": {"class": "ShowSpanningTree", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      Any  (str) *: {\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) cost: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        'max_age': <class 'int'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        },\n      'interfaces': {\n        Any  (str) *: {\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          'cost': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'type': <class 'str'>,\n          Optional  (str) peer: <class 'str'>,\n          Optional  (str) bound: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_vlan_vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_spanning_tree.py#L33"}, "iosxe": {"class": "ShowSpanningTree", "doc": "Parser for show spanning-tree [mst|vlan <WORD>]", "module_name": "show_spanning_tree", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Any  (str) *: {\n    Any  (str) *: {\n      Any  (str) *: {\n        'priority': <class 'int'>,\n        'address': <class 'str'>,\n        Optional  (str) cost: <class 'int'>,\n        Optional  (str) port: <class 'int'>,\n        Optional  (str) interface: <class 'str'>,\n        Optional  (str) configured_bridge_priority: <class 'int'>,\n        Optional  (str) sys_id_ext: <class 'int'>,\n        'hello_time': <class 'int'>,\n        'max_age': <class 'int'>,\n        'forward_delay': <class 'int'>,\n        Optional  (str) aging_time: <class 'int'>,\n        },\n      'interfaces': {\n        Any  (str) *: {\n          'role': <class 'str'>,\n          'port_state': <class 'str'>,\n          'cost': <class 'int'>,\n          'port_priority': <class 'int'>,\n          'port_num': <class 'int'>,\n          'type': <class 'str'>,\n          Optional  (str) peer: <class 'str'>,\n          Optional  (str) bound: <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_spanning-tree_vlan_vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_spanning_tree.py#L871"}}, "show ssh history": {"iosxr": {"class": "ShowSshHistory", "doc": "Parser for \"show ssh history\"", "module_name": "show_ssh", "package": "genie.libs.parser", "schema": "{\n'session': {\n  'incoming': {\n    Any  (str) *: {\n      'chan': <class 'int'>,\n      'pty': <class 'str'>,\n      'location': <class 'str'>,\n      'userid': <class 'str'>,\n      'host': <class 'str'>,\n      'ver': <class 'str'>,\n      'authentication': <class 'str'>,\n      'connection_type': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ssh_history", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ssh.py#L149"}}, "show ssh session details": {"iosxr": {"class": "ShowSsh", "doc": " Parser for \"show ssh session details\"", "module_name": "show_ssh", "package": "genie.libs.parser", "schema": "{\n'session': {\n  'version': <class 'str'>,\n  Optional  (str) incoming: {\n    Any  (str) *: {\n      'id': <class 'int'>,\n      'key_exchange': <class 'str'>,\n      'pubkey': <class 'str'>,\n      'incipher': <class 'str'>,\n      'outcipher': <class 'str'>,\n      'inmac': <class 'str'>,\n      'outmac': <class 'str'>,\n      },\n    },\n  Optional  (str) outgoing: {\n    Any  (str) *: {\n      'id': <class 'int'>,\n      'key_exchange': <class 'str'>,\n      'pubkey': <class 'str'>,\n      'incipher': <class 'str'>,\n      'outcipher': <class 'str'>,\n      'inmac': <class 'str'>,\n      'outmac': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_ssh_session_details", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_ssh.py#L58"}}, "show stack-power": {"ios": {"class": "ShowStackPower", "doc": "Parser for show stack-power", "module_name": "show_power", "package": "genie.libs.parser", "schema": "{\n'power_stack': {\n  Any  (str) *: {\n    'mode': <class 'str'>,\n    'topology': <class 'str'>,\n    'total_power': <class 'int'>,\n    'reserved_power': <class 'int'>,\n    'allocated_power': <class 'int'>,\n    'unused_power': <class 'int'>,\n    'switch_num': <class 'int'>,\n    'power_supply_num': <class 'int'>,\n    },\n  },\n}", "uid": "show_stack-power", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_power.py#L8"}, "iosxe": {"class": "ShowStackPower", "doc": "Parser for show stack-power", "module_name": "show_power", "package": "genie.libs.parser", "schema": "{\n'power_stack': {\n  Any  (str) *: {\n    'mode': <class 'str'>,\n    'topology': <class 'str'>,\n    'total_power': <class 'int'>,\n    'reserved_power': <class 'int'>,\n    'allocated_power': <class 'int'>,\n    'unused_power': <class 'int'>,\n    'switch_num': <class 'int'>,\n    'power_supply_num': <class 'int'>,\n    },\n  },\n}", "uid": "show_stack-power", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_power.py#L37"}}, "show standby all": {"ios": {"class": "ShowStandbyAll", "doc": "Parser for show standby all", "module_name": "show_standby", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) use_bia: <class 'bool'>,\n  Optional  (str) redirects_disable: <class 'bool'>,\n  Optional  (str) interface: <class 'str'>,\n  Optional  (str) mac_refresh: <class 'int'>,\n  Optional  (str) mac_next_refresh: <class 'int'>,\n  'address_family': {\n    Any  (str) *: {\n      'version': {\n        Any  (str) *: {\n          'groups': {\n            Any  (str) *: {\n              'group_number': <class 'int'>,\n              Optional  (str) follow: <class 'str'>,\n              Optional  (str) hsrp_router_state: <class 'str'>,\n              Optional  (str) hsrp_router_state_reason: <class 'str'>,\n              Optional  (str) last_state_change: <class 'str'>,\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) authentication_type: <class 'str'>,\n              Optional  (str) tracked_objects: {\n                Optional  (Any) Any  (str) *: {\n                  Optional  (str) object_name: <class 'int'>,\n                  },\n                },\n              Optional  (str) timers: {\n                Optional  (str) hello_msec_flag: <class 'bool'>,\n                Optional  (str) hello_msec: <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                Optional  (str) hold_msec_flag: <class 'bool'>,\n                Optional  (str) hold_msec: <class 'int'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                Optional  (str) next_hello_sent: <class 'float'>,\n                },\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) secondary_ipv4_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'str'>,\n                },\n              Optional  (str) global_ipv6_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) preempt_min_delay: <class 'int'>,\n              Optional  (str) preempt_reload_delay: <class 'int'>,\n              Optional  (str) preempt_sync_delay: <class 'int'>,\n              Optional  (str) statistics: {\n                Optional  (str) num_state_changes: <class 'int'>,\n                },\n              Optional  (str) active_router_priority: <class 'int'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) active_expires_in: <class 'float'>,\n              Optional  (str) default_priority: <class 'int'>,\n              Optional  (str) configured_priority: <class 'int'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) active_mac_in_use: <class 'bool'>,\n              Optional  (str) local_virtual_mac_address: <class 'str'>,\n              Optional  (str) local_virtual_mac_default: <class 'str'>,\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>,\n              Optional  (str) local_virtual_mac_address_conf: <class 'str'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              Optional  (str) slave_group_number: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) standby_expires_in: <class 'float'>,\n              },\n            },\n          Optional  (str) slave_groups: {\n            Any  (str) *: {\n              'group_number': <class 'int'>,\n              Optional  (str) follow: <class 'str'>,\n              Optional  (str) hsrp_router_state: <class 'str'>,\n              Optional  (str) hsrp_router_state_reason: <class 'str'>,\n              Optional  (str) last_state_change: <class 'str'>,\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) authentication_type: <class 'str'>,\n              Optional  (str) tracked_objects: {\n                Optional  (Any) Any  (str) *: {\n                  Optional  (str) object_name: <class 'int'>,\n                  },\n                },\n              Optional  (str) timers: {\n                Optional  (str) hello_msec_flag: <class 'bool'>,\n                Optional  (str) hello_msec: <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                Optional  (str) hold_msec_flag: <class 'bool'>,\n                Optional  (str) hold_msec: <class 'int'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                Optional  (str) next_hello_sent: <class 'float'>,\n                },\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) secondary_ipv4_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'str'>,\n                },\n              Optional  (str) global_ipv6_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) preempt_min_delay: <class 'int'>,\n              Optional  (str) preempt_reload_delay: <class 'int'>,\n              Optional  (str) preempt_sync_delay: <class 'int'>,\n              Optional  (str) statistics: {\n                Optional  (str) num_state_changes: <class 'int'>,\n                },\n              Optional  (str) active_router_priority: <class 'int'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) active_expires_in: <class 'float'>,\n              Optional  (str) default_priority: <class 'int'>,\n              Optional  (str) configured_priority: <class 'int'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) active_mac_in_use: <class 'bool'>,\n              Optional  (str) local_virtual_mac_address: <class 'str'>,\n              Optional  (str) local_virtual_mac_default: <class 'str'>,\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>,\n              Optional  (str) local_virtual_mac_address_conf: <class 'str'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              Optional  (str) slave_group_number: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) standby_expires_in: <class 'float'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_standby_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_standby.py#L19"}, "iosxe": {"class": "ShowStandbyAll", "doc": "Parser for show standby all\n    parser class - implements detail parsing mechanisms for cli,yang output.\n    ", "module_name": "show_standby", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) use_bia: <class 'bool'>,\n  Optional  (str) redirects_disable: <class 'bool'>,\n  Optional  (str) interface: <class 'str'>,\n  Optional  (str) mac_refresh: <class 'int'>,\n  Optional  (str) mac_next_refresh: <class 'int'>,\n  'address_family': {\n    Any  (str) *: {\n      'version': {\n        Any  (str) *: {\n          'groups': {\n            Any  (str) *: {\n              'group_number': <class 'int'>,\n              Optional  (str) follow: <class 'str'>,\n              Optional  (str) hsrp_router_state: <class 'str'>,\n              Optional  (str) hsrp_router_state_reason: <class 'str'>,\n              Optional  (str) last_state_change: <class 'str'>,\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) authentication_type: <class 'str'>,\n              Optional  (str) tracked_objects: {\n                Optional  (Any) Any  (str) *: {\n                  Optional  (str) object_name: <class 'int'>,\n                  },\n                },\n              Optional  (str) timers: {\n                Optional  (str) hello_msec_flag: <class 'bool'>,\n                Optional  (str) hello_msec: <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                Optional  (str) hold_msec_flag: <class 'bool'>,\n                Optional  (str) hold_msec: <class 'int'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                Optional  (str) next_hello_sent: <class 'float'>,\n                },\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) secondary_ipv4_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'str'>,\n                },\n              Optional  (str) global_ipv6_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) preempt_min_delay: <class 'int'>,\n              Optional  (str) preempt_reload_delay: <class 'int'>,\n              Optional  (str) preempt_sync_delay: <class 'int'>,\n              Optional  (str) statistics: {\n                Optional  (str) num_state_changes: <class 'int'>,\n                },\n              Optional  (str) active_router_priority: <class 'int'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) active_expires_in: <class 'float'>,\n              Optional  (str) default_priority: <class 'int'>,\n              Optional  (str) configured_priority: <class 'int'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) active_mac_in_use: <class 'bool'>,\n              Optional  (str) local_virtual_mac_address: <class 'str'>,\n              Optional  (str) local_virtual_mac_default: <class 'str'>,\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>,\n              Optional  (str) local_virtual_mac_address_conf: <class 'str'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              Optional  (str) slave_group_number: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) standby_expires_in: <class 'float'>,\n              },\n            },\n          Optional  (str) slave_groups: {\n            Any  (str) *: {\n              'group_number': <class 'int'>,\n              Optional  (str) follow: <class 'str'>,\n              Optional  (str) hsrp_router_state: <class 'str'>,\n              Optional  (str) hsrp_router_state_reason: <class 'str'>,\n              Optional  (str) last_state_change: <class 'str'>,\n              Optional  (str) authentication: <class 'str'>,\n              Optional  (str) authentication_type: <class 'str'>,\n              Optional  (str) tracked_objects: {\n                Optional  (Any) Any  (str) *: {\n                  Optional  (str) object_name: <class 'int'>,\n                  },\n                },\n              Optional  (str) timers: {\n                Optional  (str) hello_msec_flag: <class 'bool'>,\n                Optional  (str) hello_msec: <class 'int'>,\n                Optional  (str) hello_sec: <class 'int'>,\n                Optional  (str) hold_msec_flag: <class 'bool'>,\n                Optional  (str) hold_msec: <class 'int'>,\n                Optional  (str) hold_sec: <class 'int'>,\n                Optional  (str) cfgd_hello_msec: <class 'int'>,\n                Optional  (str) cfgd_hold_msec: <class 'int'>,\n                Optional  (str) next_hello_sent: <class 'float'>,\n                },\n              Optional  (str) primary_ipv4_address: {\n                'address': <class 'str'>,\n                },\n              Optional  (str) secondary_ipv4_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) link_local_ipv6_address: {\n                Optional  (str) address: <class 'str'>,\n                Optional  (str) auto_configure: <class 'str'>,\n                },\n              Optional  (str) global_ipv6_addresses: {\n                Any  (str) *: {\n                  'address': <class 'str'>,\n                  },\n                },\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) preempt: <class 'bool'>,\n              Optional  (str) preempt_min_delay: <class 'int'>,\n              Optional  (str) preempt_reload_delay: <class 'int'>,\n              Optional  (str) preempt_sync_delay: <class 'int'>,\n              Optional  (str) statistics: {\n                Optional  (str) num_state_changes: <class 'int'>,\n                },\n              Optional  (str) active_router_priority: <class 'int'>,\n              Optional  (str) active_ip_address: <class 'str'>,\n              Optional  (str) active_ipv6_address: <class 'str'>,\n              Optional  (str) active_expires_in: <class 'float'>,\n              Optional  (str) default_priority: <class 'int'>,\n              Optional  (str) configured_priority: <class 'int'>,\n              Optional  (str) session_name: <class 'str'>,\n              Optional  (str) active_mac_address: <class 'str'>,\n              Optional  (str) active_mac_in_use: <class 'bool'>,\n              Optional  (str) local_virtual_mac_address: <class 'str'>,\n              Optional  (str) local_virtual_mac_default: <class 'str'>,\n              Optional  (str) active_router: <class 'str'>,\n              Optional  (str) standby_router: <class 'str'>,\n              Optional  (str) standby_ip_address: <class 'str'>,\n              Optional  (str) standby_ipv6_address: <class 'str'>,\n              Optional  (str) virtual_mac_address_mac_in_use: <class 'bool'>,\n              Optional  (str) local_virtual_mac_address_conf: <class 'str'>,\n              Optional  (str) virtual_mac_address: <class 'str'>,\n              Optional  (str) slave_group_number: <class 'int'>,\n              Optional  (str) standby_priority: <class 'int'>,\n              Optional  (str) standby_expires_in: <class 'float'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_standby_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_standby.py#L373"}}, "show standby delay": {"ios": {"class": "ShowStandbyDelay", "doc": "Parser for show standby delay", "module_name": "show_standby", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'delay': {\n    'minimum_delay': <class 'int'>,\n    'reload_delay': <class 'int'>,\n    },\n  },\n}", "uid": "show_standby_delay", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_standby.py#L23"}, "iosxe": {"class": "ShowStandbyDelay", "doc": "Parser for show standby delay", "module_name": "show_standby", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'delay': {\n    'minimum_delay': <class 'int'>,\n    'reload_delay': <class 'int'>,\n    },\n  },\n}", "uid": "show_standby_delay", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_standby.py#L979"}}, "show standby internal": {"ios": {"class": "ShowStandbyInternal", "doc": "Parser for show standby internal", "module_name": "show_standby", "package": "genie.libs.parser", "schema": "{\n'hsrp_common_process_state': <class 'str'>,\nOptional  (str) msgQ_size: <class 'int'>,\nOptional  (str) msgQ_max_size: <class 'int'>,\n'hsrp_ipv4_process_state': <class 'str'>,\n'hsrp_ipv6_process_state': <class 'str'>,\n'hsrp_timer_wheel_state': <class 'str'>,\nOptional  (str) hsrp_ha_state: <class 'str'>,\nOptional  (str) v3_to_v4_transform: <class 'str'>,\nOptional  (str) virtual_ip_hash_table: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      'interface': <class 'str'>,\n      'group': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) mac_address_table: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'group': <class 'int'>,\n    },\n  },\n}", "uid": "show_standby_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_standby.py#L15"}, "iosxe": {"class": "ShowStandbyInternal", "doc": "Parser for show standby internal", "module_name": "show_standby", "package": "genie.libs.parser", "schema": "{\n'hsrp_common_process_state': <class 'str'>,\nOptional  (str) msgQ_size: <class 'int'>,\nOptional  (str) msgQ_max_size: <class 'int'>,\n'hsrp_ipv4_process_state': <class 'str'>,\n'hsrp_ipv6_process_state': <class 'str'>,\n'hsrp_timer_wheel_state': <class 'str'>,\nOptional  (str) hsrp_ha_state: <class 'str'>,\nOptional  (str) v3_to_v4_transform: <class 'str'>,\nOptional  (str) virtual_ip_hash_table: {\n  Any  (str) *: {\n    Any  (str) *: {\n      'ip': <class 'str'>,\n      'interface': <class 'str'>,\n      'group': <class 'int'>,\n      },\n    },\n  },\nOptional  (str) mac_address_table: {\n  Any  (str) *: {\n    'interface': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'group': <class 'int'>,\n    },\n  },\n}", "uid": "show_standby_internal", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_standby.py#L60"}}, "show static topology detail": {"iosxr": {"class": "ShowStaticTopologyDetail", "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) safi: <class 'str'>,\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) path_event: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) local_label: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) path_event: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) local_label: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_static_topology_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py#L78"}}, "show static vrf {vrf} topology detail": {"iosxr": {"class": "ShowStaticTopologyDetail", "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) safi: <class 'str'>,\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) path_event: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) local_label: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) path_event: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) local_label: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_static_vrf_vrf_topology_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py#L78"}}, "show static vrf {vrf} {af} topology detail": {"iosxr": {"class": "ShowStaticTopologyDetail", "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) safi: <class 'str'>,\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) path_event: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) local_label: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) path_event: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) local_label: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_static_vrf_vrf_af_topology_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py#L78"}}, "show static {af} topology detail": {"iosxr": {"class": "ShowStaticTopologyDetail", "doc": "Parser for:\n       show static topology detail\n       show static vrf all topology detail\n       show static vrf <vrf> topology detail\n       show static vrf <vrf> ipv4 topology detail\n       show static ipv4 topology detail\n       show static ipv6 topology detail\n    ", "module_name": "show_static_routing", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) address_family: {\n      Any  (str) *: {\n        Optional  (str) table_id: <class 'str'>,\n        Optional  (str) safi: <class 'str'>,\n        Optional  (str) routes: {\n          Any  (str) *: {\n            Optional  (str) route: <class 'str'>,\n            Optional  (str) next_hop: {\n              Optional  (str) outgoing_interface: {\n                Any  (str) *: {\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) path_event: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) local_label: <class 'str'>,\n                  },\n                },\n              Optional  (str) next_hop_list: {\n                Any  (str) *: {\n                  Optional  (str) index: <class 'int'>,\n                  Optional  (str) active: <class 'bool'>,\n                  Optional  (str) next_hop: <class 'str'>,\n                  Optional  (str) outgoing_interface: <class 'str'>,\n                  Optional  (str) path_event: <class 'str'>,\n                  Optional  (str) tag: <class 'int'>,\n                  Optional  (str) path_version: <class 'int'>,\n                  Optional  (str) path_status: <class 'str'>,\n                  Optional  (str) metrics: <class 'int'>,\n                  Optional  (str) track: <class 'int'>,\n                  Optional  (str) explicit_path: <class 'str'>,\n                  Optional  (str) preference: <class 'int'>,\n                  Optional  (str) local_label: <class 'str'>,\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_static_af_topology_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_static_routing.py#L78"}}, "show switch": {"ios": {"class": "ShowSwitch", "doc": "Parser for show switch", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'switch': {\n  'mac_address': <class 'str'>,\n  'mac_persistency_wait_time': <class 'str'>,\n  'stack': {\n    Any  (str) *: {\n      'role': <class 'str'>,\n      'mac_address': <class 'str'>,\n      'priority': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      'state': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_switch", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L589"}, "iosxe": {"class": "ShowSwitch", "doc": "Parser for show switch.", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'switch': {\n  'mac_address': <class 'str'>,\n  'mac_persistency_wait_time': <class 'str'>,\n  'stack': {\n    Any  (str) *: {\n      'role': <class 'str'>,\n      'mac_address': <class 'str'>,\n      'priority': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      'state': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_switch", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2688"}}, "show switch detail": {"ios": {"class": "ShowSwitchDetail", "doc": "Parser for show switch detail", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'switch': {\n  'mac_address': <class 'str'>,\n  'mac_persistency_wait_time': <class 'str'>,\n  'stack': {\n    Any  (str) *: {\n      'role': <class 'str'>,\n      'mac_address': <class 'str'>,\n      'priority': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      'state': <class 'str'>,\n      'ports': {\n        Any  (str) *: {\n          'stack_port_status': <class 'str'>,\n          'neighbors_num': Or (<class 'int'>, <class 'str'>),\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_switch_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L594"}, "iosxe": {"class": "ShowSwitchDetail", "doc": "Parser for show switch detail.", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'switch': {\n  'mac_address': <class 'str'>,\n  'mac_persistency_wait_time': <class 'str'>,\n  'stack': {\n    Any  (str) *: {\n      'role': <class 'str'>,\n      'mac_address': <class 'str'>,\n      'priority': <class 'str'>,\n      'hw_ver': <class 'str'>,\n      'state': <class 'str'>,\n      'ports': {\n        Any  (str) *: {\n          'stack_port_status': <class 'str'>,\n          'neighbors_num': Or (<class 'int'>, <class 'str'>),\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_switch_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L2572"}}, "show system buffers": {"junos": {"class": "ShowSystemBuffers", "doc": " Parser for:\n            - 'show system buffers'\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'memory-statistics': {\n  'cached-bytes': <class 'str'>,\n  'cached-jumbo-clusters-16k': <class 'str'>,\n  'cached-jumbo-clusters-4k': <class 'str'>,\n  'cached-jumbo-clusters-9k': <class 'str'>,\n  'cached-mbuf-clusters': <class 'str'>,\n  'cached-mbufs': <class 'str'>,\n  'cluster-failures': <class 'str'>,\n  'current-bytes-in-use': <class 'str'>,\n  'current-jumbo-clusters-16k': <class 'str'>,\n  'current-jumbo-clusters-4k': <class 'str'>,\n  'current-jumbo-clusters-9k': <class 'str'>,\n  'current-mbuf-clusters': <class 'str'>,\n  'current-mbufs': <class 'str'>,\n  'io-initiated': <class 'str'>,\n  'jumbo-cluster-failures-16k': <class 'str'>,\n  'jumbo-cluster-failures-4k': <class 'str'>,\n  'jumbo-cluster-failures-9k': <class 'str'>,\n  'max-jumbo-clusters-16k': <class 'str'>,\n  'max-jumbo-clusters-4k': <class 'str'>,\n  'max-jumbo-clusters-9k': <class 'str'>,\n  'max-mbuf-clusters': <class 'str'>,\n  'mbuf-failures': <class 'str'>,\n  'packet-count': <class 'str'>,\n  'packet-failures': <class 'str'>,\n  'packet-free': <class 'str'>,\n  'sfbuf-requests-delayed': <class 'str'>,\n  'sfbuf-requests-denied': <class 'str'>,\n  'total-bytes': <class 'str'>,\n  'total-jumbo-clusters-16k': <class 'str'>,\n  'total-jumbo-clusters-4k': <class 'str'>,\n  'total-jumbo-clusters-9k': <class 'str'>,\n  'total-mbuf-clusters': <class 'str'>,\n  'total-mbufs': <class 'str'>,\n  },\n}", "uid": "show_system_buffers", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L67"}}, "show system buffers no-forwarding": {"junos": {"class": "ShowSystemBuffersNoForwarding", "doc": " Parser for:\n            - 'show system buffers no-forwarding'\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'memory-statistics': {\n  'cached-bytes': <class 'str'>,\n  'cached-jumbo-clusters-16k': <class 'str'>,\n  'cached-jumbo-clusters-4k': <class 'str'>,\n  'cached-jumbo-clusters-9k': <class 'str'>,\n  'cached-mbuf-clusters': <class 'str'>,\n  'cached-mbufs': <class 'str'>,\n  'cluster-failures': <class 'str'>,\n  'current-bytes-in-use': <class 'str'>,\n  'current-jumbo-clusters-16k': <class 'str'>,\n  'current-jumbo-clusters-4k': <class 'str'>,\n  'current-jumbo-clusters-9k': <class 'str'>,\n  'current-mbuf-clusters': <class 'str'>,\n  'current-mbufs': <class 'str'>,\n  'io-initiated': <class 'str'>,\n  'jumbo-cluster-failures-16k': <class 'str'>,\n  'jumbo-cluster-failures-4k': <class 'str'>,\n  'jumbo-cluster-failures-9k': <class 'str'>,\n  'max-jumbo-clusters-16k': <class 'str'>,\n  'max-jumbo-clusters-4k': <class 'str'>,\n  'max-jumbo-clusters-9k': <class 'str'>,\n  'max-mbuf-clusters': <class 'str'>,\n  'mbuf-failures': <class 'str'>,\n  'packet-count': <class 'str'>,\n  'packet-failures': <class 'str'>,\n  'packet-free': <class 'str'>,\n  'sfbuf-requests-delayed': <class 'str'>,\n  'sfbuf-requests-denied': <class 'str'>,\n  'total-bytes': <class 'str'>,\n  'total-jumbo-clusters-16k': <class 'str'>,\n  'total-jumbo-clusters-4k': <class 'str'>,\n  'total-jumbo-clusters-9k': <class 'str'>,\n  'total-mbuf-clusters': <class 'str'>,\n  'total-mbufs': <class 'str'>,\n  },\n}", "uid": "show_system_buffers_no-forwarding", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L264"}}, "show system commit": {"junos": {"class": "ShowSystemCommit", "doc": " Parser for:\n            * show sysyem commit\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'commit-information': {\n  'commit-history': Use  (function) <function ShowSystemCommitSchema.validate_commit_history_list at 0x10973ab70>,\n  },\n}", "uid": "show_system_commit", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L488"}}, "show system core-dumps": {"junos": {"class": "ShowSystemCoreDumps", "doc": " Parser for:\n            * show system core-dumps\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'directory-list': {\n  'directory': {\n    'file-information': Use  (function) <function ShowSystemCoreDumpsSchema.validate_file_information_list at 0x10973af28>,\n    'output': <class 'list'>,\n    'total-files': <class 'str'>,\n    },\n  },\n}", "uid": "show_system_core-dumps", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L842"}}, "show system core-dumps no-forwarding": {"junos": {"class": "ShowSystemCoreDumpsNoForwarding", "doc": " Parser for:\n            - 'show system core-dumps no-forwarding'\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'directory-list': {\n  'directory': {\n    'file-information': Use  (function) <function ShowSystemCoreDumpsSchema.validate_file_information_list at 0x10973af28>,\n    'output': <class 'list'>,\n    'total-files': <class 'str'>,\n    },\n  },\n}", "uid": "show_system_core-dumps_no-forwarding", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L910"}}, "show system internal l2fwder Mac": {"nxos": {"class": "ShowSystemInternalL2fwderMac", "doc": "Parser for show system internal l2fwder Mac", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    'mac_addresses': {\n      Any  (str) *: {\n        'mac_type': <class 'str'>,\n        'mac_aging_time': <class 'str'>,\n        'entry': <class 'str'>,\n        'secure': <class 'str'>,\n        'ntfy': <class 'str'>,\n        'ports': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_system_internal_l2fwder_Mac", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_system.py#L248"}}, "show system internal l2fwder mac": {"nxos": {"class": "ShowSystemInternalL2fwderMac", "doc": "Parser for show system internal l2fwder mac", "module_name": "show_fdb", "package": "genie.libs.parser", "schema": "{\n'mac_table': {\n  'vlans': {\n    Any  (str) *: {\n      'vlan': <class 'str'>,\n      'mac_addresses': {\n        Any  (str) *: {\n          'mac_address': <class 'str'>,\n          Optional  (str) entry: <class 'str'>,\n          'secure': <class 'str'>,\n          'ntfy': <class 'str'>,\n          Optional  (str) drop: {\n            'drop': <class 'bool'>,\n            'age': <class 'str'>,\n            'mac_type': <class 'str'>,\n            },\n          Optional  (str) interfaces: {\n            Any  (str) *: {\n              'interface': <class 'str'>,\n              'age': <class 'str'>,\n              'mac_type': <class 'str'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_system_internal_l2fwder_mac", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_fdb.py#L347"}}, "show system internal sysmgr service name {process}": {"nxos": {"class": "ShowSystemInternalSysmgrServiceName", "doc": "Parser for show system internal sysmgr service name <process>", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'instance': {\n  Any  (str) *: {\n    'tag': {\n      Any  (str) *: {\n        'process_name': <class 'str'>,\n        'internal_id': <class 'int'>,\n        'uuid': <class 'str'>,\n        'state': <class 'str'>,\n        'plugin_id': <class 'str'>,\n        'state_start_date': <class 'str'>,\n        Optional  (str) last_restart_date: <class 'str'>,\n        Optional  (str) pid: <class 'int'>,\n        Optional  (str) previous_pid: <class 'int'>,\n        Optional  (str) sap: <class 'int'>,\n        Optional  (str) restart_count: <class 'int'>,\n        Optional  (str) reboot_state: <class 'str'>,\n        Optional  (str) last_terminate_reason: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_system_internal_sysmgr_service_name_process", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_system.py#L44"}}, "show system ntp all": {"sros": {"class": "ShowSystemNtpAll", "doc": " Parser for show system ntp all", "module_name": "show_system_ntp_all", "package": "genie.libs.parser", "schema": "{\n'clock_state': {\n  'system_status': {\n    'configured': <class 'str'>,\n    'admin_status': <class 'str'>,\n    'server_enabled': <class 'str'>,\n    'clock_source': <class 'str'>,\n    'auth_check': <class 'str'>,\n    'current_date_time': <class 'str'>,\n    'stratum': <class 'int'>,\n    'oper_status': <class 'str'>,\n    'server_authenticate': <class 'str'>,\n    },\n  },\nOptional  (str) peer: {\n  Any  (str) *: {\n    'local_mode': {\n      Any  (str) *: {\n        'state': <class 'str'>,\n        'refid': <class 'str'>,\n        'stratum': <class 'str'>,\n        'type': <class 'str'>,\n        'poll': <class 'int'>,\n        'reach': <class 'str'>,\n        'offset': <class 'float'>,\n        'a': <class 'str'>,\n        'router': <class 'str'>,\n        'remote': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_system_ntp_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/sros/show_system_ntp_all.py#L56"}}, "show system queues": {"junos": {"class": "ShowSystemQueues", "doc": " Parser for:\n            * show system queues\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'queues-statistics': {\n  'interface-queues-statistics': {\n    'interface-queue': Use  (function) <function ShowSystemQueuesSchema.validate_interface_queue_list at 0x10973ac80>,\n    },\n  'protocol-queues-statistics': {\n    'protocol-queue': Use  (function) <function ShowSystemQueuesSchema.validate_interface_queue_list at 0x10973ac80>,\n    },\n  },\n}", "uid": "show_system_queues", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L592"}}, "show system queues no-forwarding": {"junos": {"class": "ShowSystemQueuesNoForwarding", "doc": " Parser for:\n            * show system queues no-forwarding\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'queues-statistics': {\n  'interface-queues-statistics': {\n    'interface-queue': Use  (function) <function ShowSystemQueuesSchema.validate_interface_queue_list at 0x10973ac80>,\n    },\n  'protocol-queues-statistics': {\n    'protocol-queue': Use  (function) <function ShowSystemQueuesSchema.validate_interface_queue_list at 0x10973ac80>,\n    },\n  },\n}", "uid": "show_system_queues_no-forwarding", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L648"}}, "show system storage": {"junos": {"class": "ShowSystemStorage", "doc": " Parser for:\n            * show system storage\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\n'system-storage-information': {\n  'filesystem': Use  (function) <function ShowSystemStorageSchema.validate_filesystem_list at 0x10973ae18>,\n  },\n}", "uid": "show_system_storage", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L723"}}, "show system uptime": {"junos": {"class": "ShowSystemUptime", "doc": " Parser for:\n            * show system uptime\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'system-uptime-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'current-time': {\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    },\n  'last-configured-time': {\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'time-length': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'user': <class 'str'>,\n    },\n  'protocols-started-time': {\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'time-length': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    },\n  'system-booted-time': {\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'time-length': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    },\n  'time-source': <class 'str'>,\n  'uptime-information': {\n    'active-user-count': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:format: <class 'str'>,\n      },\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'load-average-1': <class 'str'>,\n    'load-average-15': <class 'str'>,\n    'load-average-5': <class 'str'>,\n    'up-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_system_uptime", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L998"}}, "show system uptime no-forwarding": {"junos": {"class": "ShowSystemUptimeNoForwarding", "doc": " Parser for:\n            * show system uptime no-forwarding\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'system-uptime-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'current-time': {\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    },\n  'last-configured-time': {\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'time-length': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'user': <class 'str'>,\n    },\n  'protocols-started-time': {\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'time-length': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    },\n  'system-booted-time': {\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'time-length': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    },\n  'time-source': <class 'str'>,\n  'uptime-information': {\n    'active-user-count': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:format: <class 'str'>,\n      },\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'load-average-1': <class 'str'>,\n    'load-average-15': <class 'str'>,\n    'load-average-5': <class 'str'>,\n    'up-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_system_uptime_no-forwarding", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L1152"}}, "show system users": {"junos": {"class": "ShowSystemUsers", "doc": " Parser for:\n            * show system users\n    ", "module_name": "show_system", "package": "genie.libs.parser", "schema": "{\nOptional  (str) @xmlns:junos: <class 'str'>,\n'system-users-information': {\n  Optional  (str) @xmlns: <class 'str'>,\n  'uptime-information': {\n    'active-user-count': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:format: <class 'str'>,\n      },\n    'date-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'load-average-1': <class 'str'>,\n    'load-average-15': <class 'str'>,\n    'load-average-5': <class 'str'>,\n    'up-time': {\n      '#text': <class 'str'>,\n      Optional  (str) @junos:seconds: <class 'str'>,\n      },\n    'user-table': {\n      'user-entry': Use  (function) <function ShowSystemUsersSchema.validate_system_user_list at 0x10973aa60>,\n      },\n    },\n  },\n}", "uid": "show_system_users", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_system.py#L374"}}, "show ted database extensive": {"junos": {"class": "ShowTedDatabaseExtensive", "doc": " Parser for:\n            - 'show ted database extensive'\n            - 'show ted database extensive {node_id}'\n    ", "module_name": "show_ted", "package": "genie.libs.parser", "schema": "{\n'isis_nodes': <class 'int'>,\n'inet_nodes': <class 'int'>,\n'node': {\n  Any  (str) *: {\n    'type': <class 'str'>,\n    'age': <class 'int'>,\n    'link_in': <class 'int'>,\n    'link_out': <class 'int'>,\n    Optional  (str) protocol: {\n      Any  (str) *: {\n        'to': {\n          Any  (str) *: {\n            'local': {\n              Any  (str) *: {\n                'remote': {\n                  Any  (str) *: {\n                    'local_interface_index': <class 'int'>,\n                    'remote_interface_index': <class 'int'>,\n                    Optional  (str) color: <class 'str'>,\n                    'metric': <class 'int'>,\n                    Optional  (str) static_bw: <class 'str'>,\n                    Optional  (str) reservable_bw: <class 'str'>,\n                    Optional  (str) available_bw: {\n                      Any  (str) *: {\n                        'bw': <class 'str'>,\n                        },\n                      },\n                    'interface_switching_capability_descriptor': {\n                      Any  (str) *: {\n                        'switching_type': <class 'str'>,\n                        'encoding_type': <class 'str'>,\n                        'maximum_lsp_bw': {\n                          Any  (str) *: {\n                            'bw': <class 'str'>,\n                            },\n                          },\n                        },\n                      },\n                    Optional  (str) p2p_adj_sid: {\n                      'sid': {\n                        Any  (str) *: {\n                          'address_family': <class 'str'>,\n                          'flags': <class 'str'>,\n                          'weight': <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) prefixes: {\n          Any  (str) *: {\n            'flags': <class 'str'>,\n            'prefix_sid': {\n              Any  (str) *: {\n                'flags': <class 'str'>,\n                'algo': <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) spring_capabilities: {\n          'srgb_block': {\n            'start': <class 'int'>,\n            'range': <class 'int'>,\n            'flags': <class 'str'>,\n            },\n          },\n        Optional  (str) spring_algorithms: <class 'list'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ted_database_extensive", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ted.py#L102"}}, "show ted database extensive {node_id}": {"junos": {"class": "ShowTedDatabaseExtensive", "doc": " Parser for:\n            - 'show ted database extensive'\n            - 'show ted database extensive {node_id}'\n    ", "module_name": "show_ted", "package": "genie.libs.parser", "schema": "{\n'isis_nodes': <class 'int'>,\n'inet_nodes': <class 'int'>,\n'node': {\n  Any  (str) *: {\n    'type': <class 'str'>,\n    'age': <class 'int'>,\n    'link_in': <class 'int'>,\n    'link_out': <class 'int'>,\n    Optional  (str) protocol: {\n      Any  (str) *: {\n        'to': {\n          Any  (str) *: {\n            'local': {\n              Any  (str) *: {\n                'remote': {\n                  Any  (str) *: {\n                    'local_interface_index': <class 'int'>,\n                    'remote_interface_index': <class 'int'>,\n                    Optional  (str) color: <class 'str'>,\n                    'metric': <class 'int'>,\n                    Optional  (str) static_bw: <class 'str'>,\n                    Optional  (str) reservable_bw: <class 'str'>,\n                    Optional  (str) available_bw: {\n                      Any  (str) *: {\n                        'bw': <class 'str'>,\n                        },\n                      },\n                    'interface_switching_capability_descriptor': {\n                      Any  (str) *: {\n                        'switching_type': <class 'str'>,\n                        'encoding_type': <class 'str'>,\n                        'maximum_lsp_bw': {\n                          Any  (str) *: {\n                            'bw': <class 'str'>,\n                            },\n                          },\n                        },\n                      },\n                    Optional  (str) p2p_adj_sid: {\n                      'sid': {\n                        Any  (str) *: {\n                          'address_family': <class 'str'>,\n                          'flags': <class 'str'>,\n                          'weight': <class 'int'>,\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        Optional  (str) prefixes: {\n          Any  (str) *: {\n            'flags': <class 'str'>,\n            'prefix_sid': {\n              Any  (str) *: {\n                'flags': <class 'str'>,\n                'algo': <class 'int'>,\n                },\n              },\n            },\n          },\n        Optional  (str) spring_capabilities: {\n          'srgb_block': {\n            'start': <class 'int'>,\n            'range': <class 'int'>,\n            'flags': <class 'str'>,\n            },\n          },\n        Optional  (str) spring_algorithms: <class 'list'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_ted_database_extensive_node_id", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/junos/show_ted.py#L102"}}, "show traffic-collector external-interface": {"iosxr": {"class": "ShowTrafficCollecterExternalInterface", "doc": " Parser for show traffic-collector external-interface ", "module_name": "show_traffic_collector", "package": "genie.libs.parser", "schema": "{\n'interface': {\n  Any  (str) *: {\n    'status': <class 'str'>,\n    },\n  },\n}", "uid": "show_traffic-collector_external-interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_traffic_collector.py#L38"}}, "show traffic-collector ipv4 counters prefix {prefix} detail": {"iosxr": {"class": "ShowTrafficCollecterIpv4CountersPrefixDetail", "doc": " Parser for \n    show traffic-collector ipv4 counters prefix <prefix> detail\n     ", "module_name": "show_traffic_collector", "package": "genie.libs.parser", "schema": "{\n'ipv4_counters': {\n  'prefix': {\n    Any  (str) *: {\n      'label': <class 'int'>,\n      'state': <class 'str'>,\n      'counters': {\n        Any  (str) *: {\n          'average': {\n            'last_collection_intervals': <class 'int'>,\n            'packet_rate': <class 'int'>,\n            'byte_rate': <class 'int'>,\n            },\n          'history_of_counters': {\n            Any  (str) *: {\n              'packets': <class 'int'>,\n              'bytes': <class 'int'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_traffic-collector_ipv4_counters_prefix_prefix_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_traffic_collector.py#L108"}}, "show users": {"ios": {"class": "ShowUsers", "doc": "Parser for show users", "module_name": "show_session", "package": "genie.libs.parser", "schema": "{\n'line': {\n  Any  (str) *: {\n    'active': <class 'bool'>,\n    Optional  (str) user: <class 'str'>,\n    'host': <class 'str'>,\n    'idle': <class 'str'>,\n    Optional  (str) location: <class 'str'>,\n    },\n  },\nOptional  (str) interface: {\n  Any  (str) *: {\n    'user': {\n      Any  (str) *: {\n        'mode': <class 'str'>,\n        'idle': <class 'str'>,\n        Optional  (str) peer_address: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_users", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_session.py#L18"}, "iosxe": {"class": "ShowUsers", "doc": "Parser for show users", "module_name": "show_session", "package": "genie.libs.parser", "schema": "{\n'line': {\n  Any  (str) *: {\n    'active': <class 'bool'>,\n    Optional  (str) user: <class 'str'>,\n    'host': <class 'str'>,\n    'idle': <class 'str'>,\n    Optional  (str) location: <class 'str'>,\n    },\n  },\nOptional  (str) interface: {\n  Any  (str) *: {\n    'user': {\n      Any  (str) *: {\n        'mode': <class 'str'>,\n        'idle': <class 'str'>,\n        Optional  (str) peer_address: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_users", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_session.py#L122"}}, "show vdc current-vdc": {"nxos": {"class": "ShowVdcCurrent", "doc": "Parser for:\n        * show vdc current-vdc\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'current_vdc': {\n  'id': <class 'str'>,\n  'name': <class 'str'>,\n  },\n}", "uid": "show_vdc_current-vdc", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L1301"}}, "show vdc detail": {"nxos": {"class": "ShowVdcDetail", "doc": "Parser for show vdc detail", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'vdc': {\n  Any  (str) *: {\n    'name': <class 'str'>,\n    'state': <class 'str'>,\n    'mac_address': <class 'str'>,\n    'ha_policy': <class 'str'>,\n    'dual_sup_ha_policy': <class 'str'>,\n    'boot_order': <class 'str'>,\n    Optional  (str) cpu_share: <class 'str'>,\n    Optional  (str) cpu_share_percentage: <class 'str'>,\n    'create_time': <class 'str'>,\n    Optional  (str) reload_count: <class 'str'>,\n    Optional  (str) uptime: <class 'str'>,\n    'restart_count': <class 'str'>,\n    Optional  (str) restart_time: <class 'str'>,\n    'type': <class 'str'>,\n    'supported_linecards': <class 'str'>,\n    },\n  },\n}", "uid": "show_vdc_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L1157"}}, "show vdc membership status": {"nxos": {"class": "ShowVdcMembershipStatus", "doc": "Parser for show vdc membership status", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'virtual_device': {\n  Any  (str) *: {\n    'membership': {\n      Any  (str) *: {\n        Any  (str) *: {\n          'vd_ms_status': <class 'str'>,\n          'vd_ms_type': <class 'str'>,\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_vdc_membership_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L1350"}}, "show version": {"ios": {"c7600": {"class": "ShowVersion", "doc": "\n    parser for command: show version\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'version': {\n  'os': <class 'str'>,\n  'platform': <class 'str'>,\n  'version': <class 'str'>,\n  'image_id': <class 'str'>,\n  'compiled_by': <class 'str'>,\n  'compiled_date': <class 'str'>,\n  'rom': <class 'str'>,\n  'rom_version': <class 'str'>,\n  Optional  (str) image: {\n    'text_base': <class 'str'>,\n    'data_base': <class 'str'>,\n    },\n  'bootldr_version': <class 'str'>,\n  'hostname': <class 'str'>,\n  'uptime': <class 'str'>,\n  'returned_to_rom_by': <class 'str'>,\n  'system_image': <class 'str'>,\n  'chassis': <class 'str'>,\n  'processor_type': <class 'str'>,\n  'main_mem': <class 'str'>,\n  'processor_board_id': <class 'str'>,\n  'cpu': {\n    'name': <class 'str'>,\n    'speed': <class 'str'>,\n    'implementation': <class 'str'>,\n    'rev': <class 'str'>,\n    'l2_cache': <class 'str'>,\n    },\n  'last_reset': <class 'str'>,\n  Optional  (str) softwares: <class 'list'>,\n  'interfaces': {\n    'virtual_ethernet': <class 'int'>,\n    'gigabit_ethernet': <class 'int'>,\n    Optional  (str) serial: <class 'int'>,\n    },\n  'memory': {\n    'non_volatile_conf': <class 'int'>,\n    'packet_buffer': <class 'int'>,\n    'flash_internal_SIMM': <class 'int'>,\n    },\n  'curr_config_register': <class 'str'>,\n  Optional  (str) last_reload: {\n    'type': <class 'str'>,\n    'reason': <class 'str'>,\n    },\n  Optional  (str) control_processor_uptime: <class 'str'>,\n  Optional  (str) controller: {\n    'type': <class 'str'>,\n    'counts': <class 'int'>,\n    'serial': <class 'int'>,\n    },\n  },\n}", "uid": "show_version", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/c7600/show_platform.py#L17"}, "cat6k": {"class": "ShowVersion", "doc": "\n    Parser for show version\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'version': {\n  'os': <class 'str'>,\n  'platform': <class 'str'>,\n  'version': <class 'str'>,\n  'image_id': <class 'str'>,\n  'compiled_by': <class 'str'>,\n  'compiled_date': <class 'str'>,\n  'rom': <class 'str'>,\n  'rom_version': <class 'str'>,\n  Optional  (str) image: {\n    'text_base': <class 'str'>,\n    'data_base': <class 'str'>,\n    },\n  'bootldr_version': <class 'str'>,\n  'hostname': <class 'str'>,\n  'uptime': <class 'str'>,\n  'returned_to_rom_by': <class 'str'>,\n  'system_image': <class 'str'>,\n  'chassis': <class 'str'>,\n  'processor_type': <class 'str'>,\n  'main_mem': <class 'str'>,\n  'processor_board_id': <class 'str'>,\n  'cpu': {\n    'name': <class 'str'>,\n    'speed': <class 'str'>,\n    'implementation': <class 'str'>,\n    'rev': <class 'str'>,\n    'l2_cache': <class 'str'>,\n    },\n  'last_reset': <class 'str'>,\n  Optional  (str) softwares: <class 'list'>,\n  'interfaces': {\n    'virtual_ethernet': <class 'int'>,\n    'gigabit_ethernet': <class 'int'>,\n    Optional  (str) serial: <class 'int'>,\n    },\n  'memory': {\n    'non_volatile_conf': <class 'int'>,\n    'packet_buffer': <class 'int'>,\n    'flash_internal_SIMM': <class 'int'>,\n    },\n  'curr_config_register': <class 'str'>,\n  Optional  (str) last_reload: {\n    'type': <class 'str'>,\n    'reason': <class 'str'>,\n    },\n  Optional  (str) control_processor_uptime: <class 'str'>,\n  Optional  (str) controller: {\n    'type': <class 'str'>,\n    'counts': <class 'int'>,\n    'serial': <class 'int'>,\n    },\n  },\n}", "uid": "show_version", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/cat6k/show_platform.py#L72"}, "class": "ShowVersion", "doc": "Parser for show version\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'version': {\n  'version_short': <class 'str'>,\n  'platform': <class 'str'>,\n  'version': <class 'str'>,\n  'image_id': <class 'str'>,\n  'rom': <class 'str'>,\n  'image_type': <class 'str'>,\n  Optional  (str) bootldr: <class 'str'>,\n  'hostname': <class 'str'>,\n  'uptime': <class 'str'>,\n  Optional  (str) uptime_this_cp: <class 'str'>,\n  Optional  (str) jawa_revision: <class 'str'>,\n  Optional  (str) snowtrooper_revision: <class 'str'>,\n  Optional  (str) running_default_software: <class 'bool'>,\n  Optional  (str) processor_board_flash: <class 'str'>,\n  Optional  (str) last_reload_type: <class 'str'>,\n  Optional  (str) returned_to_rom_by: <class 'str'>,\n  Optional  (str) returned_to_rom_at: <class 'str'>,\n  Optional  (str) compiled_date: <class 'str'>,\n  Optional  (str) sp_by: <class 'str'>,\n  Optional  (str) compiled_by: <class 'str'>,\n  Optional  (str) system_restarted_at: <class 'str'>,\n  Optional  (str) system_image: <class 'str'>,\n  Optional  (str) last_reload_reason: <class 'str'>,\n  Optional  (str) license_type: <class 'str'>,\n  Optional  (str) license_level: <class 'str'>,\n  Optional  (str) next_reload_license_level: <class 'str'>,\n  Optional  (str) chassis: <class 'str'>,\n  Optional  (str) processor_type: <class 'str'>,\n  Optional  (str) chassis_sn: <class 'str'>,\n  Optional  (str) rtr_type: <class 'str'>,\n  'os': <class 'str'>,\n  'curr_config_register': <class 'str'>,\n  Optional  (str) license_udi: {\n    Optional  (str) device_num: {\n      Any  (str) *: {\n        'pid': <class 'str'>,\n        'sn': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) next_config_register: <class 'str'>,\n  Optional  (str) main_mem: <class 'str'>,\n  Optional  (str) number_of_intfs: {\n    Any  (str) *: <class 'str'>,\n    },\n  Optional  (str) mem_size: {\n    Any  (str) *: <class 'str'>,\n    },\n  Optional  (str) disks: {\n    Any  (str) *: {\n      Optional  (str) disk_size: <class 'str'>,\n      Optional  (str) type_of_disk: <class 'str'>,\n      },\n    },\n  Optional  (str) switch_num: {\n    Any  (str) *: {\n      Optional  (str) uptime: <class 'str'>,\n      Optional  (str) mac_address: <class 'str'>,\n      Optional  (str) mb_assembly_num: <class 'str'>,\n      Optional  (str) mb_sn: <class 'str'>,\n      Optional  (str) model_rev_num: <class 'str'>,\n      Optional  (str) mb_rev_num: <class 'str'>,\n      Optional  (str) model_num: <class 'str'>,\n      Optional  (str) system_sn: <class 'str'>,\n      Optional  (str) mode: <class 'str'>,\n      Optional  (str) model: <class 'str'>,\n      Optional  (str) sw_image: <class 'str'>,\n      Optional  (str) ports: <class 'str'>,\n      Optional  (str) sw_ver: <class 'str'>,\n      Optional  (str) active: <class 'bool'>,\n      },\n    },\n  Optional  (str) processor: {\n    Optional  (str) cpu_type: <class 'str'>,\n    Optional  (str) speed: <class 'str'>,\n    Optional  (str) core: <class 'str'>,\n    Optional  (str) l2_cache: <class 'str'>,\n    Optional  (str) supervisor: <class 'str'>,\n    },\n  Optional  (str) license_package: {\n    Any  (str) *: {\n      'license_level': <class 'str'>,\n      'license_type': <class 'str'>,\n      'next_reload_license_level': <class 'str'>,\n      },\n    },\n  Optional  (str) module: {\n    Any  (str) *: {\n      Any  (str) *: {\n        Optional  (str) suite: <class 'str'>,\n        Optional  (str) suite_current: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) suite_next_reboot: <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) image: {\n    'text_base': <class 'str'>,\n    'data_base': <class 'str'>,\n    },\n  Optional  (str) interfaces: {\n    'virtual_ethernet': <class 'int'>,\n    'gigabit_ethernet': <class 'int'>,\n    },\n  Optional  (str) revision: {\n    Any  (str) *: <class 'int'>,\n    },\n  },\n}", "uid": "show_version", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L57"}, "iosxe": {"c9500": {"class": "ShowVersion", "doc": "Parser for show version", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'version': {\n  'version_short': <class 'str'>,\n  'os': <class 'str'>,\n  Optional  (str) code_name: <class 'str'>,\n  'platform': <class 'str'>,\n  'version': <class 'str'>,\n  'image_id': <class 'str'>,\n  'rom': <class 'str'>,\n  'bootldr_version': <class 'str'>,\n  'hostname': <class 'str'>,\n  'uptime': <class 'str'>,\n  'uptime_this_cp': <class 'str'>,\n  'returned_to_rom_by': <class 'str'>,\n  'system_image': <class 'str'>,\n  'last_reload_reason': <class 'str'>,\n  'chassis': <class 'str'>,\n  'processor_type': <class 'str'>,\n  'main_mem': <class 'str'>,\n  'processor_board_id': <class 'str'>,\n  'curr_config_register': <class 'str'>,\n  'compiled_date': <class 'str'>,\n  'compiled_by': <class 'str'>,\n  'mac_address': <class 'str'>,\n  'mb_assembly_num': <class 'str'>,\n  'mb_sn': <class 'str'>,\n  'model_rev_num': <class 'str'>,\n  'mb_rev_num': <class 'str'>,\n  'model_num': <class 'str'>,\n  'system_sn': <class 'str'>,\n  Optional  (str) mem_size: {\n    Any  (str) *: <class 'str'>,\n    },\n  'license_level': <class 'str'>,\n  'next_reload_license_level': <class 'str'>,\n  'smart_licensing_status': <class 'str'>,\n  Optional  (str) number_of_intfs: {\n    Any  (str) *: <class 'str'>,\n    },\n  Optional  (str) disks: {\n    Any  (str) *: {\n      'disk_size': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_version", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/c9500/show_platform.py#L80"}, "class": "ShowVersion", "doc": "Parser for show version\n    parser class - implements detail parsing mechanisms for cli output.\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'version': {\n  'version_short': <class 'str'>,\n  'platform': <class 'str'>,\n  'version': <class 'str'>,\n  'image_id': <class 'str'>,\n  'rom': <class 'str'>,\n  'image_type': <class 'str'>,\n  Optional  (str) bootldr: <class 'str'>,\n  'hostname': <class 'str'>,\n  'uptime': <class 'str'>,\n  Optional  (str) uptime_this_cp: <class 'str'>,\n  Optional  (str) jawa_revision: <class 'str'>,\n  Optional  (str) snowtrooper_revision: <class 'str'>,\n  Optional  (str) running_default_software: <class 'bool'>,\n  Optional  (str) processor_board_flash: <class 'str'>,\n  Optional  (str) last_reload_type: <class 'str'>,\n  Optional  (str) returned_to_rom_by: <class 'str'>,\n  Optional  (str) returned_to_rom_at: <class 'str'>,\n  Optional  (str) compiled_date: <class 'str'>,\n  Optional  (str) sp_by: <class 'str'>,\n  Optional  (str) compiled_by: <class 'str'>,\n  Optional  (str) system_restarted_at: <class 'str'>,\n  Optional  (str) system_image: <class 'str'>,\n  Optional  (str) last_reload_reason: <class 'str'>,\n  Optional  (str) license_type: <class 'str'>,\n  Optional  (str) license_level: <class 'str'>,\n  Optional  (str) next_reload_license_level: <class 'str'>,\n  Optional  (str) chassis: <class 'str'>,\n  Optional  (str) processor_type: <class 'str'>,\n  Optional  (str) chassis_sn: <class 'str'>,\n  Optional  (str) rtr_type: <class 'str'>,\n  'os': <class 'str'>,\n  'curr_config_register': <class 'str'>,\n  Optional  (str) license_udi: {\n    Optional  (str) device_num: {\n      Any  (str) *: {\n        'pid': <class 'str'>,\n        'sn': <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) next_config_register: <class 'str'>,\n  Optional  (str) main_mem: <class 'str'>,\n  Optional  (str) number_of_intfs: {\n    Any  (str) *: <class 'str'>,\n    },\n  Optional  (str) mem_size: {\n    Any  (str) *: <class 'str'>,\n    },\n  Optional  (str) disks: {\n    Any  (str) *: {\n      Optional  (str) disk_size: <class 'str'>,\n      Optional  (str) type_of_disk: <class 'str'>,\n      },\n    },\n  Optional  (str) switch_num: {\n    Any  (str) *: {\n      Optional  (str) uptime: <class 'str'>,\n      Optional  (str) mac_address: <class 'str'>,\n      Optional  (str) mb_assembly_num: <class 'str'>,\n      Optional  (str) mb_sn: <class 'str'>,\n      Optional  (str) model_rev_num: <class 'str'>,\n      Optional  (str) mb_rev_num: <class 'str'>,\n      Optional  (str) model_num: <class 'str'>,\n      Optional  (str) system_sn: <class 'str'>,\n      Optional  (str) mode: <class 'str'>,\n      Optional  (str) model: <class 'str'>,\n      Optional  (str) sw_image: <class 'str'>,\n      Optional  (str) ports: <class 'str'>,\n      Optional  (str) sw_ver: <class 'str'>,\n      Optional  (str) active: <class 'bool'>,\n      },\n    },\n  Optional  (str) processor: {\n    Optional  (str) cpu_type: <class 'str'>,\n    Optional  (str) speed: <class 'str'>,\n    Optional  (str) core: <class 'str'>,\n    Optional  (str) l2_cache: <class 'str'>,\n    Optional  (str) supervisor: <class 'str'>,\n    },\n  Optional  (str) license_package: {\n    Any  (str) *: {\n      'license_level': <class 'str'>,\n      'license_type': <class 'str'>,\n      'next_reload_license_level': <class 'str'>,\n      },\n    },\n  Optional  (str) module: {\n    Any  (str) *: {\n      Any  (str) *: {\n        Optional  (str) suite: <class 'str'>,\n        Optional  (str) suite_current: <class 'str'>,\n        Optional  (str) type: <class 'str'>,\n        Optional  (str) suite_next_reboot: <class 'str'>,\n        },\n      },\n    },\n  Optional  (str) image: {\n    'text_base': <class 'str'>,\n    'data_base': <class 'str'>,\n    },\n  Optional  (str) interfaces: {\n    'virtual_ethernet': <class 'int'>,\n    'gigabit_ethernet': <class 'int'>,\n    },\n  Optional  (str) revision: {\n    Any  (str) *: <class 'int'>,\n    },\n  },\n}", "uid": "show_version", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L274"}, "iosxr": {"class": "ShowVersion", "doc": "Parser for show version", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'operating_system': <class 'str'>,\n'software_version': <class 'str'>,\n'uptime': <class 'str'>,\nOptional  (str) image: <class 'str'>,\nOptional  (str) device_family: <class 'str'>,\nOptional  (str) processor: <class 'str'>,\nOptional  (str) processor_memory_bytes: <class 'str'>,\nOptional  (str) chassis_detail: <class 'str'>,\nOptional  (str) config_register: <class 'str'>,\nOptional  (str) rp_config_register: <class 'str'>,\nOptional  (str) main_mem: <class 'str'>,\n}", "uid": "show_version", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_platform.py#L56"}, "nxos": {"class": "ShowVersion", "doc": "Parser for :\n        show version\n        parser class implements detail parsing mechanisms for cli, xml and yang output.\n    ", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'platform': {\n  Optional  (str) name: <class 'str'>,\n  Optional  (str) reason: <class 'str'>,\n  Optional  (str) system_version: <class 'str'>,\n  Optional  (str) os: <class 'str'>,\n  'hardware': {\n    Optional  (str) bootflash: <class 'str'>,\n    Optional  (str) slot0: <class 'str'>,\n    Optional  (str) chassis: <class 'str'>,\n    Optional  (str) rp: <class 'str'>,\n    Optional  (str) cpu: Or (<class 'str'>, None),\n    Optional  (str) device_name: <class 'str'>,\n    Optional  (str) memory: <class 'str'>,\n    Optional  (str) model: <class 'str'>,\n    Optional  (str) processor_board_id: <class 'str'>,\n    Optional  (str) slots: <class 'str'>,\n    },\n  'kernel_uptime': {\n    Optional  (str) days: <class 'int'>,\n    Optional  (str) hours: <class 'int'>,\n    Optional  (str) minutes: <class 'int'>,\n    Optional  (str) seconds: <class 'int'>,\n    },\n  'software': {\n    Optional  (str) bios_version: <class 'str'>,\n    Optional  (str) bios_compile_time: <class 'str'>,\n    Optional  (str) kickstart_version: <class 'str'>,\n    Optional  (str) kickstart_compile_time: <class 'str'>,\n    Optional  (str) kickstart_image_file: <class 'str'>,\n    Optional  (str) system_version: <class 'str'>,\n    Optional  (str) system_compile_time: <class 'str'>,\n    Optional  (str) system_image_file: <class 'str'>,\n    },\n  },\n}", "uid": "show_version", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_platform.py#L65"}}, "show version RP {rp} {status}": {"ios": {"class": "ShowVersionRp", "doc": "Parser for show version RP active [running|provisioned|installed]\n                  show version RP standby [running|provisioned|installed]", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'rp': {\n  Optional  (str) active: {\n    'slot': {\n      Any  (str) *: {\n        'package': {\n          Any  (str) *: {\n            'version': <class 'str'>,\n            'status': <class 'str'>,\n            'file': <class 'str'>,\n            'built_time': <class 'str'>,\n            'built_by': <class 'str'>,\n            'file_sha1_checksum': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) standby: {\n    'slot': {\n      Any  (str) *: {\n        'package': {\n          Any  (str) *: {\n            'version': <class 'str'>,\n            'status': <class 'str'>,\n            'file': <class 'str'>,\n            'built_time': <class 'str'>,\n            'built_by': <class 'str'>,\n            'file_sha1_checksum': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_version_RP_rp_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_platform.py#L488"}, "iosxe": {"class": "ShowVersionRp", "doc": "Parser for show version RP active [running|provisioned|installed]\n                  show version RP standby [running|provisioned|installed]", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'rp': {\n  Optional  (str) active: {\n    'slot': {\n      Any  (str) *: {\n        'package': {\n          Any  (str) *: {\n            'version': <class 'str'>,\n            'status': <class 'str'>,\n            'file': <class 'str'>,\n            'built_time': <class 'str'>,\n            'built_by': <class 'str'>,\n            'file_sha1_checksum': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) standby: {\n    'slot': {\n      Any  (str) *: {\n        'package': {\n          Any  (str) *: {\n            'version': <class 'str'>,\n            'status': <class 'str'>,\n            'file': <class 'str'>,\n            'built_time': <class 'str'>,\n            'built_by': <class 'str'>,\n            'file_sha1_checksum': <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_version_RP_rp_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_platform.py#L3449"}}, "show virtual-service core": {"nxos": {"class": "ShowVirtualServiceCore", "doc": "Parser for:\n      * show virtual-service core\n      * show virtual-service core name <name>\n    ", "module_name": "show_virtual_service", "package": "genie.libs.parser", "schema": "{\n'cores': {\n  Any  (str) *: {\n    'virtual_service': <class 'str'>,\n    'process_name': <class 'str'>,\n    'pid': <class 'int'>,\n    'date': <class 'str'>,\n    },\n  },\n}", "uid": "show_virtual-service_core", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_virtual_service.py#L269"}}, "show virtual-service core name {name}": {"nxos": {"class": "ShowVirtualServiceCore", "doc": "Parser for:\n      * show virtual-service core\n      * show virtual-service core name <name>\n    ", "module_name": "show_virtual_service", "package": "genie.libs.parser", "schema": "{\n'cores': {\n  Any  (str) *: {\n    'virtual_service': <class 'str'>,\n    'process_name': <class 'str'>,\n    'pid': <class 'int'>,\n    'date': <class 'str'>,\n    },\n  },\n}", "uid": "show_virtual-service_core_name_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_virtual_service.py#L269"}}, "show virtual-service detail": {"nxos": {"class": "ShowVirtualServiceDetail", "doc": "Parser for:\n      * show virtual-service detail\n      * show virtual-service detail name <name>\n      * show guestshell (by way of subclass ShowGuestshell)\n    ", "module_name": "show_virtual_service", "package": "genie.libs.parser", "schema": "{\n'service': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'package_information': {\n      'name': <class 'str'>,\n      'path': <class 'str'>,\n      'application': {\n        'name': <class 'str'>,\n        'version': <class 'str'>,\n        'description': <class 'str'>,\n        },\n      'signing': {\n        'key_type': <class 'str'>,\n        'method': <class 'str'>,\n        },\n      'licensing': {\n        'name': <class 'str'>,\n        'version': <class 'str'>,\n        },\n      },\n    'resource_reservation': {\n      'disk_mb': <class 'int'>,\n      'memory_mb': <class 'int'>,\n      'cpu_percent': <class 'int'>,\n      },\n    Optional  (str) attached_devices: {\n      Any  (str) *: {\n        'type': <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) alias: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_virtual-service_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_virtual_service.py#L362"}}, "show virtual-service detail name {name}": {"nxos": {"class": "ShowVirtualServiceDetail", "doc": "Parser for:\n      * show virtual-service detail\n      * show virtual-service detail name <name>\n      * show guestshell (by way of subclass ShowGuestshell)\n    ", "module_name": "show_virtual_service", "package": "genie.libs.parser", "schema": "{\n'service': {\n  Any  (str) *: {\n    'state': <class 'str'>,\n    'package_information': {\n      'name': <class 'str'>,\n      'path': <class 'str'>,\n      'application': {\n        'name': <class 'str'>,\n        'version': <class 'str'>,\n        'description': <class 'str'>,\n        },\n      'signing': {\n        'key_type': <class 'str'>,\n        'method': <class 'str'>,\n        },\n      'licensing': {\n        'name': <class 'str'>,\n        'version': <class 'str'>,\n        },\n      },\n    'resource_reservation': {\n      'disk_mb': <class 'int'>,\n      'memory_mb': <class 'int'>,\n      'cpu_percent': <class 'int'>,\n      },\n    Optional  (str) attached_devices: {\n      Any  (str) *: {\n        'type': <class 'str'>,\n        Optional  (str) name: <class 'str'>,\n        Optional  (str) alias: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_virtual-service_detail_name_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_virtual_service.py#L362"}}, "show virtual-service global": {"nxos": {"class": "ShowVirtualServiceGlobal", "doc": "Parser for \"show virtual-service global\".", "module_name": "show_virtual_service", "package": "genie.libs.parser", "schema": "{\n'version': <class 'str'>,\n'virtual_services': {\n  'installed': <class 'int'>,\n  'activated': <class 'int'>,\n  },\n'machine_types': {\n  'supported': <class 'list'>,\n  'disabled': <class 'list'>,\n  },\n'resource_limits': {\n  'cpus_per_service': <class 'int'>,\n  'cpu': {\n    'quota': <class 'int'>,\n    'committed': <class 'int'>,\n    'available': <class 'int'>,\n    },\n  'memory': {\n    'quota': <class 'int'>,\n    'committed': <class 'int'>,\n    'available': <class 'int'>,\n    },\n  'bootflash': {\n    'quota': <class 'int'>,\n    'committed': <class 'int'>,\n    'available': <class 'int'>,\n    },\n  },\n}", "uid": "show_virtual-service_global", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_virtual_service.py#L63"}}, "show virtual-service list": {"nxos": {"class": "ShowVirtualServiceList", "doc": "Parser for \"show virtual-service list\".", "module_name": "show_virtual_service", "package": "genie.libs.parser", "schema": "{\n'service': {\n  Any  (str) *: {\n    'status': <class 'str'>,\n    Optional  (str) package: <class 'str'>,\n    },\n  },\n}", "uid": "show_virtual-service_list", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_virtual_service.py#L195"}}, "show virtual-service utilization name {name}": {"nxos": {"class": "ShowVirtualServiceUtilization", "doc": "Parser for \"show virtual-service utilization name <name>\".", "module_name": "show_virtual_service", "package": "genie.libs.parser", "schema": "{\n'cpu': {\n  'requested_percent': <class 'int'>,\n  'actual_percent': <class 'int'>,\n  'state_abbrev': <class 'str'>,\n  'state': <class 'str'>,\n  },\n'memory': {\n  'allocation_kb': <class 'int'>,\n  'used_kb': <class 'int'>,\n  },\n'storage': {\n  Any  (str) *: {\n    'capacity_kb': <class 'int'>,\n    'used_kb': <class 'int'>,\n    'available_kb': <class 'int'>,\n    'used_percent': <class 'int'>,\n    },\n  },\n}", "uid": "show_virtual-service_utilization_name_name", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_virtual_service.py#L677"}}, "show vlan": {"ios": {"class": "ShowVlan", "doc": null, "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: <class 'str'>,\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) interfaces: <class 'list'>,\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) said: <class 'int'>,\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) parent: <class 'str'>,\n    Optional  (str) ring_no: <class 'str'>,\n    Optional  (str) bridge_no: <class 'str'>,\n    Optional  (str) stp: <class 'str'>,\n    Optional  (str) bridge_mode: <class 'str'>,\n    Optional  (str) trans1: <class 'int'>,\n    Optional  (str) trans2: <class 'int'>,\n    Optional  (str) remote_span_vlan: <class 'bool'>,\n    Optional  (str) private_vlan: {\n      Optional  (str) primary: <class 'bool'>,\n      Optional  (str) association: <class 'list'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) ports: <class 'list'>,\n      },\n    },\n  },\n}", "uid": "show_vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py#L12"}, "iosxe": {"class": "ShowVlan", "doc": "Parser for show vlan", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: <class 'str'>,\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) interfaces: <class 'list'>,\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) said: <class 'int'>,\n    Optional  (str) mtu: <class 'int'>,\n    Optional  (str) parent: <class 'str'>,\n    Optional  (str) ring_no: <class 'str'>,\n    Optional  (str) bridge_no: <class 'str'>,\n    Optional  (str) stp: <class 'str'>,\n    Optional  (str) bridge_mode: <class 'str'>,\n    Optional  (str) trans1: <class 'int'>,\n    Optional  (str) trans2: <class 'int'>,\n    Optional  (str) remote_span_vlan: <class 'bool'>,\n    Optional  (str) private_vlan: {\n      Optional  (str) primary: <class 'bool'>,\n      Optional  (str) association: <class 'list'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) ports: <class 'list'>,\n      },\n    },\n  },\n}", "uid": "show_vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py#L68"}, "nxos": {"class": "ShowVlan", "doc": "Parser for show vlan", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: <class 'str'>,\n    Optional  (str) name: <class 'str'>,\n    Optional  (str) mode: <class 'str'>,\n    Optional  (str) type: <class 'str'>,\n    Optional  (str) state: <class 'str'>,\n    Optional  (str) shutdown: <class 'bool'>,\n    Optional  (str) interfaces: <class 'list'>,\n    Optional  (str) remote_span_vlan: <class 'bool'>,\n    Optional  (str) private_vlan: {\n      Optional  (str) primary: <class 'bool'>,\n      Optional  (str) association: <class 'list'>,\n      Optional  (str) type: <class 'str'>,\n      Optional  (str) ports: <class 'list'>,\n      },\n    },\n  },\n}", "uid": "show_vlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L55"}}, "show vlan access-map": {"ios": {"class": "ShowVlanAccessMap", "doc": null, "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'access_map_id': {\n  Any  (str) *: {\n    'access_map_sequence': {\n      Any  (str) *: {\n        Optional  (str) access_map_match_protocol: <class 'str'>,\n        Optional  (str) access_map_match_protocol_value: <class 'str'>,\n        Optional  (str) access_map_action_value: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_vlan_access-map", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py#L19"}, "iosxe": {"class": "ShowVlanAccessMap", "doc": "Parser for show vlan access-map", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'access_map_id': {\n  Any  (str) *: {\n    'access_map_sequence': {\n      Any  (str) *: {\n        Optional  (str) access_map_match_protocol: <class 'str'>,\n        Optional  (str) access_map_match_protocol_value: <class 'str'>,\n        Optional  (str) access_map_action_value: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_vlan_access-map", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py#L347"}, "nxos": {"class": "ShowVlanAccessMap", "doc": "Parser for show vlan access-map", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'access_map_id': {\n  Any  (str) *: {\n    'access_map_sequence': {\n      Any  (str) *: {\n        Optional  (str) access_map_match_protocol: <class 'str'>,\n        Optional  (str) access_map_match_protocol_value: <class 'str'>,\n        Optional  (str) access_map_action_value: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_vlan_access-map", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L401"}}, "show vlan filter": {"ios": {"class": "ShowVlanFilter", "doc": null, "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'access_map_tag': <class 'str'>,\n    },\n  },\n}", "uid": "show_vlan_filter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py#L26"}, "iosxe": {"class": "ShowVlanFilter", "doc": "Parser for show vlan filter", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'access_map_tag': <class 'str'>,\n    },\n  },\n}", "uid": "show_vlan_filter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py#L460"}, "nxos": {"class": "ShowVlanFilter", "doc": "Parser for show vlan filter", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'access_map_tag': <class 'str'>,\n    },\n  },\n}", "uid": "show_vlan_filter", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L335"}}, "show vlan id 1-3967 vn-segment": {"nxos": {"class": "ShowVlanIdVnSegment", "doc": "Parser for show vlan id 1-3967 vn_segment", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlans': {\n  Any  (str) *: {\n    Optional  (str) vlan_id: <class 'str'>,\n    Optional  (str) vn_segment_id: <class 'int'>,\n    },\n  },\n}", "uid": "show_vlan_id_1-3967_vn-segment", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L231"}}, "show vlan interface": {"iosxr": {"class": "ShowVlanInterface", "doc": "Parser for show vlan interface", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) encapsulation: <class 'str'>,\n  Optional  (str) outer_vlan: <class 'int'>,\n  Optional  (str) second_vlan: <class 'str'>,\n  Optional  (str) service: <class 'str'>,\n  Optional  (str) mtu: <class 'int'>,\n  Optional  (str) linep_state: <class 'str'>,\n  },\n}", "uid": "show_vlan_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_interface.py#L1107"}}, "show vlan internal info": {"nxos": {"class": "ShowVlanInternalInfo", "doc": "Parser for show vlan internal info", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'vlan_configuration': <class 'bool'>,\n    },\n  },\n}", "uid": "show_vlan_internal_info", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L279"}}, "show vlan mtu": {"ios": {"class": "ShowVlanMtu", "doc": null, "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'vlan_mtu': <class 'str'>,\n    'vlan_min_mtu': <class 'str'>,\n    'vlan_max_mtu': <class 'str'>,\n    'mtu_mismatch': <class 'str'>,\n    },\n  },\n}", "uid": "show_vlan_mtu", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py#L15"}, "iosxe": {"class": "ShowVlanMtu", "doc": "Parser for show vlan mtu", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'vlan_mtu': <class 'str'>,\n    'vlan_min_mtu': <class 'str'>,\n    'vlan_max_mtu': <class 'str'>,\n    'mtu_mismatch': <class 'str'>,\n    },\n  },\n}", "uid": "show_vlan_mtu", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py#L286"}}, "show vlan remote-span": {"ios": {"class": "ShowVlanRemoteSpan", "doc": null, "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'vlan_is_remote_span': <class 'bool'>,\n    },\n  },\n}", "uid": "show_vlan_remote-span", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vlan.py#L23"}, "iosxe": {"class": "ShowVlanRemoteSpan", "doc": "Parser for show vlan remote-span", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlan_id': {\n  Any  (str) *: {\n    'vlan_is_remote_span': <class 'bool'>,\n    },\n  },\n}", "uid": "show_vlan_remote-span", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vlan.py#L413"}}, "show vpc": {"nxos": {"class": "ShowVpc", "doc": "Parser for show vpc", "module_name": "show_vpc", "package": "genie.libs.parser", "schema": "{\n'vpc_domain_id': <class 'str'>,\n'vpc_peer_status': <class 'str'>,\nOptional  (str) vpc_plus_switch_id: <class 'str'>,\n'vpc_peer_keepalive_status': <class 'str'>,\nOptional  (str) vpc_fabricpath_status: <class 'str'>,\n'vpc_configuration_consistency_status': <class 'str'>,\nOptional  (str) vpc_configuration_consistency_reason: <class 'str'>,\nOptional  (str) vpc_per_vlan_consistency_status: <class 'str'>,\nOptional  (str) vpc_type_2_consistency_status: <class 'str'>,\nOptional  (str) vpc_role: <class 'str'>,\n'num_of_vpcs': <class 'int'>,\nOptional  (str) peer_gateway: <class 'str'>,\nOptional  (str) peer_gateway_exculded_bridge_domains: <class 'str'>,\nOptional  (str) delay_restore_orphan_ports_status: {\n  'timer': <class 'str'>,\n  'timeout_sec': <class 'int'>,\n  },\nOptional  (str) dual_active_excluded_vlans_and_bds: <class 'str'>,\nOptional  (str) peer_gateway_exculded_vlans: <class 'str'>,\nOptional  (str) self_isolation: <class 'str'>,\nOptional  (str) dual_active_excluded_vlans: <class 'str'>,\nOptional  (str) vpc_graceful_consistency_check_status: <class 'str'>,\nOptional  (str) vpc_auto_recovery_status: <class 'str'>,\nOptional  (str) vpc_delay_restore_status: <class 'str'>,\nOptional  (str) vpc_delay_restore_svi_status: <class 'str'>,\nOptional  (str) operational_l3_peer_router: <class 'str'>,\nOptional  (str) track_object: <class 'int'>,\nOptional  (str) peer_link: {\n  Any  (str) *: {\n    'peer_link_id': <class 'int'>,\n    'peer_link_ifindex': <class 'str'>,\n    'peer_link_port_state': <class 'str'>,\n    'peer_up_vlan_bitset': <class 'str'>,\n    Optional  (str) vlan_bds: <class 'str'>,\n    },\n  },\nOptional  (str) vpc: {\n  Any  (str) *: {\n    'vpc_id': <class 'int'>,\n    'vpc_ifindex': <class 'str'>,\n    'vpc_port_state': <class 'str'>,\n    'vpc_consistency': <class 'str'>,\n    'vpc_consistency_status': <class 'str'>,\n    'up_vlan_bitset': <class 'str'>,\n    Optional  (str) vpc_plus_attrib: <class 'str'>,\n    },\n  },\n}", "uid": "show_vpc", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vpc.py#L79"}}, "show vpn load-balancing": {"asa": {"class": "ShowVPNLoadBalancing", "doc": "Parser for\n        * show vpn load-balancing\n    ", "module_name": "show_vpn", "package": "genie.libs.parser", "schema": "{\n'status': <class 'str'>,\n'role': <class 'str'>,\n'failover': <class 'str'>,\n'encryption': <class 'str'>,\n'peers_count': <class 'int'>,\n'cluster_ip': <class 'str'>,\n'peers': {\n  Any  (str) *: {\n    'role': <class 'str'>,\n    'pri': <class 'int'>,\n    'model': <class 'str'>,\n    'load_balancing_version': <class 'int'>,\n    'public_ip': <class 'str'>,\n    },\n  },\n'total_license_load': {\n  Any  (str) *: {\n    'anyconnect_premium_essentials': {\n      'limit': <class 'int'>,\n      'used': <class 'int'>,\n      'load': <class 'int'>,\n      },\n    'other_vpn': {\n      'limit': <class 'int'>,\n      'used': <class 'int'>,\n      'load': <class 'int'>,\n      },\n    'public_ip': <class 'str'>,\n    },\n  },\n}", "uid": "show_vpn_load-balancing", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_vpn.py#L62"}}, "show vpn-sessiondb": {"asa": {"class": "ShowVPNSessionDBSummary", "doc": "Parser for\n        * show vpn-sessiondb {summary}\n        * show vpn-sessiondb\n    ", "module_name": "show_vpn_sessiondb", "package": "genie.libs.parser", "schema": "{\n'summary': {\n  'VPN Session': {\n    'total_active_and_inactive': <class 'int'>,\n    'total_cumulative': <class 'int'>,\n    Optional  (str) device_total_vpn_capacity: <class 'int'>,\n    Optional  (str) device_load: <class 'float'>,\n    'session': {\n      Optional  (str) AnyConnect Client: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        Optional  (str) type: {\n          Any  (str) *: {\n            'active': <class 'int'>,\n            'cumulative': <class 'int'>,\n            'peak_concurrent': <class 'int'>,\n            Optional  (str) inactive: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) Load Balancing(Encryption): {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      Optional  (str) IKEv1 IPsec/L2TP IPsec: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      Optional  (str) Clientless VPN: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        Optional  (str) type: {\n          Optional  (str) Browser: {\n            'active': <class 'int'>,\n            'cumulative': <class 'int'>,\n            'peak_concurrent': <class 'int'>,\n            Optional  (str) inactive: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) Site-to-Site VPN: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        Optional  (str) type: {\n          Optional  (str) IKEv2 IPsec: {\n            'active': <class 'int'>,\n            'cumulative': <class 'int'>,\n            'peak_concurrent': <class 'int'>,\n            Optional  (str) inactive: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) Tunnels: {\n    'session': {\n      Optional  (str) Clientless: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      Optional  (str) AnyConnect-Parent: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      Optional  (str) SSL-Tunnel: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      Optional  (str) DTLS-Tunnel: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      },\n    'totals': {\n      'active': <class 'int'>,\n      'cumulative': <class 'int'>,\n      Optional  (str) peak_concurrent: <class 'int'>,\n      Optional  (str) inactive: <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_vpn-sessiondb", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_vpn_sessiondb.py#L139"}}, "show vpn-sessiondb anyconnect": {"asa": {"class": "ShowVpnSessiondbAnyconnect", "doc": "Parser for\n        * show vpn-sessiondb anyconnect\n        * show vpn-sessiondb anyconnect {sort} inactivity\n    ", "module_name": "show_vpn_sessiondb", "package": "genie.libs.parser", "schema": "{\n'session_type': {\n  Any  (str) *: {\n    'username': {\n      Any  (str) *: {\n        'index': {\n          <class 'int'>: {\n            Optional  (str) ip_addr: <class 'str'>,\n            Optional  (str) assigned_ip: <class 'str'>,\n            Optional  (str) public_ip: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) vpn_client_encryption: <class 'str'>,\n            Optional  (str) license: <class 'str'>,\n            Optional  (str) encryption: <class 'str'>,\n            'hashing': <class 'str'>,\n            Optional  (str) ssl_tunnel: <class 'str'>,\n            Optional  (str) dtls_tunnel: <class 'str'>,\n            Optional  (str) auth_mode: <class 'str'>,\n            Optional  (str) group_policy: <class 'str'>,\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) tunnel_group: <class 'str'>,\n            Optional  (str) tcp: {\n              'src_port': <class 'int'>,\n              'dst_port': <class 'int'>,\n              },\n            'bytes': {\n              'tx': <class 'int'>,\n              'rx': <class 'int'>,\n              },\n            Optional  (str) pkts: {\n              'tx': <class 'int'>,\n              'rx': <class 'int'>,\n              },\n            Optional  (str) client_version: <class 'str'>,\n            Optional  (str) client_type: <class 'str'>,\n            Optional  (str) nac_result: <class 'str'>,\n            'login_time': <class 'str'>,\n            'duration': <class 'str'>,\n            'inactivity': <class 'str'>,\n            Optional  (str) filter_name: <class 'str'>,\n            Optional  (str) vlan_mapping: <class 'str'>,\n            Optional  (str) vlan: <class 'str'>,\n            Optional  (str) audt_sess_id: <class 'str'>,\n            Optional  (str) security_group: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_vpn-sessiondb_anyconnect", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_vpn_sessiondb.py#L647"}}, "show vpn-sessiondb anyconnect {sort} inactivity": {"asa": {"class": "ShowVpnSessiondbAnyconnect", "doc": "Parser for\n        * show vpn-sessiondb anyconnect\n        * show vpn-sessiondb anyconnect {sort} inactivity\n    ", "module_name": "show_vpn_sessiondb", "package": "genie.libs.parser", "schema": "{\n'session_type': {\n  Any  (str) *: {\n    'username': {\n      Any  (str) *: {\n        'index': {\n          <class 'int'>: {\n            Optional  (str) ip_addr: <class 'str'>,\n            Optional  (str) assigned_ip: <class 'str'>,\n            Optional  (str) public_ip: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) vpn_client_encryption: <class 'str'>,\n            Optional  (str) license: <class 'str'>,\n            Optional  (str) encryption: <class 'str'>,\n            'hashing': <class 'str'>,\n            Optional  (str) ssl_tunnel: <class 'str'>,\n            Optional  (str) dtls_tunnel: <class 'str'>,\n            Optional  (str) auth_mode: <class 'str'>,\n            Optional  (str) group_policy: <class 'str'>,\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) tunnel_group: <class 'str'>,\n            Optional  (str) tcp: {\n              'src_port': <class 'int'>,\n              'dst_port': <class 'int'>,\n              },\n            'bytes': {\n              'tx': <class 'int'>,\n              'rx': <class 'int'>,\n              },\n            Optional  (str) pkts: {\n              'tx': <class 'int'>,\n              'rx': <class 'int'>,\n              },\n            Optional  (str) client_version: <class 'str'>,\n            Optional  (str) client_type: <class 'str'>,\n            Optional  (str) nac_result: <class 'str'>,\n            'login_time': <class 'str'>,\n            'duration': <class 'str'>,\n            'inactivity': <class 'str'>,\n            Optional  (str) filter_name: <class 'str'>,\n            Optional  (str) vlan_mapping: <class 'str'>,\n            Optional  (str) vlan: <class 'str'>,\n            Optional  (str) audt_sess_id: <class 'str'>,\n            Optional  (str) security_group: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_vpn-sessiondb_anyconnect_sort_inactivity", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_vpn_sessiondb.py#L647"}}, "show vpn-sessiondb webvpn": {"asa": {"class": "ShowVpnSessiondbWebvpn", "doc": "Parser for\n        * show vpn-sessiondb webvpn\n    ", "module_name": "show_vpn_sessiondb", "package": "genie.libs.parser", "schema": "{\n'session_type': {\n  Any  (str) *: {\n    'username': {\n      Any  (str) *: {\n        'index': {\n          <class 'int'>: {\n            Optional  (str) ip_addr: <class 'str'>,\n            Optional  (str) assigned_ip: <class 'str'>,\n            Optional  (str) public_ip: <class 'str'>,\n            'protocol': <class 'str'>,\n            Optional  (str) vpn_client_encryption: <class 'str'>,\n            Optional  (str) license: <class 'str'>,\n            Optional  (str) encryption: <class 'str'>,\n            'hashing': <class 'str'>,\n            Optional  (str) ssl_tunnel: <class 'str'>,\n            Optional  (str) dtls_tunnel: <class 'str'>,\n            Optional  (str) auth_mode: <class 'str'>,\n            Optional  (str) group_policy: <class 'str'>,\n            Optional  (str) group: <class 'str'>,\n            Optional  (str) tunnel_group: <class 'str'>,\n            Optional  (str) tcp: {\n              'src_port': <class 'int'>,\n              'dst_port': <class 'int'>,\n              },\n            'bytes': {\n              'tx': <class 'int'>,\n              'rx': <class 'int'>,\n              },\n            Optional  (str) pkts: {\n              'tx': <class 'int'>,\n              'rx': <class 'int'>,\n              },\n            Optional  (str) client_version: <class 'str'>,\n            Optional  (str) client_type: <class 'str'>,\n            Optional  (str) nac_result: <class 'str'>,\n            'login_time': <class 'str'>,\n            'duration': <class 'str'>,\n            'inactivity': <class 'str'>,\n            Optional  (str) filter_name: <class 'str'>,\n            Optional  (str) vlan_mapping: <class 'str'>,\n            Optional  (str) vlan: <class 'str'>,\n            Optional  (str) audt_sess_id: <class 'str'>,\n            Optional  (str) security_group: <class 'str'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_vpn-sessiondb_webvpn", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_vpn_sessiondb.py#L672"}}, "show vpn-sessiondb {summary}": {"asa": {"class": "ShowVPNSessionDBSummary", "doc": "Parser for\n        * show vpn-sessiondb {summary}\n        * show vpn-sessiondb\n    ", "module_name": "show_vpn_sessiondb", "package": "genie.libs.parser", "schema": "{\n'summary': {\n  'VPN Session': {\n    'total_active_and_inactive': <class 'int'>,\n    'total_cumulative': <class 'int'>,\n    Optional  (str) device_total_vpn_capacity: <class 'int'>,\n    Optional  (str) device_load: <class 'float'>,\n    'session': {\n      Optional  (str) AnyConnect Client: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        Optional  (str) type: {\n          Any  (str) *: {\n            'active': <class 'int'>,\n            'cumulative': <class 'int'>,\n            'peak_concurrent': <class 'int'>,\n            Optional  (str) inactive: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) Load Balancing(Encryption): {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      Optional  (str) IKEv1 IPsec/L2TP IPsec: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      Optional  (str) Clientless VPN: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        Optional  (str) type: {\n          Optional  (str) Browser: {\n            'active': <class 'int'>,\n            'cumulative': <class 'int'>,\n            'peak_concurrent': <class 'int'>,\n            Optional  (str) inactive: <class 'int'>,\n            },\n          },\n        },\n      Optional  (str) Site-to-Site VPN: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        Optional  (str) type: {\n          Optional  (str) IKEv2 IPsec: {\n            'active': <class 'int'>,\n            'cumulative': <class 'int'>,\n            'peak_concurrent': <class 'int'>,\n            Optional  (str) inactive: <class 'int'>,\n            },\n          },\n        },\n      },\n    },\n  Optional  (str) Tunnels: {\n    'session': {\n      Optional  (str) Clientless: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      Optional  (str) AnyConnect-Parent: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      Optional  (str) SSL-Tunnel: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      Optional  (str) DTLS-Tunnel: {\n        'active': <class 'int'>,\n        'cumulative': <class 'int'>,\n        'peak_concurrent': <class 'int'>,\n        Optional  (str) inactive: <class 'int'>,\n        },\n      },\n    'totals': {\n      'active': <class 'int'>,\n      'cumulative': <class 'int'>,\n      Optional  (str) peak_concurrent: <class 'int'>,\n      Optional  (str) inactive: <class 'int'>,\n      },\n    },\n  },\n}", "uid": "show_vpn-sessiondb_summary", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/asa/show_vpn_sessiondb.py#L139"}}, "show vrf": {"ios": {"class": "ShowVrf", "doc": "Parser for show vrf", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) route_distinguisher: <class 'str'>,\n    'protocols': <class 'list'>,\n    Optional  (str) interfaces: <class 'list'>,\n    },\n  },\n}", "uid": "show_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vrf.py#L22"}, "iosxe": {"class": "ShowVrf", "doc": " Parser for:\n            show vrf\n            show vrf {vrf}\n    ", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) route_distinguisher: <class 'str'>,\n    'protocols': <class 'list'>,\n    Optional  (str) interfaces: <class 'list'>,\n    },\n  },\n}", "uid": "show_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vrf.py#L39"}, "nxos": {"class": "ShowVrf", "doc": "Parser for show vrf", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'vrf_id': <class 'int'>,\n    'vrf_state': <class 'str'>,\n    'reason': <class 'str'>,\n    },\n  },\n}", "uid": "show_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py#L35"}}, "show vrf all detail": {"iosxr": {"class": "ShowVrfAllDetail", "doc": "Parser for show vrf all detail", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  Optional  (str) interfaces: <class 'list'>,\n  Optional  (str) vrf_mode: <class 'str'>,\n  Optional  (str) description: <class 'str'>,\n  'address_family': {\n    Any  (str) *: {\n      Optional  (str) route_target: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) route_policy: {\n        Optional  (str) import: <class 'str'>,\n        Optional  (str) export: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_vrf_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_vrf.py#L44"}, "nxos": {"class": "ShowVrfDetail", "doc": "Parser for show vrf <vrf> detail", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf_id': <class 'int'>,\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  'max_routes': <class 'int'>,\n  'mid_threshold': <class 'int'>,\n  'state': <class 'str'>,\n  'address_family': {\n    Any  (str) *: {\n      'table_id': <class 'str'>,\n      'fwd_id': <class 'str'>,\n      'state': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_vrf_all_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py#L155"}}, "show vrf all interface": {"nxos": {"class": "ShowVrfAllInterface", "doc": "Parser for show vrf all interface\n                show vrf <vrf> interface <interface>\n                show vrf <vrf> interface\n                show vrf all interface <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'vrf_id': <class 'int'>,\n  'site_of_origin': <class 'str'>,\n  },\n}", "uid": "show_vrf_all_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1804"}}, "show vrf all interface {interface}": {"nxos": {"class": "ShowVrfAllInterface", "doc": "Parser for show vrf all interface\n                show vrf <vrf> interface <interface>\n                show vrf <vrf> interface\n                show vrf all interface <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'vrf_id': <class 'int'>,\n  'site_of_origin': <class 'str'>,\n  },\n}", "uid": "show_vrf_all_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1804"}}, "show vrf detail": {"ios": {"class": "ShowVrfDetail", "doc": "Parser for show vrf detail", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) vrf_id: <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) being_deleted: <class 'bool'>,\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  Optional  (str) interfaces: <class 'list'>,\n  Optional  (str) interface: {\n    Any  (str) *: {\n      'vrf': <class 'str'>,\n      },\n    },\n  Optional  (str) flags: <class 'str'>,\n  Optional  (str) cli_format: <class 'str'>,\n  Optional  (str) support_af: <class 'str'>,\n  Optional  (str) address_family: {\n    Any  (str) *: {\n      'table_id': <class 'str'>,\n      Optional  (str) flags: <class 'str'>,\n      Optional  (str) vrf_label: {\n        Optional  (str) distribution_protocol: <class 'str'>,\n        Optional  (str) allocation_mode: <class 'str'>,\n        },\n      Optional  (str) route_targets: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) import_from_global: {\n        'import_from_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) export_to_global: {\n        'export_to_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) routing_table_limit: {\n        Optional  (str) routing_table_limit_number: <class 'int'>,\n        'routing_table_limit_action': {\n          Optional  (str) enable_alert_percent: {\n            'alert_percent_value': <class 'int'>,\n            },\n          Optional  (str) enable_alert_limit_number: {\n            'alert_limit_number': <class 'int'>,\n            },\n          Optional  (str) enable_simple_alert: {\n            'simple_alert': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vrf.py#L17"}, "iosxe": {"class": "ShowVrfDetail", "doc": "Parser for \n        * 'show vrf detail'\n        * 'show vrf detail <vrf>'", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) vrf_id: <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) being_deleted: <class 'bool'>,\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  Optional  (str) interfaces: <class 'list'>,\n  Optional  (str) interface: {\n    Any  (str) *: {\n      'vrf': <class 'str'>,\n      },\n    },\n  Optional  (str) flags: <class 'str'>,\n  Optional  (str) cli_format: <class 'str'>,\n  Optional  (str) support_af: <class 'str'>,\n  Optional  (str) address_family: {\n    Any  (str) *: {\n      'table_id': <class 'str'>,\n      Optional  (str) flags: <class 'str'>,\n      Optional  (str) vrf_label: {\n        Optional  (str) distribution_protocol: <class 'str'>,\n        Optional  (str) allocation_mode: <class 'str'>,\n        },\n      Optional  (str) route_targets: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) import_from_global: {\n        'import_from_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) export_to_global: {\n        'export_to_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) routing_table_limit: {\n        Optional  (str) routing_table_limit_number: <class 'int'>,\n        'routing_table_limit_action': {\n          Optional  (str) enable_alert_percent: {\n            'alert_percent_value': <class 'int'>,\n            },\n          Optional  (str) enable_alert_limit_number: {\n            'alert_limit_number': <class 'int'>,\n            },\n          Optional  (str) enable_simple_alert: {\n            'simple_alert': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vrf.py#L487"}}, "show vrf detail {vrf}": {"ios": {"class": "ShowVrfDetail", "doc": "Parser for show vrf detail", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) vrf_id: <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) being_deleted: <class 'bool'>,\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  Optional  (str) interfaces: <class 'list'>,\n  Optional  (str) interface: {\n    Any  (str) *: {\n      'vrf': <class 'str'>,\n      },\n    },\n  Optional  (str) flags: <class 'str'>,\n  Optional  (str) cli_format: <class 'str'>,\n  Optional  (str) support_af: <class 'str'>,\n  Optional  (str) address_family: {\n    Any  (str) *: {\n      'table_id': <class 'str'>,\n      Optional  (str) flags: <class 'str'>,\n      Optional  (str) vrf_label: {\n        Optional  (str) distribution_protocol: <class 'str'>,\n        Optional  (str) allocation_mode: <class 'str'>,\n        },\n      Optional  (str) route_targets: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) import_from_global: {\n        'import_from_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) export_to_global: {\n        'export_to_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) routing_table_limit: {\n        Optional  (str) routing_table_limit_number: <class 'int'>,\n        'routing_table_limit_action': {\n          Optional  (str) enable_alert_percent: {\n            'alert_percent_value': <class 'int'>,\n            },\n          Optional  (str) enable_alert_limit_number: {\n            'alert_limit_number': <class 'int'>,\n            },\n          Optional  (str) enable_simple_alert: {\n            'simple_alert': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_vrf_detail_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vrf.py#L17"}, "iosxe": {"class": "ShowVrfDetail", "doc": "Parser for \n        * 'show vrf detail'\n        * 'show vrf detail <vrf>'", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) vrf_id: <class 'int'>,\n  Optional  (str) description: <class 'str'>,\n  Optional  (str) being_deleted: <class 'bool'>,\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  Optional  (str) interfaces: <class 'list'>,\n  Optional  (str) interface: {\n    Any  (str) *: {\n      'vrf': <class 'str'>,\n      },\n    },\n  Optional  (str) flags: <class 'str'>,\n  Optional  (str) cli_format: <class 'str'>,\n  Optional  (str) support_af: <class 'str'>,\n  Optional  (str) address_family: {\n    Any  (str) *: {\n      'table_id': <class 'str'>,\n      Optional  (str) flags: <class 'str'>,\n      Optional  (str) vrf_label: {\n        Optional  (str) distribution_protocol: <class 'str'>,\n        Optional  (str) allocation_mode: <class 'str'>,\n        },\n      Optional  (str) route_targets: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) import_from_global: {\n        'import_from_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) export_to_global: {\n        'export_to_global_map': <class 'str'>,\n        'prefix_limit': <class 'int'>,\n        },\n      Optional  (str) routing_table_limit: {\n        Optional  (str) routing_table_limit_number: <class 'int'>,\n        'routing_table_limit_action': {\n          Optional  (str) enable_alert_percent: {\n            'alert_percent_value': <class 'int'>,\n            },\n          Optional  (str) enable_alert_limit_number: {\n            'alert_limit_number': <class 'int'>,\n            },\n          Optional  (str) enable_simple_alert: {\n            'simple_alert': <class 'bool'>,\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_vrf_detail_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vrf.py#L487"}}, "show vrf interface": {"nxos": {"class": "ShowVrfInterface", "doc": "Parser for show vrf Interface", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\n'vrf_interface': {\n  Any  (str) *: {\n    'vrf_name': <class 'str'>,\n    'vrf_id': <class 'str'>,\n    'site_of_origin': <class 'str'>,\n    },\n  },\n}", "uid": "show_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py#L88"}}, "show vrf {vrf}": {"ios": {"class": "ShowVrf", "doc": "Parser for show vrf", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) route_distinguisher: <class 'str'>,\n    'protocols': <class 'list'>,\n    Optional  (str) interfaces: <class 'list'>,\n    },\n  },\n}", "uid": "show_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vrf.py#L22"}, "iosxe": {"class": "ShowVrf", "doc": " Parser for:\n            show vrf\n            show vrf {vrf}\n    ", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    Optional  (str) route_distinguisher: <class 'str'>,\n    'protocols': <class 'list'>,\n    Optional  (str) interfaces: <class 'list'>,\n    },\n  },\n}", "uid": "show_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vrf.py#L39"}, "nxos": {"class": "ShowVrf", "doc": "Parser for show vrf", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\n'vrfs': {\n  Any  (str) *: {\n    'vrf_id': <class 'int'>,\n    'vrf_state': <class 'str'>,\n    'reason': <class 'str'>,\n    },\n  },\n}", "uid": "show_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py#L35"}}, "show vrf {vrf} detail": {"iosxr": {"class": "ShowVrfAllDetail", "doc": "Parser for show vrf all detail", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  Optional  (str) interfaces: <class 'list'>,\n  Optional  (str) vrf_mode: <class 'str'>,\n  Optional  (str) description: <class 'str'>,\n  'address_family': {\n    Any  (str) *: {\n      Optional  (str) route_target: {\n        Any  (str) *: {\n          'route_target': <class 'str'>,\n          'rt_type': <class 'str'>,\n          },\n        },\n      Optional  (str) route_policy: {\n        Optional  (str) import: <class 'str'>,\n        Optional  (str) export: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxr/show_vrf.py#L44"}, "nxos": {"class": "ShowVrfDetail", "doc": "Parser for show vrf <vrf> detail", "module_name": "show_vrf", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf_id': <class 'int'>,\n  Optional  (str) route_distinguisher: <class 'str'>,\n  Optional  (str) vpn_id: <class 'str'>,\n  'max_routes': <class 'int'>,\n  'mid_threshold': <class 'int'>,\n  'state': <class 'str'>,\n  'address_family': {\n    Any  (str) *: {\n      'table_id': <class 'str'>,\n      'fwd_id': <class 'str'>,\n      'state': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_vrf_vrf_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vrf.py#L155"}}, "show vrf {vrf} interface": {"nxos": {"class": "ShowVrfAllInterface", "doc": "Parser for show vrf all interface\n                show vrf <vrf> interface <interface>\n                show vrf <vrf> interface\n                show vrf all interface <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'vrf_id': <class 'int'>,\n  'site_of_origin': <class 'str'>,\n  },\n}", "uid": "show_vrf_vrf_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1804"}}, "show vrf {vrf} interface {interface}": {"nxos": {"class": "ShowVrfAllInterface", "doc": "Parser for show vrf all interface\n                show vrf <vrf> interface <interface>\n                show vrf <vrf> interface\n                show vrf all interface <interface>", "module_name": "show_interface", "package": "genie.libs.parser", "schema": "{\nAny  (str) *: {\n  'vrf': <class 'str'>,\n  'vrf_id': <class 'int'>,\n  'site_of_origin': <class 'str'>,\n  },\n}", "uid": "show_vrf_vrf_interface_interface", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_interface.py#L1804"}}, "show vtp password": {"ios": {"class": "ShowVtpPassword", "doc": "Parser for show vtp password", "module_name": "show_vtp", "package": "genie.libs.parser", "schema": "{\n'vtp': {\n  'configured': <class 'bool'>,\n  Optional  (str) password: <class 'str'>,\n  },\n}", "uid": "show_vtp_password", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vtp.py#L21"}, "iosxe": {"class": "ShowVtpPassword", "doc": "Parser for show vtp password", "module_name": "show_vtp", "package": "genie.libs.parser", "schema": "{\n'vtp': {\n  'configured': <class 'bool'>,\n  Optional  (str) password: <class 'str'>,\n  },\n}", "uid": "show_vtp_password", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vtp.py#L28"}}, "show vtp status": {"ios": {"class": "ShowVtpStatus", "doc": "Parser for show vtp status ", "module_name": "show_vtp", "package": "genie.libs.parser", "schema": "{\n'vtp': {\n  Optional  (str) version_capable: <class 'list'>,\n  'version': <class 'str'>,\n  Optional  (str) domain_name: <class 'str'>,\n  'pruning_mode': <class 'bool'>,\n  'traps_generation': <class 'bool'>,\n  Optional  (str) device_id: <class 'str'>,\n  Optional  (str) conf_last_modified_by: <class 'str'>,\n  Optional  (str) conf_last_modified_time: <class 'str'>,\n  Optional  (str) updater_id: <class 'str'>,\n  Optional  (str) updater_interface: <class 'str'>,\n  Optional  (str) updater_reason: <class 'str'>,\n  Optional  (str) operating_mode: <class 'str'>,\n  Optional  (str) enabled: <class 'bool'>,\n  Optional  (str) maximum_vlans: <class 'int'>,\n  Optional  (str) existing_vlans: <class 'int'>,\n  Optional  (str) configuration_revision: <class 'int'>,\n  Optional  (str) md5_digest: <class 'str'>,\n  Optional  (str) feature: {\n    'vlan': {\n      'enabled': <class 'bool'>,\n      'operating_mode': <class 'str'>,\n      'maximum_vlans': <class 'int'>,\n      'existing_vlans': <class 'int'>,\n      'existing_extended_vlans': <class 'int'>,\n      'configuration_revision': <class 'int'>,\n      'primary_id': <class 'str'>,\n      Optional  (str) primary_description: <class 'str'>,\n      'md5_digest': <class 'str'>,\n      },\n    'mst': {\n      'enabled': <class 'bool'>,\n      'operating_mode': <class 'str'>,\n      Optional  (str) configuration_revision: <class 'int'>,\n      Optional  (str) primary_id: <class 'str'>,\n      Optional  (str) primary_description: <class 'str'>,\n      Optional  (str) md5_digest: <class 'str'>,\n      },\n    Optional  (str) unknown: {\n      'enabled': <class 'bool'>,\n      'operating_mode': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_vtp_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_vtp.py#L29"}, "iosxe": {"class": "ShowVtpStatus", "doc": "Parser for show vtp status ", "module_name": "show_vtp", "package": "genie.libs.parser", "schema": "{\n'vtp': {\n  Optional  (str) version_capable: <class 'list'>,\n  'version': <class 'str'>,\n  Optional  (str) domain_name: <class 'str'>,\n  'pruning_mode': <class 'bool'>,\n  'traps_generation': <class 'bool'>,\n  Optional  (str) device_id: <class 'str'>,\n  Optional  (str) conf_last_modified_by: <class 'str'>,\n  Optional  (str) conf_last_modified_time: <class 'str'>,\n  Optional  (str) updater_id: <class 'str'>,\n  Optional  (str) updater_interface: <class 'str'>,\n  Optional  (str) updater_reason: <class 'str'>,\n  Optional  (str) operating_mode: <class 'str'>,\n  Optional  (str) enabled: <class 'bool'>,\n  Optional  (str) maximum_vlans: <class 'int'>,\n  Optional  (str) existing_vlans: <class 'int'>,\n  Optional  (str) configuration_revision: <class 'int'>,\n  Optional  (str) md5_digest: <class 'str'>,\n  Optional  (str) feature: {\n    'vlan': {\n      'enabled': <class 'bool'>,\n      'operating_mode': <class 'str'>,\n      'maximum_vlans': <class 'int'>,\n      'existing_vlans': <class 'int'>,\n      'existing_extended_vlans': <class 'int'>,\n      'configuration_revision': <class 'int'>,\n      'primary_id': <class 'str'>,\n      Optional  (str) primary_description: <class 'str'>,\n      'md5_digest': <class 'str'>,\n      },\n    'mst': {\n      'enabled': <class 'bool'>,\n      'operating_mode': <class 'str'>,\n      Optional  (str) configuration_revision: <class 'int'>,\n      Optional  (str) primary_id: <class 'str'>,\n      Optional  (str) primary_description: <class 'str'>,\n      Optional  (str) md5_digest: <class 'str'>,\n      },\n    Optional  (str) unknown: {\n      'enabled': <class 'bool'>,\n      'operating_mode': <class 'str'>,\n      },\n    },\n  },\n}", "uid": "show_vtp_status", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_vtp.py#L123"}}, "show vxlan": {"nxos": {"class": "ShowVxlan", "doc": "Parser for show vxlan", "module_name": "show_vlan", "package": "genie.libs.parser", "schema": "{\n'vlan': {\n  Any  (str) *: {\n    'vni': <class 'str'>,\n    },\n  },\n}", "uid": "show_vxlan", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_vlan.py#L477"}}, "show xconnect all": {"iosxe": {"class": "ShowXconnectAll", "doc": "Parser for show xconnect all", "module_name": "show_xconnect", "package": "genie.libs.parser", "schema": "{\n'segment_1': {\n  Any  (str) *: {\n    's1': <class 'str'>,\n    'segment_2': {\n      Any  (str) *: {\n        's2': <class 'str'>,\n        'xc': <class 'str'>,\n        'st': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_xconnect_all", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_xconnect.py#L34"}}, "show {af} pim neighbor": {"ios": {"class": "ShowPimNeighbor", "doc": "Parser for:\n            show ip/ipv6 pim [vrf <WORD>] neighbor\n            show ipv6 pim [vrf <word>] neighbor detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_af_pim_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L76"}, "iosxe": {"class": "ShowPimNeighbor", "doc": "Parser for show ip/ipv6 pim [vrf <WORD>] neighbor\n                  show ipv6 pim [vrf <word>] neighbor detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_af_pim_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1726"}}, "show {af} pim rp": {"nxos": {"class": "ShowPimRp", "doc": "Parser for:\n        show <address_family> pim rp\n        show <address_family> pim rp vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) sm: {\n                'policy_name': <class 'str'>,\n                Optional  (str) route_map: <class 'str'>,\n                },\n              Optional  (str) bidir: {\n                'policy_name': <class 'str'>,\n                Optional  (str) route_map: <class 'str'>,\n                },\n              },\n            },\n          Optional  (str) bsr: {\n            Optional  (str) bsr_candidate: {\n              'priority': <class 'int'>,\n              'hash_mask_length': <class 'int'>,\n              'address': <class 'str'>,\n              },\n            Optional  (str) bsr: {\n              'priority': <class 'int'>,\n              'hash_mask_length': <class 'int'>,\n              'address': <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              },\n            Optional  (str) rp: {\n              'up_time': <class 'str'>,\n              'group_policy': <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              },\n            Optional  (str) bsr_address: {\n              Any  (str) *: {\n                'priority': <class 'int'>,\n                'mode': <class 'str'>,\n                'address': <class 'str'>,\n                'policy': <class 'str'>,\n                },\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            Optional  (str) rp_candidate_policy: <class 'str'>,\n            Optional  (str) rp_policy: <class 'str'>,\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            },\n          Optional  (str) autorp: {\n            Optional  (str) announce_policy: <class 'str'>,\n            Optional  (str) discovery_policy: <class 'str'>,\n            Optional  (str) address: <class 'str'>,\n            Optional  (str) bsr_next_discovery: <class 'str'>,\n            Optional  (str) send_rp_announce: {\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) rp_source: <class 'str'>,\n              },\n            },\n          Optional  (str) rp_list: {\n            Any  (str) *: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) df_ordinal: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) group_ranges: <class 'str'>,\n              },\n            },\n          Optional  (str) rp_mappings: {\n            Any  (str) *: {\n              'group': <class 'str'>,\n              'rp_address': <class 'str'>,\n              'protocol': <class 'str'>,\n              'up_time': <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) anycast_rp: {\n              Any  (str) *: {\n                Optional  (str) anycast_address: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_af_pim_rp", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L788"}}, "show {af} pim rp vrf {vrf}": {"nxos": {"class": "ShowPimRp", "doc": "Parser for:\n        show <address_family> pim rp\n        show <address_family> pim rp vrf <vrf>", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'address_family': {\n      Any  (str) *: {\n        Optional  (str) rp: {\n          Optional  (str) static_rp: {\n            Any  (str) *: {\n              Optional  (str) sm: {\n                'policy_name': <class 'str'>,\n                Optional  (str) route_map: <class 'str'>,\n                },\n              Optional  (str) bidir: {\n                'policy_name': <class 'str'>,\n                Optional  (str) route_map: <class 'str'>,\n                },\n              },\n            },\n          Optional  (str) bsr: {\n            Optional  (str) bsr_candidate: {\n              'priority': <class 'int'>,\n              'hash_mask_length': <class 'int'>,\n              'address': <class 'str'>,\n              },\n            Optional  (str) bsr: {\n              'priority': <class 'int'>,\n              'hash_mask_length': <class 'int'>,\n              'address': <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expires: <class 'str'>,\n              },\n            Optional  (str) rp: {\n              'up_time': <class 'str'>,\n              'group_policy': <class 'str'>,\n              Optional  (str) rp_address: <class 'str'>,\n              },\n            Optional  (str) bsr_address: {\n              Any  (str) *: {\n                'priority': <class 'int'>,\n                'mode': <class 'str'>,\n                'address': <class 'str'>,\n                'policy': <class 'str'>,\n                },\n              },\n            Optional  (str) bsr_next_bootstrap: <class 'str'>,\n            Optional  (str) rp_candidate_policy: <class 'str'>,\n            Optional  (str) rp_policy: <class 'str'>,\n            Optional  (str) rp_candidate_next_advertisement: <class 'str'>,\n            },\n          Optional  (str) autorp: {\n            Optional  (str) announce_policy: <class 'str'>,\n            Optional  (str) discovery_policy: <class 'str'>,\n            Optional  (str) address: <class 'str'>,\n            Optional  (str) bsr_next_discovery: <class 'str'>,\n            Optional  (str) send_rp_announce: {\n              Optional  (str) group: <class 'str'>,\n              Optional  (str) scope: <class 'int'>,\n              Optional  (str) group_list: <class 'str'>,\n              Optional  (str) bidir: <class 'bool'>,\n              Optional  (str) rp_source: <class 'str'>,\n              },\n            },\n          Optional  (str) rp_list: {\n            Any  (str) *: {\n              Optional  (str) address: <class 'str'>,\n              Optional  (str) info_source_address: <class 'str'>,\n              Optional  (str) info_source_type: <class 'str'>,\n              Optional  (str) up_time: <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              Optional  (str) df_ordinal: <class 'int'>,\n              Optional  (str) priority: <class 'int'>,\n              Optional  (str) mode: <class 'str'>,\n              Optional  (str) group_ranges: <class 'str'>,\n              },\n            },\n          Optional  (str) rp_mappings: {\n            Any  (str) *: {\n              'group': <class 'str'>,\n              'rp_address': <class 'str'>,\n              'protocol': <class 'str'>,\n              'up_time': <class 'str'>,\n              Optional  (str) expiration: <class 'str'>,\n              },\n            },\n          },\n        Optional  (str) sm: {\n          Optional  (str) asm: {\n            Optional  (str) anycast_rp: {\n              Any  (str) *: {\n                Optional  (str) anycast_address: <class 'str'>,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_af_pim_rp_vrf_vrf", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_pim.py#L788"}}, "show {af} pim vrf {vrf} neighbor": {"ios": {"class": "ShowPimNeighbor", "doc": "Parser for:\n            show ip/ipv6 pim [vrf <WORD>] neighbor\n            show ipv6 pim [vrf <word>] neighbor detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_af_pim_vrf_vrf_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_pim.py#L76"}, "iosxe": {"class": "ShowPimNeighbor", "doc": "Parser for show ip/ipv6 pim [vrf <WORD>] neighbor\n                  show ipv6 pim [vrf <word>] neighbor detail", "module_name": "show_pim", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'interfaces': {\n      Any  (str) *: {\n        'address_family': {\n          Any  (str) *: {\n            'neighbors': {\n              Any  (str) *: {\n                Optional  (str) expiration: <class 'str'>,\n                Optional  (str) dr_priority: <class 'int'>,\n                Optional  (str) up_time: <class 'str'>,\n                Optional  (str) interface: <class 'str'>,\n                Optional  (str) bidir_capable: <class 'bool'>,\n                Optional  (str) designated_router: <class 'bool'>,\n                Optional  (str) default_dr_prioirty: <class 'bool'>,\n                Optional  (str) proxy_capable: <class 'bool'>,\n                Optional  (str) state_refresh_capable: <class 'bool'>,\n                Optional  (str) genid_capable: <class 'bool'>,\n                Optional  (str) dr_load_balancing_capable: <class 'bool'>,\n                Optional  (str) version: <class 'str'>,\n                },\n              Optional  (str) secondary_address: <class 'list'>,\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}", "uid": "show_af_pim_vrf_vrf_neighbor", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_pim.py#L1726"}}, "show {af} prefix-list": {"nxos": {"class": "ShowIpv6PrefixList", "doc": "Parser for show ipv6 prefix-list detail", "module_name": "show_prefix_list", "package": "genie.libs.parser", "schema": "{\n'prefix_set_name': {\n  Any  (str) *: {\n    'prefix_set_name': <class 'str'>,\n    'protocol': <class 'str'>,\n    'entries': <class 'int'>,\n    'prefixes': {\n      Any  (str) *: {\n        'prefix': <class 'str'>,\n        'masklength_range': <class 'str'>,\n        'sequence': <class 'int'>,\n        'action': <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_af_prefix-list", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/show_prefix_list.py#L152"}}, "show {af} prefix-list detail": {"ios": {"class": "ShowIpPrefixListDetail", "doc": "Parser for:\n        show ip prefix-list detail\n        show ipv6 prefix-list detail", "module_name": "show_prefix_list", "package": "genie.libs.parser", "schema": "{\n'prefix_set_name': {\n  Any  (str) *: {\n    'prefix_set_name': <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) count: <class 'int'>,\n    Optional  (str) range_entries: <class 'int'>,\n    Optional  (str) sequences: <class 'str'>,\n    Optional  (str) refcount: <class 'int'>,\n    Optional  (str) prefixes: {\n      Any  (str) *: {\n        Optional  (str) prefix: <class 'str'>,\n        Optional  (str) masklength_range: <class 'str'>,\n        Optional  (str) sequence: <class 'int'>,\n        Optional  (str) hit_count: <class 'int'>,\n        Optional  (str) refcount: <class 'int'>,\n        Optional  (str) action: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_af_prefix-list_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_prefix_list.py#L12"}, "iosxe": {"class": "ShowIpPrefixListDetail", "doc": "Parser for:\n        show ip prefix-list detail\n        show ipv6 prefix-list detail", "module_name": "show_prefix_list", "package": "genie.libs.parser", "schema": "{\n'prefix_set_name': {\n  Any  (str) *: {\n    'prefix_set_name': <class 'str'>,\n    Optional  (str) protocol: <class 'str'>,\n    Optional  (str) count: <class 'int'>,\n    Optional  (str) range_entries: <class 'int'>,\n    Optional  (str) sequences: <class 'str'>,\n    Optional  (str) refcount: <class 'int'>,\n    Optional  (str) prefixes: {\n      Any  (str) *: {\n        Optional  (str) prefix: <class 'str'>,\n        Optional  (str) masklength_range: <class 'str'>,\n        Optional  (str) sequence: <class 'int'>,\n        Optional  (str) hit_count: <class 'int'>,\n        Optional  (str) refcount: <class 'int'>,\n        Optional  (str) action: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_af_prefix-list_detail", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_prefix_list.py#L49"}}, "show {af} rpf vrf {vrf} {mroute}": {"ios": {"class": "ShowIpv6Rpf", "doc": "Parser for:\n        show ipv6 rpf <mroute address>\n        show ipv6 rpf vrf <vrf> <mroute address>", "module_name": "show_rpf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'source_address': <class 'str'>,\n    Optional  (str) source_host: <class 'str'>,\n    Optional  (str) mofrr: <class 'str'>,\n    'path': {\n      Any  (str) *: {\n        'neighbor_address': <class 'str'>,\n        'interface_name': <class 'str'>,\n        'table_type': <class 'str'>,\n        Optional  (str) neighbor_host: <class 'str'>,\n        Optional  (str) admin_distance: <class 'str'>,\n        Optional  (str) route_mask: <class 'str'>,\n        Optional  (str) table_feature: <class 'str'>,\n        Optional  (str) table_feature_instance: <class 'str'>,\n        Optional  (str) recursion_count: <class 'int'>,\n        Optional  (str) metric: <class 'int'>,\n        Optional  (str) distance_preferred_lookup: <class 'bool'>,\n        Optional  (str) lookup_vrf: <class 'str'>,\n        Optional  (str) lookup_topology: <class 'str'>,\n        Optional  (str) originated_topology: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_af_rpf_vrf_vrf_mroute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_rpf.py#L30"}, "iosxe": {"class": "ShowIpv6Rpf", "doc": "Parser for:\n        show ipv6 rpf <mroute address>\n        show ipv6 rpf vrf <vrf> <mroute address>", "module_name": "show_rpf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'source_address': <class 'str'>,\n    Optional  (str) source_host: <class 'str'>,\n    Optional  (str) mofrr: <class 'str'>,\n    'path': {\n      Any  (str) *: {\n        'neighbor_address': <class 'str'>,\n        'interface_name': <class 'str'>,\n        'table_type': <class 'str'>,\n        Optional  (str) neighbor_host: <class 'str'>,\n        Optional  (str) admin_distance: <class 'str'>,\n        Optional  (str) route_mask: <class 'str'>,\n        Optional  (str) table_feature: <class 'str'>,\n        Optional  (str) table_feature_instance: <class 'str'>,\n        Optional  (str) recursion_count: <class 'int'>,\n        Optional  (str) metric: <class 'int'>,\n        Optional  (str) distance_preferred_lookup: <class 'bool'>,\n        Optional  (str) lookup_vrf: <class 'str'>,\n        Optional  (str) lookup_topology: <class 'str'>,\n        Optional  (str) originated_topology: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_af_rpf_vrf_vrf_mroute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rpf.py#L317"}}, "show {af} rpf {mroute}": {"ios": {"class": "ShowIpv6Rpf", "doc": "Parser for:\n        show ipv6 rpf <mroute address>\n        show ipv6 rpf vrf <vrf> <mroute address>", "module_name": "show_rpf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'source_address': <class 'str'>,\n    Optional  (str) source_host: <class 'str'>,\n    Optional  (str) mofrr: <class 'str'>,\n    'path': {\n      Any  (str) *: {\n        'neighbor_address': <class 'str'>,\n        'interface_name': <class 'str'>,\n        'table_type': <class 'str'>,\n        Optional  (str) neighbor_host: <class 'str'>,\n        Optional  (str) admin_distance: <class 'str'>,\n        Optional  (str) route_mask: <class 'str'>,\n        Optional  (str) table_feature: <class 'str'>,\n        Optional  (str) table_feature_instance: <class 'str'>,\n        Optional  (str) recursion_count: <class 'int'>,\n        Optional  (str) metric: <class 'int'>,\n        Optional  (str) distance_preferred_lookup: <class 'bool'>,\n        Optional  (str) lookup_vrf: <class 'str'>,\n        Optional  (str) lookup_topology: <class 'str'>,\n        Optional  (str) originated_topology: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_af_rpf_mroute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/ios/show_rpf.py#L30"}, "iosxe": {"class": "ShowIpv6Rpf", "doc": "Parser for:\n        show ipv6 rpf <mroute address>\n        show ipv6 rpf vrf <vrf> <mroute address>", "module_name": "show_rpf", "package": "genie.libs.parser", "schema": "{\n'vrf': {\n  Any  (str) *: {\n    'source_address': <class 'str'>,\n    Optional  (str) source_host: <class 'str'>,\n    Optional  (str) mofrr: <class 'str'>,\n    'path': {\n      Any  (str) *: {\n        'neighbor_address': <class 'str'>,\n        'interface_name': <class 'str'>,\n        'table_type': <class 'str'>,\n        Optional  (str) neighbor_host: <class 'str'>,\n        Optional  (str) admin_distance: <class 'str'>,\n        Optional  (str) route_mask: <class 'str'>,\n        Optional  (str) table_feature: <class 'str'>,\n        Optional  (str) table_feature_instance: <class 'str'>,\n        Optional  (str) recursion_count: <class 'int'>,\n        Optional  (str) metric: <class 'int'>,\n        Optional  (str) distance_preferred_lookup: <class 'bool'>,\n        Optional  (str) lookup_vrf: <class 'str'>,\n        Optional  (str) lookup_topology: <class 'str'>,\n        Optional  (str) originated_topology: <class 'str'>,\n        },\n      },\n    },\n  },\n}", "uid": "show_af_rpf_mroute", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/iosxe/show_rpf.py#L317"}}, "tokens": ["iosxr", "bigip", "nxos", "aci", "sros", "ios", "c7600", "cat6k", "linux", "asa", "dnac", "iosxe", "c9500", "cat4k", "c9300", "c3850", "asr1k", "junos"], "vsh_lc -c \"show platform internal hal policy redirdst group_id {group_id} {address_family} src_ip {src_ip} dst_ip {dst_ip} protocol {protocol}\"": {"nxos": {"aci": {"class": "ShowPlatformInternalHalPolicyRedirdst", "doc": "Parser for 'vsh_lc -c \"show platform internal hal policy redirdst group_id {group_id} {address_family} src_ip {src_ip} dst_ip {dst_ip} protocol {protocol}'", "module_name": "show_platform", "package": "genie.libs.parser", "schema": "{\n'group_id': {\n  Any  (str) *: {\n    'src_ip': <class 'str'>,\n    'dst_ip': <class 'str'>,\n    'protocol': <class 'str'>,\n    Optional  (str) rewrite_mac: <class 'str'>,\n    Optional  (str) rewrite_vnid: <class 'str'>,\n    Optional  (str) outgoing_l2_ifindex: <class 'str'>,\n    Optional  (str) outgoing_ifname: <class 'str'>,\n    Optional  (str) packets_hash: <class 'str'>,\n    },\n  },\n}", "uid": "vsh_lc_-c_\"show_platform_internal_hal_policy_redirdst_group_id_group_id_address_family_src_ip_src_ip_dst_ip_dst_ip_protocol_protocol\"", "url": "https://github.com/CiscoTestAutomation/genieparser/tree/master/src/genie/libs/parser/nxos/aci/show_platform.py#L35"}}}}